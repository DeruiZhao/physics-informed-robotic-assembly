/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2025-02-22 10:46:23.325830
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
// #define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
// IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan std::isnan
#endif
#ifndef isinf
#define isinf std::isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKcos(j[5]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[4]);
x11=IKsin(j[0]);
x12=((0.1)*x0);
x13=((0.1)*x11);
x14=((1.0)*x11);
x15=((0.3922)*x11);
x16=((1.0)*x9);
x17=((1.0)*x5);
x18=((0.425)*x1);
x19=((0.24)*x5);
x20=((1.0)*x0);
x21=((0.3922)*x0);
x22=((0.24)*x6);
x23=(x0*x9);
x24=(x3*x4);
x25=(x1*x3);
x26=(x2*x4);
x27=(x0*x10);
x28=(x1*x2);
x29=(x10*x14);
x30=(x20*x25);
x31=(x14*x25);
x32=(x24+x28);
x33=((((-1.0)*x26))+(((1.0)*x25)));
x34=(x32*x5);
x35=(x33*x6);
x36=((((-1.0)*x30))+((x0*x26)));
x37=((((-1.0)*x31))+((x11*x26)));
x38=(x20*((x24+x28)));
x39=(x14*((x24+x28)));
x40=(x36*x5);
x41=(x39*x6);
x42=(x38*x6);
x43=(((x33*x5))+((x6*(((((-1.0)*x24))+(((-1.0)*x28)))))));
x44=(x42+x40);
x45=(x41+((x37*x5)));
x46=(((x6*((x30+(((-1.0)*x20*x26))))))+((x38*x5)));
x47=(((x6*(((((-1.0)*x14*x26))+x31))))+((x39*x5)));
x48=(x45*x9);
eerot[0]=(((x7*(((((-1.0)*x29))+((x44*x9))))))+((x46*x8)));
eerot[1]=(((x8*(((((-1.0)*x16*x44))+x29))))+((x46*x7)));
eerot[2]=((((-1.0)*x14*x9))+((x10*(((((-1.0)*x42))+(((-1.0)*x17*x36)))))));
IkReal x49=((1.0)*x12);
eetrans[0]=((((-1.0)*x21*x26))+((x6*(((((-1.0)*x25*x49))+((x12*x26))))))+((x21*x25))+((x0*x18))+((x10*(((((-1.0)*x22*x38))+(((-1.0)*x19*x36))))))+(((-0.24)*x11*x9))+((x5*(((((-1.0)*x28*x49))+(((-1.0)*x24*x49))))))+(((-0.134)*x11)));
eerot[3]=(((x7*((x48+x27))))+((x47*x8)));
eerot[4]=(((x47*x7))+((x8*(((((-1.0)*x16*x45))+(((-1.0)*x10*x20)))))));
eerot[5]=(x23+((x10*(((((-1.0)*x41))+(((-1.0)*x17*x37)))))));
IkReal x50=((1.0)*x13);
eetrans[1]=((((-1.0)*x15*x26))+(((0.24)*x23))+((x6*(((((-1.0)*x25*x50))+((x13*x26))))))+(((0.134)*x0))+((x11*x18))+((x5*(((((-1.0)*x24*x50))+(((-1.0)*x28*x50))))))+((x10*(((((-1.0)*x22*x39))+(((-1.0)*x19*x37))))))+((x15*x25)));
eerot[6]=(((x7*x9*((x35+x34))))+((x43*x8)));
eerot[7]=(((x8*x9*(((((-1.0)*x35))+(((-1.0)*x34))))))+((x43*x7)));
eerot[8]=(x10*(((((-1.0)*x35))+(((-1.0)*x17*x32)))));
eetrans[2]=((0.1625)+((x6*(((((0.1)*x24))+(((0.1)*x28))))))+((x5*(((((-0.1)*x25))+(((0.1)*x26))))))+(((-0.425)*x4))+(((-0.3922)*x24))+(((-0.3922)*x28))+((x10*(((((-1.0)*x22*x33))+(((-1.0)*x19*x32)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.24)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.24)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.1625)+(((-0.24)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x51=((1.0)*px);
IkReal x52=((1.0)*pz);
IkReal x53=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x53))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x52)));
rxp0_2=((((-1.0)*r10*x51))+((py*r00)));
rxp1_0=((((-1.0)*r21*x53))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x52)));
rxp1_2=((((-1.0)*r11*x51))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x53)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x52)));
rxp2_2=((((-1.0)*r12*x51))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x54=((0.2)*npx);
IkReal x55=((0.2)*npy);
IkReal x56=((0.1)*r22);
IkReal x57=((0.1)*r21);
IkReal x58=((-0.1)*r20);
IkReal x59=((-1.0)*r20);
IkReal x60=((-1.0)*rxp0_2);
IkReal x61=((-0.1)*r21);
IkReal x62=((-1.0)*r21);
IkReal x63=((-1.0)*rxp1_2);
IkReal x64=((-1.0)*npx);
IkReal x65=((-1.0)*r22);
IkReal x66=((-1.0)*npz);
matrixinvcoeffs[0]=x58;
matrixinvcoeffs[1]=x54;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x59;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x60;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x58;
matrixinvcoeffs[19]=x54;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x59;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x60;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x61;
matrixinvcoeffs[33]=x55;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x62;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x63;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x61;
matrixinvcoeffs[51]=x55;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x62;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x63;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x65;
matrixinvcoeffs[76]=x56;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x66;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x56;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x63;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x61;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x63;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x57;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x59;
matrixinvcoeffs[133]=x64;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.1)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x59;
matrixinvcoeffs[151]=x64;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x58;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x65;
matrixinvcoeffs[165]=x66;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x56;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x65;
matrixinvcoeffs[183]=x66;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.1)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x62;
matrixinvcoeffs[204]=x57;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x63;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x57;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x64;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x58;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x59;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x58;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x60;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x67=pz*pz;
IkReal x68=pp*pp;
IkReal x69=((0.2)*pz);
IkReal x70=(npy*pz);
IkReal x71=(pp*r21);
IkReal x72=(gclwh13_10*rxp1_2);
IkReal x73=(gclwh14_8*rxp0_2);
IkReal x74=(gclwh12_8*r21);
IkReal x75=(pp*r20);
IkReal x76=((4.0)*gclwh12_11);
IkReal x77=(pp*r22);
IkReal x78=(gclwh10_11*r22);
IkReal x79=(gclwh13_9*r21);
IkReal x80=(gclwh15_1*r20);
IkReal x81=(npx*pz);
IkReal x82=((2.0)*pp);
IkReal x83=((0.01)*r22);
IkReal x84=((0.268)*gclwh13_15);
IkReal x85=((0.2)*rxp2_2);
IkReal x86=((0.15688)*rxp1_2);
IkReal x87=(npz*pz);
IkReal x88=((2.0)*gclwh11_10);
IkReal x89=((0.007844)*r22);
IkReal x90=((0.00134)*r22);
IkReal x91=(gclwh14_2*pz);
IkReal x92=(gclwh14_11*rxp0_2);
IkReal x93=((0.00656)*rxp1_2);
IkReal x94=((2.0)*gclwh4_11);
IkReal x95=(gclwh13_10*r21);
IkReal x96=(gclwh5_0*rxp2_2);
IkReal x97=((0.000328)*r20);
IkReal x98=((0.32688)*rxp0_2);
IkReal x99=((0.016344)*r21);
IkReal x100=(gclwh14_2*rxp0_2);
IkReal x101=((0.0268)*rxp0_2);
IkReal x102=((1.0)*pz);
IkReal x103=(gclwh5_9*r22);
IkReal x104=(gclwh1_2*r20);
IkReal x105=(gclwh4_2*pz);
IkReal x106=((0.02)*r22);
IkReal x107=((2.0)*gclwh9_10);
IkReal x108=(gclwh13_1*r21);
IkReal x109=((0.16344)*rxp0_2);
IkReal x110=((4.0)*gclwh14_11);
IkReal x111=((0.00268)*r20);
IkReal x112=((0.007844)*r21);
IkReal x113=((2.0)*gclwh13_10);
IkReal x114=((0.268)*gclwh14_14);
IkReal x115=(gclwh15_9*rxp0_2);
IkReal x116=(gclwh12_14*r21);
IkReal x117=((0.000656)*r22);
IkReal x118=((2.0)*gclwh10_11);
IkReal x119=(gclwh15_1*rxp0_2);
IkReal x120=((4.0)*gclwh11_10);
IkReal x121=(gclwh8_11*r20);
IkReal x122=((0.02)*r21);
IkReal x123=(gclwh5_9*rxp2_2);
IkReal x124=((0.000328)*r21);
IkReal x125=((2.0)*gclwh7_10);
IkReal x126=((0.0268)*rxp2_2);
IkReal x127=((0.268)*gclwh4_14);
IkReal x128=((0.4)*rxp2_2);
IkReal x129=(gclwh10_2*rxp2_2);
IkReal x130=(gclwh9_10*r20);
IkReal x131=((0.008172)*r20);
IkReal x132=(gclwh14_11*r20);
IkReal x133=((0.2)*rxp1_2);
IkReal x134=((0.268)*gclwh15_15);
IkReal x135=(gclwh13_9*rxp1_2);
IkReal x136=((4.0)*gclwh8_11);
IkReal x137=((0.00134)*r20);
IkReal x138=((0.01)*r21);
IkReal x139=((0.04)*r22);
IkReal x140=((0.0067577184)*r20);
IkReal x141=((0.2)*rxp0_2);
IkReal x142=((4.0)*gclwh10_11);
IkReal x143=(gclwh12_3*r21);
IkReal x144=(gclwh11_13*r22);
IkReal x145=(gclwh15_10*rxp0_2);
IkReal x146=(gclwh7_0*pz);
IkReal x147=((0.536)*gclwh14_14);
IkReal x148=((0.15688)*rxp2_2);
IkReal x149=(gclwh5_1*r22);
IkReal x150=((0.0536)*rxp1_2);
IkReal x151=(gclwh12_3*rxp1_2);
IkReal x152=((4.0)*gclwh9_10);
IkReal x153=((0.8)*rxp2_2);
IkReal x154=((0.16344)*rxp1_2);
IkReal x155=((0.01)*r20);
IkReal x156=((4.0)*gclwh7_10);
IkReal x157=((0.015688)*r20);
IkReal x158=((0.32688)*rxp1_2);
IkReal x159=(gclwh4_8*rxp2_2);
IkReal x160=((4.0)*gclwh4_11);
IkReal x161=((0.04)*r21);
IkReal x162=(gclwh12_8*rxp1_2);
IkReal x163=(gclwh14_2*r20);
IkReal x164=(gclwh8_11*rxp0_2);
IkReal x165=((2.0)*gclwh6_11);
IkReal x166=(gclwh1_3*r20);
IkReal x167=(gclwh4_14*r22);
IkReal x168=((0.00656)*rxp0_2);
IkReal x169=(gclwh8_2*r20);
IkReal x170=((0.001)*r20);
IkReal x171=((2.0)*gclwh12_11);
IkReal x172=(gclwh13_15*rxp1_2);
IkReal x173=((0.007844)*r20);
IkReal x174=((9.03184e-5)*r20);
IkReal x175=((0.4)*rxp1_2);
IkReal x176=((0.15688)*rxp0_2);
IkReal x177=(gclwh10_2*pz);
IkReal x178=(gclwh4_3*r22);
IkReal x179=(gclwh14_3*rxp0_2);
IkReal x180=(gclwh9_0*pz);
IkReal x181=(gclwh10_12*r22);
IkReal x182=((2.0)*gclwh8_11);
IkReal x183=(gclwh4_2*rxp2_2);
IkReal x184=((0.0085)*r20);
IkReal x185=((0.015688)*r21);
IkReal x186=((0.268)*gclwh5_15);
IkReal x187=(gclwh4_14*rxp2_2);
IkReal x188=((0.000656)*r21);
IkReal x189=(gclwh4_8*r22);
IkReal x190=(gclwh13_1*rxp1_2);
IkReal x191=((2.0)*gclwh5_10);
IkReal x192=((0.001806368)*rxp2_2);
IkReal x193=((2.0)*gclwh15_10);
IkReal x194=((0.00656)*rxp2_2);
IkReal x195=((4.0)*gclwh6_11);
IkReal x196=((0.8)*rxp1_2);
IkReal x197=(gclwh11_0*pz);
IkReal x198=((0.008172)*r21);
IkReal x199=(gclwh5_0*pz);
IkReal x200=((0.016344)*r22);
IkReal x201=((0.01312)*rxp1_2);
IkReal x202=(gclwh9_0*r20);
IkReal x203=(gclwh13_15*r21);
IkReal x204=((0.135154368)*rxp2_2);
IkReal x205=((0.536)*gclwh12_14);
IkReal x206=(gclwh13_0*pz);
IkReal x207=(gclwh12_14*rxp1_2);
IkReal x208=(gclwh15_0*rxp0_2);
IkReal x209=((0.1072)*rxp0_2);
IkReal x210=((0.536)*gclwh4_14);
IkReal x211=(gclwh5_15*rxp2_2);
IkReal x212=((0.00134)*r21);
IkReal x213=((0.16344)*rxp2_2);
IkReal x214=((0.0268)*rxp1_2);
IkReal x215=(gclwh8_2*pz);
IkReal x216=(gclwh6_2*pz);
IkReal x217=((9.03184e-5)*r21);
IkReal x218=((2.0)*gclwh14_11);
IkReal x219=((0.0536)*rxp0_2);
IkReal x220=((0.0067577184)*r21);
IkReal x221=((0.268)*gclwh12_14);
IkReal x222=(gclwh12_2*pz);
IkReal x223=(gclwh14_14*x101);
IkReal x224=(gclwh6_5*x212);
IkReal x225=(gclwh4_14*x126);
IkReal x226=(gclwh10_5*x90);
IkReal x227=(gclwh8_5*x137);
IkReal x228=((0.0268)*x207);
IkReal x229=((0.02)*x162);
IkReal x230=(gclwh12_11*x133);
IkReal x231=((0.02)*x159);
IkReal x232=(gclwh4_11*x85);
IkReal x233=(gclwh6_11*x138);
IkReal x234=((0.01)*x121);
IkReal x235=((0.01)*x78);
IkReal x236=((0.2)*x92);
IkReal x237=((0.02)*x73);
IkReal x238=((0.02)*x135);
IkReal x239=(gclwh11_10*x83);
IkReal x240=(gclwh15_10*x141);
IkReal x241=((0.01)*x130);
IkReal x242=((0.02)*x123);
IkReal x243=(gclwh7_10*x138);
IkReal x244=(gclwh5_10*x85);
IkReal x245=((0.02)*x115);
IkReal x246=((0.2)*x72);
IkReal x247=(gclwh15_15*x101);
IkReal x248=(gclwh7_7*x212);
IkReal x249=((0.0268)*x172);
IkReal x250=(gclwh9_7*x137);
IkReal x251=(gclwh11_7*x90);
IkReal x252=(gclwh5_15*x126);
IkReal x253=(gclwh8_5*x101);
IkReal x254=(gclwh10_5*x126);
IkReal x255=(gclwh14_14*x137);
IkReal x256=((0.00134)*x116);
IkReal x257=(gclwh4_14*x90);
IkReal x258=(gclwh6_5*x214);
IkReal x259=(gclwh12_11*x138);
IkReal x260=(gclwh10_11*x85);
IkReal x261=((0.001)*x189);
IkReal x262=(gclwh4_11*x83);
IkReal x263=(gclwh8_11*x141);
IkReal x264=((0.001)*x74);
IkReal x265=(gclwh14_8*x170);
IkReal x266=(gclwh6_11*x133);
IkReal x267=((0.01)*x132);
IkReal x268=(gclwh15_9*x170);
IkReal x269=(gclwh11_10*x85);
IkReal x270=((0.01)*x95);
IkReal x271=(gclwh5_10*x83);
IkReal x272=(gclwh9_10*x141);
IkReal x273=((0.001)*x103);
IkReal x274=((0.001)*x79);
IkReal x275=(gclwh7_10*x133);
IkReal x276=(gclwh15_10*x155);
IkReal x277=(gclwh5_15*x90);
IkReal x278=((0.00134)*x203);
IkReal x279=(gclwh7_7*x214);
IkReal x280=(gclwh11_7*x126);
IkReal x281=(gclwh9_7*x101);
IkReal x282=(gclwh15_15*x137);
IkReal x283=((0.4)*x92);
IkReal x284=((0.02)*x78);
IkReal x285=((0.02)*x121);
IkReal x286=(gclwh14_14*x219);
IkReal x287=(gclwh12_14*x150);
IkReal x288=((0.0536)*x187);
IkReal x289=(gclwh4_11*x128);
IkReal x290=(gclwh6_11*x122);
IkReal x291=(gclwh12_11*x175);
IkReal x292=(gclwh13_15*x150);
IkReal x293=((0.0536)*x211);
IkReal x294=(gclwh15_15*x219);
IkReal x295=(gclwh11_10*x106);
IkReal x296=((0.4)*x145);
IkReal x297=((0.02)*x130);
IkReal x298=((0.4)*x72);
IkReal x299=(gclwh7_10*x122);
IkReal x300=(gclwh5_10*x128);
IkReal x301=((0.02)*x132);
IkReal x302=(gclwh6_11*x175);
IkReal x303=(gclwh14_14*x111);
IkReal x304=((0.00268)*x116);
IkReal x305=((0.00268)*x167);
IkReal x306=(gclwh4_11*x106);
IkReal x307=(gclwh12_11*x122);
IkReal x308=(gclwh10_11*x128);
IkReal x309=((0.4)*x164);
IkReal x310=(gclwh15_9*x81);
IkReal x311=((1.0)*x68);
IkReal x312=((2.0)*x67);
IkReal x313=(r21*x68);
IkReal x314=((0.134)*gclwh6_5*x71);
IkReal x315=((0.268)*gclwh10_5*x87);
IkReal x316=((0.268)*gclwh8_5*x81);
IkReal x317=((0.268)*gclwh6_5*x70);
IkReal x318=((0.134)*gclwh8_5*x75);
IkReal x319=((0.134)*gclwh10_5*x77);
IkReal x320=(x100*x69);
IkReal x321=(x118*x87);
IkReal x322=(x182*x81);
IkReal x323=(x177*x77);
IkReal x324=(x177*x83);
IkReal x325=(gclwh12_3*pp*x133);
IkReal x326=(x215*x75);
IkReal x327=(gclwh4_3*pp*x85);
IkReal x328=(x155*x215);
IkReal x329=(gclwh12_2*rxp1_2*x69);
IkReal x330=(gclwh14_3*pp*x141);
IkReal x331=(x183*x69);
IkReal x332=(x165*x70);
IkReal x333=(x138*x216);
IkReal x334=(gclwh13_1*pp*x133);
IkReal x335=(x197*x77);
IkReal x336=(gclwh5_1*pp*x85);
IkReal x337=(x125*x70);
IkReal x338=(x208*x69);
IkReal x339=(x197*x83);
IkReal x340=(x155*x180);
IkReal x341=(x180*x75);
IkReal x342=((0.2)*pp*x119);
IkReal x343=(x87*x88);
IkReal x344=(x107*x81);
IkReal x345=(x69*x96);
IkReal x346=(gclwh13_0*rxp1_2*x69);
IkReal x347=(x138*x146);
IkReal x348=((0.268)*gclwh9_7*x81);
IkReal x349=((0.134)*gclwh7_7*x71);
IkReal x350=((0.268)*gclwh11_7*x87);
IkReal x351=((0.134)*gclwh11_7*x77);
IkReal x352=((0.268)*gclwh7_7*x70);
IkReal x353=((0.134)*gclwh9_7*x75);
IkReal x354=(x221*x70);
IkReal x355=((0.134)*gclwh14_14*x75);
IkReal x356=(x127*x87);
IkReal x357=((0.134)*gclwh12_14*x71);
IkReal x358=(x114*x81);
IkReal x359=((0.134)*gclwh4_14*x77);
IkReal x360=(x75*x91);
IkReal x361=(x155*x91);
IkReal x362=((0.1)*gclwh4_8*x77);
IkReal x363=(x143*x68);
IkReal x364=((0.01)*pz*x104);
IkReal x365=(gclwh3_2*pz*x138);
IkReal x366=((0.1)*gclwh12_8*x71);
IkReal x367=(gclwh3_3*x313);
IkReal x368=(x166*x68);
IkReal x369=(gclwh6_2*rxp1_2*x69);
IkReal x370=(x218*x81);
IkReal x371=(x178*x68);
IkReal x372=(gclwh14_8*npx*x69);
IkReal x373=(x87*x94);
IkReal x374=(gclwh4_8*npz*x69);
IkReal x375=(gclwh12_8*npy*x69);
IkReal x376=(x129*x69);
IkReal x377=(x105*x83);
IkReal x378=(x171*x70);
IkReal x379=(gclwh8_2*rxp0_2*x69);
IkReal x380=((0.1)*gclwh14_8*x75);
IkReal x381=(x138*x222);
IkReal x382=(x138*x206);
IkReal x383=(gclwh0_0*pz*x155);
IkReal x384=(gclwh11_0*rxp2_2*x69);
IkReal x385=(gclwh2_0*pz*x138);
IkReal x386=(gclwh13_9*npy*x69);
IkReal x387=(x68*x80);
IkReal x388=(x199*x77);
IkReal x389=(x199*x83);
IkReal x390=(x206*x71);
IkReal x391=(gclwh9_0*rxp0_2*x69);
IkReal x392=((0.1)*gclwh15_9*x75);
IkReal x393=(x193*x81);
IkReal x394=(gclwh2_1*x313);
IkReal x395=(gclwh5_9*npz*x69);
IkReal x396=(gclwh0_1*r20*x68);
IkReal x397=(gclwh7_0*rxp1_2*x69);
IkReal x398=((0.1)*gclwh5_9*x77);
IkReal x399=(gclwh15_9*npx*x69);
IkReal x400=((0.1)*gclwh13_9*x71);
IkReal x401=(x191*x87);
IkReal x402=(gclwh15_0*pz*x155);
IkReal x403=(x113*x70);
IkReal x404=((0.134)*gclwh13_15*x71);
IkReal x405=(x134*x81);
IkReal x406=((0.134)*gclwh5_15*x77);
IkReal x407=(x186*x87);
IkReal x408=((0.134)*gclwh15_15*x75);
IkReal x409=(x70*x84);
IkReal x410=(x182*x75);
IkReal x411=(x118*x77);
IkReal x412=(x195*x70);
IkReal x413=(x136*x81);
IkReal x414=(x165*x71);
IkReal x415=(x142*x87);
IkReal x416=(x77*x88);
IkReal x417=(x156*x70);
IkReal x418=(x107*x75);
IkReal x419=(x125*x71);
IkReal x420=(x152*x81);
IkReal x421=(x120*x87);
IkReal x422=(x218*x75);
IkReal x423=(x70*x76);
IkReal x424=(x160*x87);
IkReal x425=(x210*x87);
IkReal x426=(x114*x75);
IkReal x427=(x205*x70);
IkReal x428=(x221*x71);
IkReal x429=(x147*x81);
IkReal x430=(x127*x77);
IkReal x431=(x77*x94);
IkReal x432=(x171*x71);
IkReal x433=(x110*x81);
IkReal x434=(gclwh6_2*npy*x312);
IkReal x435=(gclwh6_2*x102*x71);
IkReal x436=(gclwh10_2*npz*x312);
IkReal x437=(gclwh8_2*npx*x312);
IkReal x438=(gclwh7_0*npy*x312);
IkReal x439=(gclwh9_0*npx*x312);
IkReal x440=(gclwh11_0*npz*x312);
IkReal x441=(gclwh7_0*x102*x71);
IkReal x442=(gclwh12_2*npy*x312);
IkReal x443=(gclwh3_2*npy*x312);
IkReal x444=(gclwh1_2*npx*x312);
IkReal x445=(gclwh14_3*x81*x82);
IkReal x446=(gclwh4_2*npz*x312);
IkReal x447=(gclwh4_3*x82*x87);
IkReal x448=(gclwh12_2*x102*x71);
IkReal x449=(gclwh1_2*x102*x75);
IkReal x450=(gclwh3_3*x70*x82);
IkReal x451=(gclwh4_2*x102*x77);
IkReal x452=(gclwh1_3*x81*x82);
IkReal x453=(gclwh3_2*x102*x71);
IkReal x454=(gclwh12_3*x70*x82);
IkReal x455=(gclwh14_2*npx*x312);
IkReal x456=(gclwh14_3*r20*x311);
IkReal x457=(gclwh0_0*npx*x312);
IkReal x458=(gclwh2_0*npy*x312);
IkReal x459=(gclwh5_1*x82*x87);
IkReal x460=(gclwh13_1*x70*x82);
IkReal x461=(gclwh15_0*npx*x312);
IkReal x462=(gclwh2_1*x70*x82);
IkReal x463=(gclwh0_1*x81*x82);
IkReal x464=(gclwh5_0*npz*x312);
IkReal x465=(gclwh13_0*npy*x312);
IkReal x466=(gclwh0_0*x102*x75);
IkReal x467=(gclwh15_0*x102*x75);
IkReal x468=(gclwh2_0*x102*x71);
IkReal x469=(x108*x311);
IkReal x470=(x149*x311);
IkReal x471=(gclwh15_1*x81*x82);
IkReal x472=(x292+x293);
IkReal x473=(x254+x253);
IkReal x474=(x228+x225);
IkReal x475=(x281+x280);
IkReal x476=(x252+x249);
IkReal x477=(x288+x287);
IkReal x478=(x337+x239+x241+x240);
IkReal x479=(x332+x236+x234+x235);
IkReal x480=(x276+x275+x401+x403);
IkReal x481=(x378+x373+x267+x266);
IkReal x482=(x315+x314+x316+x224);
IkReal x483=(x282+x407+x409+x408);
IkReal x484=(x350+x348+x349+x248);
IkReal x485=(x303+x427+x426+x425);
IkReal x486=(x355+x354+x356+x255);
IkReal x487=(x370+x259+x260+x263+x262);
IkReal x488=(x393+x269+x272+x270+x271);
IkReal x489=(x321+x322+x232+x233+x230);
IkReal x490=(x343+x344+x243+x246+x244);
IkReal x491=(x277+x278+x405+x404+x406);
IkReal x492=(x351+x353+x352+x250+x251);
IkReal x493=(x304+x305+x429+x428+x430);
IkReal x494=(x302+x301+x424+x423+x422);
IkReal x495=(x357+x359+x358+x256+x257);
IkReal x496=(x319+x318+x317+x227+x226);
IkReal x497=(x290+x291+x289+x413+x414+x415);
IkReal x498=(x300+x298+x299+x419+x421+x420);
IkReal x499=(x285+x284+x283+x412+x410+x411);
IkReal x500=(x295+x296+x297+x416+x417+x418);
IkReal x501=(x308+x309+x306+x307+x431+x432+x433);
IkReal x502=(x342+x346+x347+x345+x245+x439+x441+x440);
IkReal x503=(x333+x331+x330+x329+x237+x435+x436+x437);
IkReal x504=(x339+x338+x336+x335+x334+x340+x341+x238+x242+x438);
IkReal x505=(x324+x325+x326+x327+x320+x323+x328+x229+x231+x434);
IkReal x506=(x397+x399+x398+x274+x273+x400+x402+x469+x468+x463+x462+x467+x466+x465+x464+x470+x471);
IkReal x507=(x380+x381+x379+x377+x376+x375+x374+x265+x449+x448+x447+x456+x454+x455+x452+x453+x450+x451);
IkReal x508=(x372+x371+x368+x369+x360+x361+x362+x363+x364+x365+x366+x367+x264+x261+x445+x444+x446+x443+x442+x69);
IkReal x509=(x386+x387+x384+x385+x382+x383+x388+x389+x395+x394+x396+x391+x390+x392+x268+x458+x459+x457+x461+x460+x69);
op[0]=((((-0.008172)*x181))+((gclwh6_12*x198))+(((-1.0)*x496))+(((-0.16344)*x159))+(((-1.0)*gclwh8_12*x131))+(((-0.8172)*gclwh10_12*x77))+(((-1.0)*gclwh12_8*x154))+x482+x474+(((-1.6344)*gclwh6_12*x70))+(((0.8172)*gclwh6_12*x71))+(((-0.8172)*gclwh8_12*x75))+(((0.16344)*x73))+(((-1.0)*x223))+(((1.6344)*gclwh10_12*x87))+(((1.6344)*gclwh8_12*x81)));
op[1]=((((-1.0)*x489))+(((-1.0)*x503))+(((-0.135154368)*x151))+(((-1.0)*gclwh4_3*x204))+((gclwh10_11*x77))+x479+x505+(((0.135154368)*x179))+(((-1.0)*gclwh6_11*x71))+((gclwh8_11*x75)));
op[2]=((-0.2102192)+(((-1.0)*x497))+x499);
op[3]=((((-1.0)*gclwh6_2*x112))+(((-1.5688)*gclwh10_2*x87))+(((-1.0)*gclwh12_2*x86))+(((-0.7844)*gclwh6_2*x71))+(((0.007844)*x169))+(((-1.0)*x477))+(((-1.0)*gclwh4_2*x148))+(((1.5688)*gclwh6_2*x70))+x286+(((0.17)*x159))+(((0.7844)*gclwh10_2*x77))+(((0.15688)*x100))+((gclwh10_2*x89))+(((0.17)*x162))+(((0.7844)*gclwh8_2*x75))+(((-1.5688)*gclwh8_2*x81))+(((-0.17)*x73)));
op[4]=((((-1.0)*x496))+(((0.00656)*x159))+(((-0.000328)*x181))+(((-1.0)*x474))+(((0.0656)*gclwh10_12*x87))+(((-0.0328)*gclwh10_12*x77))+(((-0.0328)*gclwh8_12*x75))+((gclwh6_12*x124))+(((-0.00656)*x73))+x223+(((-0.0656)*gclwh6_12*x70))+((gclwh12_8*x93))+x482+(((0.0328)*gclwh6_12*x71))+(((-1.0)*gclwh8_12*x97))+(((0.0656)*gclwh8_12*x81)));
op[5]=(((gclwh6_11*x71))+(((-1.0)*gclwh10_11*x77))+(((0.001806368)*x179))+(((-0.001806368)*x151))+(((-1.0)*x503))+(((-1.0)*x479))+x489+x505+(((-1.0)*gclwh4_3*x192))+(((-1.0)*gclwh8_11*x75)));
op[6]=(((gclwh7_10*x71))+(((-1.0)*x502))+(((0.135154368)*x119))+(((-1.0)*x478))+(((-1.0)*gclwh11_10*x77))+x490+(((-0.135154368)*x190))+x504+(((-1.0)*gclwh9_10*x75))+(((-1.0)*gclwh5_1*x204)));
op[7]=((((-0.8172)*gclwh9_13*x75))+(((1.6344)*gclwh9_13*x81))+(((-1.0)*x492))+(((-0.008172)*x144))+((gclwh7_13*x198))+x484+x476+(((-1.0)*gclwh9_13*x131))+(((-0.16344)*x123))+(((-0.16344)*x135))+(((-1.6344)*gclwh7_13*x70))+(((-1.0)*x247))+(((1.6344)*gclwh11_13*x87))+(((0.8172)*gclwh7_13*x71))+(((-0.8172)*gclwh11_13*x77))+((gclwh15_9*x109)));
op[8]=((((-1.0)*gclwh7_0*x112))+(((-1.0)*x294))+(((-1.5688)*gclwh9_0*x81))+(((0.17)*x115))+((gclwh15_0*x176))+(((-0.7844)*gclwh7_0*x71))+x472+(((-1.5688)*gclwh11_0*x87))+(((-0.17)*x123))+((gclwh11_0*x89))+(((-0.17)*x135))+(((0.7844)*gclwh9_0*x75))+((gclwh9_0*x173))+(((0.7844)*gclwh11_0*x77))+(((-1.0)*gclwh13_0*x86))+(((-0.15688)*x96))+(((1.5688)*gclwh7_0*x70)));
op[9]=((-0.2102192)+(((-1.0)*x498))+x500);
op[10]=((((0.001806368)*x119))+(((-1.0)*x490))+((gclwh11_10*x77))+(((-1.0)*x502))+(((-1.0)*gclwh5_1*x192))+(((-1.0)*gclwh7_10*x71))+(((-0.001806368)*x190))+x478+x504+((gclwh9_10*x75)));
op[11]=((((-0.0328)*gclwh11_13*x77))+(((-0.0328)*gclwh9_13*x75))+(((0.00656)*x123))+(((-1.0)*x492))+((gclwh7_13*x124))+(((-0.000328)*x144))+(((0.0656)*gclwh9_13*x81))+(((-1.0)*gclwh9_13*x97))+(((-1.0)*x476))+((gclwh13_9*x93))+x247+(((0.0656)*gclwh11_13*x87))+x484+(((-0.0656)*gclwh7_13*x70))+(((-0.00656)*x115))+(((0.0328)*gclwh7_13*x71)));
op[12]=((((-0.008172)*x189))+((gclwh8_12*x109))+(((-1.0)*gclwh6_12*x154))+(((-1.0)*x486))+(((-0.008172)*x74))+(((-0.8172)*gclwh12_8*x71))+((gclwh14_8*x131))+(((0.8172)*gclwh14_8*x75))+(((-0.8172)*gclwh4_8*x77))+x495+x473+(((-1.6344)*gclwh14_8*x81))+(((1.6344)*gclwh4_8*x87))+(((1.6344)*gclwh12_8*x70))+((gclwh10_12*x213))+(((-1.0)*x258)));
op[13]=((-0.68577184)+(((-0.68577184)*gclwh3_3*x71))+(((1.35154368)*gclwh1_3*x81))+(((-1.0)*x487))+(((-1.0)*x507))+(((-1.35154368)*gclwh14_3*x81))+(((0.66577184)*gclwh14_3*x75))+(((-0.66577184)*gclwh4_3*x77))+(((1.35154368)*gclwh3_3*x70))+(((-1.0)*gclwh12_11*x71))+(((-0.0067577184)*x143))+((gclwh3_3*x220))+(((1.35154368)*gclwh12_3*x70))+x481+((gclwh14_11*x75))+x508+((gclwh14_3*x140))+(((-0.68577184)*gclwh1_3*x75))+(((-0.0067577184)*x178))+(((-0.66577184)*gclwh12_3*x71))+((gclwh1_3*x140))+(((-1.0)*gclwh4_11*x77))+(((1.35154368)*gclwh4_3*x87)));
op[14]=((-0.08952032)+(((-1.0)*x501))+x494);
op[15]=((((1.5688)*gclwh4_2*x87))+((gclwh3_2*x112))+(((-1.0)*gclwh8_2*x176))+((gclwh6_2*x86))+(((-1.0)*gclwh4_2*x89))+(((0.85)*gclwh4_8*x77))+(((-1.0)*x493))+(((0.7844)*gclwh14_2*x75))+(((0.0085)*x74))+(((1.5688)*gclwh12_2*x70))+(((0.007844)*x163))+(((0.0085)*x189))+(((-1.7)*gclwh4_8*x87))+(((-0.7844)*gclwh3_2*x71))+(((1.5688)*gclwh1_2*x81))+(((-1.0)*gclwh12_2*x112))+(((-0.15688)*x129))+(((1.7)*gclwh14_8*x81))+x485+(((-0.7844)*gclwh12_2*x71))+(((-0.7844)*gclwh1_2*x75))+(((-1.0)*gclwh14_8*x184))+(((-1.7)*gclwh12_8*x70))+(((0.007844)*x104))+(((-1.5688)*gclwh14_2*x81))+(((1.5688)*gclwh3_2*x70))+(((-0.7844)*gclwh4_2*x77))+(((-0.85)*gclwh14_8*x75))+(((0.85)*gclwh12_8*x71)));
op[16]=((((-0.0328)*gclwh14_8*x75))+(((0.0328)*gclwh12_8*x71))+(((0.0328)*gclwh4_8*x77))+(((-1.0)*x495))+(((0.000328)*x189))+(((-1.0)*gclwh14_8*x97))+(((0.0656)*gclwh14_8*x81))+(((-0.0656)*gclwh12_8*x70))+x486+x473+((gclwh10_12*x194))+(((-0.0656)*gclwh4_8*x87))+((gclwh8_12*x168))+(((0.000328)*x74))+(((-1.0)*gclwh6_12*x93))+(((-1.0)*x258)));
op[17]=((0.01903184)+(((-0.00096816)*gclwh14_3*x75))+(((-0.01903184)*gclwh1_3*x75))+(((-1.0)*x481))+(((9.03184e-5)*x166))+(((-9.03184e-5)*x178))+(((-9.03184e-5)*x143))+(((-1.0)*x507))+(((-0.01806368)*gclwh14_3*x81))+((gclwh12_11*x71))+(((0.01806368)*gclwh1_3*x81))+x487+x508+(((0.01806368)*gclwh12_3*x70))+((gclwh3_3*x217))+((gclwh14_3*x174))+(((0.01806368)*gclwh3_3*x70))+(((0.00096816)*gclwh4_3*x77))+(((-0.01903184)*gclwh3_3*x71))+(((-1.0)*gclwh14_11*x75))+((gclwh4_11*x77))+(((0.00096816)*gclwh12_3*x71))+(((0.01806368)*gclwh4_3*x87)));
op[18]=((0.68577184)+(((-1.0)*gclwh13_10*x71))+(((0.66577184)*gclwh13_1*x71))+(((1.35154368)*gclwh2_1*x70))+(((-1.0)*x488))+(((-1.0)*x506))+((gclwh2_1*x220))+(((-0.0067577184)*x80))+(((-1.0)*gclwh5_10*x77))+(((0.0067577184)*x108))+(((-1.35154368)*gclwh5_1*x87))+(((-0.68577184)*gclwh0_1*x75))+(((1.35154368)*gclwh15_1*x81))+x480+x509+(((-0.66577184)*gclwh15_1*x75))+(((0.0067577184)*x149))+((gclwh15_10*x75))+(((-1.35154368)*gclwh13_1*x70))+((gclwh0_1*x140))+(((1.35154368)*gclwh0_1*x81))+(((0.66577184)*gclwh5_1*x77))+(((-0.68577184)*gclwh2_1*x71)));
op[19]=((((1.6344)*x310))+(((-1.6344)*gclwh5_9*x87))+(((-0.8172)*gclwh15_9*x75))+(((-1.0)*x491))+(((-1.0)*gclwh11_13*x213))+(((0.8172)*gclwh13_9*x71))+((gclwh7_13*x154))+(((-1.0)*x475))+(((-1.0)*gclwh9_13*x109))+(((0.8172)*gclwh5_9*x77))+x279+x483+(((-1.6344)*gclwh13_9*x70))+(((0.008172)*x79))+(((-1.0)*gclwh15_9*x131))+(((0.008172)*x103)));
op[20]=((((-0.85)*gclwh15_9*x75))+((gclwh2_0*x112))+(((1.5688)*gclwh2_0*x70))+((gclwh13_0*x112))+(((-1.7)*gclwh13_9*x70))+(((-1.7)*gclwh5_9*x87))+(((-1.0)*x71*x84))+(((0.0085)*x79))+(((-0.00268)*gclwh5_15*r22))+((x134*x75))+(((0.7844)*gclwh13_0*x71))+(((1.5688)*gclwh15_0*x81))+(((-0.7844)*gclwh0_0*x75))+((gclwh5_0*x89))+(((-1.5688)*gclwh13_0*x70))+(((-1.0)*gclwh7_0*x86))+(((-0.536)*gclwh15_15*x81))+(((0.0085)*x103))+(((1.5688)*gclwh0_0*x81))+(((0.536)*gclwh13_15*x70))+(((-1.5688)*gclwh5_0*x87))+(((-0.7844)*gclwh2_0*x71))+(((-1.0)*gclwh15_9*x184))+(((0.7844)*gclwh5_0*x77))+(((-0.7844)*gclwh15_0*x75))+(((0.536)*gclwh5_15*x87))+(((0.85)*gclwh5_9*x77))+(((0.85)*gclwh13_9*x71))+(((-1.0)*x186*x77))+(((-1.0)*gclwh15_0*x173))+(((-0.00268)*x203))+((gclwh9_0*x176))+((gclwh0_0*x173))+((gclwh15_15*x111))+(((1.7)*x310))+((gclwh11_0*x148)));
op[21]=((-0.08952032)+(((-4.0)*gclwh5_10*x87))+(((4.0)*gclwh15_10*x81))+(((0.4)*gclwh9_10*rxp0_2))+((gclwh5_10*x106))+(((-4.0)*gclwh13_10*x70))+((gclwh11_10*x128))+(((0.02)*x95))+((x191*x77))+(((-1.0)*gclwh7_10*x175))+(((-0.02)*gclwh15_10*r20))+(((-1.0)*x193*x75))+((x113*x71)));
op[22]=((-0.01903184)+(((-0.01806368)*gclwh13_1*x70))+(((-0.01903184)*gclwh2_1*x71))+(((9.03184e-5)*x149))+((gclwh2_1*x217))+(((0.01806368)*gclwh2_1*x70))+(((0.00096816)*gclwh15_1*x75))+(((-1.0)*x480))+(((-1.0)*x506))+(((-0.01806368)*gclwh5_1*x87))+((gclwh13_10*x71))+(((9.03184e-5)*x108))+((gclwh5_10*x77))+x488+x509+(((0.01806368)*gclwh0_1*x81))+(((-0.00096816)*gclwh5_1*x77))+((gclwh0_1*x174))+(((0.01806368)*gclwh15_1*x81))+(((-9.03184e-5)*x80))+(((-0.00096816)*gclwh13_1*x71))+(((-0.01903184)*gclwh0_1*x75))+(((-1.0)*gclwh15_10*x75)));
op[23]=((((-0.0328)*gclwh13_9*x71))+(((-1.0)*x483))+(((-1.0)*gclwh9_13*x168))+(((-1.0)*x475))+(((-0.000328)*x79))+(((-0.000328)*x103))+x279+(((-1.0)*gclwh11_13*x194))+x491+(((-0.0328)*gclwh5_9*x77))+((gclwh7_13*x93))+(((0.0328)*gclwh15_9*x75))+((gclwh15_9*x97))+(((-0.0656)*x310))+(((0.0656)*gclwh5_9*x87))+(((0.0656)*gclwh13_9*x70)));
op[24]=((-0.4380192)+(((-1.0)*x497))+x499);
op[25]=((((1.6344)*gclwh8_2*x75))+(((-3.2688)*gclwh8_2*x81))+(((-1.0)*gclwh12_2*x158))+(((-0.32688)*x183))+(((0.016344)*x169))+(((-1.0)*x477))+(((3.2688)*gclwh6_2*x70))+(((-3.2688)*gclwh10_2*x87))+x286+(((1.6344)*gclwh10_2*x77))+(((-1.6344)*gclwh6_2*x71))+((gclwh14_2*x98))+((gclwh10_2*x200))+(((-1.0)*gclwh6_2*x99)));
op[26]=((((1.5688)*gclwh10_12*x77))+(((-3.1376)*gclwh8_12*x81))+(((-1.0)*gclwh6_12*x185))+(((1.5688)*gclwh8_12*x75))+(((-1.5688)*gclwh6_12*x71))+(((-0.1072)*x207))+((gclwh14_14*x209))+(((0.015688)*x181))+(((-3.1376)*gclwh10_12*x87))+(((-0.1072)*x187))+((gclwh8_12*x157))+(((3.1376)*gclwh6_12*x70)));
op[27]=((((-0.8)*x92))+(((-0.04)*x121))+(((-1.0)*x136*x75))+(((-1.0)*x142*x77))+(((-0.04)*x78))+((x195*x71))+(((8.0)*gclwh8_11*x81))+((gclwh4_11*x153))+((gclwh12_11*x196))+(((8.0)*gclwh10_11*x87))+(((-8.0)*gclwh6_11*x70))+((gclwh6_11*x161)));
op[28]=((-0.0175808)+(((-1.0)*x499))+x497);
op[29]=((((0.000656)*x169))+(((-1.0)*gclwh6_2*x188))+(((-0.1312)*gclwh10_2*x87))+(((-0.01312)*x183))+(((0.1312)*gclwh6_2*x70))+(((-1.0)*gclwh12_2*x201))+x477+(((0.01312)*x100))+(((-0.1312)*gclwh8_2*x81))+(((-1.0)*x286))+(((0.0656)*gclwh10_2*x77))+(((-0.0656)*gclwh6_2*x71))+(((0.0656)*gclwh8_2*x75))+((gclwh10_2*x117)));
op[30]=((((1.6344)*gclwh9_0*x75))+(((-3.2688)*gclwh11_0*x87))+(((-1.0)*x294))+((gclwh15_0*x98))+(((3.2688)*gclwh7_0*x70))+(((-0.32688)*x96))+(((-1.0)*gclwh13_0*x158))+x472+(((-1.0)*gclwh7_0*x99))+((gclwh11_0*x200))+(((-3.2688)*gclwh9_0*x81))+(((0.016344)*x202))+(((-1.6344)*gclwh7_0*x71))+(((1.6344)*gclwh11_0*x77)));
op[31]=((-0.4380192)+(((-1.0)*x498))+x500);
op[32]=((((-0.8)*x72))+(((-1.0)*gclwh5_10*x153))+((x152*x75))+((x120*x77))+((gclwh11_10*x139))+(((0.04)*x130))+(((8.0)*gclwh7_10*x70))+(((-1.0)*gclwh7_10*x161))+(((0.8)*x145))+(((-8.0)*gclwh11_10*x87))+(((-1.0)*x156*x71))+(((-8.0)*gclwh9_10*x81)));
op[33]=(((gclwh15_15*x209))+(((-3.1376)*gclwh9_13*x81))+(((0.015688)*x144))+(((3.1376)*gclwh7_13*x70))+(((-3.1376)*gclwh11_13*x87))+(((-1.5688)*gclwh7_13*x71))+(((1.5688)*gclwh9_13*x75))+((gclwh9_13*x157))+(((-1.0)*gclwh7_13*x185))+(((-0.1072)*x172))+(((-0.1072)*x211))+(((1.5688)*gclwh11_13*x77)));
op[34]=((((0.0656)*gclwh11_0*x77))+(((-0.1312)*gclwh9_0*x81))+(((-1.0)*gclwh7_0*x188))+(((-1.0)*gclwh13_0*x201))+((gclwh11_0*x117))+(((-1.0)*x472))+(((-0.1312)*gclwh11_0*x87))+(((-0.0656)*gclwh7_0*x71))+x294+(((0.000656)*x202))+(((-0.01312)*x96))+(((0.01312)*x208))+(((0.1312)*gclwh7_0*x70))+(((0.0656)*gclwh9_0*x75)));
op[35]=((-0.0175808)+(((-1.0)*x500))+x498);
op[36]=((1.29971968)+(((-1.0)*x501))+x494);
op[37]=((((3.2688)*gclwh3_2*x70))+(((-1.0)*gclwh8_2*x98))+(((-1.6344)*gclwh1_2*x75))+(((-1.0)*x493))+(((-3.2688)*gclwh14_2*x81))+(((-1.0)*gclwh12_2*x99))+(((-1.6344)*gclwh4_2*x77))+(((0.016344)*x163))+((gclwh3_2*x99))+(((-0.32688)*x129))+(((3.2688)*gclwh12_2*x70))+(((3.2688)*gclwh4_2*x87))+(((1.6344)*gclwh14_2*x75))+(((-1.6344)*gclwh12_2*x71))+x485+(((-1.0)*gclwh4_2*x200))+((gclwh6_2*x158))+(((-1.6344)*gclwh3_2*x71))+(((0.016344)*x104))+(((3.2688)*gclwh1_2*x81)));
op[38]=((((-1.0)*x205*x71))+(((0.31376)*gclwh6_12*rxp1_2))+(((-1.072)*gclwh14_14*x81))+(((-0.00536)*x116))+(((-0.00536)*x167))+(((-1.0)*x210*x77))+(((1.072)*gclwh4_14*x87))+(((-0.31376)*gclwh8_12*rxp0_2))+(((0.00536)*gclwh14_14*r20))+(((1.072)*gclwh12_14*x70))+(((-0.31376)*gclwh10_12*rxp2_2))+((x147*x75)));
op[39]=((-0.03539264)+((gclwh10_11*x153))+((x160*x77))+((gclwh4_11*x139))+(((-0.04)*x132))+(((-8.0)*gclwh12_11*x70))+(((-8.0)*gclwh4_11*x87))+(((8.0)*gclwh14_11*x81))+(((0.8)*x164))+((gclwh12_11*x161))+(((-1.0)*x110*x75))+((x71*x76))+(((-1.0)*gclwh6_11*x196)));
op[40]=((0.03376032)+(((-1.0)*x494))+x501);
IkReal x510=pz*pz;
IkReal x511=pp*pp;
IkReal x512=((0.2)*pz);
IkReal x513=(npy*pz);
IkReal x514=(pp*r21);
IkReal x515=((0.2)*rxp1_2);
IkReal x516=(gclwh14_8*rxp0_2);
IkReal x517=(gclwh12_8*r21);
IkReal x518=(pp*r20);
IkReal x519=(gclwh13_10*r21);
IkReal x520=((0.02)*r22);
IkReal x521=(gclwh13_9*r21);
IkReal x522=(gclwh15_1*r20);
IkReal x523=(npx*pz);
IkReal x524=((2.0)*pp);
IkReal x525=((0.01)*r22);
IkReal x526=((0.268)*gclwh13_15);
IkReal x527=((0.2)*rxp2_2);
IkReal x528=(gclwh4_3*pp);
IkReal x529=((0.15688)*rxp1_2);
IkReal x530=(npz*pz);
IkReal x531=((0.00134)*r22);
IkReal x532=(gclwh14_2*pz);
IkReal x533=((0.2)*rxp0_2);
IkReal x534=(gclwh8_2*pz);
IkReal x535=((0.00656)*rxp1_2);
IkReal x536=((0.000656)*r21);
IkReal x537=((0.000328)*r20);
IkReal x538=((0.536)*gclwh15_15);
IkReal x539=(pp*r22);
IkReal x540=((0.15688)*rxp0_2);
IkReal x541=((0.0268)*rxp0_2);
IkReal x542=((0.536)*gclwh5_15);
IkReal x543=((1.0)*pz);
IkReal x544=(gclwh5_9*r22);
IkReal x545=((2.0)*gclwh9_10);
IkReal x546=((4.0)*gclwh15_10);
IkReal x547=((2.0)*gclwh15_10);
IkReal x548=(gclwh13_1*r21);
IkReal x549=((0.16344)*rxp0_2);
IkReal x550=(gclwh15_15*r20);
IkReal x551=((0.007844)*r21);
IkReal x552=((2.0)*gclwh13_10);
IkReal x553=((0.268)*gclwh14_14);
IkReal x554=(gclwh15_9*rxp0_2);
IkReal x555=((0.007844)*r22);
IkReal x556=(gclwh2_0*r21);
IkReal x557=(gclwh12_14*r21);
IkReal x558=(gclwh15_1*rxp0_2);
IkReal x559=(gclwh8_11*r20);
IkReal x560=((0.02)*r21);
IkReal x561=(gclwh5_9*rxp2_2);
IkReal x562=((0.000328)*r21);
IkReal x563=((2.0)*gclwh7_10);
IkReal x564=((0.0268)*rxp2_2);
IkReal x565=((0.268)*gclwh4_14);
IkReal x566=((0.4)*rxp2_2);
IkReal x567=(gclwh4_2*pz);
IkReal x568=((0.008172)*r20);
IkReal x569=((0.000656)*r20);
IkReal x570=(gclwh9_10*rxp0_2);
IkReal x571=(gclwh14_11*r20);
IkReal x572=((0.268)*gclwh15_15);
IkReal x573=(gclwh13_9*rxp1_2);
IkReal x574=((0.007844)*r20);
IkReal x575=((0.00134)*r20);
IkReal x576=((0.01)*r21);
IkReal x577=((0.0067577184)*r20);
IkReal x578=(gclwh12_3*r21);
IkReal x579=(gclwh11_13*r22);
IkReal x580=(gclwh7_0*pz);
IkReal x581=((0.15688)*rxp2_2);
IkReal x582=(gclwh5_1*r22);
IkReal x583=((0.0536)*rxp1_2);
IkReal x584=(gclwh12_3*rxp1_2);
IkReal x585=(gclwh7_13*rxp1_2);
IkReal x586=(gclwh5_10*r22);
IkReal x587=(gclwh0_0*r20);
IkReal x588=((0.01)*pz);
IkReal x589=(gclwh1_3*r20);
IkReal x590=(gclwh11_13*rxp2_2);
IkReal x591=(gclwh4_8*rxp2_2);
IkReal x592=(gclwh7_10*rxp1_2);
IkReal x593=(gclwh13_1*rxp1_2);
IkReal x594=(gclwh12_8*rxp1_2);
IkReal x595=(gclwh9_13*rxp0_2);
IkReal x596=((0.000656)*r22);
IkReal x597=((2.0)*gclwh6_11);
IkReal x598=((0.01312)*rxp1_2);
IkReal x599=((0.001)*r20);
IkReal x600=((2.0)*gclwh12_11);
IkReal x601=((0.0268)*rxp1_2);
IkReal x602=((0.536)*gclwh13_15);
IkReal x603=((2.0)*gclwh14_11);
IkReal x604=(gclwh9_10*r20);
IkReal x605=(gclwh15_0*r20);
IkReal x606=((0.01312)*rxp0_2);
IkReal x607=((0.4)*rxp1_2);
IkReal x608=(gclwh10_2*pz);
IkReal x609=(gclwh4_3*r22);
IkReal x610=(gclwh5_15*r22);
IkReal x611=(gclwh14_3*rxp0_2);
IkReal x612=((0.01312)*rxp2_2);
IkReal x613=((9.03184e-5)*r20);
IkReal x614=(gclwh9_0*pz);
IkReal x615=((0.000328)*r22);
IkReal x616=((2.0)*gclwh8_11);
IkReal x617=((0.0085)*r20);
IkReal x618=((0.268)*gclwh5_15);
IkReal x619=((0.0536)*rxp2_2);
IkReal x620=(gclwh4_8*r22);
IkReal x621=((4.0)*gclwh5_10);
IkReal x622=((0.01)*r20);
IkReal x623=((0.001806368)*rxp2_2);
IkReal x624=(gclwh3_3*r21);
IkReal x625=((4.0)*gclwh13_10);
IkReal x626=(gclwh10_12*rxp2_2);
IkReal x627=(gclwh11_0*pz);
IkReal x628=((0.008172)*r21);
IkReal x629=(gclwh5_0*pz);
IkReal x630=((0.4)*rxp0_2);
IkReal x631=(gclwh13_15*r21);
IkReal x632=((0.135154368)*rxp2_2);
IkReal x633=(gclwh13_0*pz);
IkReal x634=((0.00134)*r21);
IkReal x635=(gclwh15_10*r20);
IkReal x636=(gclwh6_2*pz);
IkReal x637=((0.0536)*rxp0_2);
IkReal x638=(gclwh2_1*r21);
IkReal x639=((0.268)*gclwh12_14);
IkReal x640=(gclwh12_2*pz);
IkReal x641=((0.00268)*x610);
IkReal x642=((0.00268)*x631);
IkReal x643=((0.00268)*x550);
IkReal x644=((0.4)*x592);
IkReal x645=((0.02)*x635);
IkReal x646=((0.4)*x570);
IkReal x647=(gclwh5_10*x520);
IkReal x648=(gclwh11_10*x566);
IkReal x649=((0.02)*x519);
IkReal x650=(gclwh4_14*x564);
IkReal x651=(gclwh6_5*x634);
IkReal x652=(gclwh12_14*x601);
IkReal x653=(gclwh14_14*x541);
IkReal x654=(gclwh10_5*x531);
IkReal x655=(gclwh8_5*x575);
IkReal x656=((0.01)*x559);
IkReal x657=((0.02)*x594);
IkReal x658=(gclwh10_11*x525);
IkReal x659=(gclwh14_11*x533);
IkReal x660=((0.02)*x591);
IkReal x661=((0.02)*x516);
IkReal x662=(gclwh12_11*x515);
IkReal x663=(gclwh4_11*x527);
IkReal x664=(gclwh6_11*x576);
IkReal x665=((0.02)*x573);
IkReal x666=(gclwh7_10*x576);
IkReal x667=(gclwh5_10*x527);
IkReal x668=((0.02)*x561);
IkReal x669=(gclwh13_10*x515);
IkReal x670=(gclwh11_10*x525);
IkReal x671=(gclwh15_10*x533);
IkReal x672=((0.01)*x604);
IkReal x673=((0.02)*x554);
IkReal x674=(gclwh13_15*x601);
IkReal x675=(gclwh5_15*x564);
IkReal x676=(gclwh7_7*x634);
IkReal x677=(gclwh15_15*x541);
IkReal x678=(gclwh9_7*x575);
IkReal x679=(gclwh11_7*x531);
IkReal x680=((0.00268)*x557);
IkReal x681=((0.00268)*gclwh4_14*r22);
IkReal x682=((0.00268)*gclwh14_14*r20);
IkReal x683=((0.00134)*x557);
IkReal x684=(gclwh8_5*x541);
IkReal x685=(gclwh10_5*x564);
IkReal x686=(gclwh4_14*x531);
IkReal x687=(gclwh6_5*x601);
IkReal x688=(gclwh14_14*x575);
IkReal x689=((0.001)*x620);
IkReal x690=(gclwh6_11*x515);
IkReal x691=((0.01)*x571);
IkReal x692=((0.001)*x517);
IkReal x693=(gclwh12_11*x576);
IkReal x694=(gclwh10_11*x527);
IkReal x695=(gclwh14_8*x599);
IkReal x696=(gclwh4_11*x525);
IkReal x697=(gclwh8_11*x533);
IkReal x698=(gclwh15_9*x599);
IkReal x699=(gclwh7_10*x515);
IkReal x700=(gclwh15_10*x622);
IkReal x701=((0.001)*x544);
IkReal x702=(gclwh11_10*x527);
IkReal x703=((0.001)*x521);
IkReal x704=((0.01)*x519);
IkReal x705=(gclwh5_10*x525);
IkReal x706=(gclwh9_10*x533);
IkReal x707=((0.00134)*x550);
IkReal x708=(gclwh7_7*x601);
IkReal x709=(gclwh11_7*x564);
IkReal x710=(gclwh5_15*x531);
IkReal x711=((0.00134)*x631);
IkReal x712=(gclwh9_7*x541);
IkReal x713=(gclwh15_9*x523);
IkReal x714=((1.0)*x511);
IkReal x715=((2.0)*x510);
IkReal x716=(r21*x511);
IkReal x717=(x514*x526);
IkReal x718=(x539*x618);
IkReal x719=(x523*x538);
IkReal x720=(x518*x572);
IkReal x721=(x530*x542);
IkReal x722=(x513*x602);
IkReal x723=(x518*x547);
IkReal x724=(x530*x621);
IkReal x725=(x513*x625);
IkReal x726=(x514*x552);
IkReal x727=(x523*x546);
IkReal x728=(x524*x586);
IkReal x729=((0.134)*gclwh6_5*x514);
IkReal x730=((0.268)*gclwh10_5*x530);
IkReal x731=((0.268)*gclwh8_5*x523);
IkReal x732=((0.268)*gclwh6_5*x513);
IkReal x733=((0.134)*gclwh8_5*x518);
IkReal x734=((0.134)*gclwh10_5*x539);
IkReal x735=(gclwh14_2*rxp0_2*x512);
IkReal x736=(x513*x597);
IkReal x737=(x539*x608);
IkReal x738=(x525*x608);
IkReal x739=(gclwh12_3*pp*x515);
IkReal x740=(x518*x534);
IkReal x741=(x527*x528);
IkReal x742=(x534*x622);
IkReal x743=(gclwh12_2*rxp1_2*x512);
IkReal x744=(gclwh14_3*pp*x533);
IkReal x745=(gclwh4_2*rxp2_2*x512);
IkReal x746=((2.0)*gclwh10_11*x530);
IkReal x747=(x576*x636);
IkReal x748=(x523*x616);
IkReal x749=((2.0)*gclwh11_10*x530);
IkReal x750=(x523*x545);
IkReal x751=(gclwh13_1*pp*x515);
IkReal x752=(x539*x627);
IkReal x753=(gclwh5_1*pp*x527);
IkReal x754=(gclwh15_0*rxp0_2*x512);
IkReal x755=(x525*x627);
IkReal x756=(gclwh9_0*r20*x588);
IkReal x757=(x518*x614);
IkReal x758=(gclwh15_1*pp*x533);
IkReal x759=(gclwh5_0*rxp2_2*x512);
IkReal x760=(gclwh13_0*rxp1_2*x512);
IkReal x761=(x576*x580);
IkReal x762=(x513*x563);
IkReal x763=((0.268)*gclwh9_7*x523);
IkReal x764=((0.134)*gclwh7_7*x514);
IkReal x765=((0.268)*gclwh11_7*x530);
IkReal x766=((0.134)*gclwh11_7*x539);
IkReal x767=((0.268)*gclwh7_7*x513);
IkReal x768=((0.134)*gclwh9_7*x518);
IkReal x769=(x514*x639);
IkReal x770=((0.536)*gclwh14_14*x523);
IkReal x771=(x539*x565);
IkReal x772=((0.536)*gclwh4_14*x530);
IkReal x773=(x518*x553);
IkReal x774=((0.536)*gclwh12_14*x513);
IkReal x775=((0.134)*gclwh12_14*x514);
IkReal x776=(x523*x553);
IkReal x777=((0.134)*gclwh4_14*x539);
IkReal x778=(x513*x639);
IkReal x779=((0.134)*gclwh14_14*x518);
IkReal x780=(x530*x565);
IkReal x781=(x518*x532);
IkReal x782=(x532*x622);
IkReal x783=((0.1)*gclwh4_8*x539);
IkReal x784=(x511*x578);
IkReal x785=(gclwh1_2*r20*x588);
IkReal x786=(gclwh3_2*pz*x576);
IkReal x787=((2.0)*gclwh4_11*x530);
IkReal x788=((0.1)*gclwh12_8*x514);
IkReal x789=(x511*x624);
IkReal x790=(x511*x589);
IkReal x791=(gclwh6_2*rxp1_2*x512);
IkReal x792=(x511*x609);
IkReal x793=(x513*x600);
IkReal x794=(gclwh14_8*npx*x512);
IkReal x795=(gclwh4_8*npz*x512);
IkReal x796=(x523*x603);
IkReal x797=(gclwh12_8*npy*x512);
IkReal x798=(gclwh10_2*rxp2_2*x512);
IkReal x799=(x525*x567);
IkReal x800=(gclwh8_2*rxp0_2*x512);
IkReal x801=((0.1)*gclwh14_8*x518);
IkReal x802=(x576*x640);
IkReal x803=(x576*x633);
IkReal x804=(x587*x588);
IkReal x805=(gclwh11_0*rxp2_2*x512);
IkReal x806=(x556*x588);
IkReal x807=(gclwh13_9*npy*x512);
IkReal x808=(x511*x522);
IkReal x809=(x539*x629);
IkReal x810=(x525*x629);
IkReal x811=(x514*x633);
IkReal x812=(gclwh9_0*rxp0_2*x512);
IkReal x813=((0.1)*gclwh15_9*x518);
IkReal x814=(x511*x638);
IkReal x815=((2.0)*gclwh5_10*x530);
IkReal x816=(x513*x552);
IkReal x817=(gclwh5_9*npz*x512);
IkReal x818=(gclwh0_1*r20*x511);
IkReal x819=(gclwh7_0*rxp1_2*x512);
IkReal x820=((0.1)*gclwh5_9*x539);
IkReal x821=(gclwh15_9*npx*x512);
IkReal x822=((0.1)*gclwh13_9*x514);
IkReal x823=(x523*x547);
IkReal x824=(x588*x605);
IkReal x825=(x530*x618);
IkReal x826=((0.134)*gclwh15_15*x518);
IkReal x827=(x513*x526);
IkReal x828=((0.134)*gclwh13_15*x514);
IkReal x829=(x523*x572);
IkReal x830=((0.134)*gclwh5_15*x539);
IkReal x831=(gclwh6_2*npy*x715);
IkReal x832=(gclwh6_2*x514*x543);
IkReal x833=(gclwh10_2*npz*x715);
IkReal x834=(gclwh8_2*npx*x715);
IkReal x835=(gclwh7_0*npy*x715);
IkReal x836=(gclwh9_0*npx*x715);
IkReal x837=(gclwh11_0*npz*x715);
IkReal x838=(gclwh7_0*x514*x543);
IkReal x839=(gclwh12_2*npy*x715);
IkReal x840=(gclwh3_2*npy*x715);
IkReal x841=(gclwh1_2*npx*x715);
IkReal x842=(gclwh14_3*x523*x524);
IkReal x843=(gclwh4_2*npz*x715);
IkReal x844=(gclwh4_3*x524*x530);
IkReal x845=(gclwh12_2*x514*x543);
IkReal x846=(gclwh1_2*x518*x543);
IkReal x847=(gclwh3_3*x513*x524);
IkReal x848=(gclwh4_2*x539*x543);
IkReal x849=(gclwh1_3*x523*x524);
IkReal x850=(gclwh3_2*x514*x543);
IkReal x851=(gclwh12_3*x513*x524);
IkReal x852=(gclwh14_2*npx*x715);
IkReal x853=(gclwh14_3*r20*x714);
IkReal x854=(gclwh0_0*npx*x715);
IkReal x855=(gclwh2_0*npy*x715);
IkReal x856=(gclwh5_1*x524*x530);
IkReal x857=(gclwh13_1*x513*x524);
IkReal x858=(gclwh15_0*npx*x715);
IkReal x859=(gclwh2_1*x513*x524);
IkReal x860=(gclwh0_1*x523*x524);
IkReal x861=(gclwh5_0*npz*x715);
IkReal x862=(gclwh13_0*npy*x715);
IkReal x863=(gclwh0_0*x518*x543);
IkReal x864=(gclwh15_0*x518*x543);
IkReal x865=(gclwh2_0*x514*x543);
IkReal x866=(x548*x714);
IkReal x867=(x582*x714);
IkReal x868=(gclwh15_1*x523*x524);
IkReal x869=(x674+x675);
IkReal x870=(x650+x652);
IkReal x871=(x712+x709);
IkReal x872=(x685+x684);
IkReal x873=(x672+x670+x671+x762);
IkReal x874=(x656+x658+x659+x736);
IkReal x875=(x699+x700+x816+x815);
IkReal x876=(x690+x691+x793+x787);
IkReal x877=(x707+x827+x826+x825);
IkReal x878=(x651+x731+x730+x729);
IkReal x879=(x682+x773+x772+x774);
IkReal x880=(x676+x764+x765+x763);
IkReal x881=(x643+x720+x721+x722);
IkReal x882=(x688+x779+x778+x780);
IkReal x883=(x702+x706+x704+x705+x823);
IkReal x884=(x694+x696+x697+x693+x796);
IkReal x885=(x663+x662+x664+x746+x748);
IkReal x886=(x669+x667+x666+x750+x749);
IkReal x887=(x642+x641+x719+x718+x717);
IkReal x888=(x678+x679+x768+x766+x767);
IkReal x889=(x683+x686+x777+x776+x775);
IkReal x890=(x681+x680+x771+x770+x769);
IkReal x891=(x711+x710+x829+x828+x830);
IkReal x892=(x645+x644+x723+x724+x725);
IkReal x893=(x654+x655+x734+x733+x732);
IkReal x894=(x647+x646+x649+x648+x726+x727+x728);
IkReal x895=(x673+x759+x758+x760+x761+x836+x837+x838);
IkReal x896=(x661+x747+x744+x745+x743+x834+x832+x833);
IkReal x897=(x657+x660+x737+x735+x739+x738+x742+x740+x741+x831);
IkReal x898=(x668+x665+x755+x754+x757+x756+x751+x753+x752+x835);
IkReal x899=(x703+x701+x859+x868+x867+x866+x865+x864+x863+x862+x861+x860+x819+x822+x821+x820+x824);
IkReal x900=(x695+x795+x797+x799+x798+x852+x853+x850+x851+x845+x844+x847+x846+x849+x848+x801+x800+x802);
IkReal x901=(x512+x689+x692+x791+x790+x792+x794+x782+x783+x781+x786+x784+x785+x788+x789+x839+x841+x840+x843+x842);
IkReal x902=(x512+x698+x856+x857+x854+x855+x858+x818+x817+x814+x812+x813+x810+x811+x809+x808+x805+x804+x807+x806+x803);
op[41]=((((0.1312)*gclwh3_2*x513))+((gclwh1_2*x569))+(((-0.0656)*gclwh4_2*x539))+(((-1.0)*gclwh10_2*x612))+(((-1.0)*gclwh4_2*x596))+((gclwh14_2*x569))+((gclwh6_2*x598))+(((0.0656)*gclwh14_2*x518))+(((-0.0656)*gclwh3_2*x514))+((gclwh3_2*x536))+(((0.1312)*gclwh1_2*x523))+(((-0.1312)*gclwh14_2*x523))+(((-0.0656)*gclwh12_2*x514))+x890+(((-1.0)*gclwh8_2*x606))+(((-0.0656)*gclwh1_2*x518))+(((0.1312)*gclwh12_2*x513))+(((-1.0)*gclwh12_2*x536))+(((0.1312)*gclwh4_2*x530))+(((-1.0)*x879)));
op[42]=((((-3.2688)*gclwh5_0*x530))+(((1.6344)*gclwh13_0*x514))+(((-0.016344)*x605))+(((-1.6344)*gclwh0_0*x518))+(((-1.0)*x887))+(((0.32688)*gclwh9_0*rxp0_2))+(((0.016344)*x587))+(((-0.32688)*gclwh7_0*rxp1_2))+(((0.016344)*gclwh5_0*r22))+(((3.2688)*gclwh0_0*x523))+(((3.2688)*gclwh2_0*x513))+(((-3.2688)*gclwh13_0*x513))+x881+(((0.016344)*x556))+(((0.016344)*gclwh13_0*r21))+(((1.6344)*gclwh5_0*x539))+(((0.32688)*gclwh11_0*rxp2_2))+(((-1.6344)*gclwh2_0*x514))+(((-1.6344)*gclwh15_0*x518))+(((3.2688)*gclwh15_0*x523)));
op[43]=((1.29971968)+(((-1.0)*x892))+x894);
op[44]=((0.03539264)+(((-8.0)*gclwh13_10*x513))+(((0.04)*x519))+(((0.8)*gclwh11_10*rxp2_2))+(((0.8)*x570))+(((-8.0)*gclwh5_10*x530))+(((-0.8)*x592))+(((8.0)*gclwh15_10*x523))+(((-1.0)*x518*x546))+((x514*x625))+((x539*x621))+(((-0.04)*x635))+(((0.04)*x586)));
op[45]=(((x539*x542))+((x514*x602))+(((-0.00536)*x550))+(((-1.072)*gclwh5_15*x530))+(((1.072)*gclwh15_15*x523))+(((0.00536)*x610))+(((-1.0)*x518*x538))+(((-0.31376)*x585))+(((-1.072)*gclwh13_15*x513))+(((0.31376)*x590))+(((0.31376)*x595))+(((0.00536)*x631)));
op[46]=((((-1.0)*gclwh7_0*x598))+((gclwh13_0*x536))+((gclwh9_0*x606))+(((0.0656)*gclwh5_0*x539))+((gclwh11_0*x612))+(((0.1312)*gclwh15_0*x523))+(((-0.1312)*gclwh5_0*x530))+((gclwh2_0*x536))+(((-0.1312)*gclwh13_0*x513))+(((0.1312)*gclwh0_0*x523))+((gclwh0_0*x569))+(((-1.0)*x881))+(((0.0656)*gclwh13_0*x514))+(((-0.0656)*gclwh15_0*x518))+(((0.1312)*gclwh2_0*x513))+((gclwh5_0*x596))+(((-0.0656)*gclwh0_0*x518))+(((-0.0656)*gclwh2_0*x514))+x887+(((-1.0)*gclwh15_0*x569)));
op[47]=((0.03376032)+(((-1.0)*x894))+x892);
op[48]=((((-0.8172)*gclwh6_12*x514))+(((0.008172)*gclwh10_12*r22))+(((-0.16344)*x594))+(((-0.16344)*x591))+(((0.16344)*x516))+(((-1.0)*x893))+(((0.8172)*gclwh8_12*x518))+((gclwh8_12*x568))+(((-1.6344)*gclwh8_12*x523))+(((0.8172)*gclwh10_12*x539))+x653+(((-1.6344)*gclwh10_12*x530))+x878+(((-1.0)*gclwh6_12*x628))+(((1.6344)*gclwh6_12*x513))+(((-1.0)*x870)));
op[49]=(((gclwh6_11*x514))+(((-1.0)*gclwh8_11*x518))+(((-1.0)*x896))+(((-1.0)*gclwh4_3*x632))+(((-1.0)*gclwh10_11*x539))+(((0.135154368)*x611))+x885+x897+(((-0.135154368)*x584))+(((-1.0)*x874)));
op[50]=((0.2102192)+((gclwh12_11*x607))+((gclwh4_11*x566))+(((4.0)*gclwh8_11*x523))+((gclwh6_11*x560))+(((-0.02)*x559))+(((-1.0)*gclwh10_11*r22*x524))+((x514*x597))+(((-1.0)*x518*x616))+(((4.0)*gclwh10_11*x530))+(((-1.0)*gclwh10_11*x520))+(((-4.0)*gclwh6_11*x513))+(((-1.0)*gclwh14_11*x630)));
op[51]=((((1.5688)*gclwh8_2*x523))+(((-1.0)*gclwh8_2*x574))+(((-1.0)*gclwh10_2*x555))+(((1.5688)*gclwh10_2*x530))+((gclwh12_14*x583))+((gclwh4_14*x619))+(((-1.0)*gclwh14_14*x637))+((gclwh6_2*x551))+((gclwh12_2*x529))+(((-1.5688)*gclwh6_2*x513))+(((-1.0)*gclwh14_2*x540))+(((0.7844)*gclwh6_2*x514))+(((0.17)*x591))+(((0.17)*x594))+(((-0.17)*x516))+((gclwh4_2*x581))+(((-0.7844)*gclwh8_2*x518))+(((-0.7844)*gclwh10_2*x539)));
op[52]=(((gclwh12_8*x535))+(((-0.00656)*x516))+(((-0.0656)*gclwh8_12*x523))+((gclwh8_12*x537))+(((-1.0)*gclwh6_12*x562))+(((-1.0)*x893))+(((-0.0328)*gclwh6_12*x514))+(((-0.0656)*gclwh10_12*x530))+(((0.0656)*gclwh6_12*x513))+(((-1.0)*x653))+(((0.00656)*x591))+x878+x870+(((0.0328)*gclwh8_12*x518))+(((0.0328)*gclwh10_12*x539))+((gclwh10_12*x615)));
op[53]=((((-0.001806368)*x584))+(((-1.0)*x896))+((gclwh8_11*x518))+(((-1.0)*gclwh4_3*x623))+(((-1.0)*x885))+(((0.001806368)*x611))+(((-1.0)*gclwh6_11*x514))+x874+x897+((gclwh10_11*x539)));
op[54]=((((-1.0)*gclwh7_10*x514))+(((0.135154368)*x558))+(((-1.0)*x895))+(((-1.0)*x886))+((gclwh11_10*x539))+(((-0.135154368)*x593))+((gclwh9_10*x518))+(((-1.0)*gclwh5_1*x632))+x873+x898);
op[55]=((((-1.6344)*gclwh9_13*x523))+(((-1.0)*x869))+(((-0.8172)*gclwh7_13*x514))+(((-1.0)*gclwh7_13*x628))+((gclwh15_9*x549))+(((-0.16344)*x561))+(((1.6344)*gclwh7_13*x513))+(((-1.0)*x888))+((gclwh9_13*x568))+(((0.8172)*gclwh11_13*x539))+(((-0.16344)*x573))+x677+(((-1.6344)*gclwh11_13*x530))+x880+(((0.8172)*gclwh9_13*x518))+(((0.008172)*x579)));
op[56]=((((-0.7844)*gclwh9_0*x518))+(((1.5688)*gclwh9_0*x523))+((gclwh13_0*x529))+(((1.5688)*gclwh11_0*x530))+((gclwh5_0*x581))+((gclwh15_15*x637))+(((-1.0)*gclwh15_0*x540))+(((-0.17)*x561))+(((-1.0)*gclwh9_0*x574))+((gclwh7_0*x551))+(((-0.7844)*gclwh11_0*x539))+(((-1.5688)*gclwh7_0*x513))+(((0.7844)*gclwh7_0*x514))+(((0.17)*x554))+(((-0.17)*x573))+(((-1.0)*gclwh5_15*x619))+(((-1.0)*gclwh11_0*x555))+(((-1.0)*gclwh13_15*x583)));
op[57]=((0.2102192)+((gclwh7_10*x560))+(((-1.0)*gclwh11_10*r22*x524))+((x514*x563))+(((4.0)*gclwh11_10*x530))+(((-4.0)*gclwh7_10*x513))+(((-1.0)*x518*x545))+(((-1.0)*gclwh11_10*x520))+((gclwh5_10*x566))+((gclwh13_10*x607))+(((-0.02)*x604))+(((-1.0)*gclwh15_10*x630))+(((4.0)*gclwh9_10*x523)));
op[58]=((((-1.0)*gclwh9_10*x518))+(((-1.0)*x895))+(((0.001806368)*x558))+(((-1.0)*gclwh5_1*x623))+(((-0.001806368)*x593))+((gclwh7_10*x514))+(((-1.0)*gclwh11_10*x539))+x886+x898+(((-1.0)*x873)));
op[59]=((((-0.0328)*gclwh7_13*x514))+(((0.0328)*gclwh11_13*x539))+(((-1.0)*gclwh7_13*x562))+(((0.00656)*x561))+(((0.0656)*gclwh7_13*x513))+(((-1.0)*x888))+(((-0.0656)*gclwh9_13*x523))+((gclwh13_9*x535))+(((-0.0656)*gclwh11_13*x530))+(((0.0328)*gclwh9_13*x518))+x869+x880+(((-0.00656)*x554))+(((-1.0)*x677))+((gclwh9_13*x537))+(((0.000328)*x579)));
op[60]=((((-0.8172)*gclwh4_8*x539))+((gclwh14_8*x568))+(((-0.8172)*gclwh12_8*x514))+(((-0.008172)*x517))+(((-1.0)*x687))+(((1.6344)*gclwh12_8*x513))+(((0.16344)*gclwh6_12*rxp1_2))+(((-1.0)*x889))+(((-0.16344)*x626))+(((-1.0)*gclwh8_12*x549))+(((-1.6344)*gclwh14_8*x523))+x872+x882+(((0.8172)*gclwh14_8*x518))+(((1.6344)*gclwh4_8*x530))+(((-0.008172)*x620)));
op[61]=((0.68577184)+(((-1.35154368)*gclwh14_3*x523))+((gclwh1_3*x577))+(((-1.0)*x900))+((gclwh12_11*x514))+(((0.0067577184)*x624))+(((-0.0067577184)*x578))+((gclwh14_3*x577))+(((1.35154368)*gclwh4_3*x530))+(((-0.68577184)*gclwh1_3*x518))+(((0.66577184)*gclwh14_3*x518))+(((1.35154368)*gclwh12_3*x513))+(((1.35154368)*gclwh1_3*x523))+(((-0.0067577184)*x609))+(((-0.66577184)*gclwh12_3*x514))+x884+(((-0.68577184)*gclwh3_3*x514))+((gclwh4_11*x539))+x901+(((1.35154368)*gclwh3_3*x513))+(((-0.66577184)*r22*x528))+(((-1.0)*gclwh14_11*x518))+(((-1.0)*x876)));
op[62]=((0.08952032)+((x514*x600))+(((-1.0)*gclwh6_11*x607))+((gclwh10_11*x566))+(((-4.0)*gclwh12_11*x513))+((gclwh8_11*x630))+(((-0.02)*x571))+((gclwh12_11*x560))+((gclwh4_11*r22*x524))+((gclwh4_11*x520))+(((4.0)*gclwh14_11*x523))+(((-1.0)*x518*x603))+(((-4.0)*gclwh4_11*x530)));
op[63]=((((0.85)*gclwh4_8*x539))+(((-1.0)*gclwh6_2*x529))+(((1.5688)*gclwh14_2*x523))+(((0.85)*gclwh12_8*x514))+(((1.7)*gclwh14_8*x523))+(((-1.0)*gclwh14_8*x617))+(((-0.7844)*gclwh14_2*x518))+(((-1.0)*gclwh3_2*x551))+(((-1.0)*gclwh14_2*x574))+(((-1.0)*gclwh1_2*x574))+(((0.7844)*gclwh3_2*x514))+(((-0.85)*gclwh14_8*x518))+(((0.7844)*gclwh12_2*x514))+((gclwh4_2*x555))+((gclwh10_2*x581))+(((-1.5688)*gclwh3_2*x513))+((gclwh12_2*x551))+(((0.7844)*gclwh1_2*x518))+((gclwh8_2*x540))+x890+(((0.0085)*x517))+(((-1.7)*gclwh4_8*x530))+(((-1.5688)*gclwh12_2*x513))+(((0.0085)*x620))+(((-1.7)*gclwh12_8*x513))+(((0.7844)*gclwh4_2*x539))+(((-1.5688)*gclwh4_2*x530))+(((-1.5688)*gclwh1_2*x523))+(((-1.0)*x879)));
op[64]=((((-0.00656)*gclwh8_12*rxp0_2))+(((-1.0)*x687))+(((-0.0656)*gclwh4_8*x530))+(((-0.0656)*gclwh12_8*x513))+((gclwh4_8*x615))+(((-0.00656)*x626))+(((-1.0)*x882))+(((0.0328)*gclwh12_8*x514))+(((0.0328)*gclwh4_8*x539))+(((-0.0328)*gclwh14_8*x518))+x872+x889+(((0.0656)*gclwh14_8*x523))+(((-1.0)*gclwh14_8*x537))+(((0.000328)*x517))+((gclwh6_12*x535)));
op[65]=((-0.01903184)+(((-9.03184e-5)*x609))+((gclwh14_3*x613))+(((-0.00096816)*gclwh14_3*x518))+(((0.00096816)*gclwh12_3*x514))+(((-1.0)*x900))+(((0.00096816)*r22*x528))+(((-1.0)*gclwh4_11*x539))+(((-1.0)*x884))+(((0.01806368)*gclwh4_3*x530))+(((-9.03184e-5)*x578))+(((-0.01806368)*gclwh14_3*x523))+(((-1.0)*gclwh12_11*x514))+(((9.03184e-5)*x624))+(((0.01806368)*gclwh3_3*x513))+((gclwh14_11*x518))+(((-0.01903184)*gclwh3_3*x514))+(((9.03184e-5)*x589))+x876+(((-0.01903184)*gclwh1_3*x518))+x901+(((0.01806368)*gclwh1_3*x523))+(((0.01806368)*gclwh12_3*x513)));
op[66]=((-0.68577184)+(((-1.35154368)*gclwh13_1*x513))+((gclwh0_1*x577))+(((-0.0067577184)*x522))+(((0.66577184)*gclwh13_1*x514))+(((-1.0)*x899))+((gclwh5_10*x539))+(((0.0067577184)*x638))+((gclwh13_10*x514))+(((-1.35154368)*gclwh5_1*x530))+(((-0.66577184)*gclwh15_1*x518))+(((0.66577184)*gclwh5_1*x539))+(((1.35154368)*gclwh15_1*x523))+(((-0.68577184)*gclwh2_1*x514))+(((0.0067577184)*x582))+(((1.35154368)*gclwh0_1*x523))+(((0.0067577184)*x548))+x883+x902+(((-0.68577184)*gclwh0_1*x518))+(((1.35154368)*gclwh2_1*x513))+(((-1.0)*gclwh15_10*x518))+(((-1.0)*x875)));
op[67]=((((1.6344)*x713))+((gclwh9_13*x549))+(((0.8172)*gclwh5_9*x539))+(((-1.6344)*gclwh5_9*x530))+(((-1.6344)*gclwh13_9*x513))+(((-0.8172)*gclwh15_9*x518))+(((0.008172)*x544))+(((0.008172)*x521))+(((0.16344)*x590))+x708+(((0.8172)*gclwh13_9*x514))+x891+(((-0.16344)*x585))+(((-1.0)*gclwh15_9*x568))+(((-1.0)*x871))+(((-1.0)*x877)));
op[68]=((((1.5688)*gclwh5_0*x530))+(((-0.7844)*gclwh5_0*x539))+(((0.85)*gclwh5_9*x539))+(((-1.0)*gclwh11_0*x581))+(((0.7844)*gclwh0_0*x518))+(((-0.7844)*gclwh13_0*x514))+(((-1.5688)*gclwh15_0*x523))+(((-1.0)*x881))+(((-1.0)*gclwh5_0*x555))+(((0.7844)*gclwh15_0*x518))+(((0.85)*gclwh13_9*x514))+(((-1.0)*gclwh2_0*x551))+(((-1.0)*gclwh15_9*x617))+(((-1.5688)*gclwh2_0*x513))+(((1.5688)*gclwh13_0*x513))+((gclwh7_0*x529))+(((-0.85)*gclwh15_9*x518))+(((-1.0)*gclwh9_0*x540))+(((0.0085)*x521))+(((-1.0)*gclwh13_0*x551))+(((0.0085)*x544))+(((-1.7)*gclwh13_9*x513))+(((0.7844)*gclwh2_0*x514))+((gclwh15_0*x574))+x887+(((-1.5688)*gclwh0_0*x523))+(((-1.7)*gclwh5_9*x530))+(((1.7)*x713))+(((-1.0)*gclwh0_0*x574)));
op[69]=((0.08952032)+(((-1.0)*x894))+x892);
op[70]=((0.01903184)+(((-0.00096816)*gclwh5_1*x539))+(((0.01806368)*gclwh15_1*x523))+(((0.00096816)*gclwh15_1*x518))+(((-9.03184e-5)*x522))+(((-0.01806368)*gclwh13_1*x513))+(((-1.0)*x899))+(((-1.0)*gclwh5_10*x539))+(((-0.01903184)*gclwh0_1*x518))+(((-1.0)*gclwh13_10*x514))+(((-0.01903184)*gclwh2_1*x514))+(((-1.0)*x883))+(((0.01806368)*gclwh2_1*x513))+((gclwh15_10*x518))+(((0.01806368)*gclwh0_1*x523))+(((9.03184e-5)*x638))+(((9.03184e-5)*x582))+x875+x902+((gclwh0_1*x613))+(((9.03184e-5)*x548))+(((-0.00096816)*gclwh13_1*x514))+(((-0.01806368)*gclwh5_1*x530)));
op[71]=((((-0.0328)*gclwh13_9*x514))+(((-0.000328)*x544))+(((0.0656)*gclwh5_9*x530))+(((-0.000328)*x521))+(((0.0656)*gclwh13_9*x513))+((gclwh15_9*x537))+(((0.0328)*gclwh15_9*x518))+(((-1.0)*x891))+(((-1.0)*gclwh7_13*x535))+(((-0.0328)*gclwh5_9*x539))+(((0.00656)*x595))+(((0.00656)*x590))+x708+(((-0.0656)*x713))+x877+(((-1.0)*x871)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x903=htj1*htj1;
CheckValue<IkReal> x904=IKPowWithIntegerCheck(((1.0)+x903),-1);
if(!x904.valid){
continue;
}
cj1array[numsolutions]=((x904.value)*(((1.0)+(((-1.0)*x903)))));
CheckValue<IkReal> x905=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x905.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x905.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x906=htj2*htj2;
CheckValue<IkReal> x907=IKPowWithIntegerCheck(((1.0)+x906),-1);
if(!x907.valid){
continue;
}
cj2array[numsolutions]=((x907.value)*(((1.0)+(((-1.0)*x906)))));
CheckValue<IkReal> x908=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x908.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x908.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x909=htj3*htj3;
CheckValue<IkReal> x910=IKPowWithIntegerCheck(((1.0)+x909),-1);
if(!x910.valid){
continue;
}
cj3array[numsolutions]=((x910.value)*(((1.0)+(((-1.0)*x909)))));
CheckValue<IkReal> x911=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x911.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x911.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x912=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x912);
rxp1_0=(pz*r11);
rxp1_1=(r01*x912);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x913=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x913);
rxp1_0=(pz*r11);
rxp1_1=(r01*x913);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x914=IKPowWithIntegerCheck(r22,-1);
if(!x914.valid){
continue;
}
CheckValue<IkReal> x915=IKPowWithIntegerCheck(sj3,-1);
if(!x915.valid){
continue;
}
sj4array[0]=((x914.value)*(x915.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x916=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x916);
rxp1_0=(pz*r11);
rxp1_1=(r01*x916);
IkReal x917=((16.0)*sj4);
IkReal x918=(cj1*cj2);
IkReal x919=((4.0)*sj3);
IkReal x920=((8.0)*sj4);
IkReal x921=((4.0)*cj4);
IkReal x922=(sj1*sj2);
IkReal x923=((4.0)*sj4);
IkReal x924=(cj3*r02);
IkReal x925=((16.0)*sj3);
IkReal x926=((8.0)*sj3);
IkReal x927=((12.0)*cj4);
IkReal x928=((12.0)*sj4);
IkReal x929=(cj3*r12);
IkReal x930=(r11*x919);
IkReal x931=(r01*x919);
IkReal x932=(r01*x922);
IkReal x933=(cj3*cj4*r01);
IkReal x934=(cj3*cj4*r11);
IkReal x935=(cj3*r10*x921);
IkReal x936=(x928*x929);
IkReal x937=(cj3*r00*x921);
IkReal x938=(x924*x928);
IkReal x939=(r00*x922*x923);
IkReal x940=(r02*x922*x927);
IkReal x941=(r00*x918*x923);
IkReal x942=(r02*x918*x927);
IkReal x943=(r10*x922*x923);
IkReal x944=(r12*x918*x927);
IkReal x945=(r12*x922*x927);
IkReal x946=(r10*x918*x923);
IkReal x947=(x930+x941);
IkReal x948=(x931+x943);
IkReal x949=(x939+x935);
IkReal x950=(x936+x942);
IkReal x951=(x937+x946);
IkReal x952=(x938+x945);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x951))+(((-1.0)*x952))+x948+x944)))))+(((0.5)*(IKabs(((((-1.0)*x947))+(((-1.0)*x950))+x949+x940)))))+(((0.5)*(IKabs(((((-1.0)*x949))+(((-1.0)*x950))+x940+x947)))))+(((0.5)*(IKabs((((r01*x917*x918))+(((-1.0)*r10*x925))+(((-16.0)*x934))+(((-1.0)*x917*x932)))))))+(((0.5)*(IKabs((((r11*x917*x922))+(((-1.0)*r11*x917*x918))+(((-16.0)*x933))+(((-1.0)*r00*x925)))))))+(((0.5)*(IKabs(((((-1.0)*x948))+(((-1.0)*x952))+x951+x944)))))+(((0.5)*(IKabs((((r12*x918*x921))+(((-1.0)*x951))+(((-1.0)*r12*x921*x922))+x948+(((-1.0)*x923*x924)))))))+(IKabs(((((-1.0)*r11*x918*x920))+((r11*x920*x922))+(((-8.0)*x933))+(((-1.0)*r00*x926)))))+(IKabs((((r01*x918*x920))+(((-1.0)*r10*x926))+(((-8.0)*x934))+(((-1.0)*x920*x932)))))+(((0.5)*(IKabs(((((-1.0)*x949))+((r02*x921*x922))+(((-1.0)*r02*x918*x921))+x947+(((-1.0)*x923*x929))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x953=(r10*sj3);
IkReal x954=(r01*sj4);
IkReal x955=(cj1*cj2);
IkReal x956=(cj3*cj4);
IkReal x957=(sj1*sj2);
IkReal x958=(cj4*r02);
IkReal x959=((4.0)*r11*sj3);
IkReal x960=(cj3*r12*sj4);
IkReal x961=((4.0)*r00*sj4);
IkReal x962=((4.0)*r10*x956);
IkReal x963=((12.0)*x960);
IkReal x964=((4.0)*x960);
IkReal x965=(x955*x961);
IkReal x966=(x957*x961);
IkReal x967=((12.0)*x957*x958);
IkReal x968=((12.0)*x955*x958);
IkReal x969=((4.0)*x957*x958);
IkReal x970=((4.0)*x955*x958);
IkReal x971=(x965+x959);
IkReal x972=(x962+x966);
IkReal x973=(x970+x964);
IkReal x974=(x963+x968);
IkReal x975=((((-8.0)*x953))+(((-8.0)*x954*x957))+(((8.0)*x954*x955))+(((-8.0)*r11*x956)));
op[0]=(x971+x969+(((-1.0)*x972))+(((-1.0)*x973)));
op[1]=x975;
op[2]=(x971+x967+(((-1.0)*x974))+(((-1.0)*x972)));
op[3]=((((-16.0)*r11*x956))+(((16.0)*x954*x955))+(((-16.0)*x953))+(((-16.0)*x954*x957)));
op[4]=(x972+x967+(((-1.0)*x974))+(((-1.0)*x971)));
op[5]=x975;
op[6]=(x972+x969+(((-1.0)*x973))+(((-1.0)*x971)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x976=(cj1*cj2);
IkReal x977=((4.0)*cj4);
IkReal x978=(sj1*sj2);
IkReal x979=((4.0)*sj4);
IkReal x980=(r00*sj3);
IkReal x981=(cj3*r02);
IkReal x982=((4.0)*r01*sj3);
IkReal x983=((16.0)*r11*sj4);
IkReal x984=(cj3*cj4*r01);
IkReal x985=((12.0)*cj4*r12);
IkReal x986=((8.0)*r11*sj4);
IkReal x987=(cj3*r00*x977);
IkReal x988=((12.0)*sj4*x981);
IkReal x989=(x979*x981);
IkReal x990=(r10*x976*x979);
IkReal x991=(r10*x978*x979);
IkReal x992=(x976*x985);
IkReal x993=(x978*x985);
IkReal x994=(r12*x976*x977);
IkReal x995=(r12*x977*x978);
IkReal x996=(x991+x982);
IkReal x997=(x990+x987);
IkReal x998=(x995+x989);
IkReal x999=(x993+x988);
IkReal x1000=((((-8.0)*x980))+(((-8.0)*x984))+(((-1.0)*x976*x986))+((x978*x986)));
j5evalpoly[0]=((((htj5*htj5)*(((((-1.0)*x996))+(((-1.0)*x999))+x992+x997))))+((x1000*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x997))+(((-1.0)*x999))+x992+x996))))+(((-1.0)*x996))+(((-1.0)*x998))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x997))+(((-1.0)*x998))+x996+x994))))+((htj5*x1000))+x997+x994+(((htj5*htj5*htj5)*(((((-16.0)*x980))+(((-16.0)*x984))+(((-1.0)*x976*x983))+((x978*x983)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1001=(cj5*sj4);
IkReal x1002=(sj4*sj5);
if( IKabs((((r01*x1002))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1001)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1002))+((cj4*r12))+((r10*x1001)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1002))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1001))))+IKsqr(((((-1.0)*r11*x1002))+((cj4*r12))+((r10*x1001))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1002))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1001))), ((((-1.0)*r11*x1002))+((cj4*r12))+((r10*x1001))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1003=IKcos(j0);
IkReal x1004=IKsin(j0);
IkReal x1005=(r02*sj4);
IkReal x1006=((0.1)*sj5);
IkReal x1007=(cj5*r11);
IkReal x1008=((1.0)*sj3);
IkReal x1009=(r12*sj4);
IkReal x1010=((1.0)*cj3);
IkReal x1011=(r11*sj5);
IkReal x1012=(cj3*cj4);
IkReal x1013=(cj5*r01);
IkReal x1014=(r01*sj5);
IkReal x1015=(r00*sj5);
IkReal x1016=((1.0)*cj2);
IkReal x1017=(r10*sj5);
IkReal x1018=(sj1*sj2);
IkReal x1019=((1.0)*cj4);
IkReal x1020=(cj4*cj5*r00);
IkReal x1021=((1.0)*cj1*sj2);
IkReal x1022=(cj4*cj5*r10);
IkReal x1023=(cj1*x1003);
IkReal x1024=(sj1*x1003);
IkReal x1025=((0.3922)*x1004);
IkReal x1026=((1.0)*cj5*sj4);
IkReal x1027=(cj1*x1004);
evalcond[0]=(x1003+((sj4*x1011))+(((-1.0)*r10*x1026))+(((-1.0)*r12*x1019)));
evalcond[1]=((((-1.0)*x1004))+((sj4*x1014))+(((-1.0)*r02*x1019))+(((-1.0)*r00*x1026)));
evalcond[2]=((((-0.3922)*x1003*x1018))+(((0.3922)*cj2*x1023))+(((-1.0)*px))+(((0.425)*x1023))+(((-0.134)*x1004))+(((-1.0)*r00*x1006))+(((-0.1)*x1013)));
evalcond[3]=((((-1.0)*r10*x1006))+((cj1*cj2*x1025))+(((-1.0)*x1018*x1025))+(((0.134)*x1003))+(((-1.0)*py))+(((0.425)*x1027))+(((-0.1)*x1007)));
evalcond[4]=(((cj3*x1005))+((x1003*x1018))+((x1012*x1014))+((sj3*x1015))+((sj3*x1013))+(((-1.0)*x1016*x1023))+(((-1.0)*x1010*x1020)));
evalcond[5]=(((cj3*x1009))+((sj3*x1007))+((sj3*x1017))+(((-1.0)*x1016*x1027))+((x1004*x1018))+(((-1.0)*x1010*x1022))+((x1011*x1012)));
evalcond[6]=((((-1.0)*cj4*x1008*x1014))+((cj3*x1015))+((cj3*x1013))+(((-1.0)*x1005*x1008))+(((-1.0)*x1003*x1021))+(((-1.0)*x1016*x1024))+((sj3*x1020)));
evalcond[7]=((((-1.0)*cj4*x1008*x1011))+(((-1.0)*x1004*x1021))+((cj3*x1007))+(((-1.0)*sj1*x1004*x1016))+(((-1.0)*x1008*x1009))+((cj3*x1017))+((sj3*x1022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1028=IKPowWithIntegerCheck(cj3,-1);
if(!x1028.valid){
continue;
}
CheckValue<IkReal> x1029=IKPowWithIntegerCheck(r22,-1);
if(!x1029.valid){
continue;
}
sj4array[0]=((-1.0)*(x1028.value)*(x1029.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1030=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1030);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1030);
IkReal x1031=((16.0)*sj4);
IkReal x1032=(cj1*cj2);
IkReal x1033=((4.0)*sj3);
IkReal x1034=((8.0)*sj4);
IkReal x1035=((4.0)*cj4);
IkReal x1036=(sj1*sj2);
IkReal x1037=((4.0)*sj4);
IkReal x1038=(cj3*r02);
IkReal x1039=((16.0)*sj3);
IkReal x1040=((8.0)*sj3);
IkReal x1041=((12.0)*cj4);
IkReal x1042=((12.0)*sj4);
IkReal x1043=(cj3*r12);
IkReal x1044=(r11*x1033);
IkReal x1045=(r01*x1033);
IkReal x1046=(r01*x1036);
IkReal x1047=(cj3*cj4*r01);
IkReal x1048=(cj3*cj4*r11);
IkReal x1049=(cj3*r10*x1035);
IkReal x1050=(x1042*x1043);
IkReal x1051=(cj3*r00*x1035);
IkReal x1052=(x1038*x1042);
IkReal x1053=(r00*x1036*x1037);
IkReal x1054=(r02*x1036*x1041);
IkReal x1055=(r00*x1032*x1037);
IkReal x1056=(r02*x1032*x1041);
IkReal x1057=(r10*x1036*x1037);
IkReal x1058=(r12*x1032*x1041);
IkReal x1059=(r12*x1036*x1041);
IkReal x1060=(r10*x1032*x1037);
IkReal x1061=(x1055+x1044);
IkReal x1062=(x1057+x1045);
IkReal x1063=(x1053+x1049);
IkReal x1064=(x1050+x1056);
IkReal x1065=(x1051+x1060);
IkReal x1066=(x1052+x1059);
j5eval[0]=((((0.5)*(IKabs((x1054+x1063+(((-1.0)*x1061))+(((-1.0)*x1064)))))))+(IKabs(((((-1.0)*r00*x1040))+(((-8.0)*x1047))+((r11*x1034*x1036))+(((-1.0)*r11*x1032*x1034)))))+(((0.5)*(IKabs(((((-1.0)*r10*x1039))+(((-1.0)*x1031*x1046))+((r01*x1031*x1032))+(((-16.0)*x1048)))))))+(((0.5)*(IKabs(((((-1.0)*r11*x1031*x1032))+((r11*x1031*x1036))+(((-16.0)*x1047))+(((-1.0)*r00*x1039)))))))+(((0.5)*(IKabs(((((-1.0)*x1037*x1038))+x1062+(((-1.0)*r12*x1035*x1036))+((r12*x1032*x1035))+(((-1.0)*x1065)))))))+(((0.5)*(IKabs((x1054+x1061+(((-1.0)*x1064))+(((-1.0)*x1063)))))))+(((0.5)*(IKabs((x1058+x1062+(((-1.0)*x1066))+(((-1.0)*x1065)))))))+(((0.5)*(IKabs((x1061+((r02*x1035*x1036))+(((-1.0)*x1037*x1043))+(((-1.0)*r02*x1032*x1035))+(((-1.0)*x1063)))))))+(IKabs(((((-8.0)*x1048))+(((-1.0)*r10*x1040))+(((-1.0)*x1034*x1046))+((r01*x1032*x1034)))))+(((0.5)*(IKabs((x1058+x1065+(((-1.0)*x1066))+(((-1.0)*x1062))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1067=(r10*sj3);
IkReal x1068=(r01*sj4);
IkReal x1069=(cj1*cj2);
IkReal x1070=(cj3*cj4);
IkReal x1071=(sj1*sj2);
IkReal x1072=(cj4*r02);
IkReal x1073=((4.0)*r11*sj3);
IkReal x1074=(cj3*r12*sj4);
IkReal x1075=((4.0)*r00*sj4);
IkReal x1076=((4.0)*r10*x1070);
IkReal x1077=((12.0)*x1074);
IkReal x1078=((4.0)*x1074);
IkReal x1079=(x1069*x1075);
IkReal x1080=(x1071*x1075);
IkReal x1081=((12.0)*x1071*x1072);
IkReal x1082=((12.0)*x1069*x1072);
IkReal x1083=((4.0)*x1071*x1072);
IkReal x1084=((4.0)*x1069*x1072);
IkReal x1085=(x1079+x1073);
IkReal x1086=(x1076+x1080);
IkReal x1087=(x1078+x1084);
IkReal x1088=(x1077+x1082);
IkReal x1089=((((-8.0)*x1068*x1071))+(((8.0)*x1068*x1069))+(((-8.0)*x1067))+(((-8.0)*r11*x1070)));
op[0]=(x1085+x1083+(((-1.0)*x1086))+(((-1.0)*x1087)));
op[1]=x1089;
op[2]=(x1085+x1081+(((-1.0)*x1086))+(((-1.0)*x1088)));
op[3]=((((16.0)*x1068*x1069))+(((-16.0)*x1068*x1071))+(((-16.0)*r11*x1070))+(((-16.0)*x1067)));
op[4]=(x1086+x1081+(((-1.0)*x1085))+(((-1.0)*x1088)));
op[5]=x1089;
op[6]=(x1086+x1083+(((-1.0)*x1085))+(((-1.0)*x1087)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1090=(cj1*cj2);
IkReal x1091=((4.0)*cj4);
IkReal x1092=(sj1*sj2);
IkReal x1093=((4.0)*sj4);
IkReal x1094=(r00*sj3);
IkReal x1095=(cj3*r02);
IkReal x1096=((4.0)*r01*sj3);
IkReal x1097=((16.0)*r11*sj4);
IkReal x1098=(cj3*cj4*r01);
IkReal x1099=((12.0)*cj4*r12);
IkReal x1100=((8.0)*r11*sj4);
IkReal x1101=(cj3*r00*x1091);
IkReal x1102=((12.0)*sj4*x1095);
IkReal x1103=(x1093*x1095);
IkReal x1104=(r10*x1090*x1093);
IkReal x1105=(r10*x1092*x1093);
IkReal x1106=(x1090*x1099);
IkReal x1107=(x1092*x1099);
IkReal x1108=(r12*x1090*x1091);
IkReal x1109=(r12*x1091*x1092);
IkReal x1110=(x1105+x1096);
IkReal x1111=(x1104+x1101);
IkReal x1112=(x1103+x1109);
IkReal x1113=(x1107+x1102);
IkReal x1114=(((x1092*x1100))+(((-1.0)*x1090*x1100))+(((-8.0)*x1098))+(((-8.0)*x1094)));
j5evalpoly[0]=(x1108+x1111+(((htj5*htj5*htj5)*(((((-1.0)*x1090*x1097))+(((-16.0)*x1094))+(((-16.0)*x1098))+((x1092*x1097))))))+(((htj5*htj5*htj5*htj5)*((x1106+x1110+(((-1.0)*x1113))+(((-1.0)*x1111))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1108+x1110+(((-1.0)*x1112))+(((-1.0)*x1111))))))+(((htj5*htj5)*((x1106+x1111+(((-1.0)*x1113))+(((-1.0)*x1110))))))+(((-1.0)*x1112))+(((-1.0)*x1110))+((x1114*(htj5*htj5*htj5*htj5*htj5)))+((htj5*x1114)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1115=(cj5*sj4);
IkReal x1116=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x1116))+(((-1.0)*r00*x1115)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1116))+((cj4*r12))+((r10*x1115)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x1116))+(((-1.0)*r00*x1115))))+IKsqr(((((-1.0)*r11*x1116))+((cj4*r12))+((r10*x1115))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x1116))+(((-1.0)*r00*x1115))), ((((-1.0)*r11*x1116))+((cj4*r12))+((r10*x1115))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1117=IKcos(j0);
IkReal x1118=IKsin(j0);
IkReal x1119=(r02*sj4);
IkReal x1120=((0.1)*sj5);
IkReal x1121=(cj5*r11);
IkReal x1122=((1.0)*sj3);
IkReal x1123=(r12*sj4);
IkReal x1124=((1.0)*cj3);
IkReal x1125=(r11*sj5);
IkReal x1126=(cj3*cj4);
IkReal x1127=(cj5*r01);
IkReal x1128=(r01*sj5);
IkReal x1129=(r00*sj5);
IkReal x1130=((1.0)*cj2);
IkReal x1131=(r10*sj5);
IkReal x1132=(sj1*sj2);
IkReal x1133=((1.0)*cj4);
IkReal x1134=(cj4*cj5*r00);
IkReal x1135=((1.0)*cj1*sj2);
IkReal x1136=(cj4*cj5*r10);
IkReal x1137=(cj1*x1117);
IkReal x1138=(sj1*x1117);
IkReal x1139=((0.3922)*x1118);
IkReal x1140=((1.0)*cj5*sj4);
IkReal x1141=(cj1*x1118);
evalcond[0]=(x1117+(((-1.0)*r12*x1133))+((sj4*x1125))+(((-1.0)*r10*x1140)));
evalcond[1]=((((-1.0)*r00*x1140))+((sj4*x1128))+(((-1.0)*x1118))+(((-1.0)*r02*x1133)));
evalcond[2]=((((-0.134)*x1118))+(((-0.1)*x1127))+(((-1.0)*px))+(((0.425)*x1137))+(((-0.3922)*x1117*x1132))+(((-1.0)*r00*x1120))+(((0.3922)*cj2*x1137)));
evalcond[3]=((((-0.1)*x1121))+(((0.425)*x1141))+(((-1.0)*r10*x1120))+(((-1.0)*py))+(((-1.0)*x1132*x1139))+((cj1*cj2*x1139))+(((0.134)*x1117)));
evalcond[4]=((((-1.0)*x1130*x1137))+((sj3*x1129))+((sj3*x1127))+((x1117*x1132))+((cj3*x1119))+(((-1.0)*x1124*x1134))+((x1126*x1128)));
evalcond[5]=(((x1125*x1126))+((sj3*x1121))+(((-1.0)*x1130*x1141))+((sj3*x1131))+(((-1.0)*x1124*x1136))+((x1118*x1132))+((cj3*x1123)));
evalcond[6]=((((-1.0)*x1117*x1135))+(((-1.0)*x1130*x1138))+(((-1.0)*cj4*x1122*x1128))+(((-1.0)*x1119*x1122))+((sj3*x1134))+((cj3*x1127))+((cj3*x1129)));
evalcond[7]=(((cj3*x1131))+(((-1.0)*x1122*x1123))+(((-1.0)*sj1*x1118*x1130))+(((-1.0)*cj4*x1122*x1125))+(((-1.0)*x1118*x1135))+((sj3*x1136))+((cj3*x1121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1142=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1142);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1142);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1143=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1143);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1143);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1144=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1144);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1144);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1145=IKPowWithIntegerCheck(r22,-1);
if(!x1145.valid){
continue;
}
sj4array[0]=((-1.0)*(x1145.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1146=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1146);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1146);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1148 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1148.valid){
continue;
}
IkReal x1147=x1148.value;
j5array[0]=((-1.0)*x1147);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1147)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1149=(cj5*sj4);
IkReal x1150=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1149))+((r01*x1150)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1150))+((r10*x1149)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1149))+((r01*x1150))))+IKsqr(((((-1.0)*r11*x1150))+((r10*x1149))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1149))+((r01*x1150))), ((((-1.0)*r11*x1150))+((r10*x1149))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1151=IKcos(j0);
IkReal x1152=IKsin(j0);
IkReal x1153=((0.1)*sj5);
IkReal x1154=(cj5*r11);
IkReal x1155=(cj5*r01);
IkReal x1156=(sj4*sj5);
IkReal x1157=((0.425)*cj1);
IkReal x1158=((1.0)*cj1*sj2);
IkReal x1159=((1.0)*cj2*sj1);
IkReal x1160=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r10*x1160))+x1151+((r11*x1156)));
evalcond[1]=((((-1.0)*x1152))+(((-1.0)*r00*x1160))+((r01*x1156)));
evalcond[2]=(((r00*sj5))+x1155+(((-1.0)*x1151*x1159))+(((-1.0)*x1151*x1158)));
evalcond[3]=(x1154+((r10*sj5))+(((-1.0)*x1152*x1159))+(((-1.0)*x1152*x1158)));
evalcond[4]=((((-1.0)*r00*x1153))+(((-0.134)*x1152))+(((-1.0)*px))+(((-0.1)*x1155))+((x1151*x1157)));
evalcond[5]=((((0.134)*x1151))+((x1152*x1157))+(((-1.0)*py))+(((-0.1)*x1154))+(((-1.0)*r10*x1153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1161=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1161);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1161);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1162=IKPowWithIntegerCheck(r22,-1);
if(!x1162.valid){
continue;
}
sj4array[0]=((x1162.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1163=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1163);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1163);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1165 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1165.valid){
continue;
}
IkReal x1164=x1165.value;
j5array[0]=((-1.0)*x1164);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1164)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1166=(cj5*sj4);
IkReal x1167=(sj4*sj5);
if( IKabs((((r01*x1167))+(((-1.0)*r00*x1166)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1166))+(((-1.0)*r11*x1167)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1167))+(((-1.0)*r00*x1166))))+IKsqr((((r10*x1166))+(((-1.0)*r11*x1167))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1167))+(((-1.0)*r00*x1166))), (((r10*x1166))+(((-1.0)*r11*x1167))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1168=IKcos(j0);
IkReal x1169=IKsin(j0);
IkReal x1170=(r00*sj5);
IkReal x1171=(cj5*r11);
IkReal x1172=(sj4*sj5);
IkReal x1173=(r10*sj5);
IkReal x1174=((0.425)*cj1);
IkReal x1175=((1.0)*cj5);
IkReal x1176=((1.0)*cj1*sj2);
IkReal x1177=((1.0)*cj2*sj1);
evalcond[0]=(x1168+(((-1.0)*r10*sj4*x1175))+((r11*x1172)));
evalcond[1]=((((-1.0)*r00*sj4*x1175))+((r01*x1172))+(((-1.0)*x1169)));
evalcond[2]=(((x1168*x1174))+(((-0.1)*cj5*r01))+(((-1.0)*px))+(((-0.134)*x1169))+(((-0.1)*x1170)));
evalcond[3]=((((-1.0)*py))+(((-0.1)*x1171))+(((-0.1)*x1173))+(((0.134)*x1168))+((x1169*x1174)));
evalcond[4]=((((-1.0)*x1168*x1177))+(((-1.0)*x1168*x1176))+(((-1.0)*r01*x1175))+(((-1.0)*x1170)));
evalcond[5]=((((-1.0)*x1169*x1176))+(((-1.0)*x1169*x1177))+(((-1.0)*x1171))+(((-1.0)*x1173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1178=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1178);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1178);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1179=IKPowWithIntegerCheck(r22,-1);
if(!x1179.valid){
continue;
}
sj4array[0]=((x1179.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1180=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1180);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1180);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1182 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1182.valid){
continue;
}
IkReal x1181=x1182.value;
j5array[0]=((-1.0)*x1181);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1181)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1183=(cj5*sj4);
IkReal x1184=(sj4*sj5);
if( IKabs((((r01*x1184))+(((-1.0)*r00*x1183)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1183))+(((-1.0)*r11*x1184)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1184))+(((-1.0)*r00*x1183))))+IKsqr((((r10*x1183))+(((-1.0)*r11*x1184))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1184))+(((-1.0)*r00*x1183))), (((r10*x1183))+(((-1.0)*r11*x1184))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1185=IKcos(j0);
IkReal x1186=IKsin(j0);
IkReal x1187=((0.1)*sj5);
IkReal x1188=(cj5*r11);
IkReal x1189=(cj5*r01);
IkReal x1190=(sj4*sj5);
IkReal x1191=(cj1*cj2);
IkReal x1192=(sj1*sj2);
IkReal x1193=(cj1*x1185);
IkReal x1194=((0.3922)*x1186);
IkReal x1195=((1.0)*x1186);
IkReal x1196=((1.0)*cj5*sj4);
evalcond[0]=(x1185+(((-1.0)*r10*x1196))+((r11*x1190)));
evalcond[1]=((((-1.0)*r00*x1196))+((r01*x1190))+(((-1.0)*x1195)));
evalcond[2]=(((r00*sj5))+x1189+((x1185*x1192))+(((-1.0)*x1185*x1191)));
evalcond[3]=(x1188+(((-1.0)*x1191*x1195))+((x1186*x1192))+((r10*sj5)));
evalcond[4]=((((-0.1)*x1189))+(((-0.3922)*x1185*x1192))+(((0.425)*x1193))+(((-1.0)*px))+(((-0.134)*x1186))+(((0.3922)*x1185*x1191))+(((-1.0)*r00*x1187)));
evalcond[5]=((((0.134)*x1185))+(((-0.1)*x1188))+(((-1.0)*r10*x1187))+(((-1.0)*py))+(((0.425)*cj1*x1186))+(((-1.0)*x1192*x1194))+((x1191*x1194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1197=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1197);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1197);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1198=IKPowWithIntegerCheck(r22,-1);
if(!x1198.valid){
continue;
}
sj4array[0]=((-1.0)*(x1198.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1199=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1199);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1199);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1201 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1201.valid){
continue;
}
IkReal x1200=x1201.value;
j5array[0]=((-1.0)*x1200);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1200)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1202=(cj5*sj4);
IkReal x1203=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1202))+((r01*x1203)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1202))+(((-1.0)*r11*x1203)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1202))+((r01*x1203))))+IKsqr((((r10*x1202))+(((-1.0)*r11*x1203))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1202))+((r01*x1203))), (((r10*x1202))+(((-1.0)*r11*x1203))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1204=IKcos(j0);
IkReal x1205=IKsin(j0);
IkReal x1206=((0.1)*sj5);
IkReal x1207=(cj5*r11);
IkReal x1208=(sj4*sj5);
IkReal x1209=((1.0)*sj5);
IkReal x1210=(cj1*cj2);
IkReal x1211=(sj1*sj2);
IkReal x1212=((1.0)*cj5);
IkReal x1213=((0.425)*cj1);
IkReal x1214=((0.3922)*x1205);
IkReal x1215=((1.0)*x1205);
IkReal x1216=((0.3922)*x1204);
evalcond[0]=(x1204+((r11*x1208))+(((-1.0)*r10*sj4*x1212)));
evalcond[1]=(((r01*x1208))+(((-1.0)*x1215))+(((-1.0)*r00*sj4*x1212)));
evalcond[2]=(((x1204*x1211))+(((-1.0)*r01*x1212))+(((-1.0)*r00*x1209))+(((-1.0)*x1204*x1210)));
evalcond[3]=((((-1.0)*r10*x1209))+(((-1.0)*x1210*x1215))+(((-1.0)*x1207))+((x1205*x1211)));
evalcond[4]=(((x1210*x1216))+((x1204*x1213))+(((-0.1)*cj5*r01))+(((-1.0)*px))+(((-1.0)*r00*x1206))+(((-1.0)*x1211*x1216))+(((-0.134)*x1205)));
evalcond[5]=(((x1210*x1214))+(((-0.1)*x1207))+(((-1.0)*r10*x1206))+(((-1.0)*py))+(((0.134)*x1204))+(((-1.0)*x1211*x1214))+((x1205*x1213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1217=IKPowWithIntegerCheck(r22,-1);
if(!x1217.valid){
continue;
}
CheckValue<IkReal> x1218=IKPowWithIntegerCheck(sj3,-1);
if(!x1218.valid){
continue;
}
sj4array[0]=((x1217.value)*(x1218.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1219=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1219);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1219);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1220=((4.0)*r01);
IkReal x1221=((16.0)*r00);
IkReal x1222=(cj3*sj2);
IkReal x1223=((8.0)*r00);
IkReal x1224=(cj2*cj3);
IkReal x1225=(cj4*r01);
IkReal x1226=((16.0)*cj1);
IkReal x1227=((8.0)*sj1);
IkReal x1228=((16.0)*sj1);
IkReal x1229=((8.0)*cj1);
IkReal x1230=(sj2*sj3);
IkReal x1231=(cj2*sj3);
IkReal x1232=(sj1*x1231);
IkReal x1233=((4.0)*cj4*r00);
IkReal x1234=(((x1220*x1232))+((sj1*x1230*x1233))+((cj1*x1220*x1230))+((sj1*x1220*x1222)));
IkReal x1235=(((sj1*x1224*x1233))+((cj1*x1231*x1233))+((cj1*x1222*x1233))+((cj1*x1220*x1224)));
IkReal x1236=(x1235+(((-1.0)*x1234)));
IkReal x1237=(((x1222*x1225*x1229))+((x1223*x1232))+(((-1.0)*x1225*x1227*x1230))+((cj1*x1223*x1230))+(((-1.0)*cj1*x1223*x1224))+((x1225*x1229*x1231))+((sj1*x1222*x1223))+((x1224*x1225*x1227)));
IkReal x1238=(x1234+(((-1.0)*x1235)));
op[0]=x1236;
op[1]=x1237;
op[2]=x1236;
op[3]=((((-1.0)*cj1*x1221*x1224))+((x1222*x1225*x1226))+(((-1.0)*x1225*x1228*x1230))+((x1221*x1232))+((x1224*x1225*x1228))+((cj1*x1221*x1230))+((sj1*x1221*x1222))+((x1225*x1226*x1231)));
op[4]=x1238;
op[5]=x1237;
op[6]=x1238;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1239=(cj5*sj4);
IkReal x1240=(sj4*sj5);
if( IKabs((((r01*x1240))+(((-1.0)*r00*x1239)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1240))+((r10*x1239)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1240))+(((-1.0)*r00*x1239))))+IKsqr(((((-1.0)*r11*x1240))+((r10*x1239))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1240))+(((-1.0)*r00*x1239))), ((((-1.0)*r11*x1240))+((r10*x1239))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1241=IKcos(j0);
IkReal x1242=IKsin(j0);
IkReal x1243=((0.1)*sj5);
IkReal x1244=(cj5*r11);
IkReal x1245=((1.0)*cj3);
IkReal x1246=((1.0)*sj2);
IkReal x1247=(r11*sj5);
IkReal x1248=(cj5*r01);
IkReal x1249=(r01*sj5);
IkReal x1250=(cj3*cj4);
IkReal x1251=(r00*sj5);
IkReal x1252=((1.0)*cj2);
IkReal x1253=((0.3922)*cj2);
IkReal x1254=(r10*sj5);
IkReal x1255=((0.3922)*sj2);
IkReal x1256=(cj4*cj5*r00);
IkReal x1257=(cj1*x1242);
IkReal x1258=(cj1*x1241);
IkReal x1259=(cj4*cj5*r10);
IkReal x1260=((1.0)*cj4*sj3);
IkReal x1261=(sj1*x1241);
IkReal x1262=((1.0)*cj5*sj4);
IkReal x1263=(sj1*x1242);
evalcond[0]=((((-1.0)*r10*x1262))+x1241+((sj4*x1247)));
evalcond[1]=((((-1.0)*x1242))+(((-1.0)*r00*x1262))+((sj4*x1249)));
evalcond[2]=((((-1.0)*x1252*x1258))+((sj3*x1248))+(((-1.0)*x1245*x1256))+((x1249*x1250))+((sj3*x1251))+((sj2*x1261)));
evalcond[3]=(((x1247*x1250))+(((-1.0)*x1252*x1257))+((sj3*x1244))+(((-1.0)*x1245*x1259))+((sj3*x1254))+((sj2*x1263)));
evalcond[4]=((((-1.0)*x1249*x1260))+((cj3*x1251))+(((-1.0)*x1252*x1261))+(((-1.0)*x1246*x1258))+((sj3*x1256))+((cj3*x1248)));
evalcond[5]=(((cj3*x1254))+(((-1.0)*x1247*x1260))+(((-1.0)*x1252*x1263))+(((-1.0)*x1246*x1257))+((sj3*x1259))+((cj3*x1244)));
evalcond[6]=((((0.425)*x1258))+(((-1.0)*x1255*x1261))+((x1253*x1258))+(((-0.1)*x1248))+(((-1.0)*px))+(((-0.134)*x1242))+(((-1.0)*r00*x1243)));
evalcond[7]=((((0.425)*x1257))+(((-1.0)*x1255*x1263))+((x1253*x1257))+(((-0.1)*x1244))+(((-1.0)*py))+(((-1.0)*r10*x1243))+(((0.134)*x1241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1264=IKPowWithIntegerCheck(cj3,-1);
if(!x1264.valid){
continue;
}
CheckValue<IkReal> x1265=IKPowWithIntegerCheck(r22,-1);
if(!x1265.valid){
continue;
}
sj4array[0]=((-1.0)*(x1264.value)*(x1265.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1266=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1266);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1266);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1267=((4.0)*r01);
IkReal x1268=((16.0)*r00);
IkReal x1269=(cj3*sj2);
IkReal x1270=((8.0)*r00);
IkReal x1271=(cj2*cj3);
IkReal x1272=(cj4*r01);
IkReal x1273=((16.0)*cj1);
IkReal x1274=((8.0)*sj1);
IkReal x1275=((16.0)*sj1);
IkReal x1276=((8.0)*cj1);
IkReal x1277=(sj2*sj3);
IkReal x1278=(cj2*sj3);
IkReal x1279=(sj1*x1278);
IkReal x1280=((4.0)*cj4*r00);
IkReal x1281=(((cj1*x1267*x1277))+((x1267*x1279))+((sj1*x1267*x1269))+((sj1*x1277*x1280)));
IkReal x1282=(((cj1*x1267*x1271))+((cj1*x1278*x1280))+((cj1*x1269*x1280))+((sj1*x1271*x1280)));
IkReal x1283=(x1282+(((-1.0)*x1281)));
IkReal x1284=((((-1.0)*x1272*x1274*x1277))+((sj1*x1269*x1270))+(((-1.0)*cj1*x1270*x1271))+((x1271*x1272*x1274))+((x1269*x1272*x1276))+((x1270*x1279))+((x1272*x1276*x1278))+((cj1*x1270*x1277)));
IkReal x1285=(x1281+(((-1.0)*x1282)));
op[0]=x1283;
op[1]=x1284;
op[2]=x1283;
op[3]=((((-1.0)*cj1*x1268*x1271))+((cj1*x1268*x1277))+((x1271*x1272*x1275))+(((-1.0)*x1272*x1275*x1277))+((x1269*x1272*x1273))+((x1268*x1279))+((x1272*x1273*x1278))+((sj1*x1268*x1269)));
op[4]=x1285;
op[5]=x1284;
op[6]=x1285;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1286=(cj5*sj4);
IkReal x1287=(sj4*sj5);
if( IKabs((((r01*x1287))+(((-1.0)*r00*x1286)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1286))+(((-1.0)*r11*x1287)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1287))+(((-1.0)*r00*x1286))))+IKsqr((((r10*x1286))+(((-1.0)*r11*x1287))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1287))+(((-1.0)*r00*x1286))), (((r10*x1286))+(((-1.0)*r11*x1287))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1288=IKcos(j0);
IkReal x1289=IKsin(j0);
IkReal x1290=((0.1)*sj5);
IkReal x1291=(cj5*r11);
IkReal x1292=((1.0)*cj3);
IkReal x1293=((1.0)*sj2);
IkReal x1294=(r11*sj5);
IkReal x1295=(cj5*r01);
IkReal x1296=(r01*sj5);
IkReal x1297=(cj3*cj4);
IkReal x1298=(r00*sj5);
IkReal x1299=((1.0)*cj2);
IkReal x1300=((0.3922)*cj2);
IkReal x1301=(r10*sj5);
IkReal x1302=((0.3922)*sj2);
IkReal x1303=(cj4*cj5*r00);
IkReal x1304=(cj1*x1289);
IkReal x1305=(cj1*x1288);
IkReal x1306=(cj4*cj5*r10);
IkReal x1307=((1.0)*cj4*sj3);
IkReal x1308=(sj1*x1288);
IkReal x1309=((1.0)*cj5*sj4);
IkReal x1310=(sj1*x1289);
evalcond[0]=(x1288+(((-1.0)*r10*x1309))+((sj4*x1294)));
evalcond[1]=((((-1.0)*x1289))+(((-1.0)*r00*x1309))+((sj4*x1296)));
evalcond[2]=(((x1296*x1297))+((sj2*x1308))+((sj3*x1295))+((sj3*x1298))+(((-1.0)*x1299*x1305))+(((-1.0)*x1292*x1303)));
evalcond[3]=(((sj2*x1310))+((sj3*x1291))+((sj3*x1301))+(((-1.0)*x1299*x1304))+((x1294*x1297))+(((-1.0)*x1292*x1306)));
evalcond[4]=(((cj3*x1298))+((cj3*x1295))+((sj3*x1303))+(((-1.0)*x1299*x1308))+(((-1.0)*x1296*x1307))+(((-1.0)*x1293*x1305)));
evalcond[5]=(((cj3*x1291))+((sj3*x1306))+(((-1.0)*x1299*x1310))+(((-1.0)*x1294*x1307))+((cj3*x1301))+(((-1.0)*x1293*x1304)));
evalcond[6]=((((0.425)*x1305))+(((-1.0)*r00*x1290))+((x1300*x1305))+(((-1.0)*px))+(((-0.1)*x1295))+(((-1.0)*x1302*x1308))+(((-0.134)*x1289)));
evalcond[7]=((((0.425)*x1304))+((x1300*x1304))+(((-1.0)*py))+(((0.134)*x1288))+(((-0.1)*x1291))+(((-1.0)*x1302*x1310))+(((-1.0)*r10*x1290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1313 = IKatan2WithCheck(IkReal(((-0.1)*r21)),IkReal(((-0.1)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1313.valid){
continue;
}
IkReal x1311=((1.0)*(x1313.value));
if((((((0.01)*(r20*r20)))+(((0.01)*(r21*r21))))) < -0.00001)
continue;
CheckValue<IkReal> x1314=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.01)*(r20*r20)))+(((0.01)*(r21*r21)))))),-1);
if(!x1314.valid){
continue;
}
if( (((-1.0)*(x1314.value)*(((((-0.3922)*cj2*sj1))+(((-0.3922)*cj1*sj2))+(((-1.0)*pz))+(((-0.425)*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1314.value)*(((((-0.3922)*cj2*sj1))+(((-0.3922)*cj1*sj2))+(((-1.0)*pz))+(((-0.425)*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1312=((-1.0)*(IKasin(((-1.0)*(x1314.value)*(((((-0.3922)*cj2*sj1))+(((-0.3922)*cj1*sj2))+(((-1.0)*pz))+(((-0.425)*sj1))))))));
j5array[0]=((((-1.0)*x1311))+(((-1.0)*x1312)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1311))+(((1.0)*x1312)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1315=cj5*cj5;
IkReal x1316=r21*r21;
IkReal x1317=(sj3*x1315);
IkReal x1318=(((sj3*(r22*r22)))+((sj3*x1316))+(((-2.0)*cj5*r20*r21*sj3*sj5))+(((-1.0)*x1316*x1317))+((x1317*(r20*r20))));
j4eval[0]=x1318;
j4eval[1]=IKsign(x1318);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1319=cj5*cj5;
IkReal x1320=r21*r21;
IkReal x1321=((1.0)*cj3);
IkReal x1322=(cj3*x1319);
IkReal x1323=((((-1.0)*x1321*(r22*r22)))+(((-1.0)*x1319*x1321*(r20*r20)))+((x1320*x1322))+(((-1.0)*x1320*x1321))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1323;
j4eval[1]=IKsign(x1323);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1324=cj1*cj1;
IkReal x1325=cj2*cj2;
IkReal x1326=(cj1*sj1*sj2);
IkReal x1327=(cj2*x1324);
IkReal x1328=(x1324*x1325);
j0eval[0]=((6.40858881606437)+(((-12.4372485464943)*x1326))+(((11.4773855998472)*x1328))+x1324+(((-5.73869279992359)*x1325))+(((-11.4773855998472)*cj2*x1326))+(((12.4372485464943)*x1327)));
j0eval[1]=IKsign(((42944.21)+(((76910.42)*x1328))+(((83342.5)*x1327))+(((6701.04)*x1324))+(((-76910.42)*cj2*x1326))+(((-83342.5)*x1326))+(((-38455.21)*x1325))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1329=((1.0)*cj5);
IkReal x1330=((1.0)*sj5);
IkReal x1331=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1331;
j0eval[1]=((IKabs(((((-1.0)*r11*x1329))+(((-1.0)*r10*x1330)))))+(IKabs(((((-1.0)*r01*x1329))+(((-1.0)*r00*x1330))))));
j0eval[2]=IKsign(x1331);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1332=cj5*cj5;
IkReal x1333=r21*r21;
IkReal x1334=(sj1*sj2);
IkReal x1335=(r21*sj5);
IkReal x1336=(cj5*r20);
IkReal x1337=(cj1*cj2);
IkReal x1338=(x1333+((x1332*(r20*r20)))+(((-1.0)*x1332*x1333))+(r22*r22)+(((-2.0)*x1335*x1336)));
j4eval[0]=x1338;
j4eval[1]=IKsign(x1338);
j4eval[2]=((IKabs(((((-1.0)*r22*x1337))+((r22*x1334)))))+(IKabs((((x1336*x1337))+(((-1.0)*x1335*x1337))+((x1334*x1335))+(((-1.0)*x1334*x1336))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.67478761815078)*px))+(((2.14018460980658)*py))), ((((0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1339=IKcos(j0);
IkReal x1340=IKsin(j0);
evalcond[0]=((((0.425)*x1339))+(((-1.0)*px))+(((-0.134)*x1340)));
evalcond[1]=((((-1.0)*py))+(((0.134)*x1339))+(((0.425)*x1340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1341=((1.0)*cj5);
IkReal x1342=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1341)));
j4eval[0]=x1342;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1341)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1342);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1343=((1.0)*cj5);
IkReal x1344=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1343)));
j4eval[0]=x1344;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1343)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1344);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1345=cj5*cj5;
IkReal x1346=((1.0)*sj5);
IkReal x1347=(cj5*r20);
IkReal x1348=(r11*r21);
IkReal x1349=(x1348+(((-1.0)*cj5*r10*r21*x1346))+((r12*r22))+((r10*r20*x1345))+(((-1.0)*x1345*x1348))+(((-1.0)*r11*x1346*x1347)));
j4eval[0]=x1349;
j4eval[1]=IKsign(x1349);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*x1347))+(((-1.0)*cj0*r21*x1346))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1350=cj5*cj5;
IkReal x1351=((1.0)*sj5);
IkReal x1352=(cj5*r20);
IkReal x1353=(r11*r21);
CheckValue<IkReal> x1354 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1351))+((cj0*x1352)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1354.valid){
continue;
}
CheckValue<IkReal> x1355=IKPowWithIntegerCheck(IKsign((x1353+(((-1.0)*r11*x1351*x1352))+((r10*r20*x1350))+(((-1.0)*cj5*r10*r21*x1351))+(((-1.0)*x1350*x1353))+((r12*r22)))),-1);
if(!x1355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1354.value)+(((1.5707963267949)*(x1355.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1356=IKsin(j4);
IkReal x1357=IKcos(j4);
IkReal x1358=((1.0)*sj0);
IkReal x1359=(cj5*r00);
IkReal x1360=(r11*sj5);
IkReal x1361=(cj5*r10);
IkReal x1362=(r21*sj5);
IkReal x1363=(cj5*r20);
IkReal x1364=(r01*sj5);
IkReal x1365=((1.0)*x1357);
IkReal x1366=((1.0)*x1356);
evalcond[0]=(((x1356*x1362))+(((-1.0)*r22*x1365))+(((-1.0)*x1363*x1366)));
evalcond[1]=(((x1357*x1363))+(((-1.0)*r22*x1366))+(((-1.0)*x1362*x1365)));
evalcond[2]=(((x1356*x1360))+(((-1.0)*r12*x1365))+cj0+(((-1.0)*x1361*x1366)));
evalcond[3]=(((x1356*x1364))+(((-1.0)*x1358))+(((-1.0)*r02*x1365))+(((-1.0)*x1359*x1366)));
evalcond[4]=((((-1.0)*x1364*x1365))+((x1357*x1359))+(((-1.0)*r02*x1366))+(((-1.0)*cj0)));
evalcond[5]=(((x1357*x1361))+(((-1.0)*x1358))+(((-1.0)*r12*x1366))+(((-1.0)*x1360*x1365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1367=((1.0)*cj5);
CheckValue<IkReal> x1368 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1367)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1368.valid){
continue;
}
CheckValue<IkReal> x1369=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1367))+(((-1.0)*r10*sj5)))),-1);
if(!x1369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1368.value)+(((1.5707963267949)*(x1369.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1370=IKsin(j4);
IkReal x1371=IKcos(j4);
IkReal x1372=((1.0)*sj0);
IkReal x1373=(cj5*r00);
IkReal x1374=(r11*sj5);
IkReal x1375=(cj5*r10);
IkReal x1376=(r21*sj5);
IkReal x1377=(cj5*r20);
IkReal x1378=(r01*sj5);
IkReal x1379=((1.0)*x1371);
IkReal x1380=((1.0)*x1370);
evalcond[0]=((((-1.0)*r22*x1379))+(((-1.0)*x1377*x1380))+((x1370*x1376)));
evalcond[1]=(((x1371*x1377))+(((-1.0)*x1376*x1379))+(((-1.0)*r22*x1380)));
evalcond[2]=(cj0+(((-1.0)*x1375*x1380))+(((-1.0)*r12*x1379))+((x1370*x1374)));
evalcond[3]=((((-1.0)*x1373*x1380))+(((-1.0)*r02*x1379))+(((-1.0)*x1372))+((x1370*x1378)));
evalcond[4]=((((-1.0)*r02*x1380))+((x1371*x1373))+(((-1.0)*x1378*x1379))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1380))+(((-1.0)*x1372))+(((-1.0)*x1374*x1379))+((x1371*x1375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1381=((1.0)*cj5);
CheckValue<IkReal> x1382=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1381)))),-1);
if(!x1382.valid){
continue;
}
CheckValue<IkReal> x1383 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1381))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1383.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1382.value)))+(x1383.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1384=IKsin(j4);
IkReal x1385=IKcos(j4);
IkReal x1386=((1.0)*sj0);
IkReal x1387=(cj5*r00);
IkReal x1388=(r11*sj5);
IkReal x1389=(cj5*r10);
IkReal x1390=(r21*sj5);
IkReal x1391=(cj5*r20);
IkReal x1392=(r01*sj5);
IkReal x1393=((1.0)*x1385);
IkReal x1394=((1.0)*x1384);
evalcond[0]=((((-1.0)*x1391*x1394))+(((-1.0)*r22*x1393))+((x1384*x1390)));
evalcond[1]=((((-1.0)*x1390*x1393))+(((-1.0)*r22*x1394))+((x1385*x1391)));
evalcond[2]=((((-1.0)*r12*x1393))+(((-1.0)*x1389*x1394))+cj0+((x1384*x1388)));
evalcond[3]=((((-1.0)*x1386))+(((-1.0)*r02*x1393))+((x1384*x1392))+(((-1.0)*x1387*x1394)));
evalcond[4]=((((-1.0)*x1392*x1393))+(((-1.0)*r02*x1394))+((x1385*x1387))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1386))+(((-1.0)*r12*x1394))+(((-1.0)*x1388*x1393))+((x1385*x1389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.67478761815078)*px))+(((2.14018460980658)*py))), ((((0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1395=IKcos(j0);
IkReal x1396=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((0.425)*x1395))+(((-0.134)*x1396)));
evalcond[1]=((((0.134)*x1395))+(((-1.0)*py))+(((0.425)*x1396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1397=((1.0)*cj5);
IkReal x1398=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1397)));
j4eval[0]=x1398;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1397))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1398);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1399=cj5*cj5;
IkReal x1400=((1.0)*r21);
IkReal x1401=(cj5*sj5);
IkReal x1402=((1.0)*r20);
IkReal x1403=((((-1.0)*r01*x1399*x1400))+(((-1.0)*r01*x1401*x1402))+((r01*r21))+(((-1.0)*r00*x1400*x1401))+((r02*r22))+((r00*r20*x1399)));
j4eval[0]=x1403;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1402)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1403);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1404=cj5*cj5;
IkReal x1405=(r21*sj5);
IkReal x1406=(r11*r21);
IkReal x1407=((1.0)*cj5*r20);
IkReal x1408=((((-1.0)*cj5*r10*x1405))+(((-1.0)*r11*sj5*x1407))+((r10*r20*x1404))+((r12*r22))+x1406+(((-1.0)*x1404*x1406)));
j4eval[0]=x1408;
j4eval[1]=((IKabs(((((-1.0)*sj0*x1407))+((sj0*x1405)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1408);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1409=cj5*cj5;
IkReal x1410=(r21*sj5);
IkReal x1411=(r11*r21);
IkReal x1412=((1.0)*cj5*r20);
CheckValue<IkReal> x1413 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1412))+((sj0*x1410)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1413.valid){
continue;
}
CheckValue<IkReal> x1414=IKPowWithIntegerCheck(IKsign((((r10*r20*x1409))+(((-1.0)*cj5*r10*x1410))+((r12*r22))+(((-1.0)*r11*sj5*x1412))+x1411+(((-1.0)*x1409*x1411)))),-1);
if(!x1414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1413.value)+(((1.5707963267949)*(x1414.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1415=IKsin(j4);
IkReal x1416=IKcos(j4);
IkReal x1417=(r11*sj5);
IkReal x1418=(cj5*r00);
IkReal x1419=(cj5*r10);
IkReal x1420=(r21*sj5);
IkReal x1421=(cj5*r20);
IkReal x1422=(r01*sj5);
IkReal x1423=((1.0)*x1416);
IkReal x1424=((1.0)*x1415);
evalcond[0]=((((-1.0)*x1421*x1424))+((x1415*x1420))+(((-1.0)*r22*x1423)));
evalcond[1]=((((-1.0)*x1420*x1423))+(((-1.0)*r22*x1424))+((x1416*x1421)));
evalcond[2]=(((x1415*x1417))+cj0+(((-1.0)*r12*x1423))+(((-1.0)*x1419*x1424)));
evalcond[3]=(cj0+((x1416*x1418))+(((-1.0)*x1422*x1423))+(((-1.0)*r02*x1424)));
evalcond[4]=(sj0+(((-1.0)*x1417*x1423))+((x1416*x1419))+(((-1.0)*r12*x1424)));
evalcond[5]=((((-1.0)*sj0))+((x1415*x1422))+(((-1.0)*x1418*x1424))+(((-1.0)*r02*x1423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1425=cj5*cj5;
IkReal x1426=((1.0)*r21);
IkReal x1427=(cj5*sj5);
IkReal x1428=((1.0)*r20);
CheckValue<IkReal> x1429=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1425*x1426))+(((-1.0)*r01*x1427*x1428))+((r00*r20*x1425))+(((-1.0)*r00*x1426*x1427))+((r01*r21))+((r02*r22)))),-1);
if(!x1429.valid){
continue;
}
CheckValue<IkReal> x1430 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1428)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1429.value)))+(x1430.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1431=IKsin(j4);
IkReal x1432=IKcos(j4);
IkReal x1433=(r11*sj5);
IkReal x1434=(cj5*r00);
IkReal x1435=(cj5*r10);
IkReal x1436=(r21*sj5);
IkReal x1437=(cj5*r20);
IkReal x1438=(r01*sj5);
IkReal x1439=((1.0)*x1432);
IkReal x1440=((1.0)*x1431);
evalcond[0]=((((-1.0)*r22*x1439))+(((-1.0)*x1437*x1440))+((x1431*x1436)));
evalcond[1]=(((x1432*x1437))+(((-1.0)*x1436*x1439))+(((-1.0)*r22*x1440)));
evalcond[2]=((((-1.0)*r12*x1439))+cj0+(((-1.0)*x1435*x1440))+((x1431*x1433)));
evalcond[3]=((((-1.0)*x1438*x1439))+((x1432*x1434))+cj0+(((-1.0)*r02*x1440)));
evalcond[4]=(((x1432*x1435))+sj0+(((-1.0)*r12*x1440))+(((-1.0)*x1433*x1439)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1434*x1440))+(((-1.0)*r02*x1439))+((x1431*x1438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1441=((1.0)*cj5);
CheckValue<IkReal> x1442 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1441)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1442.valid){
continue;
}
CheckValue<IkReal> x1443=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1441))+(((-1.0)*r00*sj5)))),-1);
if(!x1443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1442.value)+(((1.5707963267949)*(x1443.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1444=IKsin(j4);
IkReal x1445=IKcos(j4);
IkReal x1446=(r11*sj5);
IkReal x1447=(cj5*r00);
IkReal x1448=(cj5*r10);
IkReal x1449=(r21*sj5);
IkReal x1450=(cj5*r20);
IkReal x1451=(r01*sj5);
IkReal x1452=((1.0)*x1445);
IkReal x1453=((1.0)*x1444);
evalcond[0]=(((x1444*x1449))+(((-1.0)*r22*x1452))+(((-1.0)*x1450*x1453)));
evalcond[1]=(((x1445*x1450))+(((-1.0)*r22*x1453))+(((-1.0)*x1449*x1452)));
evalcond[2]=(((x1444*x1446))+cj0+(((-1.0)*x1448*x1453))+(((-1.0)*r12*x1452)));
evalcond[3]=(((x1445*x1447))+cj0+(((-1.0)*r02*x1453))+(((-1.0)*x1451*x1452)));
evalcond[4]=(((x1445*x1448))+sj0+(((-1.0)*x1446*x1452))+(((-1.0)*r12*x1453)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1447*x1453))+(((-1.0)*r02*x1452))+((x1444*x1451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1454=((1.0)*cj5);
IkReal x1455=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1454)));
j4eval[0]=x1455;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1454))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1455);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1456=((1.0)*cj5);
IkReal x1457=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1456)));
j4eval[0]=x1457;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1456))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1457);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1458=cj5*cj5;
IkReal x1459=((1.0)*sj5);
IkReal x1460=(cj5*r20);
IkReal x1461=(r11*r21);
IkReal x1462=((((-1.0)*r11*x1459*x1460))+((r10*r20*x1458))+((r12*r22))+x1461+(((-1.0)*x1458*x1461))+(((-1.0)*cj5*r10*r21*x1459)));
j4eval[0]=x1462;
j4eval[1]=IKsign(x1462);
j4eval[2]=((IKabs((((cj0*x1460))+(((-1.0)*cj0*r21*x1459)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1463=cj5*cj5;
IkReal x1464=((1.0)*sj5);
IkReal x1465=(cj5*r20);
IkReal x1466=(r11*r21);
CheckValue<IkReal> x1467=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x1464))+((r12*r22))+((r10*r20*x1463))+(((-1.0)*x1463*x1466))+x1466+(((-1.0)*r11*x1464*x1465)))),-1);
if(!x1467.valid){
continue;
}
CheckValue<IkReal> x1468 = IKatan2WithCheck(IkReal((((cj0*x1465))+(((-1.0)*cj0*r21*x1464)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1468.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1467.value)))+(x1468.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1469=IKsin(j4);
IkReal x1470=IKcos(j4);
IkReal x1471=((1.0)*sj0);
IkReal x1472=(cj5*r00);
IkReal x1473=(r11*sj5);
IkReal x1474=(cj5*r10);
IkReal x1475=(r21*sj5);
IkReal x1476=(cj5*r20);
IkReal x1477=(r01*sj5);
IkReal x1478=((1.0)*x1470);
IkReal x1479=((1.0)*x1469);
evalcond[0]=((((-1.0)*r22*x1478))+(((-1.0)*x1476*x1479))+((x1469*x1475)));
evalcond[1]=((((-1.0)*r22*x1479))+((x1470*x1476))+(((-1.0)*x1475*x1478)));
evalcond[2]=(cj0+(((-1.0)*r12*x1478))+(((-1.0)*x1474*x1479))+((x1469*x1473)));
evalcond[3]=((((-1.0)*x1471))+(((-1.0)*r02*x1478))+(((-1.0)*x1472*x1479))+((x1469*x1477)));
evalcond[4]=((((-1.0)*x1477*x1478))+((x1470*x1472))+(((-1.0)*r02*x1479))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1479))+((x1470*x1474))+(((-1.0)*x1471))+(((-1.0)*x1473*x1478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1480=((1.0)*cj5);
CheckValue<IkReal> x1481=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1480))+(((-1.0)*r10*sj5)))),-1);
if(!x1481.valid){
continue;
}
CheckValue<IkReal> x1482 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1480))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1482.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1481.value)))+(x1482.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1483=IKsin(j4);
IkReal x1484=IKcos(j4);
IkReal x1485=((1.0)*sj0);
IkReal x1486=(cj5*r00);
IkReal x1487=(r11*sj5);
IkReal x1488=(cj5*r10);
IkReal x1489=(r21*sj5);
IkReal x1490=(cj5*r20);
IkReal x1491=(r01*sj5);
IkReal x1492=((1.0)*x1484);
IkReal x1493=((1.0)*x1483);
evalcond[0]=(((x1483*x1489))+(((-1.0)*x1490*x1493))+(((-1.0)*r22*x1492)));
evalcond[1]=(((x1484*x1490))+(((-1.0)*r22*x1493))+(((-1.0)*x1489*x1492)));
evalcond[2]=((((-1.0)*r12*x1492))+cj0+((x1483*x1487))+(((-1.0)*x1488*x1493)));
evalcond[3]=((((-1.0)*x1485))+(((-1.0)*x1486*x1493))+(((-1.0)*r02*x1492))+((x1483*x1491)));
evalcond[4]=((((-1.0)*r02*x1493))+((x1484*x1486))+(((-1.0)*x1491*x1492))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1493))+(((-1.0)*x1487*x1492))+(((-1.0)*x1485))+((x1484*x1488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1494=((1.0)*cj5);
CheckValue<IkReal> x1495=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1494))+(((-1.0)*r00*sj5)))),-1);
if(!x1495.valid){
continue;
}
CheckValue<IkReal> x1496 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1494)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1496.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1495.value)))+(x1496.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1497=IKsin(j4);
IkReal x1498=IKcos(j4);
IkReal x1499=((1.0)*sj0);
IkReal x1500=(cj5*r00);
IkReal x1501=(r11*sj5);
IkReal x1502=(cj5*r10);
IkReal x1503=(r21*sj5);
IkReal x1504=(cj5*r20);
IkReal x1505=(r01*sj5);
IkReal x1506=((1.0)*x1498);
IkReal x1507=((1.0)*x1497);
evalcond[0]=((((-1.0)*x1504*x1507))+(((-1.0)*r22*x1506))+((x1497*x1503)));
evalcond[1]=((((-1.0)*r22*x1507))+((x1498*x1504))+(((-1.0)*x1503*x1506)));
evalcond[2]=(cj0+((x1497*x1501))+(((-1.0)*x1502*x1507))+(((-1.0)*r12*x1506)));
evalcond[3]=((((-1.0)*x1499))+(((-1.0)*r02*x1506))+((x1497*x1505))+(((-1.0)*x1500*x1507)));
evalcond[4]=(((x1498*x1500))+(((-1.0)*r02*x1507))+(((-1.0)*cj0))+(((-1.0)*x1505*x1506)));
evalcond[5]=(((x1498*x1502))+(((-1.0)*x1499))+(((-1.0)*x1501*x1506))+(((-1.0)*r12*x1507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1508=((1.0)*cj5);
IkReal x1509=((((-1.0)*r01*x1508))+(((-1.0)*r00*sj5)));
j4eval[0]=x1509;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x1508))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x1509);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1510=cj5*cj5;
IkReal x1511=((1.0)*r21);
IkReal x1512=(cj5*sj5);
IkReal x1513=((1.0)*r20);
IkReal x1514=(((r01*r21))+(((-1.0)*r01*x1512*x1513))+(((-1.0)*r01*x1510*x1511))+(((-1.0)*r00*x1511*x1512))+((r02*r22))+((r00*r20*x1510)));
j4eval[0]=x1514;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1513)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1514);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1515=cj5*cj5;
IkReal x1516=(r21*sj5);
IkReal x1517=(r11*r21);
IkReal x1518=((1.0)*cj5*r20);
IkReal x1519=(((r12*r22))+(((-1.0)*r11*sj5*x1518))+x1517+((r10*r20*x1515))+(((-1.0)*cj5*r10*x1516))+(((-1.0)*x1515*x1517)));
j4eval[0]=x1519;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1518))+((sj0*x1516))))));
j4eval[2]=IKsign(x1519);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1520=cj5*cj5;
IkReal x1521=(r21*sj5);
IkReal x1522=(r11*r21);
IkReal x1523=((1.0)*cj5*r20);
CheckValue<IkReal> x1524 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1523))+((sj0*x1521)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1524.valid){
continue;
}
CheckValue<IkReal> x1525=IKPowWithIntegerCheck(IKsign((((r12*r22))+(((-1.0)*x1520*x1522))+(((-1.0)*r11*sj5*x1523))+x1522+(((-1.0)*cj5*r10*x1521))+((r10*r20*x1520)))),-1);
if(!x1525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1524.value)+(((1.5707963267949)*(x1525.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1526=IKsin(j4);
IkReal x1527=IKcos(j4);
IkReal x1528=(r11*sj5);
IkReal x1529=(cj5*r00);
IkReal x1530=(cj5*r10);
IkReal x1531=(r21*sj5);
IkReal x1532=(cj5*r20);
IkReal x1533=(r01*sj5);
IkReal x1534=((1.0)*x1527);
IkReal x1535=((1.0)*x1526);
evalcond[0]=((((-1.0)*r22*x1534))+(((-1.0)*x1532*x1535))+((x1526*x1531)));
evalcond[1]=((((-1.0)*x1531*x1534))+(((-1.0)*r22*x1535))+((x1527*x1532)));
evalcond[2]=((((-1.0)*r12*x1534))+cj0+(((-1.0)*x1530*x1535))+((x1526*x1528)));
evalcond[3]=(cj0+(((-1.0)*r02*x1535))+((x1527*x1529))+(((-1.0)*x1533*x1534)));
evalcond[4]=(sj0+(((-1.0)*r12*x1535))+((x1527*x1530))+(((-1.0)*x1528*x1534)));
evalcond[5]=((((-1.0)*x1529*x1535))+(((-1.0)*sj0))+(((-1.0)*r02*x1534))+((x1526*x1533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1536=cj5*cj5;
IkReal x1537=((1.0)*r21);
IkReal x1538=(cj5*sj5);
IkReal x1539=((1.0)*r20);
CheckValue<IkReal> x1540=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r00*x1537*x1538))+(((-1.0)*r01*x1538*x1539))+(((-1.0)*r01*x1536*x1537))+((r02*r22))+((r00*r20*x1536)))),-1);
if(!x1540.valid){
continue;
}
CheckValue<IkReal> x1541 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1539)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1541.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1540.value)))+(x1541.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1542=IKsin(j4);
IkReal x1543=IKcos(j4);
IkReal x1544=(r11*sj5);
IkReal x1545=(cj5*r00);
IkReal x1546=(cj5*r10);
IkReal x1547=(r21*sj5);
IkReal x1548=(cj5*r20);
IkReal x1549=(r01*sj5);
IkReal x1550=((1.0)*x1543);
IkReal x1551=((1.0)*x1542);
evalcond[0]=((((-1.0)*r22*x1550))+(((-1.0)*x1548*x1551))+((x1542*x1547)));
evalcond[1]=((((-1.0)*r22*x1551))+((x1543*x1548))+(((-1.0)*x1547*x1550)));
evalcond[2]=((((-1.0)*x1546*x1551))+cj0+(((-1.0)*r12*x1550))+((x1542*x1544)));
evalcond[3]=(cj0+(((-1.0)*x1549*x1550))+(((-1.0)*r02*x1551))+((x1543*x1545)));
evalcond[4]=(sj0+(((-1.0)*x1544*x1550))+(((-1.0)*r12*x1551))+((x1543*x1546)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1550))+(((-1.0)*x1545*x1551))+((x1542*x1549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1552=((1.0)*cj5);
CheckValue<IkReal> x1553 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1552)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1553.valid){
continue;
}
CheckValue<IkReal> x1554=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1552)))),-1);
if(!x1554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1553.value)+(((1.5707963267949)*(x1554.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1555=IKsin(j4);
IkReal x1556=IKcos(j4);
IkReal x1557=(r11*sj5);
IkReal x1558=(cj5*r00);
IkReal x1559=(cj5*r10);
IkReal x1560=(r21*sj5);
IkReal x1561=(cj5*r20);
IkReal x1562=(r01*sj5);
IkReal x1563=((1.0)*x1556);
IkReal x1564=((1.0)*x1555);
evalcond[0]=(((x1555*x1560))+(((-1.0)*r22*x1563))+(((-1.0)*x1561*x1564)));
evalcond[1]=(((x1556*x1561))+(((-1.0)*x1560*x1563))+(((-1.0)*r22*x1564)));
evalcond[2]=((((-1.0)*x1559*x1564))+cj0+((x1555*x1557))+(((-1.0)*r12*x1563)));
evalcond[3]=((((-1.0)*r02*x1564))+cj0+((x1556*x1558))+(((-1.0)*x1562*x1563)));
evalcond[4]=(sj0+((x1556*x1559))+(((-1.0)*x1557*x1563))+(((-1.0)*r12*x1564)));
evalcond[5]=(((x1555*x1562))+(((-1.0)*sj0))+(((-1.0)*r02*x1563))+(((-1.0)*x1558*x1564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((-0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1565=IKcos(j0);
IkReal x1566=IKsin(j0);
evalcond[0]=((((-0.425)*x1565))+(((-0.134)*x1566))+(((-1.0)*px)));
evalcond[1]=((((-0.425)*x1566))+(((0.134)*x1565))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1567=((1.0)*cj5);
IkReal x1568=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1567)));
j4eval[0]=x1568;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1567)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1568);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1569=cj5*cj5;
IkReal x1570=((1.0)*r21);
IkReal x1571=(cj5*sj5);
IkReal x1572=((1.0)*r20);
IkReal x1573=((((-1.0)*r01*x1569*x1570))+(((-1.0)*r00*x1570*x1571))+((r01*r21))+((r00*r20*x1569))+((r02*r22))+(((-1.0)*r01*x1571*x1572)));
j4eval[0]=x1573;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1572)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1573);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1574=cj5*cj5;
IkReal x1575=(r21*sj5);
IkReal x1576=(r11*r21);
IkReal x1577=((1.0)*cj5*r20);
IkReal x1578=((((-1.0)*x1574*x1576))+(((-1.0)*cj5*r10*x1575))+(((-1.0)*r11*sj5*x1577))+((r12*r22))+x1576+((r10*r20*x1574)));
j4eval[0]=x1578;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1575))+(((-1.0)*sj0*x1577))))));
j4eval[2]=IKsign(x1578);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1579=cj5*cj5;
IkReal x1580=(r21*sj5);
IkReal x1581=(r11*r21);
IkReal x1582=((1.0)*cj5*r20);
CheckValue<IkReal> x1583=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x1580))+(((-1.0)*x1579*x1581))+((r12*r22))+x1581+(((-1.0)*r11*sj5*x1582))+((r10*r20*x1579)))),-1);
if(!x1583.valid){
continue;
}
CheckValue<IkReal> x1584 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1582))+((sj0*x1580)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1583.value)))+(x1584.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1585=IKsin(j4);
IkReal x1586=IKcos(j4);
IkReal x1587=(r11*sj5);
IkReal x1588=(cj5*r00);
IkReal x1589=(cj5*r10);
IkReal x1590=(r21*sj5);
IkReal x1591=(cj5*r20);
IkReal x1592=(r01*sj5);
IkReal x1593=((1.0)*x1586);
IkReal x1594=((1.0)*x1585);
evalcond[0]=((((-1.0)*x1591*x1594))+(((-1.0)*r22*x1593))+((x1585*x1590)));
evalcond[1]=(((x1586*x1591))+(((-1.0)*r22*x1594))+(((-1.0)*x1590*x1593)));
evalcond[2]=(cj0+(((-1.0)*x1589*x1594))+((x1585*x1587))+(((-1.0)*r12*x1593)));
evalcond[3]=(((x1586*x1588))+cj0+(((-1.0)*x1592*x1593))+(((-1.0)*r02*x1594)));
evalcond[4]=(((x1586*x1589))+sj0+(((-1.0)*x1587*x1593))+(((-1.0)*r12*x1594)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1593))+(((-1.0)*x1588*x1594))+((x1585*x1592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1595=cj5*cj5;
IkReal x1596=((1.0)*r21);
IkReal x1597=(cj5*sj5);
IkReal x1598=((1.0)*r20);
CheckValue<IkReal> x1599 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1598)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1599.valid){
continue;
}
CheckValue<IkReal> x1600=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1597*x1598))+(((-1.0)*r00*x1596*x1597))+((r01*r21))+(((-1.0)*r01*x1595*x1596))+((r00*r20*x1595))+((r02*r22)))),-1);
if(!x1600.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1599.value)+(((1.5707963267949)*(x1600.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1601=IKsin(j4);
IkReal x1602=IKcos(j4);
IkReal x1603=(r11*sj5);
IkReal x1604=(cj5*r00);
IkReal x1605=(cj5*r10);
IkReal x1606=(r21*sj5);
IkReal x1607=(cj5*r20);
IkReal x1608=(r01*sj5);
IkReal x1609=((1.0)*x1602);
IkReal x1610=((1.0)*x1601);
evalcond[0]=(((x1601*x1606))+(((-1.0)*r22*x1609))+(((-1.0)*x1607*x1610)));
evalcond[1]=((((-1.0)*r22*x1610))+((x1602*x1607))+(((-1.0)*x1606*x1609)));
evalcond[2]=(cj0+((x1601*x1603))+(((-1.0)*x1605*x1610))+(((-1.0)*r12*x1609)));
evalcond[3]=(cj0+(((-1.0)*r02*x1610))+((x1602*x1604))+(((-1.0)*x1608*x1609)));
evalcond[4]=((((-1.0)*r12*x1610))+sj0+(((-1.0)*x1603*x1609))+((x1602*x1605)));
evalcond[5]=((((-1.0)*sj0))+((x1601*x1608))+(((-1.0)*r02*x1609))+(((-1.0)*x1604*x1610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1611=((1.0)*cj5);
CheckValue<IkReal> x1612=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1611))+(((-1.0)*r00*sj5)))),-1);
if(!x1612.valid){
continue;
}
CheckValue<IkReal> x1613 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1611)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1613.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1612.value)))+(x1613.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1614=IKsin(j4);
IkReal x1615=IKcos(j4);
IkReal x1616=(r11*sj5);
IkReal x1617=(cj5*r00);
IkReal x1618=(cj5*r10);
IkReal x1619=(r21*sj5);
IkReal x1620=(cj5*r20);
IkReal x1621=(r01*sj5);
IkReal x1622=((1.0)*x1615);
IkReal x1623=((1.0)*x1614);
evalcond[0]=(((x1614*x1619))+(((-1.0)*r22*x1622))+(((-1.0)*x1620*x1623)));
evalcond[1]=((((-1.0)*x1619*x1622))+((x1615*x1620))+(((-1.0)*r22*x1623)));
evalcond[2]=((((-1.0)*r12*x1622))+cj0+((x1614*x1616))+(((-1.0)*x1618*x1623)));
evalcond[3]=(cj0+(((-1.0)*r02*x1623))+((x1615*x1617))+(((-1.0)*x1621*x1622)));
evalcond[4]=((((-1.0)*r12*x1623))+sj0+(((-1.0)*x1616*x1622))+((x1615*x1618)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1617*x1623))+((x1614*x1621))+(((-1.0)*r02*x1622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((-0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1624=IKcos(j0);
IkReal x1625=IKsin(j0);
evalcond[0]=((((-0.134)*x1625))+(((-1.0)*px))+(((-0.425)*x1624)));
evalcond[1]=((((-1.0)*py))+(((0.134)*x1624))+(((-0.425)*x1625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1626=((1.0)*cj5);
IkReal x1627=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1626)));
j4eval[0]=x1627;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1626)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1627);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1628=((1.0)*cj5);
IkReal x1629=((((-1.0)*r11*x1628))+(((-1.0)*r10*sj5)));
j4eval[0]=x1629;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1628))))));
j4eval[2]=IKsign(x1629);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1630=cj5*cj5;
IkReal x1631=((1.0)*sj5);
IkReal x1632=(cj5*r20);
IkReal x1633=(r11*r21);
IkReal x1634=(x1633+(((-1.0)*r11*x1631*x1632))+(((-1.0)*cj5*r10*r21*x1631))+((r12*r22))+(((-1.0)*x1630*x1633))+((r10*r20*x1630)));
j4eval[0]=x1634;
j4eval[1]=IKsign(x1634);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1631))+((cj0*x1632)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1635=cj5*cj5;
IkReal x1636=((1.0)*sj5);
IkReal x1637=(cj5*r20);
IkReal x1638=(r11*r21);
CheckValue<IkReal> x1639=IKPowWithIntegerCheck(IKsign((x1638+(((-1.0)*cj5*r10*r21*x1636))+(((-1.0)*x1635*x1638))+((r12*r22))+((r10*r20*x1635))+(((-1.0)*r11*x1636*x1637)))),-1);
if(!x1639.valid){
continue;
}
CheckValue<IkReal> x1640 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1636))+((cj0*x1637)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1640.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1639.value)))+(x1640.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1641=IKsin(j4);
IkReal x1642=IKcos(j4);
IkReal x1643=((1.0)*sj0);
IkReal x1644=(cj5*r00);
IkReal x1645=(r11*sj5);
IkReal x1646=(cj5*r10);
IkReal x1647=(r21*sj5);
IkReal x1648=(cj5*r20);
IkReal x1649=(r01*sj5);
IkReal x1650=((1.0)*x1642);
IkReal x1651=((1.0)*x1641);
evalcond[0]=((((-1.0)*r22*x1650))+((x1641*x1647))+(((-1.0)*x1648*x1651)));
evalcond[1]=((((-1.0)*r22*x1651))+(((-1.0)*x1647*x1650))+((x1642*x1648)));
evalcond[2]=(cj0+(((-1.0)*x1646*x1651))+(((-1.0)*r12*x1650))+((x1641*x1645)));
evalcond[3]=((((-1.0)*x1644*x1651))+((x1641*x1649))+(((-1.0)*x1643))+(((-1.0)*r02*x1650)));
evalcond[4]=(((x1642*x1644))+(((-1.0)*x1649*x1650))+(((-1.0)*r02*x1651))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1645*x1650))+(((-1.0)*r12*x1651))+(((-1.0)*x1643))+((x1642*x1646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1652=((1.0)*cj5);
CheckValue<IkReal> x1653=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1652)))),-1);
if(!x1653.valid){
continue;
}
CheckValue<IkReal> x1654 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1652))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1653.value)))+(x1654.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1655=IKsin(j4);
IkReal x1656=IKcos(j4);
IkReal x1657=((1.0)*sj0);
IkReal x1658=(cj5*r00);
IkReal x1659=(r11*sj5);
IkReal x1660=(cj5*r10);
IkReal x1661=(r21*sj5);
IkReal x1662=(cj5*r20);
IkReal x1663=(r01*sj5);
IkReal x1664=((1.0)*x1656);
IkReal x1665=((1.0)*x1655);
evalcond[0]=((((-1.0)*x1662*x1665))+((x1655*x1661))+(((-1.0)*r22*x1664)));
evalcond[1]=((((-1.0)*x1661*x1664))+(((-1.0)*r22*x1665))+((x1656*x1662)));
evalcond[2]=(cj0+(((-1.0)*r12*x1664))+((x1655*x1659))+(((-1.0)*x1660*x1665)));
evalcond[3]=(((x1655*x1663))+(((-1.0)*x1657))+(((-1.0)*r02*x1664))+(((-1.0)*x1658*x1665)));
evalcond[4]=(((x1656*x1658))+(((-1.0)*x1663*x1664))+(((-1.0)*r02*x1665))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1665))+(((-1.0)*x1657))+((x1656*x1660))+(((-1.0)*x1659*x1664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1666=((1.0)*cj5);
CheckValue<IkReal> x1667=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1666))+(((-1.0)*r00*sj5)))),-1);
if(!x1667.valid){
continue;
}
CheckValue<IkReal> x1668 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1666)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1667.value)))+(x1668.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1669=IKsin(j4);
IkReal x1670=IKcos(j4);
IkReal x1671=((1.0)*sj0);
IkReal x1672=(cj5*r00);
IkReal x1673=(r11*sj5);
IkReal x1674=(cj5*r10);
IkReal x1675=(r21*sj5);
IkReal x1676=(cj5*r20);
IkReal x1677=(r01*sj5);
IkReal x1678=((1.0)*x1670);
IkReal x1679=((1.0)*x1669);
evalcond[0]=(((x1669*x1675))+(((-1.0)*x1676*x1679))+(((-1.0)*r22*x1678)));
evalcond[1]=(((x1670*x1676))+(((-1.0)*r22*x1679))+(((-1.0)*x1675*x1678)));
evalcond[2]=(cj0+((x1669*x1673))+(((-1.0)*r12*x1678))+(((-1.0)*x1674*x1679)));
evalcond[3]=((((-1.0)*x1672*x1679))+(((-1.0)*r02*x1678))+((x1669*x1677))+(((-1.0)*x1671)));
evalcond[4]=((((-1.0)*r02*x1679))+(((-1.0)*x1677*x1678))+(((-1.0)*cj0))+((x1670*x1672)));
evalcond[5]=((((-1.0)*x1673*x1678))+(((-1.0)*r12*x1679))+(((-1.0)*x1671))+((x1670*x1674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1680=((1.0)*cj5);
IkReal x1681=((((-1.0)*r01*x1680))+(((-1.0)*r00*sj5)));
j4eval[0]=x1681;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1680)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1681);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1682=cj5*cj5;
IkReal x1683=((1.0)*r21);
IkReal x1684=(cj5*sj5);
IkReal x1685=((1.0)*r20);
IkReal x1686=((((-1.0)*r01*x1682*x1683))+((r01*r21))+(((-1.0)*r01*x1684*x1685))+((r00*r20*x1682))+(((-1.0)*r00*x1683*x1684))+((r02*r22)));
j4eval[0]=x1686;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1685)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1686);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1687=cj5*cj5;
IkReal x1688=(r21*sj5);
IkReal x1689=(r11*r21);
IkReal x1690=((1.0)*cj5*r20);
IkReal x1691=((((-1.0)*cj5*r10*x1688))+x1689+(((-1.0)*x1687*x1689))+((r12*r22))+(((-1.0)*r11*sj5*x1690))+((r10*r20*x1687)));
j4eval[0]=x1691;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1690))+((sj0*x1688))))));
j4eval[2]=IKsign(x1691);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1692=cj5*cj5;
IkReal x1693=(r21*sj5);
IkReal x1694=(r11*r21);
IkReal x1695=((1.0)*cj5*r20);
CheckValue<IkReal> x1696=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1692*x1694))+x1694+((r12*r22))+(((-1.0)*r11*sj5*x1695))+((r10*r20*x1692))+(((-1.0)*cj5*r10*x1693)))),-1);
if(!x1696.valid){
continue;
}
CheckValue<IkReal> x1697 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1695))+((sj0*x1693)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1697.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1696.value)))+(x1697.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1698=IKsin(j4);
IkReal x1699=IKcos(j4);
IkReal x1700=(r11*sj5);
IkReal x1701=(cj5*r00);
IkReal x1702=(cj5*r10);
IkReal x1703=(r21*sj5);
IkReal x1704=(cj5*r20);
IkReal x1705=(r01*sj5);
IkReal x1706=((1.0)*x1699);
IkReal x1707=((1.0)*x1698);
evalcond[0]=((((-1.0)*x1704*x1707))+(((-1.0)*r22*x1706))+((x1698*x1703)));
evalcond[1]=((((-1.0)*x1703*x1706))+(((-1.0)*r22*x1707))+((x1699*x1704)));
evalcond[2]=((((-1.0)*x1702*x1707))+cj0+(((-1.0)*r12*x1706))+((x1698*x1700)));
evalcond[3]=(cj0+(((-1.0)*r02*x1707))+(((-1.0)*x1705*x1706))+((x1699*x1701)));
evalcond[4]=(sj0+(((-1.0)*x1700*x1706))+((x1699*x1702))+(((-1.0)*r12*x1707)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1706))+(((-1.0)*x1701*x1707))+((x1698*x1705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1708=cj5*cj5;
IkReal x1709=((1.0)*r21);
IkReal x1710=(cj5*sj5);
IkReal x1711=((1.0)*r20);
CheckValue<IkReal> x1712=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1709*x1710))+((r01*r21))+((r00*r20*x1708))+(((-1.0)*r01*x1710*x1711))+((r02*r22))+(((-1.0)*r01*x1708*x1709)))),-1);
if(!x1712.valid){
continue;
}
CheckValue<IkReal> x1713 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1711)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1712.value)))+(x1713.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1714=IKsin(j4);
IkReal x1715=IKcos(j4);
IkReal x1716=(r11*sj5);
IkReal x1717=(cj5*r00);
IkReal x1718=(cj5*r10);
IkReal x1719=(r21*sj5);
IkReal x1720=(cj5*r20);
IkReal x1721=(r01*sj5);
IkReal x1722=((1.0)*x1715);
IkReal x1723=((1.0)*x1714);
evalcond[0]=((((-1.0)*r22*x1722))+((x1714*x1719))+(((-1.0)*x1720*x1723)));
evalcond[1]=((((-1.0)*r22*x1723))+((x1715*x1720))+(((-1.0)*x1719*x1722)));
evalcond[2]=(cj0+(((-1.0)*r12*x1722))+((x1714*x1716))+(((-1.0)*x1718*x1723)));
evalcond[3]=(cj0+((x1715*x1717))+(((-1.0)*x1721*x1722))+(((-1.0)*r02*x1723)));
evalcond[4]=(sj0+(((-1.0)*r12*x1723))+((x1715*x1718))+(((-1.0)*x1716*x1722)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1717*x1723))+((x1714*x1721))+(((-1.0)*r02*x1722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1724=((1.0)*cj5);
CheckValue<IkReal> x1725=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1724))+(((-1.0)*r00*sj5)))),-1);
if(!x1725.valid){
continue;
}
CheckValue<IkReal> x1726 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1724)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1726.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1725.value)))+(x1726.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1727=IKsin(j4);
IkReal x1728=IKcos(j4);
IkReal x1729=(r11*sj5);
IkReal x1730=(cj5*r00);
IkReal x1731=(cj5*r10);
IkReal x1732=(r21*sj5);
IkReal x1733=(cj5*r20);
IkReal x1734=(r01*sj5);
IkReal x1735=((1.0)*x1728);
IkReal x1736=((1.0)*x1727);
evalcond[0]=((((-1.0)*x1733*x1736))+((x1727*x1732))+(((-1.0)*r22*x1735)));
evalcond[1]=(((x1728*x1733))+(((-1.0)*x1732*x1735))+(((-1.0)*r22*x1736)));
evalcond[2]=((((-1.0)*x1731*x1736))+cj0+(((-1.0)*r12*x1735))+((x1727*x1729)));
evalcond[3]=(((x1728*x1730))+cj0+(((-1.0)*x1734*x1735))+(((-1.0)*r02*x1736)));
evalcond[4]=(((x1728*x1731))+sj0+(((-1.0)*r12*x1736))+(((-1.0)*x1729*x1735)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1730*x1736))+((x1727*x1734))+(((-1.0)*r02*x1735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1737=((1.0)*cj5);
IkReal x1738=((((-1.0)*r01*x1737))+(((-1.0)*r00*sj5)));
j4eval[0]=x1738;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1737)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1738);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1739=((1.0)*cj5);
IkReal x1740=((((-1.0)*r11*x1739))+(((-1.0)*r10*sj5)));
j4eval[0]=x1740;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1739)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1740);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1741=cj5*cj5;
IkReal x1742=((1.0)*sj5);
IkReal x1743=(cj5*r20);
IkReal x1744=(r11*r21);
IkReal x1745=(((r10*r20*x1741))+(((-1.0)*cj5*r10*r21*x1742))+x1744+((r12*r22))+(((-1.0)*x1741*x1744))+(((-1.0)*r11*x1742*x1743)));
j4eval[0]=x1745;
j4eval[1]=IKsign(x1745);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x1742))+((cj0*x1743))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1746=cj5*cj5;
IkReal x1747=((1.0)*sj5);
IkReal x1748=(cj5*r20);
IkReal x1749=(r11*r21);
CheckValue<IkReal> x1750=IKPowWithIntegerCheck(IKsign((((r10*r20*x1746))+(((-1.0)*cj5*r10*r21*x1747))+x1749+(((-1.0)*x1746*x1749))+((r12*r22))+(((-1.0)*r11*x1747*x1748)))),-1);
if(!x1750.valid){
continue;
}
CheckValue<IkReal> x1751 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1747))+((cj0*x1748)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1751.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1750.value)))+(x1751.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1752=IKsin(j4);
IkReal x1753=IKcos(j4);
IkReal x1754=((1.0)*sj0);
IkReal x1755=(cj5*r00);
IkReal x1756=(r11*sj5);
IkReal x1757=(cj5*r10);
IkReal x1758=(r21*sj5);
IkReal x1759=(cj5*r20);
IkReal x1760=(r01*sj5);
IkReal x1761=((1.0)*x1753);
IkReal x1762=((1.0)*x1752);
evalcond[0]=(((x1752*x1758))+(((-1.0)*x1759*x1762))+(((-1.0)*r22*x1761)));
evalcond[1]=(((x1753*x1759))+(((-1.0)*x1758*x1761))+(((-1.0)*r22*x1762)));
evalcond[2]=(((x1752*x1756))+cj0+(((-1.0)*r12*x1761))+(((-1.0)*x1757*x1762)));
evalcond[3]=((((-1.0)*r02*x1761))+(((-1.0)*x1755*x1762))+((x1752*x1760))+(((-1.0)*x1754)));
evalcond[4]=(((x1753*x1755))+(((-1.0)*r02*x1762))+(((-1.0)*x1760*x1761))+(((-1.0)*cj0)));
evalcond[5]=(((x1753*x1757))+(((-1.0)*x1756*x1761))+(((-1.0)*r12*x1762))+(((-1.0)*x1754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1763=((1.0)*cj5);
CheckValue<IkReal> x1764=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1763)))),-1);
if(!x1764.valid){
continue;
}
CheckValue<IkReal> x1765 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1763))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1764.value)))+(x1765.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1766=IKsin(j4);
IkReal x1767=IKcos(j4);
IkReal x1768=((1.0)*sj0);
IkReal x1769=(cj5*r00);
IkReal x1770=(r11*sj5);
IkReal x1771=(cj5*r10);
IkReal x1772=(r21*sj5);
IkReal x1773=(cj5*r20);
IkReal x1774=(r01*sj5);
IkReal x1775=((1.0)*x1767);
IkReal x1776=((1.0)*x1766);
evalcond[0]=(((x1766*x1772))+(((-1.0)*x1773*x1776))+(((-1.0)*r22*x1775)));
evalcond[1]=(((x1767*x1773))+(((-1.0)*x1772*x1775))+(((-1.0)*r22*x1776)));
evalcond[2]=(cj0+((x1766*x1770))+(((-1.0)*x1771*x1776))+(((-1.0)*r12*x1775)));
evalcond[3]=((((-1.0)*x1768))+((x1766*x1774))+(((-1.0)*r02*x1775))+(((-1.0)*x1769*x1776)));
evalcond[4]=((((-1.0)*r02*x1776))+((x1767*x1769))+(((-1.0)*x1774*x1775))+(((-1.0)*cj0)));
evalcond[5]=(((x1767*x1771))+(((-1.0)*x1768))+(((-1.0)*x1770*x1775))+(((-1.0)*r12*x1776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1777=((1.0)*cj5);
CheckValue<IkReal> x1778 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1777)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1778.valid){
continue;
}
CheckValue<IkReal> x1779=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1777)))),-1);
if(!x1779.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1778.value)+(((1.5707963267949)*(x1779.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1780=IKsin(j4);
IkReal x1781=IKcos(j4);
IkReal x1782=((1.0)*sj0);
IkReal x1783=(cj5*r00);
IkReal x1784=(r11*sj5);
IkReal x1785=(cj5*r10);
IkReal x1786=(r21*sj5);
IkReal x1787=(cj5*r20);
IkReal x1788=(r01*sj5);
IkReal x1789=((1.0)*x1781);
IkReal x1790=((1.0)*x1780);
evalcond[0]=((((-1.0)*x1787*x1790))+(((-1.0)*r22*x1789))+((x1780*x1786)));
evalcond[1]=((((-1.0)*r22*x1790))+(((-1.0)*x1786*x1789))+((x1781*x1787)));
evalcond[2]=(cj0+(((-1.0)*r12*x1789))+(((-1.0)*x1785*x1790))+((x1780*x1784)));
evalcond[3]=((((-1.0)*x1782))+((x1780*x1788))+(((-1.0)*r02*x1789))+(((-1.0)*x1783*x1790)));
evalcond[4]=((((-1.0)*x1788*x1789))+(((-1.0)*r02*x1790))+((x1781*x1783))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1782))+(((-1.0)*r12*x1790))+(((-1.0)*x1784*x1789))+((x1781*x1785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1791=(sj1*sj2);
IkReal x1792=(r00*sj5);
IkReal x1793=(cj5*r01);
IkReal x1794=((212.5)*cj1);
IkReal x1795=(cj1*cj2);
IkReal x1796=((500.0)*px);
CheckValue<IkReal> x1797=IKPowWithIntegerCheck(((((-67.0)*x1795))+(((67.0)*x1791))),-1);
if(!x1797.valid){
continue;
}
CheckValue<IkReal> x1798=IKPowWithIntegerCheck((x1791+(((-1.0)*x1795))),-1);
if(!x1798.valid){
continue;
}
if( IKabs(((x1797.value)*(((((146.1)*x1791*x1793))+(((146.1)*x1791*x1792))+(((-1.0)*x1792*x1794))+(((-146.1)*x1792*x1795))+(((-1.0)*x1793*x1794))+(((-146.1)*x1793*x1795))+((x1795*x1796))+(((-1.0)*x1791*x1796)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1798.value)*(((((-1.0)*x1792))+(((-1.0)*x1793)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1797.value)*(((((146.1)*x1791*x1793))+(((146.1)*x1791*x1792))+(((-1.0)*x1792*x1794))+(((-146.1)*x1792*x1795))+(((-1.0)*x1793*x1794))+(((-146.1)*x1793*x1795))+((x1795*x1796))+(((-1.0)*x1791*x1796))))))+IKsqr(((x1798.value)*(((((-1.0)*x1792))+(((-1.0)*x1793))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1797.value)*(((((146.1)*x1791*x1793))+(((146.1)*x1791*x1792))+(((-1.0)*x1792*x1794))+(((-146.1)*x1792*x1795))+(((-1.0)*x1793*x1794))+(((-146.1)*x1793*x1795))+((x1795*x1796))+(((-1.0)*x1791*x1796))))), ((x1798.value)*(((((-1.0)*x1792))+(((-1.0)*x1793))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1799=IKcos(j0);
IkReal x1800=IKsin(j0);
IkReal x1801=((0.1)*sj5);
IkReal x1802=(cj5*r11);
IkReal x1803=(cj5*r01);
IkReal x1804=(cj1*cj2);
IkReal x1805=(sj1*sj2);
IkReal x1806=(cj1*x1799);
IkReal x1807=((0.3922)*x1800);
evalcond[0]=(((r00*sj5))+((x1799*x1805))+x1803+(((-1.0)*x1799*x1804)));
evalcond[1]=((((-1.0)*x1800*x1804))+((r10*sj5))+((x1800*x1805))+x1802);
evalcond[2]=((((-1.0)*r00*x1801))+(((0.425)*x1806))+(((-1.0)*px))+(((0.3922)*x1799*x1804))+(((-0.1)*x1803))+(((-0.3922)*x1799*x1805))+(((-0.134)*x1800)));
evalcond[3]=((((-1.0)*r10*x1801))+(((-1.0)*x1805*x1807))+(((-1.0)*py))+(((0.134)*x1799))+(((0.425)*cj1*x1800))+((x1804*x1807))+(((-0.1)*x1802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1808=((1.0)*cj5);
IkReal x1809=((((-1.0)*r01*x1808))+(((-1.0)*r00*sj5)));
j4eval[0]=x1809;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1808)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1809);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1810=((1.0)*cj5);
IkReal x1811=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1810)));
j4eval[0]=x1811;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1810))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1811);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1812=((1.0)*sj0);
IkReal x1813=((1.0)*cj0);
IkReal x1814=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1814;
j4eval[1]=((IKabs(((((-1.0)*r02*x1813))+(((-1.0)*r12*x1812)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1812))+(((-1.0)*r01*sj5*x1813))))));
j4eval[2]=IKsign(x1814);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1815=((-1.0)*r20);
IkReal x1817 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1817)==0){
continue;
}
IkReal x1816=pow(x1817,-0.5);
CheckValue<IkReal> x1818 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1815),IKFAST_ATAN2_MAGTHRESH);
if(!x1818.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1818.value));
IkReal gconst79=(r21*x1816);
IkReal gconst80=(x1815*x1816);
CheckValue<IkReal> x1819 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1819.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1819.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1820=((-1.0)*r20);
IkReal x1821=x1816;
CheckValue<IkReal> x1823 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1820),IKFAST_ATAN2_MAGTHRESH);
if(!x1823.valid){
continue;
}
IkReal x1822=((-1.0)*(x1823.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1822;
IkReal gconst78=x1822;
IkReal gconst79=(r21*x1821);
IkReal gconst80=(x1820*x1821);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1824=((-1.0)*r20);
IkReal x1825=x1816;
CheckValue<IkReal> x1827 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1824),IKFAST_ATAN2_MAGTHRESH);
if(!x1827.valid){
continue;
}
IkReal x1826=((-1.0)*(x1827.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1826;
IkReal gconst78=x1826;
IkReal gconst79=(r21*x1825);
IkReal gconst80=(x1824*x1825);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1828=((-1.0)*r20);
IkReal x1829=x1816;
CheckValue<IkReal> x1831 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1828),IKFAST_ATAN2_MAGTHRESH);
if(!x1831.valid){
continue;
}
IkReal x1830=((-1.0)*(x1831.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1830;
IkReal gconst78=x1830;
IkReal gconst79=(r21*x1829);
IkReal gconst80=(x1828*x1829);
IkReal x1832=r22*r22;
CheckValue<IkReal> x1835=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1832))),-1);
if(!x1835.valid){
continue;
}
IkReal x1833=x1835.value;
IkReal x1834=((((2.0)*x1833*(r20*r20)*(r21*r21)))+x1832+((x1833*(r21*r21*r21*r21)))+((x1833*(r20*r20*r20*r20))));
j4eval[0]=x1834;
j4eval[1]=IKsign(x1834);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1836=(sj1*sj2);
IkReal x1837=(gconst80*r20);
IkReal x1838=(gconst79*r21);
IkReal x1839=(cj1*cj2);
CheckValue<IkReal> x1840=IKPowWithIntegerCheck(IKsign(((x1838*x1838)+(((-2.0)*x1837*x1838))+(r22*r22)+(x1837*x1837))),-1);
if(!x1840.valid){
continue;
}
CheckValue<IkReal> x1841 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1839))+((r22*x1836)))),IkReal((((x1837*x1839))+(((-1.0)*x1838*x1839))+((x1836*x1838))+(((-1.0)*x1836*x1837)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1841.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1840.value)))+(x1841.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1842=IKsin(j4);
IkReal x1843=IKcos(j4);
IkReal x1844=(gconst79*r01);
IkReal x1845=(gconst79*r21);
IkReal x1846=((1.0)*cj2);
IkReal x1847=(gconst79*r11);
IkReal x1848=((1.0)*sj0);
IkReal x1849=(cj1*sj2);
IkReal x1850=((1.0)*x1843);
IkReal x1851=(gconst80*x1843);
IkReal x1852=((1.0)*x1842);
IkReal x1853=(gconst80*x1852);
evalcond[0]=((((-1.0)*r22*x1850))+((x1842*x1845))+(((-1.0)*r20*x1853)));
evalcond[1]=(cj0+(((-1.0)*r12*x1850))+((x1842*x1847))+(((-1.0)*r10*x1853)));
evalcond[2]=((((-1.0)*x1848))+(((-1.0)*r00*x1853))+(((-1.0)*r02*x1850))+((x1842*x1844)));
evalcond[3]=((((-1.0)*x1845*x1850))+((sj1*sj2))+(((-1.0)*r22*x1852))+(((-1.0)*cj1*x1846))+((r20*x1851)));
evalcond[4]=((((-1.0)*cj0*x1849))+(((-1.0)*cj0*sj1*x1846))+((r00*x1851))+(((-1.0)*r02*x1852))+(((-1.0)*x1844*x1850)));
evalcond[5]=(((r10*x1851))+(((-1.0)*sj0*sj1*x1846))+(((-1.0)*x1848*x1849))+(((-1.0)*r12*x1852))+(((-1.0)*x1847*x1850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1854=((1.0)*gconst80);
CheckValue<IkReal> x1855=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1854))+(((-1.0)*gconst79*r10)))),-1);
if(!x1855.valid){
continue;
}
CheckValue<IkReal> x1856 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst79*r21*sj0))+(((-1.0)*r20*sj0*x1854)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1856.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1855.value)))+(x1856.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1857=IKsin(j4);
IkReal x1858=IKcos(j4);
IkReal x1859=(gconst79*r01);
IkReal x1860=(gconst79*r21);
IkReal x1861=((1.0)*cj2);
IkReal x1862=(gconst79*r11);
IkReal x1863=((1.0)*sj0);
IkReal x1864=(cj1*sj2);
IkReal x1865=((1.0)*x1858);
IkReal x1866=(gconst80*x1858);
IkReal x1867=((1.0)*x1857);
IkReal x1868=(gconst80*x1867);
evalcond[0]=((((-1.0)*r20*x1868))+((x1857*x1860))+(((-1.0)*r22*x1865)));
evalcond[1]=(cj0+(((-1.0)*r12*x1865))+((x1857*x1862))+(((-1.0)*r10*x1868)));
evalcond[2]=((((-1.0)*r02*x1865))+((x1857*x1859))+(((-1.0)*r00*x1868))+(((-1.0)*x1863)));
evalcond[3]=((((-1.0)*x1860*x1865))+((sj1*sj2))+(((-1.0)*cj1*x1861))+((r20*x1866))+(((-1.0)*r22*x1867)));
evalcond[4]=((((-1.0)*r02*x1867))+(((-1.0)*cj0*x1864))+(((-1.0)*cj0*sj1*x1861))+(((-1.0)*x1859*x1865))+((r00*x1866)));
evalcond[5]=((((-1.0)*x1863*x1864))+(((-1.0)*x1862*x1865))+(((-1.0)*r12*x1867))+((r10*x1866))+(((-1.0)*sj0*sj1*x1861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1869=((1.0)*gconst80);
CheckValue<IkReal> x1870 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x1869)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1870.valid){
continue;
}
CheckValue<IkReal> x1871=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r00))+(((-1.0)*r01*x1869)))),-1);
if(!x1871.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1870.value)+(((1.5707963267949)*(x1871.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1872=IKsin(j4);
IkReal x1873=IKcos(j4);
IkReal x1874=(gconst79*r01);
IkReal x1875=(gconst79*r21);
IkReal x1876=((1.0)*cj2);
IkReal x1877=(gconst79*r11);
IkReal x1878=((1.0)*sj0);
IkReal x1879=(cj1*sj2);
IkReal x1880=((1.0)*x1873);
IkReal x1881=(gconst80*x1873);
IkReal x1882=((1.0)*x1872);
IkReal x1883=(gconst80*x1882);
evalcond[0]=((((-1.0)*r22*x1880))+((x1872*x1875))+(((-1.0)*r20*x1883)));
evalcond[1]=(cj0+(((-1.0)*r12*x1880))+(((-1.0)*r10*x1883))+((x1872*x1877)));
evalcond[2]=((((-1.0)*x1878))+(((-1.0)*r02*x1880))+((x1872*x1874))+(((-1.0)*r00*x1883)));
evalcond[3]=(((r20*x1881))+(((-1.0)*x1875*x1880))+(((-1.0)*r22*x1882))+((sj1*sj2))+(((-1.0)*cj1*x1876)));
evalcond[4]=((((-1.0)*cj0*x1879))+(((-1.0)*r02*x1882))+(((-1.0)*cj0*sj1*x1876))+((r00*x1881))+(((-1.0)*x1874*x1880)));
evalcond[5]=((((-1.0)*x1878*x1879))+(((-1.0)*r12*x1882))+(((-1.0)*sj0*sj1*x1876))+((r10*x1881))+(((-1.0)*x1877*x1880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1884=((-1.0)*r21);
IkReal x1886 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1886)==0){
continue;
}
IkReal x1885=pow(x1886,-0.5);
CheckValue<IkReal> x1887 = IKatan2WithCheck(IkReal(x1884),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1887.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1887.value))));
IkReal gconst82=(x1884*x1885);
IkReal gconst83=((1.0)*r20*x1885);
CheckValue<IkReal> x1888 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1888.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1888.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1889=((-1.0)*r21);
CheckValue<IkReal> x1892 = IKatan2WithCheck(IkReal(x1889),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1892.valid){
continue;
}
IkReal x1890=((1.0)*(x1892.value));
IkReal x1891=x1885;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1890)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1890)));
IkReal gconst82=(x1889*x1891);
IkReal gconst83=((1.0)*r20*x1891);
IkReal x1893=r22*r22;
IkReal x1894=((1.0)*x1893);
CheckValue<IkReal> x1898=IKPowWithIntegerCheck(((-1.0)+x1893),-1);
if(!x1898.valid){
continue;
}
IkReal x1895=x1898.value;
if((((1.0)+(((-1.0)*x1894)))) < -0.00001)
continue;
IkReal x1896=IKsqrt(((1.0)+(((-1.0)*x1894))));
IkReal x1897=(cj0*x1895*x1896);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x1897+(((-1.0)*x1894*x1897))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1899=((-1.0)*r21);
CheckValue<IkReal> x1902 = IKatan2WithCheck(IkReal(x1899),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1902.valid){
continue;
}
IkReal x1900=((1.0)*(x1902.value));
IkReal x1901=x1885;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1900)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1900)));
IkReal gconst82=(x1899*x1901);
IkReal gconst83=((1.0)*r20*x1901);
IkReal x1903=r22*r22;
IkReal x1904=((1.0)*x1903);
CheckValue<IkReal> x1908=IKPowWithIntegerCheck(((-1.0)+x1903),-1);
if(!x1908.valid){
continue;
}
IkReal x1905=x1908.value;
if((((1.0)+(((-1.0)*x1904)))) < -0.00001)
continue;
IkReal x1906=IKsqrt(((1.0)+(((-1.0)*x1904))));
IkReal x1907=(sj0*x1905*x1906);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x1904*x1907))+x1907))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1909=((-1.0)*r21);
CheckValue<IkReal> x1912 = IKatan2WithCheck(IkReal(x1909),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1912.valid){
continue;
}
IkReal x1910=((1.0)*(x1912.value));
IkReal x1911=x1885;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1910)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1910)));
IkReal gconst82=(x1909*x1911);
IkReal gconst83=((1.0)*r20*x1911);
IkReal x1913=r22*r22;
IkReal x1914=(r12*sj0);
IkReal x1915=(cj0*r02);
CheckValue<IkReal> x1919=IKPowWithIntegerCheck(((-1.0)+x1913),-1);
if(!x1919.valid){
continue;
}
IkReal x1916=x1919.value;
if((((1.0)+(((-1.0)*x1913)))) < -0.00001)
continue;
IkReal x1917=IKsqrt(((1.0)+(((-1.0)*x1913))));
IkReal x1918=(r22*x1916*x1917);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x1914))+(((-1.0)*x1915)))))+(IKabs((((x1914*x1918))+((x1915*x1918))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1920=((1.0)*sj0);
IkReal x1921=((1.0)*cj0);
CheckValue<IkReal> x1922=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x1922.valid){
continue;
}
CheckValue<IkReal> x1923 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1920))+(((-1.0)*r02*x1921)))),IkReal(((((-1.0)*gconst82*r11*x1920))+((gconst83*r10*sj0))+((cj0*gconst83*r00))+(((-1.0)*gconst82*r01*x1921)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1923.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1922.value)))+(x1923.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1924=IKsin(j4);
IkReal x1925=IKcos(j4);
IkReal x1926=(gconst82*r11);
IkReal x1927=((1.0)*cj2);
IkReal x1928=((1.0)*sj0);
IkReal x1929=(cj1*sj2);
IkReal x1930=((1.0)*x1925);
IkReal x1931=(gconst83*x1925);
IkReal x1932=(gconst82*x1924);
IkReal x1933=((1.0)*x1924);
evalcond[0]=((((-1.0)*r22*x1930))+((r21*x1932))+(((-1.0)*gconst83*r20*x1933)));
evalcond[1]=(cj0+(((-1.0)*r12*x1930))+(((-1.0)*gconst83*r10*x1933))+((x1924*x1926)));
evalcond[2]=((((-1.0)*gconst83*r00*x1933))+((r01*x1932))+(((-1.0)*x1928))+(((-1.0)*r02*x1930)));
evalcond[3]=((((-1.0)*cj1*x1927))+((sj1*sj2))+(((-1.0)*r22*x1933))+(((-1.0)*gconst82*r21*x1930))+((r20*x1931)));
evalcond[4]=(((r00*x1931))+(((-1.0)*cj0*x1929))+(((-1.0)*cj0*sj1*x1927))+(((-1.0)*gconst82*r01*x1930))+(((-1.0)*r02*x1933)));
evalcond[5]=((((-1.0)*sj0*sj1*x1927))+(((-1.0)*r12*x1933))+(((-1.0)*x1926*x1930))+(((-1.0)*x1928*x1929))+((r10*x1931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1934=((1.0)*gconst83);
CheckValue<IkReal> x1935=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r10))+(((-1.0)*r11*x1934)))),-1);
if(!x1935.valid){
continue;
}
CheckValue<IkReal> x1936 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x1934)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1936.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1935.value)))+(x1936.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1937=IKsin(j4);
IkReal x1938=IKcos(j4);
IkReal x1939=(gconst82*r11);
IkReal x1940=((1.0)*cj2);
IkReal x1941=((1.0)*sj0);
IkReal x1942=(cj1*sj2);
IkReal x1943=((1.0)*x1938);
IkReal x1944=(gconst83*x1938);
IkReal x1945=(gconst82*x1937);
IkReal x1946=((1.0)*x1937);
evalcond[0]=((((-1.0)*r22*x1943))+(((-1.0)*gconst83*r20*x1946))+((r21*x1945)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x1946))+(((-1.0)*r12*x1943))+((x1937*x1939)));
evalcond[2]=((((-1.0)*x1941))+(((-1.0)*r02*x1943))+((r01*x1945))+(((-1.0)*gconst83*r00*x1946)));
evalcond[3]=((((-1.0)*r22*x1946))+((r20*x1944))+(((-1.0)*gconst82*r21*x1943))+((sj1*sj2))+(((-1.0)*cj1*x1940)));
evalcond[4]=((((-1.0)*cj0*x1942))+(((-1.0)*r02*x1946))+(((-1.0)*gconst82*r01*x1943))+((r00*x1944))+(((-1.0)*cj0*sj1*x1940)));
evalcond[5]=((((-1.0)*sj0*sj1*x1940))+((r10*x1944))+(((-1.0)*r12*x1946))+(((-1.0)*x1941*x1942))+(((-1.0)*x1939*x1943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1947=((1.0)*gconst83);
CheckValue<IkReal> x1948=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r00))+(((-1.0)*r01*x1947)))),-1);
if(!x1948.valid){
continue;
}
CheckValue<IkReal> x1949 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1947))+((cj0*gconst82*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1948.value)))+(x1949.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1950=IKsin(j4);
IkReal x1951=IKcos(j4);
IkReal x1952=(gconst82*r11);
IkReal x1953=((1.0)*cj2);
IkReal x1954=((1.0)*sj0);
IkReal x1955=(cj1*sj2);
IkReal x1956=((1.0)*x1951);
IkReal x1957=(gconst83*x1951);
IkReal x1958=(gconst82*x1950);
IkReal x1959=((1.0)*x1950);
evalcond[0]=((((-1.0)*r22*x1956))+((r21*x1958))+(((-1.0)*gconst83*r20*x1959)));
evalcond[1]=(cj0+((x1950*x1952))+(((-1.0)*gconst83*r10*x1959))+(((-1.0)*r12*x1956)));
evalcond[2]=((((-1.0)*x1954))+(((-1.0)*r02*x1956))+((r01*x1958))+(((-1.0)*gconst83*r00*x1959)));
evalcond[3]=((((-1.0)*r22*x1959))+((r20*x1957))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1956))+(((-1.0)*cj1*x1953)));
evalcond[4]=((((-1.0)*cj0*sj1*x1953))+(((-1.0)*cj0*x1955))+(((-1.0)*r02*x1959))+(((-1.0)*gconst82*r01*x1956))+((r00*x1957)));
evalcond[5]=((((-1.0)*x1952*x1956))+(((-1.0)*x1954*x1955))+((r10*x1957))+(((-1.0)*r12*x1959))+(((-1.0)*sj0*sj1*x1953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1960=((-1.0)*r10);
IkReal x1962 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1962)==0){
continue;
}
IkReal x1961=pow(x1962,-0.5);
CheckValue<IkReal> x1963 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1960),IKFAST_ATAN2_MAGTHRESH);
if(!x1963.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1963.value));
IkReal gconst85=(r11*x1961);
IkReal gconst86=(x1960*x1961);
CheckValue<IkReal> x1964 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1964.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1964.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1965=((-1.0)*r10);
IkReal x1966=x1961;
CheckValue<IkReal> x1968 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1965),IKFAST_ATAN2_MAGTHRESH);
if(!x1968.valid){
continue;
}
IkReal x1967=((-1.0)*(x1968.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x1967;
IkReal gconst84=x1967;
IkReal gconst85=(r11*x1966);
IkReal gconst86=(x1965*x1966);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1969=((1.0)*sj0);
IkReal x1970=((1.0)*gconst85);
CheckValue<IkReal> x1971 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x1969)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*cj0*r01*x1970))+(((-1.0)*gconst85*r11*x1969))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1971.valid){
continue;
}
CheckValue<IkReal> x1972=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x1970)))),-1);
if(!x1972.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1971.value)+(((1.5707963267949)*(x1972.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1973=IKsin(j4);
IkReal x1974=IKcos(j4);
IkReal x1975=(gconst85*r21);
IkReal x1976=(gconst86*r00);
IkReal x1977=(gconst86*r10);
IkReal x1978=((1.0)*cj2);
IkReal x1979=(gconst85*r11);
IkReal x1980=(gconst85*r01);
IkReal x1981=((1.0)*sj0);
IkReal x1982=(gconst86*r20);
IkReal x1983=(cj1*sj2);
IkReal x1984=((1.0)*x1974);
IkReal x1985=((1.0)*x1973);
evalcond[0]=(((x1973*x1975))+(((-1.0)*x1982*x1985))+(((-1.0)*r22*x1984)));
evalcond[1]=(cj0+(((-1.0)*r12*x1984))+((x1973*x1979))+(((-1.0)*x1977*x1985)));
evalcond[2]=((((-1.0)*x1976*x1985))+(((-1.0)*x1981))+(((-1.0)*r02*x1984))+((x1973*x1980)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x1975*x1984))+((x1974*x1982))+(((-1.0)*cj1*x1978))+(((-1.0)*r22*x1985)));
evalcond[4]=((((-1.0)*cj0*sj1*x1978))+(((-1.0)*x1980*x1984))+(((-1.0)*r02*x1985))+((x1974*x1976))+(((-1.0)*cj0*x1983)));
evalcond[5]=((((-1.0)*x1981*x1983))+(((-1.0)*sj0*sj1*x1978))+(((-1.0)*x1979*x1984))+(((-1.0)*r12*x1985))+((x1974*x1977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1986=((1.0)*gconst86);
CheckValue<IkReal> x1987=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r00))+(((-1.0)*r01*x1986)))),-1);
if(!x1987.valid){
continue;
}
CheckValue<IkReal> x1988 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst85*r21))+(((-1.0)*cj0*r20*x1986)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1987.value)))+(x1988.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1989=IKsin(j4);
IkReal x1990=IKcos(j4);
IkReal x1991=(gconst85*r21);
IkReal x1992=(gconst86*r00);
IkReal x1993=(gconst86*r10);
IkReal x1994=((1.0)*cj2);
IkReal x1995=(gconst85*r11);
IkReal x1996=(gconst85*r01);
IkReal x1997=((1.0)*sj0);
IkReal x1998=(gconst86*r20);
IkReal x1999=(cj1*sj2);
IkReal x2000=((1.0)*x1990);
IkReal x2001=((1.0)*x1989);
evalcond[0]=((((-1.0)*r22*x2000))+(((-1.0)*x1998*x2001))+((x1989*x1991)));
evalcond[1]=(cj0+(((-1.0)*r12*x2000))+((x1989*x1995))+(((-1.0)*x1993*x2001)));
evalcond[2]=((((-1.0)*x1992*x2001))+(((-1.0)*r02*x2000))+(((-1.0)*x1997))+((x1989*x1996)));
evalcond[3]=((((-1.0)*r22*x2001))+(((-1.0)*x1991*x2000))+((sj1*sj2))+((x1990*x1998))+(((-1.0)*cj1*x1994)));
evalcond[4]=((((-1.0)*cj0*x1999))+(((-1.0)*cj0*sj1*x1994))+(((-1.0)*r02*x2001))+(((-1.0)*x1996*x2000))+((x1990*x1992)));
evalcond[5]=((((-1.0)*x1997*x1999))+(((-1.0)*sj0*sj1*x1994))+(((-1.0)*r12*x2001))+(((-1.0)*x1995*x2000))+((x1990*x1993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2002=((-1.0)*r11);
IkReal x2004 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2004)==0){
continue;
}
IkReal x2003=pow(x2004,-0.5);
CheckValue<IkReal> x2005 = IKatan2WithCheck(IkReal(x2002),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2005.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2005.value))));
IkReal gconst88=(x2002*x2003);
IkReal gconst89=((1.0)*r10*x2003);
CheckValue<IkReal> x2006 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2006.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2006.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2007=((-1.0)*r11);
CheckValue<IkReal> x2010 = IKatan2WithCheck(IkReal(x2007),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2010.valid){
continue;
}
IkReal x2008=((1.0)*(x2010.value));
IkReal x2009=x2003;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2008)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2008)));
IkReal gconst88=(x2007*x2009);
IkReal gconst89=((1.0)*r10*x2009);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2011=((-1.0)*r11);
CheckValue<IkReal> x2014 = IKatan2WithCheck(IkReal(x2011),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2014.valid){
continue;
}
IkReal x2012=((1.0)*(x2014.value));
IkReal x2013=x2003;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2012)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2012)));
IkReal gconst88=(x2011*x2013);
IkReal gconst89=((1.0)*r10*x2013);
IkReal x2015=r12*r12;
IkReal x2016=((1.0)*sj0);
IkReal x2017=(cj0*r02);
IkReal x2018=x2003;
j4eval[0]=((IKabs(((((-1.0)*r12*x2016))+(((-1.0)*x2017)))))+(IKabs((((r12*x2017*x2018))+(((-1.0)*x2016*x2018))+((sj0*x2015*x2018))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2019=((-1.0)*r11);
CheckValue<IkReal> x2022 = IKatan2WithCheck(IkReal(x2019),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2022.valid){
continue;
}
IkReal x2020=((1.0)*(x2022.value));
IkReal x2021=x2003;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2020)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2020)));
IkReal gconst88=(x2019*x2021);
IkReal gconst89=((1.0)*r10*x2021);
IkReal x2023=r12*r12;
IkReal x2024=(cj1*cj2*r22);
IkReal x2025=(r22*sj1*sj2);
CheckValue<IkReal> x2029=IKPowWithIntegerCheck(((-1.0)+x2023),-1);
if(!x2029.valid){
continue;
}
IkReal x2026=x2029.value;
if((((1.0)+(((-1.0)*x2023)))) < -0.00001)
continue;
IkReal x2027=IKsqrt(((1.0)+(((-1.0)*x2023))));
IkReal x2028=(r12*x2026*x2027);
j4eval[0]=((IKabs((x2025+(((-1.0)*x2024)))))+(IKabs((((x2024*x2028))+(((-1.0)*x2025*x2028))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2030=(cj1*cj2);
IkReal x2031=(gconst89*r20);
IkReal x2032=(gconst88*r21);
IkReal x2033=(sj1*sj2);
CheckValue<IkReal> x2034=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2031*x2031)+(x2032*x2032)+(((-2.0)*x2031*x2032)))),-1);
if(!x2034.valid){
continue;
}
CheckValue<IkReal> x2035 = IKatan2WithCheck(IkReal((((r22*x2033))+(((-1.0)*r22*x2030)))),IkReal((((x2030*x2031))+((x2032*x2033))+(((-1.0)*x2031*x2033))+(((-1.0)*x2030*x2032)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2034.value)))+(x2035.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2036=IKsin(j4);
IkReal x2037=IKcos(j4);
IkReal x2038=((1.0)*sj0);
IkReal x2039=((1.0)*cj2);
IkReal x2040=(gconst89*r20);
IkReal x2041=(gconst89*r10);
IkReal x2042=(gconst89*r00);
IkReal x2043=(cj1*sj2);
IkReal x2044=((1.0)*x2037);
IkReal x2045=((1.0)*x2036);
IkReal x2046=(gconst88*x2036);
evalcond[0]=(((r21*x2046))+(((-1.0)*r22*x2044))+(((-1.0)*x2040*x2045)));
evalcond[1]=(cj0+((r11*x2046))+(((-1.0)*x2041*x2045))+(((-1.0)*r12*x2044)));
evalcond[2]=((((-1.0)*r02*x2044))+(((-1.0)*x2038))+((r01*x2046))+(((-1.0)*x2042*x2045)));
evalcond[3]=(((x2037*x2040))+(((-1.0)*r22*x2045))+(((-1.0)*cj1*x2039))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2044)));
evalcond[4]=(((x2037*x2042))+(((-1.0)*cj0*x2043))+(((-1.0)*r02*x2045))+(((-1.0)*gconst88*r01*x2044))+(((-1.0)*cj0*sj1*x2039)));
evalcond[5]=(((x2037*x2041))+(((-1.0)*cj2*sj1*x2038))+(((-1.0)*gconst88*r11*x2044))+(((-1.0)*x2038*x2043))+(((-1.0)*r12*x2045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2047=((1.0)*sj0);
IkReal x2048=((1.0)*cj0);
CheckValue<IkReal> x2049 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2048))+(((-1.0)*r12*x2047)))),IkReal((((cj0*gconst89*r00))+(((-1.0)*gconst88*r01*x2048))+(((-1.0)*gconst88*r11*x2047))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2049.valid){
continue;
}
CheckValue<IkReal> x2050=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2050.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2049.value)+(((1.5707963267949)*(x2050.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2051=IKsin(j4);
IkReal x2052=IKcos(j4);
IkReal x2053=((1.0)*sj0);
IkReal x2054=((1.0)*cj2);
IkReal x2055=(gconst89*r20);
IkReal x2056=(gconst89*r10);
IkReal x2057=(gconst89*r00);
IkReal x2058=(cj1*sj2);
IkReal x2059=((1.0)*x2052);
IkReal x2060=((1.0)*x2051);
IkReal x2061=(gconst88*x2051);
evalcond[0]=(((r21*x2061))+(((-1.0)*r22*x2059))+(((-1.0)*x2055*x2060)));
evalcond[1]=(cj0+(((-1.0)*r12*x2059))+((r11*x2061))+(((-1.0)*x2056*x2060)));
evalcond[2]=((((-1.0)*x2057*x2060))+(((-1.0)*r02*x2059))+((r01*x2061))+(((-1.0)*x2053)));
evalcond[3]=(((x2052*x2055))+(((-1.0)*cj1*x2054))+(((-1.0)*r22*x2060))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2059)));
evalcond[4]=((((-1.0)*gconst88*r01*x2059))+(((-1.0)*r02*x2060))+((x2052*x2057))+(((-1.0)*cj0*x2058))+(((-1.0)*cj0*sj1*x2054)));
evalcond[5]=((((-1.0)*r12*x2060))+((x2052*x2056))+(((-1.0)*cj2*sj1*x2053))+(((-1.0)*gconst88*r11*x2059))+(((-1.0)*x2053*x2058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2062=((1.0)*gconst89);
CheckValue<IkReal> x2063=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2062))+(((-1.0)*gconst88*r00)))),-1);
if(!x2063.valid){
continue;
}
CheckValue<IkReal> x2064 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2062))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2063.value)))+(x2064.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2065=IKsin(j4);
IkReal x2066=IKcos(j4);
IkReal x2067=((1.0)*sj0);
IkReal x2068=((1.0)*cj2);
IkReal x2069=(gconst89*r20);
IkReal x2070=(gconst89*r10);
IkReal x2071=(gconst89*r00);
IkReal x2072=(cj1*sj2);
IkReal x2073=((1.0)*x2066);
IkReal x2074=((1.0)*x2065);
IkReal x2075=(gconst88*x2065);
evalcond[0]=((((-1.0)*r22*x2073))+(((-1.0)*x2069*x2074))+((r21*x2075)));
evalcond[1]=(cj0+(((-1.0)*x2070*x2074))+(((-1.0)*r12*x2073))+((r11*x2075)));
evalcond[2]=((((-1.0)*r02*x2073))+(((-1.0)*x2071*x2074))+(((-1.0)*x2067))+((r01*x2075)));
evalcond[3]=(((x2066*x2069))+(((-1.0)*gconst88*r21*x2073))+(((-1.0)*r22*x2074))+((sj1*sj2))+(((-1.0)*cj1*x2068)));
evalcond[4]=(((x2066*x2071))+(((-1.0)*r02*x2074))+(((-1.0)*cj0*sj1*x2068))+(((-1.0)*gconst88*r01*x2073))+(((-1.0)*cj0*x2072)));
evalcond[5]=(((x2066*x2070))+(((-1.0)*r12*x2074))+(((-1.0)*gconst88*r11*x2073))+(((-1.0)*x2067*x2072))+(((-1.0)*cj2*sj1*x2067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2076=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2076;
j4eval[1]=IKsign(x2076);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2077=((1.0)*cj5);
IkReal x2078=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2077)));
j4eval[0]=x2078;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2077)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2078);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2079=cj5*cj5;
IkReal x2080=r11*r11;
IkReal x2081=(r11*sj5);
IkReal x2082=(cj5*r10);
IkReal x2083=((((-1.0)*x2079*x2080))+(r12*r12)+((x2079*(r10*r10)))+x2080+(((-2.0)*x2081*x2082)));
j4eval[0]=x2083;
j4eval[1]=IKsign(x2083);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x2081))+x2082))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2084=cj5*cj5;
IkReal x2085=r11*r11;
IkReal x2086=(cj5*r10);
IkReal x2087=(r11*sj5);
CheckValue<IkReal> x2088 = IKatan2WithCheck(IkReal(((((-1.0)*x2087))+x2086)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2088.valid){
continue;
}
CheckValue<IkReal> x2089=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x2084*x2085))+x2085+((x2084*(r10*r10)))+(((-2.0)*x2086*x2087)))),-1);
if(!x2089.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2088.value)+(((1.5707963267949)*(x2089.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2090=IKsin(j4);
IkReal x2091=IKcos(j4);
IkReal x2092=(cj5*r10);
IkReal x2093=(r01*sj5);
IkReal x2094=((1.0)*cj2);
IkReal x2095=(cj5*r00);
IkReal x2096=(cj5*r20);
IkReal x2097=((1.0)*x2091);
IkReal x2098=((1.0)*x2090);
IkReal x2099=(sj5*x2090);
evalcond[0]=((((-1.0)*x2096*x2098))+((r21*x2099))+(((-1.0)*r22*x2097)));
evalcond[1]=((((-1.0)*x2095*x2098))+((x2090*x2093))+(((-1.0)*r02*x2097)));
evalcond[2]=((((-1.0)*r11*sj5*x2097))+((x2091*x2092))+(((-1.0)*r12*x2098)));
evalcond[3]=((1.0)+(((-1.0)*x2092*x2098))+(((-1.0)*r12*x2097))+((r11*x2099)));
evalcond[4]=(((x2091*x2096))+(((-1.0)*r21*sj5*x2097))+((sj1*sj2))+(((-1.0)*cj1*x2094))+(((-1.0)*r22*x2098)));
evalcond[5]=(((x2091*x2095))+(((-1.0)*cj1*sj2))+(((-1.0)*x2093*x2097))+(((-1.0)*r02*x2098))+(((-1.0)*sj1*x2094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2100=((1.0)*cj5);
CheckValue<IkReal> x2101 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2100)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2101.valid){
continue;
}
CheckValue<IkReal> x2102=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2100)))),-1);
if(!x2102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2101.value)+(((1.5707963267949)*(x2102.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2103=IKsin(j4);
IkReal x2104=IKcos(j4);
IkReal x2105=(cj5*r10);
IkReal x2106=(r01*sj5);
IkReal x2107=((1.0)*cj2);
IkReal x2108=(cj5*r00);
IkReal x2109=(cj5*r20);
IkReal x2110=((1.0)*x2104);
IkReal x2111=((1.0)*x2103);
IkReal x2112=(sj5*x2103);
evalcond[0]=(((r21*x2112))+(((-1.0)*x2109*x2111))+(((-1.0)*r22*x2110)));
evalcond[1]=(((x2103*x2106))+(((-1.0)*x2108*x2111))+(((-1.0)*r02*x2110)));
evalcond[2]=(((x2104*x2105))+(((-1.0)*r11*sj5*x2110))+(((-1.0)*r12*x2111)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2110))+(((-1.0)*x2105*x2111))+((r11*x2112)));
evalcond[4]=((((-1.0)*r21*sj5*x2110))+((x2104*x2109))+(((-1.0)*cj1*x2107))+((sj1*sj2))+(((-1.0)*r22*x2111)));
evalcond[5]=((((-1.0)*sj1*x2107))+((x2104*x2108))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x2111))+(((-1.0)*x2106*x2110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2113=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2113.valid){
continue;
}
CheckValue<IkReal> x2114 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2113.value)))+(x2114.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2115=IKsin(j4);
IkReal x2116=IKcos(j4);
IkReal x2117=(cj5*r10);
IkReal x2118=(r01*sj5);
IkReal x2119=((1.0)*cj2);
IkReal x2120=(cj5*r00);
IkReal x2121=(cj5*r20);
IkReal x2122=((1.0)*x2116);
IkReal x2123=((1.0)*x2115);
IkReal x2124=(sj5*x2115);
evalcond[0]=((((-1.0)*r22*x2122))+((r21*x2124))+(((-1.0)*x2121*x2123)));
evalcond[1]=((((-1.0)*x2120*x2123))+(((-1.0)*r02*x2122))+((x2115*x2118)));
evalcond[2]=(((x2116*x2117))+(((-1.0)*r12*x2123))+(((-1.0)*r11*sj5*x2122)));
evalcond[3]=((1.0)+(((-1.0)*x2117*x2123))+((r11*x2124))+(((-1.0)*r12*x2122)));
evalcond[4]=((((-1.0)*r22*x2123))+((sj1*sj2))+(((-1.0)*cj1*x2119))+(((-1.0)*r21*sj5*x2122))+((x2116*x2121)));
evalcond[5]=((((-1.0)*sj1*x2119))+(((-1.0)*x2118*x2122))+(((-1.0)*r02*x2123))+(((-1.0)*cj1*sj2))+((x2116*x2120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2125=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2125;
j4eval[1]=IKsign(x2125);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2126=((1.0)*cj5);
IkReal x2127=((((-1.0)*r21*x2126))+(((-1.0)*r20*sj5)));
j4eval[0]=x2127;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2126))))));
j4eval[2]=IKsign(x2127);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2128=cj5*cj5;
IkReal x2129=r11*r11;
IkReal x2130=(cj5*r10);
IkReal x2131=(r11*sj5);
IkReal x2132=((((2.0)*x2130*x2131))+((x2128*x2129))+(((-1.0)*x2129))+(((-1.0)*(r12*r12)))+(((-1.0)*x2128*(r10*r10))));
j4eval[0]=x2132;
j4eval[1]=((IKabs(r12))+(IKabs((x2130+(((-1.0)*x2131))))));
j4eval[2]=IKsign(x2132);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2133=cj5*cj5;
IkReal x2134=r11*r11;
IkReal x2135=(cj5*r10);
IkReal x2136=(r11*sj5);
CheckValue<IkReal> x2137=IKPowWithIntegerCheck(IKsign(((((2.0)*x2135*x2136))+(((-1.0)*(r12*r12)))+(((-1.0)*x2133*(r10*r10)))+(((-1.0)*x2134))+((x2133*x2134)))),-1);
if(!x2137.valid){
continue;
}
CheckValue<IkReal> x2138 = IKatan2WithCheck(IkReal((x2135+(((-1.0)*x2136)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2138.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2137.value)))+(x2138.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2139=IKsin(j4);
IkReal x2140=IKcos(j4);
IkReal x2141=(cj5*r10);
IkReal x2142=(r01*sj5);
IkReal x2143=(cj5*r00);
IkReal x2144=(cj5*r20);
IkReal x2145=((1.0)*x2140);
IkReal x2146=((1.0)*x2139);
IkReal x2147=(sj5*x2139);
evalcond[0]=((((-1.0)*x2144*x2146))+(((-1.0)*r22*x2145))+((r21*x2147)));
evalcond[1]=((((-1.0)*x2143*x2146))+(((-1.0)*r02*x2145))+((x2139*x2142)));
evalcond[2]=((((-1.0)*r11*sj5*x2145))+(((-1.0)*r12*x2146))+((x2140*x2141)));
evalcond[3]=((-1.0)+((r11*x2147))+(((-1.0)*r12*x2145))+(((-1.0)*x2141*x2146)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2142*x2145))+(((-1.0)*r02*x2146))+((cj1*sj2))+((x2140*x2143)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2140*x2144))+(((-1.0)*r22*x2146))+(((-1.0)*r21*sj5*x2145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2148=((1.0)*cj5);
CheckValue<IkReal> x2149=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2148))+(((-1.0)*r20*sj5)))),-1);
if(!x2149.valid){
continue;
}
CheckValue<IkReal> x2150 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2148)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2150.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2149.value)))+(x2150.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2151=IKsin(j4);
IkReal x2152=IKcos(j4);
IkReal x2153=(cj5*r10);
IkReal x2154=(r01*sj5);
IkReal x2155=(cj5*r00);
IkReal x2156=(cj5*r20);
IkReal x2157=((1.0)*x2152);
IkReal x2158=((1.0)*x2151);
IkReal x2159=(sj5*x2151);
evalcond[0]=((((-1.0)*r22*x2157))+((r21*x2159))+(((-1.0)*x2156*x2158)));
evalcond[1]=((((-1.0)*r02*x2157))+((x2151*x2154))+(((-1.0)*x2155*x2158)));
evalcond[2]=((((-1.0)*r11*sj5*x2157))+((x2152*x2153))+(((-1.0)*r12*x2158)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2157))+(((-1.0)*x2153*x2158))+((r11*x2159)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2152*x2155))+(((-1.0)*r02*x2158))+(((-1.0)*x2154*x2157)));
evalcond[5]=(((x2152*x2156))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2158))+(((-1.0)*r21*sj5*x2157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2160 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2160.valid){
continue;
}
CheckValue<IkReal> x2161=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2160.value)+(((1.5707963267949)*(x2161.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2162=IKsin(j4);
IkReal x2163=IKcos(j4);
IkReal x2164=(cj5*r10);
IkReal x2165=(r01*sj5);
IkReal x2166=(cj5*r00);
IkReal x2167=(cj5*r20);
IkReal x2168=((1.0)*x2163);
IkReal x2169=((1.0)*x2162);
IkReal x2170=(sj5*x2162);
evalcond[0]=(((r21*x2170))+(((-1.0)*r22*x2168))+(((-1.0)*x2167*x2169)));
evalcond[1]=((((-1.0)*x2166*x2169))+((x2162*x2165))+(((-1.0)*r02*x2168)));
evalcond[2]=((((-1.0)*r11*sj5*x2168))+(((-1.0)*r12*x2169))+((x2163*x2164)));
evalcond[3]=((-1.0)+((r11*x2170))+(((-1.0)*x2164*x2169))+(((-1.0)*r12*x2168)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x2165*x2168))+((x2163*x2166))+(((-1.0)*r02*x2169)));
evalcond[5]=((((-1.0)*r21*sj5*x2168))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2169))+((x2163*x2167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2171=((-1.0)*r00);
IkReal x2173 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2173)==0){
continue;
}
IkReal x2172=pow(x2173,-0.5);
CheckValue<IkReal> x2174 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2171),IKFAST_ATAN2_MAGTHRESH);
if(!x2174.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2174.value));
IkReal gconst91=(r01*x2172);
IkReal gconst92=(x2171*x2172);
CheckValue<IkReal> x2175 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2175.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2175.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2176=((-1.0)*r00);
IkReal x2177=x2172;
CheckValue<IkReal> x2179 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2176),IKFAST_ATAN2_MAGTHRESH);
if(!x2179.valid){
continue;
}
IkReal x2178=((-1.0)*(x2179.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2178;
IkReal gconst90=x2178;
IkReal gconst91=(r01*x2177);
IkReal gconst92=(x2176*x2177);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2180=((1.0)*sj0);
IkReal x2181=((1.0)*cj0);
CheckValue<IkReal> x2182 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2181))+(((-1.0)*r12*x2180)))),IkReal((((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r11*x2180))+(((-1.0)*gconst91*r01*x2181)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2182.valid){
continue;
}
CheckValue<IkReal> x2183=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2183.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2182.value)+(((1.5707963267949)*(x2183.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2184=IKsin(j4);
IkReal x2185=IKcos(j4);
IkReal x2186=((1.0)*cj2);
IkReal x2187=(gconst92*r00);
IkReal x2188=(gconst92*r20);
IkReal x2189=((1.0)*sj0);
IkReal x2190=(gconst92*r10);
IkReal x2191=(cj1*sj2);
IkReal x2192=((1.0)*x2185);
IkReal x2193=(gconst91*x2184);
IkReal x2194=((1.0)*x2184);
evalcond[0]=((((-1.0)*x2188*x2194))+((r21*x2193))+(((-1.0)*r22*x2192)));
evalcond[1]=(cj0+((r11*x2193))+(((-1.0)*r12*x2192))+(((-1.0)*x2190*x2194)));
evalcond[2]=((((-1.0)*x2187*x2194))+(((-1.0)*r02*x2192))+(((-1.0)*x2189))+((r01*x2193)));
evalcond[3]=((((-1.0)*gconst91*r21*x2192))+((sj1*sj2))+(((-1.0)*r22*x2194))+(((-1.0)*cj1*x2186))+((x2185*x2188)));
evalcond[4]=((((-1.0)*cj0*sj1*x2186))+(((-1.0)*r02*x2194))+(((-1.0)*cj0*x2191))+(((-1.0)*gconst91*r01*x2192))+((x2185*x2187)));
evalcond[5]=((((-1.0)*x2189*x2191))+(((-1.0)*sj0*sj1*x2186))+(((-1.0)*r12*x2194))+((x2185*x2190))+(((-1.0)*gconst91*r11*x2192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2195=((1.0)*gconst92);
CheckValue<IkReal> x2196=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2195)))),-1);
if(!x2196.valid){
continue;
}
CheckValue<IkReal> x2197 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2195))+((gconst91*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2197.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2196.value)))+(x2197.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2198=IKsin(j4);
IkReal x2199=IKcos(j4);
IkReal x2200=((1.0)*cj2);
IkReal x2201=(gconst92*r00);
IkReal x2202=(gconst92*r20);
IkReal x2203=((1.0)*sj0);
IkReal x2204=(gconst92*r10);
IkReal x2205=(cj1*sj2);
IkReal x2206=((1.0)*x2199);
IkReal x2207=(gconst91*x2198);
IkReal x2208=((1.0)*x2198);
evalcond[0]=((((-1.0)*r22*x2206))+(((-1.0)*x2202*x2208))+((r21*x2207)));
evalcond[1]=((((-1.0)*x2204*x2208))+cj0+(((-1.0)*r12*x2206))+((r11*x2207)));
evalcond[2]=(((r01*x2207))+(((-1.0)*x2203))+(((-1.0)*x2201*x2208))+(((-1.0)*r02*x2206)));
evalcond[3]=((((-1.0)*cj1*x2200))+(((-1.0)*r22*x2208))+((sj1*sj2))+(((-1.0)*gconst91*r21*x2206))+((x2199*x2202)));
evalcond[4]=((((-1.0)*gconst91*r01*x2206))+(((-1.0)*cj0*sj1*x2200))+((x2199*x2201))+(((-1.0)*r02*x2208))+(((-1.0)*cj0*x2205)));
evalcond[5]=((((-1.0)*x2203*x2205))+(((-1.0)*r12*x2208))+((x2199*x2204))+(((-1.0)*gconst91*r11*x2206))+(((-1.0)*sj0*sj1*x2200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2209=((-1.0)*r01);
IkReal x2211 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2211)==0){
continue;
}
IkReal x2210=pow(x2211,-0.5);
CheckValue<IkReal> x2212 = IKatan2WithCheck(IkReal(x2209),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2212.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2212.value))));
IkReal gconst94=(x2209*x2210);
IkReal gconst95=((1.0)*r00*x2210);
CheckValue<IkReal> x2213 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2213.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2213.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2214=((-1.0)*r01);
CheckValue<IkReal> x2217 = IKatan2WithCheck(IkReal(x2214),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2217.valid){
continue;
}
IkReal x2215=((1.0)*(x2217.value));
IkReal x2216=x2210;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2215)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2215)));
IkReal gconst94=(x2214*x2216);
IkReal gconst95=((1.0)*r00*x2216);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2218=((-1.0)*r01);
CheckValue<IkReal> x2221 = IKatan2WithCheck(IkReal(x2218),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2221.valid){
continue;
}
IkReal x2219=((1.0)*(x2221.value));
IkReal x2220=x2210;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2219)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2219)));
IkReal gconst94=(x2218*x2220);
IkReal gconst95=((1.0)*r00*x2220);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2222=((-1.0)*r01);
CheckValue<IkReal> x2225 = IKatan2WithCheck(IkReal(x2222),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2225.valid){
continue;
}
IkReal x2223=((1.0)*(x2225.value));
IkReal x2224=x2210;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2223)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2223)));
IkReal gconst94=(x2222*x2224);
IkReal gconst95=((1.0)*r00*x2224);
IkReal x2226=r02*r02;
IkReal x2227=(r12*sj0);
IkReal x2228=((1.0)*cj0);
IkReal x2229=x2210;
j4eval[0]=((IKabs((((cj0*x2226*x2229))+(((-1.0)*x2228*x2229))+((r02*x2227*x2229)))))+(IKabs(((((-1.0)*r02*x2228))+(((-1.0)*x2227))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2230=((1.0)*sj0);
IkReal x2231=((1.0)*cj0);
CheckValue<IkReal> x2232=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2232.valid){
continue;
}
CheckValue<IkReal> x2233 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2231))+(((-1.0)*r12*x2230)))),IkReal(((((-1.0)*gconst94*r11*x2230))+((gconst95*r10*sj0))+(((-1.0)*gconst94*r01*x2231))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2233.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2232.value)))+(x2233.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2234=IKsin(j4);
IkReal x2235=IKcos(j4);
IkReal x2236=(gconst94*r11);
IkReal x2237=((1.0)*cj2);
IkReal x2238=(gconst94*r21);
IkReal x2239=((1.0)*sj0);
IkReal x2240=(gconst94*r01);
IkReal x2241=(cj1*sj2);
IkReal x2242=((1.0)*x2235);
IkReal x2243=(gconst95*x2235);
IkReal x2244=((1.0)*x2234);
IkReal x2245=(gconst95*x2244);
evalcond[0]=((((-1.0)*r22*x2242))+(((-1.0)*r20*x2245))+((x2234*x2238)));
evalcond[1]=(cj0+(((-1.0)*r10*x2245))+(((-1.0)*r12*x2242))+((x2234*x2236)));
evalcond[2]=((((-1.0)*r02*x2242))+((x2234*x2240))+(((-1.0)*r00*x2245))+(((-1.0)*x2239)));
evalcond[3]=((((-1.0)*cj1*x2237))+(((-1.0)*r22*x2244))+((sj1*sj2))+((r20*x2243))+(((-1.0)*x2238*x2242)));
evalcond[4]=((((-1.0)*r02*x2244))+(((-1.0)*cj0*x2241))+(((-1.0)*x2240*x2242))+((r00*x2243))+(((-1.0)*cj0*sj1*x2237)));
evalcond[5]=(((r10*x2243))+(((-1.0)*sj0*sj1*x2237))+(((-1.0)*x2236*x2242))+(((-1.0)*r12*x2244))+(((-1.0)*x2239*x2241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2246=((1.0)*gconst95);
CheckValue<IkReal> x2247=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2246)))),-1);
if(!x2247.valid){
continue;
}
CheckValue<IkReal> x2248 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2246)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2247.value)))+(x2248.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2249=IKsin(j4);
IkReal x2250=IKcos(j4);
IkReal x2251=(gconst94*r11);
IkReal x2252=((1.0)*cj2);
IkReal x2253=(gconst94*r21);
IkReal x2254=((1.0)*sj0);
IkReal x2255=(gconst94*r01);
IkReal x2256=(cj1*sj2);
IkReal x2257=((1.0)*x2250);
IkReal x2258=(gconst95*x2250);
IkReal x2259=((1.0)*x2249);
IkReal x2260=(gconst95*x2259);
evalcond[0]=((((-1.0)*r22*x2257))+((x2249*x2253))+(((-1.0)*r20*x2260)));
evalcond[1]=(cj0+((x2249*x2251))+(((-1.0)*r12*x2257))+(((-1.0)*r10*x2260)));
evalcond[2]=((((-1.0)*r00*x2260))+(((-1.0)*r02*x2257))+((x2249*x2255))+(((-1.0)*x2254)));
evalcond[3]=((((-1.0)*r22*x2259))+(((-1.0)*x2253*x2257))+((sj1*sj2))+((r20*x2258))+(((-1.0)*cj1*x2252)));
evalcond[4]=((((-1.0)*x2255*x2257))+(((-1.0)*r02*x2259))+(((-1.0)*cj0*x2256))+((r00*x2258))+(((-1.0)*cj0*sj1*x2252)));
evalcond[5]=(((r10*x2258))+(((-1.0)*sj0*sj1*x2252))+(((-1.0)*r12*x2259))+(((-1.0)*x2251*x2257))+(((-1.0)*x2254*x2256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2261=((1.0)*gconst95);
CheckValue<IkReal> x2262=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2261)))),-1);
if(!x2262.valid){
continue;
}
CheckValue<IkReal> x2263 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2261))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2263.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2262.value)))+(x2263.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2264=IKsin(j4);
IkReal x2265=IKcos(j4);
IkReal x2266=(gconst94*r11);
IkReal x2267=((1.0)*cj2);
IkReal x2268=(gconst94*r21);
IkReal x2269=((1.0)*sj0);
IkReal x2270=(gconst94*r01);
IkReal x2271=(cj1*sj2);
IkReal x2272=((1.0)*x2265);
IkReal x2273=(gconst95*x2265);
IkReal x2274=((1.0)*x2264);
IkReal x2275=(gconst95*x2274);
evalcond[0]=((((-1.0)*r20*x2275))+(((-1.0)*r22*x2272))+((x2264*x2268)));
evalcond[1]=(cj0+(((-1.0)*r10*x2275))+((x2264*x2266))+(((-1.0)*r12*x2272)));
evalcond[2]=((((-1.0)*r00*x2275))+(((-1.0)*r02*x2272))+((x2264*x2270))+(((-1.0)*x2269)));
evalcond[3]=((((-1.0)*cj1*x2267))+((sj1*sj2))+(((-1.0)*r22*x2274))+(((-1.0)*x2268*x2272))+((r20*x2273)));
evalcond[4]=(((r00*x2273))+(((-1.0)*cj0*sj1*x2267))+(((-1.0)*x2270*x2272))+(((-1.0)*r02*x2274))+(((-1.0)*cj0*x2271)));
evalcond[5]=((((-1.0)*x2266*x2272))+(((-1.0)*sj0*sj1*x2267))+((r10*x2273))+(((-1.0)*x2269*x2271))+(((-1.0)*r12*x2274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2276=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2276;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2276);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2277=((1.0)*cj5);
IkReal x2278=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2277)));
j4eval[0]=x2278;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2277)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2278);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2279=cj5*cj5;
IkReal x2280=r01*r01;
IkReal x2281=(r01*sj5);
IkReal x2282=(cj5*r00);
IkReal x2283=((((2.0)*x2281*x2282))+(((-1.0)*(r02*r02)))+(((-1.0)*x2280))+((x2279*x2280))+(((-1.0)*x2279*(r00*r00))));
j4eval[0]=x2283;
j4eval[1]=IKsign(x2283);
j4eval[2]=((IKabs(r02))+(IKabs((x2282+(((-1.0)*x2281))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2284=cj5*cj5;
IkReal x2285=r01*r01;
IkReal x2286=(r01*sj5);
IkReal x2287=(cj5*r00);
CheckValue<IkReal> x2288 = IKatan2WithCheck(IkReal((x2287+(((-1.0)*x2286)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2288.valid){
continue;
}
CheckValue<IkReal> x2289=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x2285))+(((2.0)*x2286*x2287))+(((-1.0)*x2284*(r00*r00)))+((x2284*x2285)))),-1);
if(!x2289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2288.value)+(((1.5707963267949)*(x2289.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2290=IKsin(j4);
IkReal x2291=IKcos(j4);
IkReal x2292=(cj5*r10);
IkReal x2293=(r01*sj5);
IkReal x2294=((1.0)*cj2);
IkReal x2295=(cj5*r00);
IkReal x2296=(cj5*r20);
IkReal x2297=((1.0)*x2291);
IkReal x2298=((1.0)*x2290);
IkReal x2299=(sj5*x2290);
evalcond[0]=(((r21*x2299))+(((-1.0)*x2296*x2298))+(((-1.0)*r22*x2297)));
evalcond[1]=((((-1.0)*x2292*x2298))+(((-1.0)*r12*x2297))+((r11*x2299)));
evalcond[2]=((((-1.0)*x2293*x2297))+(((-1.0)*r02*x2298))+((x2291*x2295)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2297))+(((-1.0)*x2295*x2298))+((x2290*x2293)));
evalcond[4]=(((x2291*x2296))+((sj1*sj2))+(((-1.0)*r21*sj5*x2297))+(((-1.0)*cj1*x2294))+(((-1.0)*r22*x2298)));
evalcond[5]=((((-1.0)*r11*sj5*x2297))+((x2291*x2292))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2298))+(((-1.0)*sj1*x2294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2300=((1.0)*cj5);
CheckValue<IkReal> x2301=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2300))+(((-1.0)*r10*sj5)))),-1);
if(!x2301.valid){
continue;
}
CheckValue<IkReal> x2302 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2300))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2301.value)))+(x2302.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2303=IKsin(j4);
IkReal x2304=IKcos(j4);
IkReal x2305=(cj5*r10);
IkReal x2306=(r01*sj5);
IkReal x2307=((1.0)*cj2);
IkReal x2308=(cj5*r00);
IkReal x2309=(cj5*r20);
IkReal x2310=((1.0)*x2304);
IkReal x2311=((1.0)*x2303);
IkReal x2312=(sj5*x2303);
evalcond[0]=((((-1.0)*r22*x2310))+((r21*x2312))+(((-1.0)*x2309*x2311)));
evalcond[1]=(((r11*x2312))+(((-1.0)*r12*x2310))+(((-1.0)*x2305*x2311)));
evalcond[2]=(((x2304*x2308))+(((-1.0)*r02*x2311))+(((-1.0)*x2306*x2310)));
evalcond[3]=((-1.0)+((x2303*x2306))+(((-1.0)*x2308*x2311))+(((-1.0)*r02*x2310)));
evalcond[4]=((((-1.0)*r22*x2311))+((x2304*x2309))+((sj1*sj2))+(((-1.0)*cj1*x2307))+(((-1.0)*r21*sj5*x2310)));
evalcond[5]=((((-1.0)*sj1*x2307))+((x2304*x2305))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2310))+(((-1.0)*r12*x2311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2313=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2313.valid){
continue;
}
CheckValue<IkReal> x2314 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2314.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2313.value)))+(x2314.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2315=IKsin(j4);
IkReal x2316=IKcos(j4);
IkReal x2317=(cj5*r10);
IkReal x2318=(r01*sj5);
IkReal x2319=((1.0)*cj2);
IkReal x2320=(cj5*r00);
IkReal x2321=(cj5*r20);
IkReal x2322=((1.0)*x2316);
IkReal x2323=((1.0)*x2315);
IkReal x2324=(sj5*x2315);
evalcond[0]=((((-1.0)*x2321*x2323))+(((-1.0)*r22*x2322))+((r21*x2324)));
evalcond[1]=(((r11*x2324))+(((-1.0)*r12*x2322))+(((-1.0)*x2317*x2323)));
evalcond[2]=(((x2316*x2320))+(((-1.0)*x2318*x2322))+(((-1.0)*r02*x2323)));
evalcond[3]=((-1.0)+((x2315*x2318))+(((-1.0)*x2320*x2323))+(((-1.0)*r02*x2322)));
evalcond[4]=(((x2316*x2321))+(((-1.0)*r22*x2323))+((sj1*sj2))+(((-1.0)*cj1*x2319))+(((-1.0)*r21*sj5*x2322)));
evalcond[5]=(((x2316*x2317))+(((-1.0)*r11*sj5*x2322))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2323))+(((-1.0)*sj1*x2319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2325=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2325;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2325);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2326=((1.0)*cj5);
IkReal x2327=((((-1.0)*r20*sj5))+(((-1.0)*r21*x2326)));
j4eval[0]=x2327;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x2326))))));
j4eval[2]=IKsign(x2327);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2328=cj5*cj5;
IkReal x2329=r01*r01;
IkReal x2330=(cj5*r00);
IkReal x2331=(r01*sj5);
IkReal x2332=(x2329+((x2328*(r00*r00)))+(((-2.0)*x2330*x2331))+(r02*r02)+(((-1.0)*x2328*x2329)));
j4eval[0]=x2332;
j4eval[1]=((IKabs(r02))+(IKabs((x2330+(((-1.0)*x2331))))));
j4eval[2]=IKsign(x2332);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2333=cj5*cj5;
IkReal x2334=r01*r01;
IkReal x2335=(r01*sj5);
IkReal x2336=(cj5*r00);
CheckValue<IkReal> x2337 = IKatan2WithCheck(IkReal((x2336+(((-1.0)*x2335)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2337.valid){
continue;
}
CheckValue<IkReal> x2338=IKPowWithIntegerCheck(IKsign((x2334+((x2333*(r00*r00)))+(((-2.0)*x2335*x2336))+(r02*r02)+(((-1.0)*x2333*x2334)))),-1);
if(!x2338.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2337.value)+(((1.5707963267949)*(x2338.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2339=IKsin(j4);
IkReal x2340=IKcos(j4);
IkReal x2341=(cj5*r10);
IkReal x2342=(r01*sj5);
IkReal x2343=(cj5*r00);
IkReal x2344=(cj5*r20);
IkReal x2345=((1.0)*x2340);
IkReal x2346=((1.0)*x2339);
IkReal x2347=(sj5*x2339);
evalcond[0]=((((-1.0)*x2344*x2346))+(((-1.0)*r22*x2345))+((r21*x2347)));
evalcond[1]=((((-1.0)*x2341*x2346))+((r11*x2347))+(((-1.0)*r12*x2345)));
evalcond[2]=(((x2340*x2343))+(((-1.0)*r02*x2346))+(((-1.0)*x2342*x2345)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2345))+(((-1.0)*x2343*x2346))+((x2339*x2342)));
evalcond[4]=(((cj2*sj1))+((x2340*x2341))+((cj1*sj2))+(((-1.0)*r11*sj5*x2345))+(((-1.0)*r12*x2346)));
evalcond[5]=(((x2340*x2344))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2346))+(((-1.0)*r21*sj5*x2345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2348=((1.0)*cj5);
CheckValue<IkReal> x2349=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2348))+(((-1.0)*r20*sj5)))),-1);
if(!x2349.valid){
continue;
}
CheckValue<IkReal> x2350 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x2348)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2350.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2349.value)))+(x2350.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2351=IKsin(j4);
IkReal x2352=IKcos(j4);
IkReal x2353=(cj5*r10);
IkReal x2354=(r01*sj5);
IkReal x2355=(cj5*r00);
IkReal x2356=(cj5*r20);
IkReal x2357=((1.0)*x2352);
IkReal x2358=((1.0)*x2351);
IkReal x2359=(sj5*x2351);
evalcond[0]=((((-1.0)*x2356*x2358))+(((-1.0)*r22*x2357))+((r21*x2359)));
evalcond[1]=(((r11*x2359))+(((-1.0)*x2353*x2358))+(((-1.0)*r12*x2357)));
evalcond[2]=((((-1.0)*x2354*x2357))+((x2352*x2355))+(((-1.0)*r02*x2358)));
evalcond[3]=((1.0)+(((-1.0)*x2355*x2358))+((x2351*x2354))+(((-1.0)*r02*x2357)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2357))+((x2352*x2353))+((cj1*sj2))+(((-1.0)*r12*x2358)));
evalcond[5]=(((x2352*x2356))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2358))+(((-1.0)*r21*sj5*x2357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2360 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2360.valid){
continue;
}
CheckValue<IkReal> x2361=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2360.value)+(((1.5707963267949)*(x2361.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2362=IKsin(j4);
IkReal x2363=IKcos(j4);
IkReal x2364=(cj5*r10);
IkReal x2365=(r01*sj5);
IkReal x2366=(cj5*r00);
IkReal x2367=(cj5*r20);
IkReal x2368=((1.0)*x2363);
IkReal x2369=((1.0)*x2362);
IkReal x2370=(sj5*x2362);
evalcond[0]=((((-1.0)*r22*x2368))+(((-1.0)*x2367*x2369))+((r21*x2370)));
evalcond[1]=((((-1.0)*x2364*x2369))+(((-1.0)*r12*x2368))+((r11*x2370)));
evalcond[2]=((((-1.0)*x2365*x2368))+((x2363*x2366))+(((-1.0)*r02*x2369)));
evalcond[3]=((1.0)+((x2362*x2365))+(((-1.0)*x2366*x2369))+(((-1.0)*r02*x2368)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2368))+((cj1*sj2))+((x2363*x2364))+(((-1.0)*r12*x2369)));
evalcond[5]=((((-1.0)*r21*sj5*x2368))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2369))+((x2363*x2367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2371=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2371);
rxp1_1=(px*r21);
rxp1_2=(r11*x2371);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2372=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2372);
rxp1_1=(px*r21);
rxp1_2=(r11*x2372);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2373=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2373);
rxp1_1=(px*r21);
rxp1_2=(r11*x2373);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2376=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2376.valid){
continue;
}
IkReal x2374=x2376.value;
IkReal x2375=(sj0*x2374);
cj4array[0]=(((cj2*sj1*x2375))+((cj1*sj2*x2375)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2377=IKsin(j4);
IkReal x2378=IKcos(j4);
IkReal x2379=(cj5*r20);
IkReal x2380=(r21*sj5);
IkReal x2381=((1.0)*x2377);
IkReal x2382=((1.0)*x2378);
evalcond[0]=((-1.0)*r02*x2377);
evalcond[1]=((((-1.0)*r02*x2382))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x2379*x2381))+((x2377*x2380)));
evalcond[3]=((((-1.0)*cj5*r10*x2381))+((r11*sj5*x2377)));
evalcond[4]=((((-1.0)*x2380*x2382))+((x2378*x2379))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2384=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2384.valid){
continue;
}
IkReal x2383=x2384.value;
cj4array[0]=((((-1.0)*sj1*sj2*x2383))+((cj1*cj2*x2383)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2385=IKsin(j4);
IkReal x2386=IKcos(j4);
IkReal x2387=(r11*sj5);
IkReal x2388=((1.0)*sj0);
IkReal x2389=((1.0)*x2386);
IkReal x2390=((1.0)*cj5*x2385);
evalcond[0]=((-1.0)*r02*x2385);
evalcond[1]=((((-1.0)*r02*x2389))+(((-1.0)*x2388)));
evalcond[2]=(((r21*sj5*x2385))+(((-1.0)*r20*x2390)));
evalcond[3]=((((-1.0)*r10*x2390))+((x2385*x2387)));
evalcond[4]=((((-1.0)*cj1*sj2*x2388))+(((-1.0)*cj2*sj1*x2388))+((cj5*r10*x2386))+(((-1.0)*x2387*x2389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2391=IKPowWithIntegerCheck(r02,-1);
if(!x2391.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2391.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2392=IKsin(j4);
IkReal x2393=IKcos(j4);
IkReal x2394=((1.0)*sj0);
IkReal x2395=(cj5*x2393);
IkReal x2396=(sj5*x2392);
IkReal x2397=((1.0)*sj5*x2393);
IkReal x2398=((1.0)*cj5*x2392);
evalcond[0]=((-1.0)*r02*x2392);
evalcond[1]=((((-1.0)*r20*x2398))+((r21*x2396)));
evalcond[2]=((((-1.0)*r10*x2398))+((r11*x2396)));
evalcond[3]=(((r20*x2395))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x2397)));
evalcond[4]=((((-1.0)*cj1*sj2*x2394))+(((-1.0)*cj2*sj1*x2394))+((r10*x2395))+(((-1.0)*r11*x2397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2399=((1.0)*sj0);
IkReal x2400=((1.0)*cj0);
CheckValue<IkReal> x2401 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2400))+(((-1.0)*r12*x2399)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2400))+(((-1.0)*r11*sj5*x2399)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2401.valid){
continue;
}
CheckValue<IkReal> x2402=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2402.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2401.value)+(((1.5707963267949)*(x2402.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2403=IKsin(j4);
IkReal x2404=IKcos(j4);
IkReal x2405=(cj5*r10);
IkReal x2406=(r01*sj5);
IkReal x2407=((1.0)*cj2);
IkReal x2408=(cj5*r00);
IkReal x2409=((1.0)*sj0);
IkReal x2410=(cj5*r20);
IkReal x2411=(cj1*sj2);
IkReal x2412=((1.0)*x2404);
IkReal x2413=((1.0)*x2403);
IkReal x2414=(sj5*x2403);
evalcond[0]=(((r21*x2414))+(((-1.0)*r22*x2412))+(((-1.0)*x2410*x2413)));
evalcond[1]=(((r11*x2414))+cj0+(((-1.0)*r12*x2412))+(((-1.0)*x2405*x2413)));
evalcond[2]=(((x2403*x2406))+(((-1.0)*x2408*x2413))+(((-1.0)*x2409))+(((-1.0)*r02*x2412)));
evalcond[3]=(((x2404*x2410))+((sj1*sj2))+(((-1.0)*cj1*x2407))+(((-1.0)*r21*sj5*x2412))+(((-1.0)*r22*x2413)));
evalcond[4]=((((-1.0)*cj0*x2411))+(((-1.0)*x2406*x2412))+(((-1.0)*r02*x2413))+(((-1.0)*cj0*sj1*x2407))+((x2404*x2408)));
evalcond[5]=((((-1.0)*sj0*sj1*x2407))+(((-1.0)*r12*x2413))+(((-1.0)*r11*sj5*x2412))+((x2404*x2405))+(((-1.0)*x2409*x2411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2415=((1.0)*cj5);
CheckValue<IkReal> x2416=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2415)))),-1);
if(!x2416.valid){
continue;
}
CheckValue<IkReal> x2417 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2415)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2417.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2416.value)))+(x2417.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2418=IKsin(j4);
IkReal x2419=IKcos(j4);
IkReal x2420=(cj5*r10);
IkReal x2421=(r01*sj5);
IkReal x2422=((1.0)*cj2);
IkReal x2423=(cj5*r00);
IkReal x2424=((1.0)*sj0);
IkReal x2425=(cj5*r20);
IkReal x2426=(cj1*sj2);
IkReal x2427=((1.0)*x2419);
IkReal x2428=((1.0)*x2418);
IkReal x2429=(sj5*x2418);
evalcond[0]=(((r21*x2429))+(((-1.0)*x2425*x2428))+(((-1.0)*r22*x2427)));
evalcond[1]=(cj0+(((-1.0)*x2420*x2428))+(((-1.0)*r12*x2427))+((r11*x2429)));
evalcond[2]=(((x2418*x2421))+(((-1.0)*r02*x2427))+(((-1.0)*x2423*x2428))+(((-1.0)*x2424)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x2428))+((x2419*x2425))+(((-1.0)*r21*sj5*x2427))+(((-1.0)*cj1*x2422)));
evalcond[4]=((((-1.0)*r02*x2428))+(((-1.0)*cj0*sj1*x2422))+(((-1.0)*cj0*x2426))+(((-1.0)*x2421*x2427))+((x2419*x2423)));
evalcond[5]=((((-1.0)*r11*sj5*x2427))+(((-1.0)*x2424*x2426))+(((-1.0)*r12*x2428))+(((-1.0)*sj0*sj1*x2422))+((x2419*x2420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2430=((1.0)*cj5);
CheckValue<IkReal> x2431=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2430)))),-1);
if(!x2431.valid){
continue;
}
CheckValue<IkReal> x2432 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2430)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2431.value)))+(x2432.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2433=IKsin(j4);
IkReal x2434=IKcos(j4);
IkReal x2435=(cj5*r10);
IkReal x2436=(r01*sj5);
IkReal x2437=((1.0)*cj2);
IkReal x2438=(cj5*r00);
IkReal x2439=((1.0)*sj0);
IkReal x2440=(cj5*r20);
IkReal x2441=(cj1*sj2);
IkReal x2442=((1.0)*x2434);
IkReal x2443=((1.0)*x2433);
IkReal x2444=(sj5*x2433);
evalcond[0]=((((-1.0)*r22*x2442))+(((-1.0)*x2440*x2443))+((r21*x2444)));
evalcond[1]=(cj0+(((-1.0)*x2435*x2443))+(((-1.0)*r12*x2442))+((r11*x2444)));
evalcond[2]=((((-1.0)*x2439))+((x2433*x2436))+(((-1.0)*x2438*x2443))+(((-1.0)*r02*x2442)));
evalcond[3]=((((-1.0)*r21*sj5*x2442))+((sj1*sj2))+(((-1.0)*cj1*x2437))+((x2434*x2440))+(((-1.0)*r22*x2443)));
evalcond[4]=((((-1.0)*cj0*x2441))+(((-1.0)*x2436*x2442))+(((-1.0)*cj0*sj1*x2437))+(((-1.0)*r02*x2443))+((x2434*x2438)));
evalcond[5]=((((-1.0)*sj0*sj1*x2437))+(((-1.0)*r11*sj5*x2442))+(((-1.0)*x2439*x2441))+(((-1.0)*r12*x2443))+((x2434*x2435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2445=cj5*cj5;
IkReal x2446=r21*r21;
IkReal x2447=(sj1*sj2);
IkReal x2448=(r21*sj5);
IkReal x2449=(cj1*cj2);
IkReal x2450=(cj5*r20);
CheckValue<IkReal> x2451=IKPowWithIntegerCheck(IKsign((x2446+(r22*r22)+((x2445*(r20*r20)))+(((-1.0)*x2445*x2446))+(((-2.0)*x2448*x2450)))),-1);
if(!x2451.valid){
continue;
}
CheckValue<IkReal> x2452 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2449))+((r22*x2447)))),IkReal((((x2447*x2448))+((x2449*x2450))+(((-1.0)*x2447*x2450))+(((-1.0)*x2448*x2449)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2451.value)))+(x2452.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2453=IKsin(j4);
IkReal x2454=IKcos(j4);
IkReal x2455=(r21*sj5);
IkReal x2456=(cj5*r20);
IkReal x2457=((1.0)*x2454);
IkReal x2458=((1.0)*x2453);
evalcond[0]=(((x2453*x2455))+(((-1.0)*x2456*x2458))+(((-1.0)*r22*x2457)));
evalcond[1]=((((-1.0)*cj1*cj2))+((x2454*x2456))+((sj1*sj2))+(((-1.0)*r22*x2458))+(((-1.0)*x2455*x2457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2459=(cj5*sj4);
IkReal x2460=(sj4*sj5);
if( IKabs((((r01*x2460))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2459)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x2459))+(((-1.0)*r11*x2460))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x2460))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2459))))+IKsqr((((r10*x2459))+(((-1.0)*r11*x2460))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x2460))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2459))), (((r10*x2459))+(((-1.0)*r11*x2460))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2461=IKcos(j0);
IkReal x2462=IKsin(j0);
IkReal x2463=(cj4*cj5);
IkReal x2464=((0.1)*sj5);
IkReal x2465=(cj5*r11);
IkReal x2466=(cj5*r01);
IkReal x2467=(r11*sj5);
IkReal x2468=((1.0)*sj4);
IkReal x2469=((1.0)*cj2);
IkReal x2470=(sj1*sj2);
IkReal x2471=((1.0)*cj4);
IkReal x2472=(r01*sj5);
IkReal x2473=((1.0)*cj1*sj2);
IkReal x2474=(cj1*x2461);
IkReal x2475=(sj1*x2461);
IkReal x2476=((0.3922)*x2462);
IkReal x2477=(cj1*x2462);
evalcond[0]=(x2461+(((-1.0)*r12*x2471))+(((-1.0)*cj5*r10*x2468))+((sj4*x2467)));
evalcond[1]=(((sj4*x2472))+(((-1.0)*x2462))+(((-1.0)*cj5*r00*x2468))+(((-1.0)*r02*x2471)));
evalcond[2]=(((r00*sj5))+x2466+((x2461*x2470))+(((-1.0)*x2469*x2474)));
evalcond[3]=(x2465+((r10*sj5))+(((-1.0)*x2469*x2477))+((x2462*x2470)));
evalcond[4]=((((-1.0)*x2471*x2472))+(((-1.0)*x2469*x2475))+(((-1.0)*r02*x2468))+(((-1.0)*x2461*x2473))+((r00*x2463)));
evalcond[5]=((((-1.0)*x2467*x2471))+(((-1.0)*r12*x2468))+(((-1.0)*sj1*x2462*x2469))+(((-1.0)*x2462*x2473))+((r10*x2463)));
evalcond[6]=((((-1.0)*r00*x2464))+(((-0.1)*x2466))+(((-0.134)*x2462))+(((0.3922)*cj2*x2474))+(((-1.0)*px))+(((-0.3922)*x2461*x2470))+(((0.425)*x2474)));
evalcond[7]=((((-0.1)*x2465))+(((-1.0)*py))+(((0.425)*x2477))+(((0.134)*x2461))+(((-1.0)*x2470*x2476))+((cj1*cj2*x2476))+(((-1.0)*r10*x2464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2478=((1.0)*cj5);
IkReal x2479=((1.0)*sj5);
CheckValue<IkReal> x2480 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x2478))+(((-1.0)*r10*x2479)))),IkReal(((((-1.0)*r01*x2478))+(((-1.0)*r00*x2479)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2480.valid){
continue;
}
CheckValue<IkReal> x2481=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x2481.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2480.value)+(((1.5707963267949)*(x2481.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2482=IKcos(j0);
IkReal x2483=IKsin(j0);
IkReal x2484=((0.1)*sj5);
IkReal x2485=(cj5*r11);
IkReal x2486=(cj5*r01);
IkReal x2487=(cj1*cj2);
IkReal x2488=(sj1*sj2);
IkReal x2489=(cj1*x2482);
IkReal x2490=((0.3922)*x2483);
evalcond[0]=(((x2482*x2488))+((r00*sj5))+x2486+(((-1.0)*x2482*x2487)));
evalcond[1]=(x2485+((r10*sj5))+((x2483*x2488))+(((-1.0)*x2483*x2487)));
evalcond[2]=((((-0.134)*x2483))+(((0.3922)*x2482*x2487))+(((-1.0)*r00*x2484))+(((-1.0)*px))+(((-0.1)*x2486))+(((-0.3922)*x2482*x2488))+(((0.425)*x2489)));
evalcond[3]=((((0.425)*cj1*x2483))+(((-1.0)*r10*x2484))+((x2487*x2490))+(((-1.0)*py))+(((-0.1)*x2485))+(((-1.0)*x2488*x2490))+(((0.134)*x2482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2491=((1.0)*cj5);
IkReal x2492=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2491)));
j4eval[0]=x2492;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2491))))));
j4eval[2]=IKsign(x2492);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2493=((1.0)*cj5);
IkReal x2494=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2493)));
j4eval[0]=x2494;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2493))))));
j4eval[2]=IKsign(x2494);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2495=((1.0)*sj0);
IkReal x2496=((1.0)*cj0);
IkReal x2497=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2497;
j4eval[1]=((IKabs(((((-1.0)*r02*x2496))+(((-1.0)*r12*x2495)))))+(IKabs(((((-1.0)*r01*sj5*x2496))+((cj0*cj5*r00))+(((-1.0)*r11*sj5*x2495))+((cj5*r10*sj0))))));
j4eval[2]=IKsign(x2497);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2498=((-1.0)*r20);
IkReal x2500 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2500)==0){
continue;
}
IkReal x2499=pow(x2500,-0.5);
CheckValue<IkReal> x2501 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2498),IKFAST_ATAN2_MAGTHRESH);
if(!x2501.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2501.value));
IkReal gconst79=(r21*x2499);
IkReal gconst80=(x2498*x2499);
CheckValue<IkReal> x2502 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2502.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2502.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2503=((-1.0)*r20);
IkReal x2504=x2499;
CheckValue<IkReal> x2506 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2503),IKFAST_ATAN2_MAGTHRESH);
if(!x2506.valid){
continue;
}
IkReal x2505=((-1.0)*(x2506.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2505;
IkReal gconst78=x2505;
IkReal gconst79=(r21*x2504);
IkReal gconst80=(x2503*x2504);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2507=((-1.0)*r20);
IkReal x2508=x2499;
CheckValue<IkReal> x2510 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2507),IKFAST_ATAN2_MAGTHRESH);
if(!x2510.valid){
continue;
}
IkReal x2509=((-1.0)*(x2510.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2509;
IkReal gconst78=x2509;
IkReal gconst79=(r21*x2508);
IkReal gconst80=(x2507*x2508);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2511=((-1.0)*r20);
IkReal x2512=x2499;
CheckValue<IkReal> x2514 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2511),IKFAST_ATAN2_MAGTHRESH);
if(!x2514.valid){
continue;
}
IkReal x2513=((-1.0)*(x2514.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2513;
IkReal gconst78=x2513;
IkReal gconst79=(r21*x2512);
IkReal gconst80=(x2511*x2512);
IkReal x2515=r22*r22;
CheckValue<IkReal> x2518=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2515))),-1);
if(!x2518.valid){
continue;
}
IkReal x2516=x2518.value;
IkReal x2517=(x2515+((x2516*(r21*r21*r21*r21)))+((x2516*(r20*r20*r20*r20)))+(((2.0)*x2516*(r20*r20)*(r21*r21))));
j4eval[0]=x2517;
j4eval[1]=IKsign(x2517);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2519=(sj1*sj2);
IkReal x2520=(gconst80*r20);
IkReal x2521=(gconst79*r21);
IkReal x2522=(cj1*cj2);
CheckValue<IkReal> x2523 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2522))+((r22*x2519)))),IkReal((((x2519*x2521))+(((-1.0)*x2521*x2522))+((x2520*x2522))+(((-1.0)*x2519*x2520)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2523.valid){
continue;
}
CheckValue<IkReal> x2524=IKPowWithIntegerCheck(IKsign(((x2521*x2521)+(r22*r22)+(x2520*x2520)+(((-2.0)*x2520*x2521)))),-1);
if(!x2524.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2523.value)+(((1.5707963267949)*(x2524.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2525=IKsin(j4);
IkReal x2526=IKcos(j4);
IkReal x2527=(gconst79*r01);
IkReal x2528=(gconst79*r21);
IkReal x2529=((1.0)*cj2);
IkReal x2530=(gconst79*r11);
IkReal x2531=((1.0)*sj0);
IkReal x2532=(cj1*sj2);
IkReal x2533=((1.0)*x2526);
IkReal x2534=(gconst80*x2526);
IkReal x2535=((1.0)*x2525);
IkReal x2536=(gconst80*x2535);
evalcond[0]=((((-1.0)*r20*x2536))+(((-1.0)*r22*x2533))+((x2525*x2528)));
evalcond[1]=(cj0+(((-1.0)*r10*x2536))+((x2525*x2530))+(((-1.0)*r12*x2533)));
evalcond[2]=((((-1.0)*r00*x2536))+(((-1.0)*r02*x2533))+(((-1.0)*x2531))+((x2525*x2527)));
evalcond[3]=((((-1.0)*x2528*x2533))+((r20*x2534))+((sj1*sj2))+(((-1.0)*cj1*x2529))+(((-1.0)*r22*x2535)));
evalcond[4]=((((-1.0)*cj0*sj1*x2529))+(((-1.0)*r02*x2535))+(((-1.0)*x2527*x2533))+((r00*x2534))+(((-1.0)*cj0*x2532)));
evalcond[5]=(((r10*x2534))+(((-1.0)*x2530*x2533))+(((-1.0)*x2531*x2532))+(((-1.0)*r12*x2535))+(((-1.0)*sj0*sj1*x2529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2537=((1.0)*gconst80);
CheckValue<IkReal> x2538 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2537))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2538.valid){
continue;
}
CheckValue<IkReal> x2539=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r10))+(((-1.0)*r11*x2537)))),-1);
if(!x2539.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2538.value)+(((1.5707963267949)*(x2539.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2540=IKsin(j4);
IkReal x2541=IKcos(j4);
IkReal x2542=(gconst79*r01);
IkReal x2543=(gconst79*r21);
IkReal x2544=((1.0)*cj2);
IkReal x2545=(gconst79*r11);
IkReal x2546=((1.0)*sj0);
IkReal x2547=(cj1*sj2);
IkReal x2548=((1.0)*x2541);
IkReal x2549=(gconst80*x2541);
IkReal x2550=((1.0)*x2540);
IkReal x2551=(gconst80*x2550);
evalcond[0]=((((-1.0)*r20*x2551))+((x2540*x2543))+(((-1.0)*r22*x2548)));
evalcond[1]=((((-1.0)*r12*x2548))+cj0+((x2540*x2545))+(((-1.0)*r10*x2551)));
evalcond[2]=((((-1.0)*r00*x2551))+(((-1.0)*x2546))+((x2540*x2542))+(((-1.0)*r02*x2548)));
evalcond[3]=((((-1.0)*x2543*x2548))+((sj1*sj2))+((r20*x2549))+(((-1.0)*cj1*x2544))+(((-1.0)*r22*x2550)));
evalcond[4]=((((-1.0)*x2542*x2548))+(((-1.0)*r02*x2550))+((r00*x2549))+(((-1.0)*cj0*x2547))+(((-1.0)*cj0*sj1*x2544)));
evalcond[5]=((((-1.0)*r12*x2550))+(((-1.0)*x2545*x2548))+(((-1.0)*sj0*sj1*x2544))+(((-1.0)*x2546*x2547))+((r10*x2549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2552=((1.0)*gconst80);
CheckValue<IkReal> x2553=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r00))+(((-1.0)*r01*x2552)))),-1);
if(!x2553.valid){
continue;
}
CheckValue<IkReal> x2554 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x2552)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2553.value)))+(x2554.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2555=IKsin(j4);
IkReal x2556=IKcos(j4);
IkReal x2557=(gconst79*r01);
IkReal x2558=(gconst79*r21);
IkReal x2559=((1.0)*cj2);
IkReal x2560=(gconst79*r11);
IkReal x2561=((1.0)*sj0);
IkReal x2562=(cj1*sj2);
IkReal x2563=((1.0)*x2556);
IkReal x2564=(gconst80*x2556);
IkReal x2565=((1.0)*x2555);
IkReal x2566=(gconst80*x2565);
evalcond[0]=((((-1.0)*r22*x2563))+(((-1.0)*r20*x2566))+((x2555*x2558)));
evalcond[1]=(cj0+((x2555*x2560))+(((-1.0)*r12*x2563))+(((-1.0)*r10*x2566)));
evalcond[2]=((((-1.0)*r00*x2566))+(((-1.0)*r02*x2563))+(((-1.0)*x2561))+((x2555*x2557)));
evalcond[3]=((((-1.0)*r22*x2565))+(((-1.0)*x2558*x2563))+((sj1*sj2))+((r20*x2564))+(((-1.0)*cj1*x2559)));
evalcond[4]=((((-1.0)*cj0*x2562))+((r00*x2564))+(((-1.0)*cj0*sj1*x2559))+(((-1.0)*r02*x2565))+(((-1.0)*x2557*x2563)));
evalcond[5]=(((r10*x2564))+(((-1.0)*x2561*x2562))+(((-1.0)*x2560*x2563))+(((-1.0)*sj0*sj1*x2559))+(((-1.0)*r12*x2565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2567=((-1.0)*r21);
IkReal x2569 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2569)==0){
continue;
}
IkReal x2568=pow(x2569,-0.5);
CheckValue<IkReal> x2570 = IKatan2WithCheck(IkReal(x2567),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2570.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2570.value))));
IkReal gconst82=(x2567*x2568);
IkReal gconst83=((1.0)*r20*x2568);
CheckValue<IkReal> x2571 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2571.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2571.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2572=((-1.0)*r21);
CheckValue<IkReal> x2575 = IKatan2WithCheck(IkReal(x2572),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2575.valid){
continue;
}
IkReal x2573=((1.0)*(x2575.value));
IkReal x2574=x2568;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2573)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2573)));
IkReal gconst82=(x2572*x2574);
IkReal gconst83=((1.0)*r20*x2574);
IkReal x2576=r22*r22;
IkReal x2577=((1.0)*x2576);
CheckValue<IkReal> x2581=IKPowWithIntegerCheck(((-1.0)+x2576),-1);
if(!x2581.valid){
continue;
}
IkReal x2578=x2581.value;
if((((1.0)+(((-1.0)*x2577)))) < -0.00001)
continue;
IkReal x2579=IKsqrt(((1.0)+(((-1.0)*x2577))));
IkReal x2580=(cj0*x2578*x2579);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x2580+(((-1.0)*x2577*x2580))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2582=((-1.0)*r21);
CheckValue<IkReal> x2585 = IKatan2WithCheck(IkReal(x2582),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2585.valid){
continue;
}
IkReal x2583=((1.0)*(x2585.value));
IkReal x2584=x2568;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2583)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2583)));
IkReal gconst82=(x2582*x2584);
IkReal gconst83=((1.0)*r20*x2584);
IkReal x2586=r22*r22;
IkReal x2587=((1.0)*x2586);
CheckValue<IkReal> x2591=IKPowWithIntegerCheck(((-1.0)+x2586),-1);
if(!x2591.valid){
continue;
}
IkReal x2588=x2591.value;
if((((1.0)+(((-1.0)*x2587)))) < -0.00001)
continue;
IkReal x2589=IKsqrt(((1.0)+(((-1.0)*x2587))));
IkReal x2590=(sj0*x2588*x2589);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x2590+(((-1.0)*x2587*x2590))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2592=((-1.0)*r21);
CheckValue<IkReal> x2595 = IKatan2WithCheck(IkReal(x2592),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2595.valid){
continue;
}
IkReal x2593=((1.0)*(x2595.value));
IkReal x2594=x2568;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2593)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2593)));
IkReal gconst82=(x2592*x2594);
IkReal gconst83=((1.0)*r20*x2594);
IkReal x2596=r22*r22;
IkReal x2597=(r12*sj0);
IkReal x2598=(cj0*r02);
CheckValue<IkReal> x2602=IKPowWithIntegerCheck(((-1.0)+x2596),-1);
if(!x2602.valid){
continue;
}
IkReal x2599=x2602.value;
if((((1.0)+(((-1.0)*x2596)))) < -0.00001)
continue;
IkReal x2600=IKsqrt(((1.0)+(((-1.0)*x2596))));
IkReal x2601=(r22*x2599*x2600);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x2597))+(((-1.0)*x2598)))))+(IKabs((((x2597*x2601))+((x2598*x2601))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2603=((1.0)*sj0);
IkReal x2604=((1.0)*cj0);
CheckValue<IkReal> x2605=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x2605.valid){
continue;
}
CheckValue<IkReal> x2606 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2603))+(((-1.0)*r02*x2604)))),IkReal(((((-1.0)*gconst82*r01*x2604))+(((-1.0)*gconst82*r11*x2603))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2606.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2605.value)))+(x2606.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2607=IKsin(j4);
IkReal x2608=IKcos(j4);
IkReal x2609=(gconst82*r11);
IkReal x2610=((1.0)*cj2);
IkReal x2611=((1.0)*sj0);
IkReal x2612=(cj1*sj2);
IkReal x2613=((1.0)*x2608);
IkReal x2614=(gconst83*x2608);
IkReal x2615=(gconst82*x2607);
IkReal x2616=((1.0)*x2607);
evalcond[0]=((((-1.0)*gconst83*r20*x2616))+(((-1.0)*r22*x2613))+((r21*x2615)));
evalcond[1]=(((x2607*x2609))+cj0+(((-1.0)*r12*x2613))+(((-1.0)*gconst83*r10*x2616)));
evalcond[2]=(((r01*x2615))+(((-1.0)*gconst83*r00*x2616))+(((-1.0)*r02*x2613))+(((-1.0)*x2611)));
evalcond[3]=(((r20*x2614))+(((-1.0)*gconst82*r21*x2613))+((sj1*sj2))+(((-1.0)*r22*x2616))+(((-1.0)*cj1*x2610)));
evalcond[4]=(((r00*x2614))+(((-1.0)*gconst82*r01*x2613))+(((-1.0)*cj0*x2612))+(((-1.0)*cj0*sj1*x2610))+(((-1.0)*r02*x2616)));
evalcond[5]=((((-1.0)*x2609*x2613))+(((-1.0)*x2611*x2612))+(((-1.0)*r12*x2616))+(((-1.0)*sj0*sj1*x2610))+((r10*x2614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2617=((1.0)*gconst83);
CheckValue<IkReal> x2618 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2617))+((gconst82*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2618.valid){
continue;
}
CheckValue<IkReal> x2619=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2617))+(((-1.0)*gconst82*r10)))),-1);
if(!x2619.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2618.value)+(((1.5707963267949)*(x2619.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2620=IKsin(j4);
IkReal x2621=IKcos(j4);
IkReal x2622=(gconst82*r11);
IkReal x2623=((1.0)*cj2);
IkReal x2624=((1.0)*sj0);
IkReal x2625=(cj1*sj2);
IkReal x2626=((1.0)*x2621);
IkReal x2627=(gconst83*x2621);
IkReal x2628=(gconst82*x2620);
IkReal x2629=((1.0)*x2620);
evalcond[0]=((((-1.0)*gconst83*r20*x2629))+(((-1.0)*r22*x2626))+((r21*x2628)));
evalcond[1]=((((-1.0)*gconst83*r10*x2629))+cj0+(((-1.0)*r12*x2626))+((x2620*x2622)));
evalcond[2]=(((r01*x2628))+(((-1.0)*gconst83*r00*x2629))+(((-1.0)*r02*x2626))+(((-1.0)*x2624)));
evalcond[3]=(((r20*x2627))+(((-1.0)*gconst82*r21*x2626))+((sj1*sj2))+(((-1.0)*r22*x2629))+(((-1.0)*cj1*x2623)));
evalcond[4]=(((r00*x2627))+(((-1.0)*gconst82*r01*x2626))+(((-1.0)*cj0*x2625))+(((-1.0)*r02*x2629))+(((-1.0)*cj0*sj1*x2623)));
evalcond[5]=((((-1.0)*x2622*x2626))+(((-1.0)*x2624*x2625))+(((-1.0)*r12*x2629))+(((-1.0)*sj0*sj1*x2623))+((r10*x2627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2630=((1.0)*gconst83);
CheckValue<IkReal> x2631=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2630))+(((-1.0)*gconst82*r00)))),-1);
if(!x2631.valid){
continue;
}
CheckValue<IkReal> x2632 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x2630)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2631.value)))+(x2632.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2633=IKsin(j4);
IkReal x2634=IKcos(j4);
IkReal x2635=(gconst82*r11);
IkReal x2636=((1.0)*cj2);
IkReal x2637=((1.0)*sj0);
IkReal x2638=(cj1*sj2);
IkReal x2639=((1.0)*x2634);
IkReal x2640=(gconst83*x2634);
IkReal x2641=(gconst82*x2633);
IkReal x2642=((1.0)*x2633);
evalcond[0]=((((-1.0)*gconst83*r20*x2642))+((r21*x2641))+(((-1.0)*r22*x2639)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x2642))+((x2633*x2635))+(((-1.0)*r12*x2639)));
evalcond[2]=((((-1.0)*r02*x2639))+(((-1.0)*x2637))+((r01*x2641))+(((-1.0)*gconst83*r00*x2642)));
evalcond[3]=((((-1.0)*r22*x2642))+(((-1.0)*cj1*x2636))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2639))+((r20*x2640)));
evalcond[4]=((((-1.0)*cj0*sj1*x2636))+(((-1.0)*r02*x2642))+(((-1.0)*gconst82*r01*x2639))+((r00*x2640))+(((-1.0)*cj0*x2638)));
evalcond[5]=((((-1.0)*sj0*sj1*x2636))+(((-1.0)*r12*x2642))+((r10*x2640))+(((-1.0)*x2637*x2638))+(((-1.0)*x2635*x2639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2643=((-1.0)*r10);
IkReal x2645 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2645)==0){
continue;
}
IkReal x2644=pow(x2645,-0.5);
CheckValue<IkReal> x2646 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2643),IKFAST_ATAN2_MAGTHRESH);
if(!x2646.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2646.value));
IkReal gconst85=(r11*x2644);
IkReal gconst86=(x2643*x2644);
CheckValue<IkReal> x2647 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2647.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2647.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2648=((-1.0)*r10);
IkReal x2649=x2644;
CheckValue<IkReal> x2651 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2648),IKFAST_ATAN2_MAGTHRESH);
if(!x2651.valid){
continue;
}
IkReal x2650=((-1.0)*(x2651.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2650;
IkReal gconst84=x2650;
IkReal gconst85=(r11*x2649);
IkReal gconst86=(x2648*x2649);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2652=((1.0)*sj0);
IkReal x2653=((1.0)*gconst85);
CheckValue<IkReal> x2654 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2652))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*gconst85*r11*x2652))+(((-1.0)*cj0*r01*x2653))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2654.valid){
continue;
}
CheckValue<IkReal> x2655=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2653)))),-1);
if(!x2655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2654.value)+(((1.5707963267949)*(x2655.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2656=IKsin(j4);
IkReal x2657=IKcos(j4);
IkReal x2658=(gconst85*r21);
IkReal x2659=(gconst86*r00);
IkReal x2660=(gconst86*r10);
IkReal x2661=((1.0)*cj2);
IkReal x2662=(gconst85*r11);
IkReal x2663=(gconst85*r01);
IkReal x2664=((1.0)*sj0);
IkReal x2665=(gconst86*r20);
IkReal x2666=(cj1*sj2);
IkReal x2667=((1.0)*x2657);
IkReal x2668=((1.0)*x2656);
evalcond[0]=(((x2656*x2658))+(((-1.0)*x2665*x2668))+(((-1.0)*r22*x2667)));
evalcond[1]=((((-1.0)*r12*x2667))+(((-1.0)*x2660*x2668))+cj0+((x2656*x2662)));
evalcond[2]=(((x2656*x2663))+(((-1.0)*r02*x2667))+(((-1.0)*x2664))+(((-1.0)*x2659*x2668)));
evalcond[3]=(((x2657*x2665))+((sj1*sj2))+(((-1.0)*cj1*x2661))+(((-1.0)*x2658*x2667))+(((-1.0)*r22*x2668)));
evalcond[4]=((((-1.0)*cj0*x2666))+((x2657*x2659))+(((-1.0)*cj0*sj1*x2661))+(((-1.0)*r02*x2668))+(((-1.0)*x2663*x2667)));
evalcond[5]=(((x2657*x2660))+(((-1.0)*r12*x2668))+(((-1.0)*sj0*sj1*x2661))+(((-1.0)*x2662*x2667))+(((-1.0)*x2664*x2666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2669=((1.0)*gconst86);
CheckValue<IkReal> x2670 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst85*r21))+(((-1.0)*cj0*r20*x2669)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2670.valid){
continue;
}
CheckValue<IkReal> x2671=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2669))+(((-1.0)*gconst85*r00)))),-1);
if(!x2671.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2670.value)+(((1.5707963267949)*(x2671.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2672=IKsin(j4);
IkReal x2673=IKcos(j4);
IkReal x2674=(gconst85*r21);
IkReal x2675=(gconst86*r00);
IkReal x2676=(gconst86*r10);
IkReal x2677=((1.0)*cj2);
IkReal x2678=(gconst85*r11);
IkReal x2679=(gconst85*r01);
IkReal x2680=((1.0)*sj0);
IkReal x2681=(gconst86*r20);
IkReal x2682=(cj1*sj2);
IkReal x2683=((1.0)*x2673);
IkReal x2684=((1.0)*x2672);
evalcond[0]=(((x2672*x2674))+(((-1.0)*r22*x2683))+(((-1.0)*x2681*x2684)));
evalcond[1]=((((-1.0)*r12*x2683))+cj0+((x2672*x2678))+(((-1.0)*x2676*x2684)));
evalcond[2]=((((-1.0)*r02*x2683))+((x2672*x2679))+(((-1.0)*x2680))+(((-1.0)*x2675*x2684)));
evalcond[3]=(((x2673*x2681))+(((-1.0)*cj1*x2677))+((sj1*sj2))+(((-1.0)*r22*x2684))+(((-1.0)*x2674*x2683)));
evalcond[4]=((((-1.0)*cj0*x2682))+(((-1.0)*r02*x2684))+((x2673*x2675))+(((-1.0)*cj0*sj1*x2677))+(((-1.0)*x2679*x2683)));
evalcond[5]=((((-1.0)*r12*x2684))+((x2673*x2676))+(((-1.0)*x2680*x2682))+(((-1.0)*sj0*sj1*x2677))+(((-1.0)*x2678*x2683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2685=((-1.0)*r11);
IkReal x2687 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2687)==0){
continue;
}
IkReal x2686=pow(x2687,-0.5);
CheckValue<IkReal> x2688 = IKatan2WithCheck(IkReal(x2685),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2688.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2688.value))));
IkReal gconst88=(x2685*x2686);
IkReal gconst89=((1.0)*r10*x2686);
CheckValue<IkReal> x2689 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2689.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2689.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2690=((-1.0)*r11);
CheckValue<IkReal> x2693 = IKatan2WithCheck(IkReal(x2690),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2693.valid){
continue;
}
IkReal x2691=((1.0)*(x2693.value));
IkReal x2692=x2686;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2691)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2691)));
IkReal gconst88=(x2690*x2692);
IkReal gconst89=((1.0)*r10*x2692);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2694=((-1.0)*r11);
CheckValue<IkReal> x2697 = IKatan2WithCheck(IkReal(x2694),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2697.valid){
continue;
}
IkReal x2695=((1.0)*(x2697.value));
IkReal x2696=x2686;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2695)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2695)));
IkReal gconst88=(x2694*x2696);
IkReal gconst89=((1.0)*r10*x2696);
IkReal x2698=r12*r12;
IkReal x2699=((1.0)*sj0);
IkReal x2700=(cj0*r02);
IkReal x2701=x2686;
j4eval[0]=((IKabs(((((-1.0)*r12*x2699))+(((-1.0)*x2700)))))+(IKabs((((sj0*x2698*x2701))+((r12*x2700*x2701))+(((-1.0)*x2699*x2701))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2702=((-1.0)*r11);
CheckValue<IkReal> x2705 = IKatan2WithCheck(IkReal(x2702),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2705.valid){
continue;
}
IkReal x2703=((1.0)*(x2705.value));
IkReal x2704=x2686;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2703)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2703)));
IkReal gconst88=(x2702*x2704);
IkReal gconst89=((1.0)*r10*x2704);
IkReal x2706=r12*r12;
IkReal x2707=(cj1*cj2*r22);
IkReal x2708=(r22*sj1*sj2);
CheckValue<IkReal> x2712=IKPowWithIntegerCheck(((-1.0)+x2706),-1);
if(!x2712.valid){
continue;
}
IkReal x2709=x2712.value;
if((((1.0)+(((-1.0)*x2706)))) < -0.00001)
continue;
IkReal x2710=IKsqrt(((1.0)+(((-1.0)*x2706))));
IkReal x2711=(r12*x2709*x2710);
j4eval[0]=((IKabs((((x2707*x2711))+(((-1.0)*x2708*x2711)))))+(IKabs((x2708+(((-1.0)*x2707))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2713=(cj1*cj2);
IkReal x2714=(gconst89*r20);
IkReal x2715=(gconst88*r21);
IkReal x2716=(sj1*sj2);
CheckValue<IkReal> x2717 = IKatan2WithCheck(IkReal((((r22*x2716))+(((-1.0)*r22*x2713)))),IkReal(((((-1.0)*x2714*x2716))+(((-1.0)*x2713*x2715))+((x2713*x2714))+((x2715*x2716)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2717.valid){
continue;
}
CheckValue<IkReal> x2718=IKPowWithIntegerCheck(IKsign(((x2715*x2715)+(((-2.0)*x2714*x2715))+(r22*r22)+(x2714*x2714))),-1);
if(!x2718.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2717.value)+(((1.5707963267949)*(x2718.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2719=IKsin(j4);
IkReal x2720=IKcos(j4);
IkReal x2721=((1.0)*sj0);
IkReal x2722=((1.0)*cj2);
IkReal x2723=(gconst89*r20);
IkReal x2724=(gconst89*r10);
IkReal x2725=(gconst89*r00);
IkReal x2726=(cj1*sj2);
IkReal x2727=((1.0)*x2720);
IkReal x2728=((1.0)*x2719);
IkReal x2729=(gconst88*x2719);
evalcond[0]=(((r21*x2729))+(((-1.0)*x2723*x2728))+(((-1.0)*r22*x2727)));
evalcond[1]=(cj0+(((-1.0)*x2724*x2728))+(((-1.0)*r12*x2727))+((r11*x2729)));
evalcond[2]=((((-1.0)*x2725*x2728))+((r01*x2729))+(((-1.0)*x2721))+(((-1.0)*r02*x2727)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x2728))+((x2720*x2723))+(((-1.0)*gconst88*r21*x2727))+(((-1.0)*cj1*x2722)));
evalcond[4]=(((x2720*x2725))+(((-1.0)*cj0*x2726))+(((-1.0)*gconst88*r01*x2727))+(((-1.0)*r02*x2728))+(((-1.0)*cj0*sj1*x2722)));
evalcond[5]=((((-1.0)*cj2*sj1*x2721))+(((-1.0)*gconst88*r11*x2727))+(((-1.0)*r12*x2728))+(((-1.0)*x2721*x2726))+((x2720*x2724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2730=((1.0)*sj0);
IkReal x2731=((1.0)*cj0);
CheckValue<IkReal> x2732=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2732.valid){
continue;
}
CheckValue<IkReal> x2733 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2731))+(((-1.0)*r12*x2730)))),IkReal((((cj0*gconst89*r00))+(((-1.0)*gconst88*r01*x2731))+(((-1.0)*gconst88*r11*x2730))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2733.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2732.value)))+(x2733.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2734=IKsin(j4);
IkReal x2735=IKcos(j4);
IkReal x2736=((1.0)*sj0);
IkReal x2737=((1.0)*cj2);
IkReal x2738=(gconst89*r20);
IkReal x2739=(gconst89*r10);
IkReal x2740=(gconst89*r00);
IkReal x2741=(cj1*sj2);
IkReal x2742=((1.0)*x2735);
IkReal x2743=((1.0)*x2734);
IkReal x2744=(gconst88*x2734);
evalcond[0]=(((r21*x2744))+(((-1.0)*x2738*x2743))+(((-1.0)*r22*x2742)));
evalcond[1]=(((r11*x2744))+cj0+(((-1.0)*x2739*x2743))+(((-1.0)*r12*x2742)));
evalcond[2]=((((-1.0)*x2740*x2743))+((r01*x2744))+(((-1.0)*x2736))+(((-1.0)*r02*x2742)));
evalcond[3]=((((-1.0)*gconst88*r21*x2742))+((sj1*sj2))+((x2735*x2738))+(((-1.0)*cj1*x2737))+(((-1.0)*r22*x2743)));
evalcond[4]=((((-1.0)*cj0*sj1*x2737))+(((-1.0)*cj0*x2741))+(((-1.0)*r02*x2743))+(((-1.0)*gconst88*r01*x2742))+((x2735*x2740)));
evalcond[5]=((((-1.0)*cj2*sj1*x2736))+(((-1.0)*gconst88*r11*x2742))+((x2735*x2739))+(((-1.0)*x2736*x2741))+(((-1.0)*r12*x2743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2745=((1.0)*gconst89);
CheckValue<IkReal> x2746 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2745))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2746.valid){
continue;
}
CheckValue<IkReal> x2747=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2745))+(((-1.0)*gconst88*r00)))),-1);
if(!x2747.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2746.value)+(((1.5707963267949)*(x2747.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2748=IKsin(j4);
IkReal x2749=IKcos(j4);
IkReal x2750=((1.0)*sj0);
IkReal x2751=((1.0)*cj2);
IkReal x2752=(gconst89*r20);
IkReal x2753=(gconst89*r10);
IkReal x2754=(gconst89*r00);
IkReal x2755=(cj1*sj2);
IkReal x2756=((1.0)*x2749);
IkReal x2757=((1.0)*x2748);
IkReal x2758=(gconst88*x2748);
evalcond[0]=((((-1.0)*r22*x2756))+(((-1.0)*x2752*x2757))+((r21*x2758)));
evalcond[1]=(((r11*x2758))+cj0+(((-1.0)*x2753*x2757))+(((-1.0)*r12*x2756)));
evalcond[2]=(((r01*x2758))+(((-1.0)*x2754*x2757))+(((-1.0)*x2750))+(((-1.0)*r02*x2756)));
evalcond[3]=(((x2749*x2752))+(((-1.0)*r22*x2757))+(((-1.0)*gconst88*r21*x2756))+((sj1*sj2))+(((-1.0)*cj1*x2751)));
evalcond[4]=((((-1.0)*gconst88*r01*x2756))+((x2749*x2754))+(((-1.0)*cj0*x2755))+(((-1.0)*cj0*sj1*x2751))+(((-1.0)*r02*x2757)));
evalcond[5]=(((x2749*x2753))+(((-1.0)*gconst88*r11*x2756))+(((-1.0)*cj2*sj1*x2750))+(((-1.0)*x2750*x2755))+(((-1.0)*r12*x2757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2759=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2759;
j4eval[1]=IKsign(x2759);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2760=((1.0)*cj5);
IkReal x2761=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2760)));
j4eval[0]=x2761;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2760)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2761);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2762=cj5*cj5;
IkReal x2763=r11*r11;
IkReal x2764=(r11*sj5);
IkReal x2765=(cj5*r10);
IkReal x2766=(x2763+(r12*r12)+((x2762*(r10*r10)))+(((-1.0)*x2762*x2763))+(((-2.0)*x2764*x2765)));
j4eval[0]=x2766;
j4eval[1]=IKsign(x2766);
j4eval[2]=((IKabs(r12))+(IKabs((x2765+(((-1.0)*x2764))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2767=cj5*cj5;
IkReal x2768=r11*r11;
IkReal x2769=(cj5*r10);
IkReal x2770=(r11*sj5);
CheckValue<IkReal> x2771 = IKatan2WithCheck(IkReal((x2769+(((-1.0)*x2770)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2771.valid){
continue;
}
CheckValue<IkReal> x2772=IKPowWithIntegerCheck(IKsign((x2768+(r12*r12)+(((-2.0)*x2769*x2770))+(((-1.0)*x2767*x2768))+((x2767*(r10*r10))))),-1);
if(!x2772.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2771.value)+(((1.5707963267949)*(x2772.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2773=IKsin(j4);
IkReal x2774=IKcos(j4);
IkReal x2775=(cj5*r10);
IkReal x2776=(r01*sj5);
IkReal x2777=((1.0)*cj2);
IkReal x2778=(cj5*r00);
IkReal x2779=(cj5*r20);
IkReal x2780=((1.0)*x2774);
IkReal x2781=((1.0)*x2773);
IkReal x2782=(sj5*x2773);
evalcond[0]=(((r21*x2782))+(((-1.0)*r22*x2780))+(((-1.0)*x2779*x2781)));
evalcond[1]=((((-1.0)*x2778*x2781))+((x2773*x2776))+(((-1.0)*r02*x2780)));
evalcond[2]=((((-1.0)*r12*x2781))+((x2774*x2775))+(((-1.0)*r11*sj5*x2780)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2780))+((r11*x2782))+(((-1.0)*x2775*x2781)));
evalcond[4]=(((x2774*x2779))+(((-1.0)*r21*sj5*x2780))+((sj1*sj2))+(((-1.0)*r22*x2781))+(((-1.0)*cj1*x2777)));
evalcond[5]=(((x2774*x2778))+(((-1.0)*cj1*sj2))+(((-1.0)*x2776*x2780))+(((-1.0)*sj1*x2777))+(((-1.0)*r02*x2781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2783=((1.0)*cj5);
CheckValue<IkReal> x2784=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2783)))),-1);
if(!x2784.valid){
continue;
}
CheckValue<IkReal> x2785 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2783))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2785.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2784.value)))+(x2785.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2786=IKsin(j4);
IkReal x2787=IKcos(j4);
IkReal x2788=(cj5*r10);
IkReal x2789=(r01*sj5);
IkReal x2790=((1.0)*cj2);
IkReal x2791=(cj5*r00);
IkReal x2792=(cj5*r20);
IkReal x2793=((1.0)*x2787);
IkReal x2794=((1.0)*x2786);
IkReal x2795=(sj5*x2786);
evalcond[0]=(((r21*x2795))+(((-1.0)*r22*x2793))+(((-1.0)*x2792*x2794)));
evalcond[1]=((((-1.0)*x2791*x2794))+((x2786*x2789))+(((-1.0)*r02*x2793)));
evalcond[2]=(((x2787*x2788))+(((-1.0)*r11*sj5*x2793))+(((-1.0)*r12*x2794)));
evalcond[3]=((1.0)+((r11*x2795))+(((-1.0)*x2788*x2794))+(((-1.0)*r12*x2793)));
evalcond[4]=(((x2787*x2792))+(((-1.0)*r21*sj5*x2793))+((sj1*sj2))+(((-1.0)*r22*x2794))+(((-1.0)*cj1*x2790)));
evalcond[5]=((((-1.0)*sj1*x2790))+((x2787*x2791))+(((-1.0)*cj1*sj2))+(((-1.0)*x2789*x2793))+(((-1.0)*r02*x2794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2796=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2796.valid){
continue;
}
CheckValue<IkReal> x2797 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2796.value)))+(x2797.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2798=IKsin(j4);
IkReal x2799=IKcos(j4);
IkReal x2800=(cj5*r10);
IkReal x2801=(r01*sj5);
IkReal x2802=((1.0)*cj2);
IkReal x2803=(cj5*r00);
IkReal x2804=(cj5*r20);
IkReal x2805=((1.0)*x2799);
IkReal x2806=((1.0)*x2798);
IkReal x2807=(sj5*x2798);
evalcond[0]=((((-1.0)*r22*x2805))+(((-1.0)*x2804*x2806))+((r21*x2807)));
evalcond[1]=(((x2798*x2801))+(((-1.0)*x2803*x2806))+(((-1.0)*r02*x2805)));
evalcond[2]=((((-1.0)*r12*x2806))+((x2799*x2800))+(((-1.0)*r11*sj5*x2805)));
evalcond[3]=((1.0)+(((-1.0)*x2800*x2806))+(((-1.0)*r12*x2805))+((r11*x2807)));
evalcond[4]=((((-1.0)*r21*sj5*x2805))+(((-1.0)*cj1*x2802))+((sj1*sj2))+(((-1.0)*r22*x2806))+((x2799*x2804)));
evalcond[5]=((((-1.0)*sj1*x2802))+(((-1.0)*cj1*sj2))+((x2799*x2803))+(((-1.0)*r02*x2806))+(((-1.0)*x2801*x2805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2808=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2808;
j4eval[1]=IKsign(x2808);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2809=((1.0)*cj5);
IkReal x2810=((((-1.0)*r21*x2809))+(((-1.0)*r20*sj5)));
j4eval[0]=x2810;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2809))))));
j4eval[2]=IKsign(x2810);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2811=cj5*cj5;
IkReal x2812=r11*r11;
IkReal x2813=(cj5*r10);
IkReal x2814=(r11*sj5);
IkReal x2815=((((-1.0)*x2812))+(((2.0)*x2813*x2814))+(((-1.0)*x2811*(r10*r10)))+(((-1.0)*(r12*r12)))+((x2811*x2812)));
j4eval[0]=x2815;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2814))+x2813))));
j4eval[2]=IKsign(x2815);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2816=cj5*cj5;
IkReal x2817=r11*r11;
IkReal x2818=(cj5*r10);
IkReal x2819=(r11*sj5);
CheckValue<IkReal> x2820=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2817))+(((2.0)*x2818*x2819))+(((-1.0)*x2816*(r10*r10)))+(((-1.0)*(r12*r12)))+((x2816*x2817)))),-1);
if(!x2820.valid){
continue;
}
CheckValue<IkReal> x2821 = IKatan2WithCheck(IkReal(((((-1.0)*x2819))+x2818)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2820.value)))+(x2821.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2822=IKsin(j4);
IkReal x2823=IKcos(j4);
IkReal x2824=(cj5*r10);
IkReal x2825=(r01*sj5);
IkReal x2826=(cj5*r00);
IkReal x2827=(cj5*r20);
IkReal x2828=((1.0)*x2823);
IkReal x2829=((1.0)*x2822);
IkReal x2830=(sj5*x2822);
evalcond[0]=((((-1.0)*r22*x2828))+((r21*x2830))+(((-1.0)*x2827*x2829)));
evalcond[1]=(((x2822*x2825))+(((-1.0)*x2826*x2829))+(((-1.0)*r02*x2828)));
evalcond[2]=((((-1.0)*r12*x2829))+((x2823*x2824))+(((-1.0)*r11*sj5*x2828)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2828))+(((-1.0)*x2824*x2829))+((r11*x2830)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2823*x2826))+(((-1.0)*r02*x2829))+(((-1.0)*x2825*x2828)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2823*x2827))+(((-1.0)*r22*x2829))+(((-1.0)*r21*sj5*x2828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2831=((1.0)*cj5);
CheckValue<IkReal> x2832 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x2831))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2832.valid){
continue;
}
CheckValue<IkReal> x2833=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2831))+(((-1.0)*r20*sj5)))),-1);
if(!x2833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2832.value)+(((1.5707963267949)*(x2833.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2834=IKsin(j4);
IkReal x2835=IKcos(j4);
IkReal x2836=(cj5*r10);
IkReal x2837=(r01*sj5);
IkReal x2838=(cj5*r00);
IkReal x2839=(cj5*r20);
IkReal x2840=((1.0)*x2835);
IkReal x2841=((1.0)*x2834);
IkReal x2842=(sj5*x2834);
evalcond[0]=(((r21*x2842))+(((-1.0)*x2839*x2841))+(((-1.0)*r22*x2840)));
evalcond[1]=(((x2834*x2837))+(((-1.0)*r02*x2840))+(((-1.0)*x2838*x2841)));
evalcond[2]=((((-1.0)*r12*x2841))+((x2835*x2836))+(((-1.0)*r11*sj5*x2840)));
evalcond[3]=((-1.0)+((r11*x2842))+(((-1.0)*r12*x2840))+(((-1.0)*x2836*x2841)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x2841))+((x2835*x2838))+(((-1.0)*x2837*x2840)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2841))+((x2835*x2839))+(((-1.0)*r21*sj5*x2840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2843 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2843.valid){
continue;
}
CheckValue<IkReal> x2844=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2844.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2843.value)+(((1.5707963267949)*(x2844.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2845=IKsin(j4);
IkReal x2846=IKcos(j4);
IkReal x2847=(cj5*r10);
IkReal x2848=(r01*sj5);
IkReal x2849=(cj5*r00);
IkReal x2850=(cj5*r20);
IkReal x2851=((1.0)*x2846);
IkReal x2852=((1.0)*x2845);
IkReal x2853=(sj5*x2845);
evalcond[0]=(((r21*x2853))+(((-1.0)*x2850*x2852))+(((-1.0)*r22*x2851)));
evalcond[1]=((((-1.0)*x2849*x2852))+(((-1.0)*r02*x2851))+((x2845*x2848)));
evalcond[2]=((((-1.0)*r11*sj5*x2851))+(((-1.0)*r12*x2852))+((x2846*x2847)));
evalcond[3]=((-1.0)+((r11*x2853))+(((-1.0)*r12*x2851))+(((-1.0)*x2847*x2852)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2846*x2849))+(((-1.0)*r02*x2852))+(((-1.0)*x2848*x2851)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2846*x2850))+(((-1.0)*r22*x2852))+(((-1.0)*r21*sj5*x2851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2854=((-1.0)*r00);
IkReal x2856 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2856)==0){
continue;
}
IkReal x2855=pow(x2856,-0.5);
CheckValue<IkReal> x2857 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2854),IKFAST_ATAN2_MAGTHRESH);
if(!x2857.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2857.value));
IkReal gconst91=(r01*x2855);
IkReal gconst92=(x2854*x2855);
CheckValue<IkReal> x2858 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2858.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2858.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2859=((-1.0)*r00);
IkReal x2860=x2855;
CheckValue<IkReal> x2862 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2859),IKFAST_ATAN2_MAGTHRESH);
if(!x2862.valid){
continue;
}
IkReal x2861=((-1.0)*(x2862.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2861;
IkReal gconst90=x2861;
IkReal gconst91=(r01*x2860);
IkReal gconst92=(x2859*x2860);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2863=((1.0)*sj0);
IkReal x2864=((1.0)*cj0);
CheckValue<IkReal> x2865=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2865.valid){
continue;
}
CheckValue<IkReal> x2866 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2864))+(((-1.0)*r12*x2863)))),IkReal(((((-1.0)*gconst91*r11*x2863))+(((-1.0)*gconst91*r01*x2864))+((cj0*gconst92*r00))+((gconst92*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2865.value)))+(x2866.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2867=IKsin(j4);
IkReal x2868=IKcos(j4);
IkReal x2869=((1.0)*cj2);
IkReal x2870=(gconst92*r00);
IkReal x2871=(gconst92*r20);
IkReal x2872=((1.0)*sj0);
IkReal x2873=(gconst92*r10);
IkReal x2874=(cj1*sj2);
IkReal x2875=((1.0)*x2868);
IkReal x2876=(gconst91*x2867);
IkReal x2877=((1.0)*x2867);
evalcond[0]=((((-1.0)*x2871*x2877))+(((-1.0)*r22*x2875))+((r21*x2876)));
evalcond[1]=(cj0+((r11*x2876))+(((-1.0)*x2873*x2877))+(((-1.0)*r12*x2875)));
evalcond[2]=((((-1.0)*r02*x2875))+((r01*x2876))+(((-1.0)*x2872))+(((-1.0)*x2870*x2877)));
evalcond[3]=(((x2868*x2871))+(((-1.0)*cj1*x2869))+(((-1.0)*r22*x2877))+((sj1*sj2))+(((-1.0)*gconst91*r21*x2875)));
evalcond[4]=((((-1.0)*r02*x2877))+(((-1.0)*cj0*x2874))+((x2868*x2870))+(((-1.0)*cj0*sj1*x2869))+(((-1.0)*gconst91*r01*x2875)));
evalcond[5]=((((-1.0)*sj0*sj1*x2869))+(((-1.0)*gconst91*r11*x2875))+((x2868*x2873))+(((-1.0)*x2872*x2874))+(((-1.0)*r12*x2877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2878=((1.0)*gconst92);
CheckValue<IkReal> x2879 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst91*r21*sj0))+(((-1.0)*r20*sj0*x2878)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2879.valid){
continue;
}
CheckValue<IkReal> x2880=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2878)))),-1);
if(!x2880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2879.value)+(((1.5707963267949)*(x2880.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2881=IKsin(j4);
IkReal x2882=IKcos(j4);
IkReal x2883=((1.0)*cj2);
IkReal x2884=(gconst92*r00);
IkReal x2885=(gconst92*r20);
IkReal x2886=((1.0)*sj0);
IkReal x2887=(gconst92*r10);
IkReal x2888=(cj1*sj2);
IkReal x2889=((1.0)*x2882);
IkReal x2890=(gconst91*x2881);
IkReal x2891=((1.0)*x2881);
evalcond[0]=((((-1.0)*r22*x2889))+((r21*x2890))+(((-1.0)*x2885*x2891)));
evalcond[1]=(cj0+(((-1.0)*x2887*x2891))+((r11*x2890))+(((-1.0)*r12*x2889)));
evalcond[2]=((((-1.0)*r02*x2889))+((r01*x2890))+(((-1.0)*x2884*x2891))+(((-1.0)*x2886)));
evalcond[3]=((((-1.0)*r22*x2891))+(((-1.0)*gconst91*r21*x2889))+((sj1*sj2))+(((-1.0)*cj1*x2883))+((x2882*x2885)));
evalcond[4]=((((-1.0)*r02*x2891))+(((-1.0)*cj0*sj1*x2883))+(((-1.0)*cj0*x2888))+(((-1.0)*gconst91*r01*x2889))+((x2882*x2884)));
evalcond[5]=((((-1.0)*sj0*sj1*x2883))+(((-1.0)*gconst91*r11*x2889))+(((-1.0)*x2886*x2888))+((x2882*x2887))+(((-1.0)*r12*x2891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2892=((-1.0)*r01);
IkReal x2894 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2894)==0){
continue;
}
IkReal x2893=pow(x2894,-0.5);
CheckValue<IkReal> x2895 = IKatan2WithCheck(IkReal(x2892),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2895.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2895.value))));
IkReal gconst94=(x2892*x2893);
IkReal gconst95=((1.0)*r00*x2893);
CheckValue<IkReal> x2896 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2896.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2896.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2897=((-1.0)*r01);
CheckValue<IkReal> x2900 = IKatan2WithCheck(IkReal(x2897),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2900.valid){
continue;
}
IkReal x2898=((1.0)*(x2900.value));
IkReal x2899=x2893;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2898)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2898)));
IkReal gconst94=(x2897*x2899);
IkReal gconst95=((1.0)*r00*x2899);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2901=((-1.0)*r01);
CheckValue<IkReal> x2904 = IKatan2WithCheck(IkReal(x2901),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2904.valid){
continue;
}
IkReal x2902=((1.0)*(x2904.value));
IkReal x2903=x2893;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2902)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2902)));
IkReal gconst94=(x2901*x2903);
IkReal gconst95=((1.0)*r00*x2903);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2905=((-1.0)*r01);
CheckValue<IkReal> x2908 = IKatan2WithCheck(IkReal(x2905),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2908.valid){
continue;
}
IkReal x2906=((1.0)*(x2908.value));
IkReal x2907=x2893;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2906)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2906)));
IkReal gconst94=(x2905*x2907);
IkReal gconst95=((1.0)*r00*x2907);
IkReal x2909=r02*r02;
IkReal x2910=(r12*sj0);
IkReal x2911=((1.0)*cj0);
IkReal x2912=x2893;
j4eval[0]=((IKabs(((((-1.0)*x2910))+(((-1.0)*r02*x2911)))))+(IKabs((((r02*x2910*x2912))+((cj0*x2909*x2912))+(((-1.0)*x2911*x2912))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2913=((1.0)*sj0);
IkReal x2914=((1.0)*cj0);
CheckValue<IkReal> x2915=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2915.valid){
continue;
}
CheckValue<IkReal> x2916 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2913))+(((-1.0)*r02*x2914)))),IkReal((((gconst95*r10*sj0))+(((-1.0)*gconst94*r01*x2914))+(((-1.0)*gconst94*r11*x2913))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2916.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2915.value)))+(x2916.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2917=IKsin(j4);
IkReal x2918=IKcos(j4);
IkReal x2919=(gconst94*r11);
IkReal x2920=((1.0)*cj2);
IkReal x2921=(gconst94*r21);
IkReal x2922=((1.0)*sj0);
IkReal x2923=(gconst94*r01);
IkReal x2924=(cj1*sj2);
IkReal x2925=((1.0)*x2918);
IkReal x2926=(gconst95*x2918);
IkReal x2927=((1.0)*x2917);
IkReal x2928=(gconst95*x2927);
evalcond[0]=((((-1.0)*r20*x2928))+((x2917*x2921))+(((-1.0)*r22*x2925)));
evalcond[1]=(cj0+(((-1.0)*r10*x2928))+((x2917*x2919))+(((-1.0)*r12*x2925)));
evalcond[2]=((((-1.0)*r02*x2925))+(((-1.0)*x2922))+((x2917*x2923))+(((-1.0)*r00*x2928)));
evalcond[3]=((((-1.0)*x2921*x2925))+((sj1*sj2))+((r20*x2926))+(((-1.0)*cj1*x2920))+(((-1.0)*r22*x2927)));
evalcond[4]=((((-1.0)*r02*x2927))+(((-1.0)*x2923*x2925))+(((-1.0)*cj0*sj1*x2920))+(((-1.0)*cj0*x2924))+((r00*x2926)));
evalcond[5]=(((r10*x2926))+(((-1.0)*sj0*sj1*x2920))+(((-1.0)*x2919*x2925))+(((-1.0)*r12*x2927))+(((-1.0)*x2922*x2924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2929=((1.0)*gconst95);
CheckValue<IkReal> x2930=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2929)))),-1);
if(!x2930.valid){
continue;
}
CheckValue<IkReal> x2931 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2929)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2931.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2930.value)))+(x2931.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2932=IKsin(j4);
IkReal x2933=IKcos(j4);
IkReal x2934=(gconst94*r11);
IkReal x2935=((1.0)*cj2);
IkReal x2936=(gconst94*r21);
IkReal x2937=((1.0)*sj0);
IkReal x2938=(gconst94*r01);
IkReal x2939=(cj1*sj2);
IkReal x2940=((1.0)*x2933);
IkReal x2941=(gconst95*x2933);
IkReal x2942=((1.0)*x2932);
IkReal x2943=(gconst95*x2942);
evalcond[0]=((((-1.0)*r20*x2943))+((x2932*x2936))+(((-1.0)*r22*x2940)));
evalcond[1]=((((-1.0)*r12*x2940))+cj0+((x2932*x2934))+(((-1.0)*r10*x2943)));
evalcond[2]=((((-1.0)*r02*x2940))+(((-1.0)*x2937))+(((-1.0)*r00*x2943))+((x2932*x2938)));
evalcond[3]=((((-1.0)*x2936*x2940))+((sj1*sj2))+(((-1.0)*cj1*x2935))+(((-1.0)*r22*x2942))+((r20*x2941)));
evalcond[4]=((((-1.0)*cj0*x2939))+(((-1.0)*r02*x2942))+((r00*x2941))+(((-1.0)*cj0*sj1*x2935))+(((-1.0)*x2938*x2940)));
evalcond[5]=((((-1.0)*x2934*x2940))+(((-1.0)*r12*x2942))+((r10*x2941))+(((-1.0)*sj0*sj1*x2935))+(((-1.0)*x2937*x2939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2944=((1.0)*gconst95);
CheckValue<IkReal> x2945=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2944)))),-1);
if(!x2945.valid){
continue;
}
CheckValue<IkReal> x2946 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst94*r21))+(((-1.0)*cj0*r20*x2944)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2945.value)))+(x2946.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2947=IKsin(j4);
IkReal x2948=IKcos(j4);
IkReal x2949=(gconst94*r11);
IkReal x2950=((1.0)*cj2);
IkReal x2951=(gconst94*r21);
IkReal x2952=((1.0)*sj0);
IkReal x2953=(gconst94*r01);
IkReal x2954=(cj1*sj2);
IkReal x2955=((1.0)*x2948);
IkReal x2956=(gconst95*x2948);
IkReal x2957=((1.0)*x2947);
IkReal x2958=(gconst95*x2957);
evalcond[0]=((((-1.0)*r20*x2958))+((x2947*x2951))+(((-1.0)*r22*x2955)));
evalcond[1]=((((-1.0)*r10*x2958))+cj0+(((-1.0)*r12*x2955))+((x2947*x2949)));
evalcond[2]=((((-1.0)*r02*x2955))+(((-1.0)*x2952))+((x2947*x2953))+(((-1.0)*r00*x2958)));
evalcond[3]=(((sj1*sj2))+((r20*x2956))+(((-1.0)*x2951*x2955))+(((-1.0)*r22*x2957))+(((-1.0)*cj1*x2950)));
evalcond[4]=((((-1.0)*x2953*x2955))+(((-1.0)*r02*x2957))+(((-1.0)*cj0*x2954))+(((-1.0)*cj0*sj1*x2950))+((r00*x2956)));
evalcond[5]=((((-1.0)*x2952*x2954))+((r10*x2956))+(((-1.0)*sj0*sj1*x2950))+(((-1.0)*x2949*x2955))+(((-1.0)*r12*x2957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2959=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2959;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2959);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2960=((1.0)*cj5);
IkReal x2961=((((-1.0)*r11*x2960))+(((-1.0)*r10*sj5)));
j4eval[0]=x2961;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2960))))));
j4eval[2]=IKsign(x2961);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2962=cj5*cj5;
IkReal x2963=r01*r01;
IkReal x2964=(r01*sj5);
IkReal x2965=(cj5*r00);
IkReal x2966=((((-1.0)*x2963))+(((2.0)*x2964*x2965))+(((-1.0)*(r02*r02)))+(((-1.0)*x2962*(r00*r00)))+((x2962*x2963)));
j4eval[0]=x2966;
j4eval[1]=IKsign(x2966);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2964))+x2965))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2967=cj5*cj5;
IkReal x2968=r01*r01;
IkReal x2969=(r01*sj5);
IkReal x2970=(cj5*r00);
CheckValue<IkReal> x2971=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2968))+(((2.0)*x2969*x2970))+(((-1.0)*(r02*r02)))+((x2967*x2968))+(((-1.0)*x2967*(r00*r00))))),-1);
if(!x2971.valid){
continue;
}
CheckValue<IkReal> x2972 = IKatan2WithCheck(IkReal(((((-1.0)*x2969))+x2970)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2972.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2971.value)))+(x2972.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2973=IKsin(j4);
IkReal x2974=IKcos(j4);
IkReal x2975=(cj5*r10);
IkReal x2976=(r01*sj5);
IkReal x2977=((1.0)*cj2);
IkReal x2978=(cj5*r00);
IkReal x2979=(cj5*r20);
IkReal x2980=((1.0)*x2974);
IkReal x2981=((1.0)*x2973);
IkReal x2982=(sj5*x2973);
evalcond[0]=((((-1.0)*x2979*x2981))+(((-1.0)*r22*x2980))+((r21*x2982)));
evalcond[1]=(((r11*x2982))+(((-1.0)*r12*x2980))+(((-1.0)*x2975*x2981)));
evalcond[2]=((((-1.0)*x2976*x2980))+((x2974*x2978))+(((-1.0)*r02*x2981)));
evalcond[3]=((-1.0)+(((-1.0)*x2978*x2981))+(((-1.0)*r02*x2980))+((x2973*x2976)));
evalcond[4]=(((x2974*x2979))+(((-1.0)*r21*sj5*x2980))+((sj1*sj2))+(((-1.0)*r22*x2981))+(((-1.0)*cj1*x2977)));
evalcond[5]=(((x2974*x2975))+(((-1.0)*r12*x2981))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2980))+(((-1.0)*sj1*x2977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2983=((1.0)*cj5);
CheckValue<IkReal> x2984 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2983)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2984.valid){
continue;
}
CheckValue<IkReal> x2985=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2983)))),-1);
if(!x2985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2984.value)+(((1.5707963267949)*(x2985.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2986=IKsin(j4);
IkReal x2987=IKcos(j4);
IkReal x2988=(cj5*r10);
IkReal x2989=(r01*sj5);
IkReal x2990=((1.0)*cj2);
IkReal x2991=(cj5*r00);
IkReal x2992=(cj5*r20);
IkReal x2993=((1.0)*x2987);
IkReal x2994=((1.0)*x2986);
IkReal x2995=(sj5*x2986);
evalcond[0]=((((-1.0)*r22*x2993))+(((-1.0)*x2992*x2994))+((r21*x2995)));
evalcond[1]=((((-1.0)*r12*x2993))+(((-1.0)*x2988*x2994))+((r11*x2995)));
evalcond[2]=(((x2987*x2991))+(((-1.0)*x2989*x2993))+(((-1.0)*r02*x2994)));
evalcond[3]=((-1.0)+((x2986*x2989))+(((-1.0)*x2991*x2994))+(((-1.0)*r02*x2993)));
evalcond[4]=((((-1.0)*r22*x2994))+((x2987*x2992))+((sj1*sj2))+(((-1.0)*cj1*x2990))+(((-1.0)*r21*sj5*x2993)));
evalcond[5]=((((-1.0)*sj1*x2990))+(((-1.0)*r12*x2994))+(((-1.0)*cj1*sj2))+((x2987*x2988))+(((-1.0)*r11*sj5*x2993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2996=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2996.valid){
continue;
}
CheckValue<IkReal> x2997 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2997.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2996.value)))+(x2997.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2998=IKsin(j4);
IkReal x2999=IKcos(j4);
IkReal x3000=(cj5*r10);
IkReal x3001=(r01*sj5);
IkReal x3002=((1.0)*cj2);
IkReal x3003=(cj5*r00);
IkReal x3004=(cj5*r20);
IkReal x3005=((1.0)*x2999);
IkReal x3006=((1.0)*x2998);
IkReal x3007=(sj5*x2998);
evalcond[0]=((((-1.0)*r22*x3005))+(((-1.0)*x3004*x3006))+((r21*x3007)));
evalcond[1]=((((-1.0)*x3000*x3006))+(((-1.0)*r12*x3005))+((r11*x3007)));
evalcond[2]=(((x2999*x3003))+(((-1.0)*r02*x3006))+(((-1.0)*x3001*x3005)));
evalcond[3]=((-1.0)+(((-1.0)*x3003*x3006))+(((-1.0)*r02*x3005))+((x2998*x3001)));
evalcond[4]=((((-1.0)*r22*x3006))+(((-1.0)*r21*sj5*x3005))+((x2999*x3004))+((sj1*sj2))+(((-1.0)*cj1*x3002)));
evalcond[5]=(((x2999*x3000))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x3005))+(((-1.0)*r12*x3006))+(((-1.0)*sj1*x3002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3008=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3008;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3008);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3009=((1.0)*cj5);
IkReal x3010=((((-1.0)*r21*x3009))+(((-1.0)*r20*sj5)));
j4eval[0]=x3010;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x3009))+((r11*sj5))))));
j4eval[2]=IKsign(x3010);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3011=cj5*cj5;
IkReal x3012=r01*r01;
IkReal x3013=(cj5*r00);
IkReal x3014=(r01*sj5);
IkReal x3015=(((x3011*(r00*r00)))+x3012+(((-1.0)*x3011*x3012))+(((-2.0)*x3013*x3014))+(r02*r02));
j4eval[0]=x3015;
j4eval[1]=((IKabs(r02))+(IKabs((x3013+(((-1.0)*x3014))))));
j4eval[2]=IKsign(x3015);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3016=cj5*cj5;
IkReal x3017=r01*r01;
IkReal x3018=(r01*sj5);
IkReal x3019=(cj5*r00);
CheckValue<IkReal> x3020=IKPowWithIntegerCheck(IKsign((((x3016*(r00*r00)))+x3017+(((-2.0)*x3018*x3019))+(((-1.0)*x3016*x3017))+(r02*r02))),-1);
if(!x3020.valid){
continue;
}
CheckValue<IkReal> x3021 = IKatan2WithCheck(IkReal((x3019+(((-1.0)*x3018)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3020.value)))+(x3021.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3022=IKsin(j4);
IkReal x3023=IKcos(j4);
IkReal x3024=(cj5*r10);
IkReal x3025=(r01*sj5);
IkReal x3026=(cj5*r00);
IkReal x3027=(cj5*r20);
IkReal x3028=((1.0)*x3023);
IkReal x3029=((1.0)*x3022);
IkReal x3030=(sj5*x3022);
evalcond[0]=((((-1.0)*x3027*x3029))+((r21*x3030))+(((-1.0)*r22*x3028)));
evalcond[1]=((((-1.0)*r12*x3028))+((r11*x3030))+(((-1.0)*x3024*x3029)));
evalcond[2]=((((-1.0)*x3025*x3028))+((x3023*x3026))+(((-1.0)*r02*x3029)));
evalcond[3]=((1.0)+(((-1.0)*x3026*x3029))+(((-1.0)*r02*x3028))+((x3022*x3025)));
evalcond[4]=((((-1.0)*r12*x3029))+((cj2*sj1))+(((-1.0)*r11*sj5*x3028))+((cj1*sj2))+((x3023*x3024)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x3023*x3027))+(((-1.0)*r22*x3029))+(((-1.0)*r21*sj5*x3028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3031=((1.0)*cj5);
CheckValue<IkReal> x3032=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3031))+(((-1.0)*r20*sj5)))),-1);
if(!x3032.valid){
continue;
}
CheckValue<IkReal> x3033 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x3031)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3033.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3032.value)))+(x3033.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3034=IKsin(j4);
IkReal x3035=IKcos(j4);
IkReal x3036=(cj5*r10);
IkReal x3037=(r01*sj5);
IkReal x3038=(cj5*r00);
IkReal x3039=(cj5*r20);
IkReal x3040=((1.0)*x3035);
IkReal x3041=((1.0)*x3034);
IkReal x3042=(sj5*x3034);
evalcond[0]=(((r21*x3042))+(((-1.0)*r22*x3040))+(((-1.0)*x3039*x3041)));
evalcond[1]=((((-1.0)*r12*x3040))+(((-1.0)*x3036*x3041))+((r11*x3042)));
evalcond[2]=(((x3035*x3038))+(((-1.0)*x3037*x3040))+(((-1.0)*r02*x3041)));
evalcond[3]=((1.0)+(((-1.0)*x3038*x3041))+((x3034*x3037))+(((-1.0)*r02*x3040)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x3041))+((cj1*sj2))+((x3035*x3036))+(((-1.0)*r11*sj5*x3040)));
evalcond[5]=((((-1.0)*r22*x3041))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3035*x3039))+(((-1.0)*r21*sj5*x3040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3043 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3043.valid){
continue;
}
CheckValue<IkReal> x3044=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3043.value)+(((1.5707963267949)*(x3044.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3045=IKsin(j4);
IkReal x3046=IKcos(j4);
IkReal x3047=(cj5*r10);
IkReal x3048=(r01*sj5);
IkReal x3049=(cj5*r00);
IkReal x3050=(cj5*r20);
IkReal x3051=((1.0)*x3046);
IkReal x3052=((1.0)*x3045);
IkReal x3053=(sj5*x3045);
evalcond[0]=(((r21*x3053))+(((-1.0)*x3050*x3052))+(((-1.0)*r22*x3051)));
evalcond[1]=((((-1.0)*x3047*x3052))+((r11*x3053))+(((-1.0)*r12*x3051)));
evalcond[2]=(((x3046*x3049))+(((-1.0)*x3048*x3051))+(((-1.0)*r02*x3052)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3051))+((x3045*x3048))+(((-1.0)*x3049*x3052)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x3046*x3047))+(((-1.0)*r12*x3052))+(((-1.0)*r11*sj5*x3051)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x3051))+((x3046*x3050))+(((-1.0)*r22*x3052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3054=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3054);
rxp1_1=(px*r21);
rxp1_2=(r11*x3054);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3055=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3055);
rxp1_1=(px*r21);
rxp1_2=(r11*x3055);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3056=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3056);
rxp1_1=(px*r21);
rxp1_2=(r11*x3056);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3059=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x3059.valid){
continue;
}
IkReal x3057=x3059.value;
IkReal x3058=(sj0*x3057);
cj4array[0]=(((cj1*sj2*x3058))+((cj2*sj1*x3058)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3060=IKsin(j4);
IkReal x3061=IKcos(j4);
IkReal x3062=(cj5*r20);
IkReal x3063=(r21*sj5);
IkReal x3064=((1.0)*x3060);
IkReal x3065=((1.0)*x3061);
evalcond[0]=((-1.0)*r02*x3060);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x3065)));
evalcond[2]=((((-1.0)*x3062*x3064))+((x3060*x3063)));
evalcond[3]=((((-1.0)*cj5*r10*x3064))+((r11*sj5*x3060)));
evalcond[4]=((((-1.0)*x3063*x3065))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3061*x3062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3067=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x3067.valid){
continue;
}
IkReal x3066=x3067.value;
cj4array[0]=((((-1.0)*sj1*sj2*x3066))+((cj1*cj2*x3066)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3068=IKsin(j4);
IkReal x3069=IKcos(j4);
IkReal x3070=(r11*sj5);
IkReal x3071=((1.0)*sj0);
IkReal x3072=((1.0)*x3069);
IkReal x3073=((1.0)*cj5*x3068);
evalcond[0]=((-1.0)*r02*x3068);
evalcond[1]=((((-1.0)*r02*x3072))+(((-1.0)*x3071)));
evalcond[2]=(((r21*sj5*x3068))+(((-1.0)*r20*x3073)));
evalcond[3]=((((-1.0)*r10*x3073))+((x3068*x3070)));
evalcond[4]=((((-1.0)*cj1*sj2*x3071))+(((-1.0)*x3070*x3072))+(((-1.0)*cj2*sj1*x3071))+((cj5*r10*x3069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3074=IKPowWithIntegerCheck(r02,-1);
if(!x3074.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x3074.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3075=IKsin(j4);
IkReal x3076=IKcos(j4);
IkReal x3077=((1.0)*sj0);
IkReal x3078=(cj5*x3076);
IkReal x3079=(sj5*x3075);
IkReal x3080=((1.0)*sj5*x3076);
IkReal x3081=((1.0)*cj5*x3075);
evalcond[0]=((-1.0)*r02*x3075);
evalcond[1]=((((-1.0)*r20*x3081))+((r21*x3079)));
evalcond[2]=(((r11*x3079))+(((-1.0)*r10*x3081)));
evalcond[3]=((((-1.0)*r21*x3080))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x3078)));
evalcond[4]=(((r10*x3078))+(((-1.0)*cj1*sj2*x3077))+(((-1.0)*cj2*sj1*x3077))+(((-1.0)*r11*x3080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3082=((1.0)*sj0);
IkReal x3083=((1.0)*cj0);
CheckValue<IkReal> x3084 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3083))+(((-1.0)*r12*x3082)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x3083))+(((-1.0)*r11*sj5*x3082)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3084.valid){
continue;
}
CheckValue<IkReal> x3085=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x3085.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3084.value)+(((1.5707963267949)*(x3085.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3086=IKsin(j4);
IkReal x3087=IKcos(j4);
IkReal x3088=(cj5*r10);
IkReal x3089=(r01*sj5);
IkReal x3090=((1.0)*cj2);
IkReal x3091=(cj5*r00);
IkReal x3092=((1.0)*sj0);
IkReal x3093=(cj5*r20);
IkReal x3094=(cj1*sj2);
IkReal x3095=((1.0)*x3087);
IkReal x3096=((1.0)*x3086);
IkReal x3097=(sj5*x3086);
evalcond[0]=((((-1.0)*r22*x3095))+((r21*x3097))+(((-1.0)*x3093*x3096)));
evalcond[1]=((((-1.0)*r12*x3095))+cj0+(((-1.0)*x3088*x3096))+((r11*x3097)));
evalcond[2]=((((-1.0)*r02*x3095))+(((-1.0)*x3092))+(((-1.0)*x3091*x3096))+((x3086*x3089)));
evalcond[3]=((((-1.0)*r22*x3096))+((x3087*x3093))+((sj1*sj2))+(((-1.0)*cj1*x3090))+(((-1.0)*r21*sj5*x3095)));
evalcond[4]=((((-1.0)*r02*x3096))+((x3087*x3091))+(((-1.0)*x3089*x3095))+(((-1.0)*cj0*sj1*x3090))+(((-1.0)*cj0*x3094)));
evalcond[5]=((((-1.0)*r12*x3096))+(((-1.0)*x3092*x3094))+(((-1.0)*r11*sj5*x3095))+(((-1.0)*sj0*sj1*x3090))+((x3087*x3088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3098=((1.0)*cj5);
CheckValue<IkReal> x3099=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3098))+(((-1.0)*r10*sj5)))),-1);
if(!x3099.valid){
continue;
}
CheckValue<IkReal> x3100 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3098)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3100.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3099.value)))+(x3100.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3101=IKsin(j4);
IkReal x3102=IKcos(j4);
IkReal x3103=(cj5*r10);
IkReal x3104=(r01*sj5);
IkReal x3105=((1.0)*cj2);
IkReal x3106=(cj5*r00);
IkReal x3107=((1.0)*sj0);
IkReal x3108=(cj5*r20);
IkReal x3109=(cj1*sj2);
IkReal x3110=((1.0)*x3102);
IkReal x3111=((1.0)*x3101);
IkReal x3112=(sj5*x3101);
evalcond[0]=((((-1.0)*x3108*x3111))+((r21*x3112))+(((-1.0)*r22*x3110)));
evalcond[1]=((((-1.0)*x3103*x3111))+cj0+(((-1.0)*r12*x3110))+((r11*x3112)));
evalcond[2]=((((-1.0)*r02*x3110))+(((-1.0)*x3107))+(((-1.0)*x3106*x3111))+((x3101*x3104)));
evalcond[3]=((((-1.0)*cj1*x3105))+((sj1*sj2))+((x3102*x3108))+(((-1.0)*r22*x3111))+(((-1.0)*r21*sj5*x3110)));
evalcond[4]=((((-1.0)*r02*x3111))+(((-1.0)*x3104*x3110))+((x3102*x3106))+(((-1.0)*cj0*x3109))+(((-1.0)*cj0*sj1*x3105)));
evalcond[5]=((((-1.0)*x3107*x3109))+(((-1.0)*r12*x3111))+(((-1.0)*r11*sj5*x3110))+(((-1.0)*sj0*sj1*x3105))+((x3102*x3103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3113=((1.0)*cj5);
CheckValue<IkReal> x3114 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3113)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3114.valid){
continue;
}
CheckValue<IkReal> x3115=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3113)))),-1);
if(!x3115.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3114.value)+(((1.5707963267949)*(x3115.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3116=IKsin(j4);
IkReal x3117=IKcos(j4);
IkReal x3118=(cj5*r10);
IkReal x3119=(r01*sj5);
IkReal x3120=((1.0)*cj2);
IkReal x3121=(cj5*r00);
IkReal x3122=((1.0)*sj0);
IkReal x3123=(cj5*r20);
IkReal x3124=(cj1*sj2);
IkReal x3125=((1.0)*x3117);
IkReal x3126=((1.0)*x3116);
IkReal x3127=(sj5*x3116);
evalcond[0]=(((r21*x3127))+(((-1.0)*x3123*x3126))+(((-1.0)*r22*x3125)));
evalcond[1]=(cj0+(((-1.0)*r12*x3125))+((r11*x3127))+(((-1.0)*x3118*x3126)));
evalcond[2]=((((-1.0)*r02*x3125))+(((-1.0)*x3121*x3126))+(((-1.0)*x3122))+((x3116*x3119)));
evalcond[3]=((((-1.0)*r21*sj5*x3125))+((sj1*sj2))+(((-1.0)*cj1*x3120))+(((-1.0)*r22*x3126))+((x3117*x3123)));
evalcond[4]=((((-1.0)*cj0*sj1*x3120))+(((-1.0)*r02*x3126))+(((-1.0)*cj0*x3124))+(((-1.0)*x3119*x3125))+((x3117*x3121)));
evalcond[5]=((((-1.0)*x3122*x3124))+(((-1.0)*r12*x3126))+(((-1.0)*r11*sj5*x3125))+((x3117*x3118))+(((-1.0)*sj0*sj1*x3120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3128=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x3128;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x3128);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3129=r21*r21;
IkReal x3130=cj5*cj5;
IkReal x3131=(sj1*sj2);
IkReal x3132=(r21*sj5);
IkReal x3133=(cj5*r20);
IkReal x3134=(cj1*cj2);
IkReal x3135=((((2.0)*x3132*x3133))+(((-1.0)*x3129))+(((-1.0)*(r22*r22)))+((x3129*x3130))+(((-1.0)*x3130*(r20*r20))));
j4eval[0]=x3135;
j4eval[1]=((IKabs((((r22*x3131))+(((-1.0)*r22*x3134)))))+(IKabs((((x3131*x3132))+(((-1.0)*x3132*x3134))+((x3133*x3134))+(((-1.0)*x3131*x3133))))));
j4eval[2]=IKsign(x3135);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.67478761815078)*px))+(((2.14018460980658)*py))), ((((0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3136=IKcos(j0);
IkReal x3137=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((0.425)*x3136))+(((-0.134)*x3137)));
evalcond[1]=((((-1.0)*py))+(((0.134)*x3136))+(((0.425)*x3137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3138=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3138;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3138);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3139=((1.0)*cj5);
IkReal x3140=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3139)));
j4eval[0]=x3140;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3139)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3140);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3141=((1.0)*cj5);
IkReal x3142=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3141)));
j4eval[0]=x3142;
j4eval[1]=IKsign(x3142);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3141))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3143=((1.0)*cj5);
CheckValue<IkReal> x3144=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3143)))),-1);
if(!x3144.valid){
continue;
}
CheckValue<IkReal> x3145 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3143)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3145.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3144.value)))+(x3145.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3146=IKcos(j4);
IkReal x3147=IKsin(j4);
IkReal x3148=((1.0)*sj0);
IkReal x3149=(cj5*r00);
IkReal x3150=(cj5*r10);
IkReal x3151=(cj5*r20);
IkReal x3152=((1.0)*x3146);
IkReal x3153=((1.0)*x3147);
IkReal x3154=(sj5*x3146);
IkReal x3155=(sj5*x3147);
evalcond[0]=(((r22*x3147))+((r21*x3154))+(((-1.0)*x3151*x3152)));
evalcond[1]=((((-1.0)*r22*x3152))+((r21*x3155))+(((-1.0)*x3151*x3153)));
evalcond[2]=(cj0+((r11*x3155))+(((-1.0)*x3150*x3153))+(((-1.0)*r12*x3152)));
evalcond[3]=(((r02*x3147))+(((-1.0)*x3149*x3152))+((r01*x3154))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3148))+((r12*x3147))+((r11*x3154))+(((-1.0)*x3150*x3152)));
evalcond[5]=((((-1.0)*x3148))+(((-1.0)*x3149*x3153))+((r01*x3155))+(((-1.0)*r02*x3152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3156=((1.0)*cj5);
CheckValue<IkReal> x3157 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3156)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3157.valid){
continue;
}
CheckValue<IkReal> x3158=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3156)))),-1);
if(!x3158.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3157.value)+(((1.5707963267949)*(x3158.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3159=IKcos(j4);
IkReal x3160=IKsin(j4);
IkReal x3161=((1.0)*sj0);
IkReal x3162=(cj5*r00);
IkReal x3163=(cj5*r10);
IkReal x3164=(cj5*r20);
IkReal x3165=((1.0)*x3159);
IkReal x3166=((1.0)*x3160);
IkReal x3167=(sj5*x3159);
IkReal x3168=(sj5*x3160);
evalcond[0]=(((r22*x3160))+(((-1.0)*x3164*x3165))+((r21*x3167)));
evalcond[1]=((((-1.0)*x3164*x3166))+((r21*x3168))+(((-1.0)*r22*x3165)));
evalcond[2]=((((-1.0)*r12*x3165))+(((-1.0)*x3163*x3166))+cj0+((r11*x3168)));
evalcond[3]=(((r02*x3160))+(((-1.0)*x3162*x3165))+((r01*x3167))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3163*x3165))+((r11*x3167))+((r12*x3160))+(((-1.0)*x3161)));
evalcond[5]=((((-1.0)*x3162*x3166))+((r01*x3168))+(((-1.0)*r02*x3165))+(((-1.0)*x3161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3169 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3169.valid){
continue;
}
CheckValue<IkReal> x3170=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3169.value)+(((1.5707963267949)*(x3170.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3171=IKcos(j4);
IkReal x3172=IKsin(j4);
IkReal x3173=((1.0)*sj0);
IkReal x3174=(cj5*r00);
IkReal x3175=(cj5*r10);
IkReal x3176=(cj5*r20);
IkReal x3177=((1.0)*x3171);
IkReal x3178=((1.0)*x3172);
IkReal x3179=(sj5*x3171);
IkReal x3180=(sj5*x3172);
evalcond[0]=(((r22*x3172))+((r21*x3179))+(((-1.0)*x3176*x3177)));
evalcond[1]=((((-1.0)*x3176*x3178))+(((-1.0)*r22*x3177))+((r21*x3180)));
evalcond[2]=(cj0+(((-1.0)*r12*x3177))+((r11*x3180))+(((-1.0)*x3175*x3178)));
evalcond[3]=((((-1.0)*x3174*x3177))+((r02*x3172))+((r01*x3179))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3179))+(((-1.0)*x3173))+((r12*x3172))+(((-1.0)*x3175*x3177)));
evalcond[5]=((((-1.0)*x3174*x3178))+((r01*x3180))+(((-1.0)*x3173))+(((-1.0)*r02*x3177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.67478761815078)*px))+(((2.14018460980658)*py))), ((((0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3181=IKcos(j0);
IkReal x3182=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((0.425)*x3181))+(((-0.134)*x3182)));
evalcond[1]=((((0.134)*x3181))+(((-1.0)*py))+(((0.425)*x3182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3183=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3183;
j4eval[1]=IKsign(x3183);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3184=((1.0)*cj5);
IkReal x3185=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3184)));
j4eval[0]=x3185;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3184))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3185);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3186=cj5*cj5;
IkReal x3187=((1.0)*r20);
IkReal x3188=(r01*r21);
IkReal x3189=(r21*sj5);
IkReal x3190=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3189))+(((-1.0)*r00*x3186*x3187))+(((-1.0)*x3188))+((x3186*x3188)));
j4eval[0]=x3190;
j4eval[1]=((IKabs((((cj0*x3189))+(((-1.0)*cj0*cj5*x3187)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3190);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3191=cj5*cj5;
IkReal x3192=((1.0)*r20);
IkReal x3193=(r01*r21);
IkReal x3194=(r21*sj5);
CheckValue<IkReal> x3195 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3194))+(((-1.0)*cj0*cj5*x3192)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3195.valid){
continue;
}
CheckValue<IkReal> x3196=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3194))+((x3191*x3193))+(((-1.0)*x3193))+(((-1.0)*r00*x3191*x3192)))),-1);
if(!x3196.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3195.value)+(((1.5707963267949)*(x3196.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3197=IKcos(j4);
IkReal x3198=IKsin(j4);
IkReal x3199=(cj5*r00);
IkReal x3200=(cj5*r10);
IkReal x3201=(cj5*r20);
IkReal x3202=((1.0)*x3197);
IkReal x3203=((1.0)*x3198);
IkReal x3204=(sj5*x3197);
IkReal x3205=(sj5*x3198);
evalcond[0]=((((-1.0)*x3201*x3202))+((r22*x3198))+((r21*x3204)));
evalcond[1]=((((-1.0)*x3201*x3203))+(((-1.0)*r22*x3202))+((r21*x3205)));
evalcond[2]=(cj0+(((-1.0)*x3199*x3202))+((r01*x3204))+((r02*x3198)));
evalcond[3]=(sj0+(((-1.0)*x3200*x3202))+((r11*x3204))+((r12*x3198)));
evalcond[4]=(cj0+(((-1.0)*x3200*x3203))+((r11*x3205))+(((-1.0)*r12*x3202)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3202))+(((-1.0)*x3199*x3203))+((r01*x3205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3206=((1.0)*cj5);
CheckValue<IkReal> x3207=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3206)))),-1);
if(!x3207.valid){
continue;
}
CheckValue<IkReal> x3208 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3206)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3207.value)))+(x3208.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3209=IKcos(j4);
IkReal x3210=IKsin(j4);
IkReal x3211=(cj5*r00);
IkReal x3212=(cj5*r10);
IkReal x3213=(cj5*r20);
IkReal x3214=((1.0)*x3209);
IkReal x3215=((1.0)*x3210);
IkReal x3216=(sj5*x3209);
IkReal x3217=(sj5*x3210);
evalcond[0]=(((r22*x3210))+((r21*x3216))+(((-1.0)*x3213*x3214)));
evalcond[1]=(((r21*x3217))+(((-1.0)*r22*x3214))+(((-1.0)*x3213*x3215)));
evalcond[2]=((((-1.0)*x3211*x3214))+cj0+((r01*x3216))+((r02*x3210)));
evalcond[3]=(sj0+((r12*x3210))+((r11*x3216))+(((-1.0)*x3212*x3214)));
evalcond[4]=(cj0+((r11*x3217))+(((-1.0)*x3212*x3215))+(((-1.0)*r12*x3214)));
evalcond[5]=((((-1.0)*x3211*x3215))+(((-1.0)*sj0))+((r01*x3217))+(((-1.0)*r02*x3214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3218 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3218.valid){
continue;
}
CheckValue<IkReal> x3219=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3219.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3218.value)+(((1.5707963267949)*(x3219.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3220=IKcos(j4);
IkReal x3221=IKsin(j4);
IkReal x3222=(cj5*r00);
IkReal x3223=(cj5*r10);
IkReal x3224=(cj5*r20);
IkReal x3225=((1.0)*x3220);
IkReal x3226=((1.0)*x3221);
IkReal x3227=(sj5*x3220);
IkReal x3228=(sj5*x3221);
evalcond[0]=((((-1.0)*x3224*x3225))+((r21*x3227))+((r22*x3221)));
evalcond[1]=((((-1.0)*x3224*x3226))+((r21*x3228))+(((-1.0)*r22*x3225)));
evalcond[2]=(cj0+((r02*x3221))+((r01*x3227))+(((-1.0)*x3222*x3225)));
evalcond[3]=(((r12*x3221))+sj0+((r11*x3227))+(((-1.0)*x3223*x3225)));
evalcond[4]=(cj0+((r11*x3228))+(((-1.0)*x3223*x3226))+(((-1.0)*r12*x3225)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3225))+((r01*x3228))+(((-1.0)*x3222*x3226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3229=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3229;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3229);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3230=((1.0)*cj5);
IkReal x3231=((((-1.0)*r01*x3230))+(((-1.0)*r00*sj5)));
j4eval[0]=x3231;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3230)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3231);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3232=((1.0)*cj5);
IkReal x3233=((((-1.0)*r01*x3232))+(((-1.0)*r00*sj5)));
j4eval[0]=x3233;
j4eval[1]=IKsign(x3233);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3232))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3234=((1.0)*cj5);
CheckValue<IkReal> x3235 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3234)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3235.valid){
continue;
}
CheckValue<IkReal> x3236=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3234))+(((-1.0)*r00*sj5)))),-1);
if(!x3236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3235.value)+(((1.5707963267949)*(x3236.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3237=IKcos(j4);
IkReal x3238=IKsin(j4);
IkReal x3239=((1.0)*sj0);
IkReal x3240=(cj5*r00);
IkReal x3241=(cj5*r10);
IkReal x3242=(cj5*r20);
IkReal x3243=((1.0)*x3237);
IkReal x3244=((1.0)*x3238);
IkReal x3245=(sj5*x3237);
IkReal x3246=(sj5*x3238);
evalcond[0]=(((r21*x3245))+((r22*x3238))+(((-1.0)*x3242*x3243)));
evalcond[1]=(((r21*x3246))+(((-1.0)*x3242*x3244))+(((-1.0)*r22*x3243)));
evalcond[2]=(cj0+(((-1.0)*r12*x3243))+(((-1.0)*x3241*x3244))+((r11*x3246)));
evalcond[3]=(((r01*x3245))+(((-1.0)*x3240*x3243))+((r02*x3238))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3238))+(((-1.0)*x3239))+(((-1.0)*x3241*x3243))+((r11*x3245)));
evalcond[5]=(((r01*x3246))+(((-1.0)*x3240*x3244))+(((-1.0)*x3239))+(((-1.0)*r02*x3243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3247=((1.0)*cj5);
CheckValue<IkReal> x3248 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3247)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3248.valid){
continue;
}
CheckValue<IkReal> x3249=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3247))+(((-1.0)*r00*sj5)))),-1);
if(!x3249.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3248.value)+(((1.5707963267949)*(x3249.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3250=IKcos(j4);
IkReal x3251=IKsin(j4);
IkReal x3252=((1.0)*sj0);
IkReal x3253=(cj5*r00);
IkReal x3254=(cj5*r10);
IkReal x3255=(cj5*r20);
IkReal x3256=((1.0)*x3250);
IkReal x3257=((1.0)*x3251);
IkReal x3258=(sj5*x3250);
IkReal x3259=(sj5*x3251);
evalcond[0]=(((r21*x3258))+((r22*x3251))+(((-1.0)*x3255*x3256)));
evalcond[1]=(((r21*x3259))+(((-1.0)*r22*x3256))+(((-1.0)*x3255*x3257)));
evalcond[2]=(cj0+((r11*x3259))+(((-1.0)*x3254*x3257))+(((-1.0)*r12*x3256)));
evalcond[3]=(((r02*x3251))+(((-1.0)*x3253*x3256))+((r01*x3258))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3251))+((r11*x3258))+(((-1.0)*x3254*x3256))+(((-1.0)*x3252)));
evalcond[5]=((((-1.0)*r02*x3256))+(((-1.0)*x3253*x3257))+((r01*x3259))+(((-1.0)*x3252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3260 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3260.valid){
continue;
}
CheckValue<IkReal> x3261=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3260.value)+(((1.5707963267949)*(x3261.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3262=IKcos(j4);
IkReal x3263=IKsin(j4);
IkReal x3264=((1.0)*sj0);
IkReal x3265=(cj5*r00);
IkReal x3266=(cj5*r10);
IkReal x3267=(cj5*r20);
IkReal x3268=((1.0)*x3262);
IkReal x3269=((1.0)*x3263);
IkReal x3270=(sj5*x3262);
IkReal x3271=(sj5*x3263);
evalcond[0]=(((r21*x3270))+(((-1.0)*x3267*x3268))+((r22*x3263)));
evalcond[1]=(((r21*x3271))+(((-1.0)*x3267*x3269))+(((-1.0)*r22*x3268)));
evalcond[2]=(cj0+(((-1.0)*r12*x3268))+((r11*x3271))+(((-1.0)*x3266*x3269)));
evalcond[3]=(((r01*x3270))+(((-1.0)*x3265*x3268))+((r02*x3263))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3264))+((r11*x3270))+(((-1.0)*x3266*x3268))+((r12*x3263)));
evalcond[5]=(((r01*x3271))+(((-1.0)*x3264))+(((-1.0)*x3265*x3269))+(((-1.0)*r02*x3268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3272=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3272;
j4eval[1]=IKsign(x3272);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3273=((1.0)*cj5);
IkReal x3274=((((-1.0)*r11*x3273))+(((-1.0)*r10*sj5)));
j4eval[0]=x3274;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3273)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3274);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3275=cj5*cj5;
IkReal x3276=((1.0)*r20);
IkReal x3277=(r01*r21);
IkReal x3278=(r21*sj5);
IkReal x3279=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3277))+(((-1.0)*r00*x3275*x3276))+((x3275*x3277))+((cj5*r00*x3278)));
j4eval[0]=x3279;
j4eval[1]=((IKabs((((cj0*x3278))+(((-1.0)*cj0*cj5*x3276)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3279);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3280=cj5*cj5;
IkReal x3281=((1.0)*r20);
IkReal x3282=(r01*r21);
IkReal x3283=(r21*sj5);
CheckValue<IkReal> x3284 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3281))+((cj0*x3283)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3284.valid){
continue;
}
CheckValue<IkReal> x3285=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x3280*x3282))+((cj5*r00*x3283))+(((-1.0)*x3282))+(((-1.0)*r00*x3280*x3281)))),-1);
if(!x3285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3284.value)+(((1.5707963267949)*(x3285.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3286=IKcos(j4);
IkReal x3287=IKsin(j4);
IkReal x3288=(cj5*r00);
IkReal x3289=(cj5*r10);
IkReal x3290=(cj5*r20);
IkReal x3291=((1.0)*x3286);
IkReal x3292=((1.0)*x3287);
IkReal x3293=(sj5*x3286);
IkReal x3294=(sj5*x3287);
evalcond[0]=(((r22*x3287))+((r21*x3293))+(((-1.0)*x3290*x3291)));
evalcond[1]=((((-1.0)*r22*x3291))+((r21*x3294))+(((-1.0)*x3290*x3292)));
evalcond[2]=(((r01*x3293))+cj0+((r02*x3287))+(((-1.0)*x3288*x3291)));
evalcond[3]=(sj0+(((-1.0)*x3289*x3291))+((r11*x3293))+((r12*x3287)));
evalcond[4]=((((-1.0)*r12*x3291))+cj0+(((-1.0)*x3289*x3292))+((r11*x3294)));
evalcond[5]=(((r01*x3294))+(((-1.0)*sj0))+(((-1.0)*r02*x3291))+(((-1.0)*x3288*x3292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3295=((1.0)*cj5);
CheckValue<IkReal> x3296 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x3295))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3296.valid){
continue;
}
CheckValue<IkReal> x3297=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3295))+(((-1.0)*r10*sj5)))),-1);
if(!x3297.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3296.value)+(((1.5707963267949)*(x3297.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3298=IKcos(j4);
IkReal x3299=IKsin(j4);
IkReal x3300=(cj5*r00);
IkReal x3301=(cj5*r10);
IkReal x3302=(cj5*r20);
IkReal x3303=((1.0)*x3298);
IkReal x3304=((1.0)*x3299);
IkReal x3305=(sj5*x3298);
IkReal x3306=(sj5*x3299);
evalcond[0]=(((r21*x3305))+((r22*x3299))+(((-1.0)*x3302*x3303)));
evalcond[1]=(((r21*x3306))+(((-1.0)*r22*x3303))+(((-1.0)*x3302*x3304)));
evalcond[2]=(cj0+((r02*x3299))+((r01*x3305))+(((-1.0)*x3300*x3303)));
evalcond[3]=(sj0+((r11*x3305))+(((-1.0)*x3301*x3303))+((r12*x3299)));
evalcond[4]=(cj0+((r11*x3306))+(((-1.0)*x3301*x3304))+(((-1.0)*r12*x3303)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3303))+((r01*x3306))+(((-1.0)*x3300*x3304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3307 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3307.valid){
continue;
}
CheckValue<IkReal> x3308=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3308.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3307.value)+(((1.5707963267949)*(x3308.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3309=IKcos(j4);
IkReal x3310=IKsin(j4);
IkReal x3311=(cj5*r00);
IkReal x3312=(cj5*r10);
IkReal x3313=(cj5*r20);
IkReal x3314=((1.0)*x3309);
IkReal x3315=((1.0)*x3310);
IkReal x3316=(sj5*x3309);
IkReal x3317=(sj5*x3310);
evalcond[0]=(((r21*x3316))+((r22*x3310))+(((-1.0)*x3313*x3314)));
evalcond[1]=(((r21*x3317))+(((-1.0)*r22*x3314))+(((-1.0)*x3313*x3315)));
evalcond[2]=(cj0+((r02*x3310))+(((-1.0)*x3311*x3314))+((r01*x3316)));
evalcond[3]=(sj0+((r11*x3316))+(((-1.0)*x3312*x3314))+((r12*x3310)));
evalcond[4]=(cj0+((r11*x3317))+(((-1.0)*x3312*x3315))+(((-1.0)*r12*x3314)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3314))+(((-1.0)*x3311*x3315))+((r01*x3317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((-0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3318=IKcos(j0);
IkReal x3319=IKsin(j0);
evalcond[0]=((((-0.134)*x3319))+(((-0.425)*x3318))+(((-1.0)*px)));
evalcond[1]=((((0.134)*x3318))+(((-0.425)*x3319))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3320=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3320;
j4eval[1]=IKsign(x3320);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3321=((1.0)*cj5);
IkReal x3322=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3321)));
j4eval[0]=x3322;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3321))))));
j4eval[2]=IKsign(x3322);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3323=cj5*cj5;
IkReal x3324=((1.0)*r20);
IkReal x3325=(r01*r21);
IkReal x3326=(r21*sj5);
IkReal x3327=(((cj5*r01*r20*sj5))+(((-1.0)*x3325))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3323*x3324))+((cj5*r00*x3326))+((x3323*x3325)));
j4eval[0]=x3327;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x3324))+((cj0*x3326))))));
j4eval[2]=IKsign(x3327);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3328=cj5*cj5;
IkReal x3329=((1.0)*r20);
IkReal x3330=(r01*r21);
IkReal x3331=(r21*sj5);
CheckValue<IkReal> x3332 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3329))+((cj0*x3331)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3332.valid){
continue;
}
CheckValue<IkReal> x3333=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3331))+((x3328*x3330))+(((-1.0)*x3330))+(((-1.0)*r00*x3328*x3329)))),-1);
if(!x3333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3332.value)+(((1.5707963267949)*(x3333.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3334=IKcos(j4);
IkReal x3335=IKsin(j4);
IkReal x3336=(cj5*r00);
IkReal x3337=(cj5*r10);
IkReal x3338=(cj5*r20);
IkReal x3339=((1.0)*x3334);
IkReal x3340=((1.0)*x3335);
IkReal x3341=(sj5*x3334);
IkReal x3342=(sj5*x3335);
evalcond[0]=((((-1.0)*x3338*x3339))+((r21*x3341))+((r22*x3335)));
evalcond[1]=((((-1.0)*x3338*x3340))+(((-1.0)*r22*x3339))+((r21*x3342)));
evalcond[2]=(cj0+((r02*x3335))+(((-1.0)*x3336*x3339))+((r01*x3341)));
evalcond[3]=(sj0+((r12*x3335))+(((-1.0)*x3337*x3339))+((r11*x3341)));
evalcond[4]=(cj0+(((-1.0)*x3337*x3340))+((r11*x3342))+(((-1.0)*r12*x3339)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3339))+((r01*x3342))+(((-1.0)*x3336*x3340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3343=((1.0)*cj5);
CheckValue<IkReal> x3344=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3343)))),-1);
if(!x3344.valid){
continue;
}
CheckValue<IkReal> x3345 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3343)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3344.value)))+(x3345.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3346=IKcos(j4);
IkReal x3347=IKsin(j4);
IkReal x3348=(cj5*r00);
IkReal x3349=(cj5*r10);
IkReal x3350=(cj5*r20);
IkReal x3351=((1.0)*x3346);
IkReal x3352=((1.0)*x3347);
IkReal x3353=(sj5*x3346);
IkReal x3354=(sj5*x3347);
evalcond[0]=(((r22*x3347))+(((-1.0)*x3350*x3351))+((r21*x3353)));
evalcond[1]=((((-1.0)*x3350*x3352))+((r21*x3354))+(((-1.0)*r22*x3351)));
evalcond[2]=((((-1.0)*x3348*x3351))+cj0+((r01*x3353))+((r02*x3347)));
evalcond[3]=(sj0+((r11*x3353))+(((-1.0)*x3349*x3351))+((r12*x3347)));
evalcond[4]=(cj0+((r11*x3354))+(((-1.0)*x3349*x3352))+(((-1.0)*r12*x3351)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3348*x3352))+(((-1.0)*r02*x3351))+((r01*x3354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3355 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3355.valid){
continue;
}
CheckValue<IkReal> x3356=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3355.value)+(((1.5707963267949)*(x3356.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3357=IKcos(j4);
IkReal x3358=IKsin(j4);
IkReal x3359=(cj5*r00);
IkReal x3360=(cj5*r10);
IkReal x3361=(cj5*r20);
IkReal x3362=((1.0)*x3357);
IkReal x3363=((1.0)*x3358);
IkReal x3364=(sj5*x3357);
IkReal x3365=(sj5*x3358);
evalcond[0]=((((-1.0)*x3361*x3362))+((r21*x3364))+((r22*x3358)));
evalcond[1]=((((-1.0)*x3361*x3363))+((r21*x3365))+(((-1.0)*r22*x3362)));
evalcond[2]=((((-1.0)*x3359*x3362))+cj0+((r01*x3364))+((r02*x3358)));
evalcond[3]=((((-1.0)*x3360*x3362))+((r12*x3358))+sj0+((r11*x3364)));
evalcond[4]=((((-1.0)*x3360*x3363))+(((-1.0)*r12*x3362))+cj0+((r11*x3365)));
evalcond[5]=((((-1.0)*x3359*x3363))+(((-1.0)*sj0))+((r01*x3365))+(((-1.0)*r02*x3362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((-0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3366=IKcos(j0);
IkReal x3367=IKsin(j0);
evalcond[0]=((((-0.134)*x3367))+(((-0.425)*x3366))+(((-1.0)*px)));
evalcond[1]=((((-0.425)*x3367))+(((-1.0)*py))+(((0.134)*x3366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3368=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3368;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3368);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3369=((1.0)*cj5);
IkReal x3370=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3369)));
j4eval[0]=x3370;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3369))))));
j4eval[2]=IKsign(x3370);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3371=((1.0)*cj5);
IkReal x3372=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3371)));
j4eval[0]=x3372;
j4eval[1]=IKsign(x3372);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x3371))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3373=((1.0)*cj5);
CheckValue<IkReal> x3374=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3373)))),-1);
if(!x3374.valid){
continue;
}
CheckValue<IkReal> x3375 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3373))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3375.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3374.value)))+(x3375.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3376=IKcos(j4);
IkReal x3377=IKsin(j4);
IkReal x3378=((1.0)*sj0);
IkReal x3379=(cj5*r00);
IkReal x3380=(cj5*r10);
IkReal x3381=(cj5*r20);
IkReal x3382=((1.0)*x3376);
IkReal x3383=((1.0)*x3377);
IkReal x3384=(sj5*x3376);
IkReal x3385=(sj5*x3377);
evalcond[0]=(((r22*x3377))+(((-1.0)*x3381*x3382))+((r21*x3384)));
evalcond[1]=((((-1.0)*r22*x3382))+(((-1.0)*x3381*x3383))+((r21*x3385)));
evalcond[2]=(cj0+(((-1.0)*x3380*x3383))+((r11*x3385))+(((-1.0)*r12*x3382)));
evalcond[3]=(((r01*x3384))+((r02*x3377))+(((-1.0)*x3379*x3382))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3377))+(((-1.0)*x3380*x3382))+(((-1.0)*x3378))+((r11*x3384)));
evalcond[5]=(((r01*x3385))+(((-1.0)*x3378))+(((-1.0)*r02*x3382))+(((-1.0)*x3379*x3383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3386=((1.0)*cj5);
CheckValue<IkReal> x3387 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3386)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3387.valid){
continue;
}
CheckValue<IkReal> x3388=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3386)))),-1);
if(!x3388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3387.value)+(((1.5707963267949)*(x3388.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3389=IKcos(j4);
IkReal x3390=IKsin(j4);
IkReal x3391=((1.0)*sj0);
IkReal x3392=(cj5*r00);
IkReal x3393=(cj5*r10);
IkReal x3394=(cj5*r20);
IkReal x3395=((1.0)*x3389);
IkReal x3396=((1.0)*x3390);
IkReal x3397=(sj5*x3389);
IkReal x3398=(sj5*x3390);
evalcond[0]=((((-1.0)*x3394*x3395))+((r21*x3397))+((r22*x3390)));
evalcond[1]=((((-1.0)*r22*x3395))+(((-1.0)*x3394*x3396))+((r21*x3398)));
evalcond[2]=(cj0+((r11*x3398))+(((-1.0)*r12*x3395))+(((-1.0)*x3393*x3396)));
evalcond[3]=((((-1.0)*x3392*x3395))+((r01*x3397))+((r02*x3390))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3397))+(((-1.0)*x3391))+((r12*x3390))+(((-1.0)*x3393*x3395)));
evalcond[5]=((((-1.0)*x3392*x3396))+((r01*x3398))+(((-1.0)*r02*x3395))+(((-1.0)*x3391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3399 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3399.valid){
continue;
}
CheckValue<IkReal> x3400=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3400.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3399.value)+(((1.5707963267949)*(x3400.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3401=IKcos(j4);
IkReal x3402=IKsin(j4);
IkReal x3403=((1.0)*sj0);
IkReal x3404=(cj5*r00);
IkReal x3405=(cj5*r10);
IkReal x3406=(cj5*r20);
IkReal x3407=((1.0)*x3401);
IkReal x3408=((1.0)*x3402);
IkReal x3409=(sj5*x3401);
IkReal x3410=(sj5*x3402);
evalcond[0]=(((r22*x3402))+((r21*x3409))+(((-1.0)*x3406*x3407)));
evalcond[1]=(((r21*x3410))+(((-1.0)*x3406*x3408))+(((-1.0)*r22*x3407)));
evalcond[2]=((((-1.0)*x3405*x3408))+cj0+(((-1.0)*r12*x3407))+((r11*x3410)));
evalcond[3]=(((r02*x3402))+(((-1.0)*x3404*x3407))+((r01*x3409))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3405*x3407))+((r11*x3409))+((r12*x3402))+(((-1.0)*x3403)));
evalcond[5]=((((-1.0)*x3404*x3408))+((r01*x3410))+(((-1.0)*r02*x3407))+(((-1.0)*x3403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3411=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3411;
j4eval[1]=IKsign(x3411);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3412=((1.0)*cj5);
IkReal x3413=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3412)));
j4eval[0]=x3413;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3412)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3413);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3414=cj5*cj5;
IkReal x3415=((1.0)*r20);
IkReal x3416=(r01*r21);
IkReal x3417=(r21*sj5);
IkReal x3418=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3416))+((x3414*x3416))+(((-1.0)*r00*x3414*x3415))+((cj5*r00*x3417)));
j4eval[0]=x3418;
j4eval[1]=((IKabs((((cj0*x3417))+(((-1.0)*cj0*cj5*x3415)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3418);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3419=cj5*cj5;
IkReal x3420=((1.0)*r20);
IkReal x3421=(r01*r21);
IkReal x3422=(r21*sj5);
CheckValue<IkReal> x3423=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3419*x3420))+((cj5*r00*x3422))+(((-1.0)*x3421))+((x3419*x3421)))),-1);
if(!x3423.valid){
continue;
}
CheckValue<IkReal> x3424 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3420))+((cj0*x3422)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3424.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3423.value)))+(x3424.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3425=IKcos(j4);
IkReal x3426=IKsin(j4);
IkReal x3427=(cj5*r00);
IkReal x3428=(cj5*r10);
IkReal x3429=(cj5*r20);
IkReal x3430=((1.0)*x3425);
IkReal x3431=((1.0)*x3426);
IkReal x3432=(sj5*x3425);
IkReal x3433=(sj5*x3426);
evalcond[0]=(((r21*x3432))+((r22*x3426))+(((-1.0)*x3429*x3430)));
evalcond[1]=((((-1.0)*r22*x3430))+((r21*x3433))+(((-1.0)*x3429*x3431)));
evalcond[2]=((((-1.0)*x3427*x3430))+((r01*x3432))+cj0+((r02*x3426)));
evalcond[3]=((((-1.0)*x3428*x3430))+sj0+((r12*x3426))+((r11*x3432)));
evalcond[4]=((((-1.0)*x3428*x3431))+(((-1.0)*r12*x3430))+cj0+((r11*x3433)));
evalcond[5]=((((-1.0)*x3427*x3431))+((r01*x3433))+(((-1.0)*sj0))+(((-1.0)*r02*x3430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3434=((1.0)*cj5);
CheckValue<IkReal> x3435=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3434)))),-1);
if(!x3435.valid){
continue;
}
CheckValue<IkReal> x3436 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3434)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3436.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3435.value)))+(x3436.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3437=IKcos(j4);
IkReal x3438=IKsin(j4);
IkReal x3439=(cj5*r00);
IkReal x3440=(cj5*r10);
IkReal x3441=(cj5*r20);
IkReal x3442=((1.0)*x3437);
IkReal x3443=((1.0)*x3438);
IkReal x3444=(sj5*x3437);
IkReal x3445=(sj5*x3438);
evalcond[0]=(((r21*x3444))+(((-1.0)*x3441*x3442))+((r22*x3438)));
evalcond[1]=(((r21*x3445))+(((-1.0)*x3441*x3443))+(((-1.0)*r22*x3442)));
evalcond[2]=(cj0+(((-1.0)*x3439*x3442))+((r01*x3444))+((r02*x3438)));
evalcond[3]=(((r11*x3444))+sj0+((r12*x3438))+(((-1.0)*x3440*x3442)));
evalcond[4]=(((r11*x3445))+cj0+(((-1.0)*r12*x3442))+(((-1.0)*x3440*x3443)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3439*x3443))+(((-1.0)*r02*x3442))+((r01*x3445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3446 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3446.valid){
continue;
}
CheckValue<IkReal> x3447=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3447.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3446.value)+(((1.5707963267949)*(x3447.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3448=IKcos(j4);
IkReal x3449=IKsin(j4);
IkReal x3450=(cj5*r00);
IkReal x3451=(cj5*r10);
IkReal x3452=(cj5*r20);
IkReal x3453=((1.0)*x3448);
IkReal x3454=((1.0)*x3449);
IkReal x3455=(sj5*x3448);
IkReal x3456=(sj5*x3449);
evalcond[0]=(((r21*x3455))+((r22*x3449))+(((-1.0)*x3452*x3453)));
evalcond[1]=(((r21*x3456))+(((-1.0)*r22*x3453))+(((-1.0)*x3452*x3454)));
evalcond[2]=(cj0+((r02*x3449))+(((-1.0)*x3450*x3453))+((r01*x3455)));
evalcond[3]=((((-1.0)*x3451*x3453))+sj0+((r12*x3449))+((r11*x3455)));
evalcond[4]=((((-1.0)*x3451*x3454))+cj0+(((-1.0)*r12*x3453))+((r11*x3456)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3450*x3454))+(((-1.0)*r02*x3453))+((r01*x3456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3457=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3457;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3457);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3458=((1.0)*cj5);
IkReal x3459=((((-1.0)*r01*x3458))+(((-1.0)*r00*sj5)));
j4eval[0]=x3459;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3458))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3459);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3460=((1.0)*cj5);
IkReal x3461=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3460)));
j4eval[0]=x3461;
j4eval[1]=IKsign(x3461);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3460))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3462=((1.0)*cj5);
CheckValue<IkReal> x3463 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3462))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3463.valid){
continue;
}
CheckValue<IkReal> x3464=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3462)))),-1);
if(!x3464.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3463.value)+(((1.5707963267949)*(x3464.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3465=IKcos(j4);
IkReal x3466=IKsin(j4);
IkReal x3467=((1.0)*sj0);
IkReal x3468=(cj5*r00);
IkReal x3469=(cj5*r10);
IkReal x3470=(cj5*r20);
IkReal x3471=((1.0)*x3465);
IkReal x3472=((1.0)*x3466);
IkReal x3473=(sj5*x3465);
IkReal x3474=(sj5*x3466);
evalcond[0]=(((r21*x3473))+(((-1.0)*x3470*x3471))+((r22*x3466)));
evalcond[1]=((((-1.0)*r22*x3471))+((r21*x3474))+(((-1.0)*x3470*x3472)));
evalcond[2]=(cj0+(((-1.0)*r12*x3471))+(((-1.0)*x3469*x3472))+((r11*x3474)));
evalcond[3]=(((r01*x3473))+(((-1.0)*x3468*x3471))+((r02*x3466))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3466))+(((-1.0)*x3469*x3471))+((r11*x3473))+(((-1.0)*x3467)));
evalcond[5]=((((-1.0)*r02*x3471))+((r01*x3474))+(((-1.0)*x3468*x3472))+(((-1.0)*x3467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3475=((1.0)*cj5);
CheckValue<IkReal> x3476=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3475)))),-1);
if(!x3476.valid){
continue;
}
CheckValue<IkReal> x3477 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3475)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3476.value)))+(x3477.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3478=IKcos(j4);
IkReal x3479=IKsin(j4);
IkReal x3480=((1.0)*sj0);
IkReal x3481=(cj5*r00);
IkReal x3482=(cj5*r10);
IkReal x3483=(cj5*r20);
IkReal x3484=((1.0)*x3478);
IkReal x3485=((1.0)*x3479);
IkReal x3486=(sj5*x3478);
IkReal x3487=(sj5*x3479);
evalcond[0]=((((-1.0)*x3483*x3484))+((r21*x3486))+((r22*x3479)));
evalcond[1]=((((-1.0)*x3483*x3485))+(((-1.0)*r22*x3484))+((r21*x3487)));
evalcond[2]=((((-1.0)*x3482*x3485))+cj0+(((-1.0)*r12*x3484))+((r11*x3487)));
evalcond[3]=((((-1.0)*x3481*x3484))+((r01*x3486))+((r02*x3479))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3482*x3484))+((r12*x3479))+((r11*x3486))+(((-1.0)*x3480)));
evalcond[5]=((((-1.0)*x3481*x3485))+(((-1.0)*r02*x3484))+((r01*x3487))+(((-1.0)*x3480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3488 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3488.valid){
continue;
}
CheckValue<IkReal> x3489=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3489.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3488.value)+(((1.5707963267949)*(x3489.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3490=IKcos(j4);
IkReal x3491=IKsin(j4);
IkReal x3492=((1.0)*sj0);
IkReal x3493=(cj5*r00);
IkReal x3494=(cj5*r10);
IkReal x3495=(cj5*r20);
IkReal x3496=((1.0)*x3490);
IkReal x3497=((1.0)*x3491);
IkReal x3498=(sj5*x3490);
IkReal x3499=(sj5*x3491);
evalcond[0]=(((r22*x3491))+(((-1.0)*x3495*x3496))+((r21*x3498)));
evalcond[1]=((((-1.0)*r22*x3496))+(((-1.0)*x3495*x3497))+((r21*x3499)));
evalcond[2]=((((-1.0)*r12*x3496))+cj0+(((-1.0)*x3494*x3497))+((r11*x3499)));
evalcond[3]=(((r01*x3498))+(((-1.0)*x3493*x3496))+((r02*x3491))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3494*x3496))+(((-1.0)*x3492))+((r11*x3498))+((r12*x3491)));
evalcond[5]=((((-1.0)*r02*x3496))+((r01*x3499))+(((-1.0)*x3492))+(((-1.0)*x3493*x3497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3500=(cj1*cj2);
IkReal x3501=(r00*sj5);
IkReal x3502=(cj5*r01);
IkReal x3503=((212.5)*cj1);
IkReal x3504=(sj1*sj2);
IkReal x3505=((500.0)*px);
CheckValue<IkReal> x3506=IKPowWithIntegerCheck(((((-67.0)*x3500))+(((67.0)*x3504))),-1);
if(!x3506.valid){
continue;
}
CheckValue<IkReal> x3507=IKPowWithIntegerCheck((x3504+(((-1.0)*x3500))),-1);
if(!x3507.valid){
continue;
}
if( IKabs(((x3506.value)*(((((246.1)*x3500*x3501))+(((246.1)*x3500*x3502))+((x3501*x3503))+((x3500*x3505))+(((-246.1)*x3501*x3504))+((x3502*x3503))+(((-246.1)*x3502*x3504))+(((-1.0)*x3504*x3505)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3507.value)*((x3501+x3502)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3506.value)*(((((246.1)*x3500*x3501))+(((246.1)*x3500*x3502))+((x3501*x3503))+((x3500*x3505))+(((-246.1)*x3501*x3504))+((x3502*x3503))+(((-246.1)*x3502*x3504))+(((-1.0)*x3504*x3505))))))+IKsqr(((x3507.value)*((x3501+x3502))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3506.value)*(((((246.1)*x3500*x3501))+(((246.1)*x3500*x3502))+((x3501*x3503))+((x3500*x3505))+(((-246.1)*x3501*x3504))+((x3502*x3503))+(((-246.1)*x3502*x3504))+(((-1.0)*x3504*x3505))))), ((x3507.value)*((x3501+x3502))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3508=IKcos(j0);
IkReal x3509=IKsin(j0);
IkReal x3510=((0.1)*sj5);
IkReal x3511=(cj5*r11);
IkReal x3512=((1.0)*sj5);
IkReal x3513=(cj1*cj2);
IkReal x3514=(sj1*sj2);
IkReal x3515=(cj5*r01);
IkReal x3516=((0.425)*cj1);
IkReal x3517=((0.3922)*x3509);
IkReal x3518=((0.3922)*x3508);
evalcond[0]=(((x3508*x3514))+(((-1.0)*r00*x3512))+(((-1.0)*x3508*x3513))+(((-1.0)*x3515)));
evalcond[1]=((((-1.0)*r10*x3512))+(((-1.0)*x3509*x3513))+((x3509*x3514))+(((-1.0)*x3511)));
evalcond[2]=((((-1.0)*x3514*x3518))+(((-0.134)*x3509))+(((-1.0)*px))+((x3508*x3516))+(((-0.1)*x3515))+(((-1.0)*r00*x3510))+((x3513*x3518)));
evalcond[3]=((((-1.0)*x3514*x3517))+(((0.134)*x3508))+(((-1.0)*r10*x3510))+(((-1.0)*py))+((x3509*x3516))+(((-0.1)*x3511))+((x3513*x3517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3519=((1.0)*cj5);
IkReal x3520=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3519)));
j4eval[0]=x3520;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3519)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3520);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3521=((1.0)*cj5);
IkReal x3522=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3521)));
j4eval[0]=x3522;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3521)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3522);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3523=((1.0)*sj0);
IkReal x3524=((1.0)*cj0);
IkReal x3525=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3525;
j4eval[1]=((IKabs(((((-1.0)*r11*sj5*x3523))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x3524)))))+(IKabs(((((-1.0)*r02*x3524))+(((-1.0)*r12*x3523))))));
j4eval[2]=IKsign(x3525);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3526=((-1.0)*r20);
IkReal x3528 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3528)==0){
continue;
}
IkReal x3527=pow(x3528,-0.5);
CheckValue<IkReal> x3529 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3526),IKFAST_ATAN2_MAGTHRESH);
if(!x3529.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3529.value));
IkReal gconst97=(r21*x3527);
IkReal gconst98=(x3526*x3527);
CheckValue<IkReal> x3530 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3530.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3530.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3531=((-1.0)*r20);
IkReal x3532=x3527;
CheckValue<IkReal> x3534 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3531),IKFAST_ATAN2_MAGTHRESH);
if(!x3534.valid){
continue;
}
IkReal x3533=((-1.0)*(x3534.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3533;
IkReal gconst96=x3533;
IkReal gconst97=(r21*x3532);
IkReal gconst98=(x3531*x3532);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3535=((-1.0)*r20);
IkReal x3536=x3527;
CheckValue<IkReal> x3538 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3535),IKFAST_ATAN2_MAGTHRESH);
if(!x3538.valid){
continue;
}
IkReal x3537=((-1.0)*(x3538.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3537;
IkReal gconst96=x3537;
IkReal gconst97=(r21*x3536);
IkReal gconst98=(x3535*x3536);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3539=((-1.0)*r20);
IkReal x3540=x3527;
CheckValue<IkReal> x3542 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3539),IKFAST_ATAN2_MAGTHRESH);
if(!x3542.valid){
continue;
}
IkReal x3541=((-1.0)*(x3542.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3541;
IkReal gconst96=x3541;
IkReal gconst97=(r21*x3540);
IkReal gconst98=(x3539*x3540);
IkReal x3543=((1.0)*(r22*r22));
CheckValue<IkReal> x3547=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3543))),-1);
if(!x3547.valid){
continue;
}
IkReal x3544=x3547.value;
IkReal x3545=((1.0)*x3544);
IkReal x3546=((((-1.0)*x3545*(r21*r21*r21*r21)))+(((-2.0)*x3544*(r20*r20)*(r21*r21)))+(((-1.0)*x3543))+(((-1.0)*x3545*(r20*r20*r20*r20))));
j4eval[0]=x3546;
j4eval[1]=IKsign(x3546);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3548=(cj1*cj2);
IkReal x3549=(gconst98*r20);
IkReal x3550=(sj1*sj2);
IkReal x3551=(gconst97*r21);
CheckValue<IkReal> x3552 = IKatan2WithCheck(IkReal((((r22*x3550))+(((-1.0)*r22*x3548)))),IkReal(((((-1.0)*x3549*x3550))+((x3548*x3549))+(((-1.0)*x3548*x3551))+((x3550*x3551)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3552.valid){
continue;
}
CheckValue<IkReal> x3553=IKPowWithIntegerCheck(IKsign(((((2.0)*x3549*x3551))+(((-1.0)*(x3551*x3551)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x3549*x3549))))),-1);
if(!x3553.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3552.value)+(((1.5707963267949)*(x3553.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3554=IKsin(j4);
IkReal x3555=IKcos(j4);
IkReal x3556=(gconst98*r10);
IkReal x3557=(gconst97*r21);
IkReal x3558=(gconst98*r20);
IkReal x3559=((1.0)*cj2);
IkReal x3560=((1.0)*sj0);
IkReal x3561=(gconst98*r00);
IkReal x3562=(cj1*sj2);
IkReal x3563=((1.0)*x3555);
IkReal x3564=((1.0)*x3554);
IkReal x3565=(gconst97*x3554);
IkReal x3566=(gconst97*x3555);
evalcond[0]=((((-1.0)*r22*x3563))+((x3554*x3557))+(((-1.0)*x3558*x3564)));
evalcond[1]=(cj0+(((-1.0)*r12*x3563))+((r11*x3565))+(((-1.0)*x3556*x3564)));
evalcond[2]=((((-1.0)*r02*x3563))+(((-1.0)*x3561*x3564))+((r01*x3565))+(((-1.0)*x3560)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x3559))+((r22*x3554))+((x3555*x3557))+(((-1.0)*x3558*x3563)));
evalcond[4]=((((-1.0)*x3561*x3563))+((r01*x3566))+(((-1.0)*cj0*sj1*x3559))+(((-1.0)*cj0*x3562))+((r02*x3554)));
evalcond[5]=((((-1.0)*x3560*x3562))+((r12*x3554))+(((-1.0)*sj0*sj1*x3559))+((r11*x3566))+(((-1.0)*x3556*x3563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3567=((1.0)*gconst98);
CheckValue<IkReal> x3568=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3567))+(((-1.0)*gconst97*r10)))),-1);
if(!x3568.valid){
continue;
}
CheckValue<IkReal> x3569 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x3567)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3569.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3568.value)))+(x3569.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3570=IKsin(j4);
IkReal x3571=IKcos(j4);
IkReal x3572=(gconst98*r10);
IkReal x3573=(gconst97*r21);
IkReal x3574=(gconst98*r20);
IkReal x3575=((1.0)*cj2);
IkReal x3576=((1.0)*sj0);
IkReal x3577=(gconst98*r00);
IkReal x3578=(cj1*sj2);
IkReal x3579=((1.0)*x3571);
IkReal x3580=((1.0)*x3570);
IkReal x3581=(gconst97*x3570);
IkReal x3582=(gconst97*x3571);
evalcond[0]=((((-1.0)*x3574*x3580))+((x3570*x3573))+(((-1.0)*r22*x3579)));
evalcond[1]=((((-1.0)*x3572*x3580))+cj0+((r11*x3581))+(((-1.0)*r12*x3579)));
evalcond[2]=((((-1.0)*x3577*x3580))+(((-1.0)*x3576))+((r01*x3581))+(((-1.0)*r02*x3579)));
evalcond[3]=(((x3571*x3573))+((sj1*sj2))+(((-1.0)*x3574*x3579))+((r22*x3570))+(((-1.0)*cj1*x3575)));
evalcond[4]=((((-1.0)*cj0*x3578))+((r01*x3582))+((r02*x3570))+(((-1.0)*x3577*x3579))+(((-1.0)*cj0*sj1*x3575)));
evalcond[5]=((((-1.0)*sj0*sj1*x3575))+((r11*x3582))+(((-1.0)*x3576*x3578))+((r12*x3570))+(((-1.0)*x3572*x3579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3583=((1.0)*gconst98);
CheckValue<IkReal> x3584=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst97*r00))+(((-1.0)*r01*x3583)))),-1);
if(!x3584.valid){
continue;
}
CheckValue<IkReal> x3585 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*r20*x3583)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3584.value)))+(x3585.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3586=IKsin(j4);
IkReal x3587=IKcos(j4);
IkReal x3588=(gconst98*r10);
IkReal x3589=(gconst97*r21);
IkReal x3590=(gconst98*r20);
IkReal x3591=((1.0)*cj2);
IkReal x3592=((1.0)*sj0);
IkReal x3593=(gconst98*r00);
IkReal x3594=(cj1*sj2);
IkReal x3595=((1.0)*x3587);
IkReal x3596=((1.0)*x3586);
IkReal x3597=(gconst97*x3586);
IkReal x3598=(gconst97*x3587);
evalcond[0]=(((x3586*x3589))+(((-1.0)*r22*x3595))+(((-1.0)*x3590*x3596)));
evalcond[1]=(cj0+((r11*x3597))+(((-1.0)*r12*x3595))+(((-1.0)*x3588*x3596)));
evalcond[2]=((((-1.0)*r02*x3595))+(((-1.0)*x3593*x3596))+((r01*x3597))+(((-1.0)*x3592)));
evalcond[3]=((((-1.0)*cj1*x3591))+(((-1.0)*x3590*x3595))+((x3587*x3589))+((sj1*sj2))+((r22*x3586)));
evalcond[4]=(((r02*x3586))+(((-1.0)*cj0*x3594))+(((-1.0)*x3593*x3595))+((r01*x3598))+(((-1.0)*cj0*sj1*x3591)));
evalcond[5]=(((r12*x3586))+((r11*x3598))+(((-1.0)*x3592*x3594))+(((-1.0)*sj0*sj1*x3591))+(((-1.0)*x3588*x3595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3599=((-1.0)*r21);
IkReal x3601 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3601)==0){
continue;
}
IkReal x3600=pow(x3601,-0.5);
CheckValue<IkReal> x3602 = IKatan2WithCheck(IkReal(x3599),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3602.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3602.value))));
IkReal gconst100=(x3599*x3600);
IkReal gconst101=((1.0)*r20*x3600);
CheckValue<IkReal> x3603 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3603.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3603.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3604=((-1.0)*r21);
CheckValue<IkReal> x3607 = IKatan2WithCheck(IkReal(x3604),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3607.valid){
continue;
}
IkReal x3605=((1.0)*(x3607.value));
IkReal x3606=x3600;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3605)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3605)));
IkReal gconst100=(x3604*x3606);
IkReal gconst101=((1.0)*r20*x3606);
IkReal x3608=r22*r22;
IkReal x3609=((1.0)*x3608);
CheckValue<IkReal> x3613=IKPowWithIntegerCheck(((-1.0)+x3608),-1);
if(!x3613.valid){
continue;
}
IkReal x3610=x3613.value;
if((((1.0)+(((-1.0)*x3609)))) < -0.00001)
continue;
IkReal x3611=IKsqrt(((1.0)+(((-1.0)*x3609))));
IkReal x3612=(cj0*x3610*x3611);
j4eval[0]=((IKabs((x3612+(((-1.0)*x3609*x3612)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3614=((-1.0)*r21);
CheckValue<IkReal> x3617 = IKatan2WithCheck(IkReal(x3614),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3617.valid){
continue;
}
IkReal x3615=((1.0)*(x3617.value));
IkReal x3616=x3600;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3615)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3615)));
IkReal gconst100=(x3614*x3616);
IkReal gconst101=((1.0)*r20*x3616);
IkReal x3618=r22*r22;
IkReal x3619=((1.0)*x3618);
CheckValue<IkReal> x3623=IKPowWithIntegerCheck(((-1.0)+x3618),-1);
if(!x3623.valid){
continue;
}
IkReal x3620=x3623.value;
if((((1.0)+(((-1.0)*x3619)))) < -0.00001)
continue;
IkReal x3621=IKsqrt(((1.0)+(((-1.0)*x3619))));
IkReal x3622=(sj0*x3620*x3621);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x3622+(((-1.0)*x3619*x3622))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3624=((-1.0)*r21);
CheckValue<IkReal> x3627 = IKatan2WithCheck(IkReal(x3624),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3627.valid){
continue;
}
IkReal x3625=((1.0)*(x3627.value));
IkReal x3626=x3600;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3625)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3625)));
IkReal gconst100=(x3624*x3626);
IkReal gconst101=((1.0)*r20*x3626);
IkReal x3628=r22*r22;
IkReal x3629=(r12*sj0);
IkReal x3630=(cj0*r02);
CheckValue<IkReal> x3634=IKPowWithIntegerCheck(((-1.0)+x3628),-1);
if(!x3634.valid){
continue;
}
IkReal x3631=x3634.value;
if((((1.0)+(((-1.0)*x3628)))) < -0.00001)
continue;
IkReal x3632=IKsqrt(((1.0)+(((-1.0)*x3628))));
IkReal x3633=(r22*x3631*x3632);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x3630))+(((-1.0)*x3629)))))+(IKabs((((x3629*x3633))+((x3630*x3633))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3635=((1.0)*sj0);
IkReal x3636=((1.0)*gconst100);
CheckValue<IkReal> x3637=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst101*r21))+(((-1.0)*r20*x3636)))),-1);
if(!x3637.valid){
continue;
}
CheckValue<IkReal> x3638 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3635))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst100*r11*x3635))+((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*cj0*r01*x3636)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3637.value)))+(x3638.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3639=IKsin(j4);
IkReal x3640=IKcos(j4);
IkReal x3641=(gconst101*r20);
IkReal x3642=(gconst101*r10);
IkReal x3643=((1.0)*cj2);
IkReal x3644=(gconst101*r00);
IkReal x3645=((1.0)*sj0);
IkReal x3646=(cj1*sj2);
IkReal x3647=((1.0)*x3640);
IkReal x3648=((1.0)*x3639);
IkReal x3649=(gconst100*x3639);
IkReal x3650=(gconst100*x3640);
evalcond[0]=(((r21*x3649))+(((-1.0)*r22*x3647))+(((-1.0)*x3641*x3648)));
evalcond[1]=(((r11*x3649))+cj0+(((-1.0)*r12*x3647))+(((-1.0)*x3642*x3648)));
evalcond[2]=(((r01*x3649))+(((-1.0)*x3644*x3648))+(((-1.0)*r02*x3647))+(((-1.0)*x3645)));
evalcond[3]=(((r22*x3639))+((sj1*sj2))+((r21*x3650))+(((-1.0)*cj1*x3643))+(((-1.0)*x3641*x3647)));
evalcond[4]=(((r02*x3639))+(((-1.0)*cj0*x3646))+(((-1.0)*x3644*x3647))+(((-1.0)*cj0*sj1*x3643))+((r01*x3650)));
evalcond[5]=(((r12*x3639))+((r11*x3650))+(((-1.0)*x3645*x3646))+(((-1.0)*x3642*x3647))+(((-1.0)*sj0*sj1*x3643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3651=((1.0)*gconst101);
CheckValue<IkReal> x3652=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x3651)))),-1);
if(!x3652.valid){
continue;
}
CheckValue<IkReal> x3653 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3651))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3653.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3652.value)))+(x3653.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3654=IKsin(j4);
IkReal x3655=IKcos(j4);
IkReal x3656=(gconst101*r20);
IkReal x3657=(gconst101*r10);
IkReal x3658=((1.0)*cj2);
IkReal x3659=(gconst101*r00);
IkReal x3660=((1.0)*sj0);
IkReal x3661=(cj1*sj2);
IkReal x3662=((1.0)*x3655);
IkReal x3663=((1.0)*x3654);
IkReal x3664=(gconst100*x3654);
IkReal x3665=(gconst100*x3655);
evalcond[0]=((((-1.0)*x3656*x3663))+(((-1.0)*r22*x3662))+((r21*x3664)));
evalcond[1]=(cj0+((r11*x3664))+(((-1.0)*r12*x3662))+(((-1.0)*x3657*x3663)));
evalcond[2]=((((-1.0)*x3660))+(((-1.0)*r02*x3662))+(((-1.0)*x3659*x3663))+((r01*x3664)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x3658))+(((-1.0)*x3656*x3662))+((r21*x3665))+((r22*x3654)));
evalcond[4]=((((-1.0)*x3659*x3662))+((r01*x3665))+(((-1.0)*cj0*x3661))+((r02*x3654))+(((-1.0)*cj0*sj1*x3658)));
evalcond[5]=((((-1.0)*sj0*sj1*x3658))+(((-1.0)*x3660*x3661))+((r12*x3654))+((r11*x3665))+(((-1.0)*x3657*x3662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3666=((1.0)*gconst101);
CheckValue<IkReal> x3667=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x3666)))),-1);
if(!x3667.valid){
continue;
}
CheckValue<IkReal> x3668 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x3666)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3667.value)))+(x3668.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3669=IKsin(j4);
IkReal x3670=IKcos(j4);
IkReal x3671=(gconst101*r20);
IkReal x3672=(gconst101*r10);
IkReal x3673=((1.0)*cj2);
IkReal x3674=(gconst101*r00);
IkReal x3675=((1.0)*sj0);
IkReal x3676=(cj1*sj2);
IkReal x3677=((1.0)*x3670);
IkReal x3678=((1.0)*x3669);
IkReal x3679=(gconst100*x3669);
IkReal x3680=(gconst100*x3670);
evalcond[0]=((((-1.0)*x3671*x3678))+((r21*x3679))+(((-1.0)*r22*x3677)));
evalcond[1]=(cj0+((r11*x3679))+(((-1.0)*x3672*x3678))+(((-1.0)*r12*x3677)));
evalcond[2]=(((r01*x3679))+(((-1.0)*r02*x3677))+(((-1.0)*x3675))+(((-1.0)*x3674*x3678)));
evalcond[3]=(((r22*x3669))+((r21*x3680))+(((-1.0)*x3671*x3677))+((sj1*sj2))+(((-1.0)*cj1*x3673)));
evalcond[4]=(((r01*x3680))+(((-1.0)*cj0*x3676))+((r02*x3669))+(((-1.0)*cj0*sj1*x3673))+(((-1.0)*x3674*x3677)));
evalcond[5]=(((r12*x3669))+(((-1.0)*x3672*x3677))+((r11*x3680))+(((-1.0)*x3675*x3676))+(((-1.0)*sj0*sj1*x3673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3681=((-1.0)*r10);
IkReal x3683 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3683)==0){
continue;
}
IkReal x3682=pow(x3683,-0.5);
CheckValue<IkReal> x3684 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3681),IKFAST_ATAN2_MAGTHRESH);
if(!x3684.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3684.value));
IkReal gconst103=(r11*x3682);
IkReal gconst104=(x3681*x3682);
CheckValue<IkReal> x3685 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3685.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3685.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3686=((-1.0)*r10);
IkReal x3687=x3682;
CheckValue<IkReal> x3689 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3686),IKFAST_ATAN2_MAGTHRESH);
if(!x3689.valid){
continue;
}
IkReal x3688=((-1.0)*(x3689.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3688;
IkReal gconst102=x3688;
IkReal gconst103=(r11*x3687);
IkReal gconst104=(x3686*x3687);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3690=((1.0)*sj0);
IkReal x3691=((1.0)*gconst103);
CheckValue<IkReal> x3692=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3691))+(((-1.0)*gconst104*r21)))),-1);
if(!x3692.valid){
continue;
}
CheckValue<IkReal> x3693 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3690))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3691))+(((-1.0)*gconst103*r11*x3690))+((gconst104*r10*sj0))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3692.value)))+(x3693.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3694=IKsin(j4);
IkReal x3695=IKcos(j4);
IkReal x3696=(gconst103*r11);
IkReal x3697=((1.0)*cj2);
IkReal x3698=((1.0)*sj0);
IkReal x3699=(cj1*sj2);
IkReal x3700=((1.0)*x3695);
IkReal x3701=(gconst103*x3695);
IkReal x3702=(gconst103*x3694);
IkReal x3703=((1.0)*gconst104*x3694);
evalcond[0]=(((r21*x3702))+(((-1.0)*r20*x3703))+(((-1.0)*r22*x3700)));
evalcond[1]=(cj0+(((-1.0)*r10*x3703))+((x3694*x3696))+(((-1.0)*r12*x3700)));
evalcond[2]=((((-1.0)*r02*x3700))+(((-1.0)*r00*x3703))+((r01*x3702))+(((-1.0)*x3698)));
evalcond[3]=((((-1.0)*gconst104*r20*x3700))+(((-1.0)*cj1*x3697))+((sj1*sj2))+((r21*x3701))+((r22*x3694)));
evalcond[4]=((((-1.0)*cj0*x3699))+((r01*x3701))+((r02*x3694))+(((-1.0)*gconst104*r00*x3700))+(((-1.0)*cj0*sj1*x3697)));
evalcond[5]=(((x3695*x3696))+(((-1.0)*x3698*x3699))+(((-1.0)*sj0*sj1*x3697))+(((-1.0)*gconst104*r10*x3700))+((r12*x3694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3704=((1.0)*gconst104);
CheckValue<IkReal> x3705=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3704))+(((-1.0)*gconst103*r00)))),-1);
if(!x3705.valid){
continue;
}
CheckValue<IkReal> x3706 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3704))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3705.value)))+(x3706.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3707=IKsin(j4);
IkReal x3708=IKcos(j4);
IkReal x3709=(gconst103*r11);
IkReal x3710=((1.0)*cj2);
IkReal x3711=((1.0)*sj0);
IkReal x3712=(cj1*sj2);
IkReal x3713=((1.0)*x3708);
IkReal x3714=(gconst103*x3708);
IkReal x3715=(gconst103*x3707);
IkReal x3716=((1.0)*gconst104*x3707);
evalcond[0]=((((-1.0)*r20*x3716))+((r21*x3715))+(((-1.0)*r22*x3713)));
evalcond[1]=(cj0+(((-1.0)*r10*x3716))+((x3707*x3709))+(((-1.0)*r12*x3713)));
evalcond[2]=((((-1.0)*r00*x3716))+(((-1.0)*r02*x3713))+(((-1.0)*x3711))+((r01*x3715)));
evalcond[3]=((((-1.0)*gconst104*r20*x3713))+(((-1.0)*cj1*x3710))+((sj1*sj2))+((r21*x3714))+((r22*x3707)));
evalcond[4]=((((-1.0)*cj0*x3712))+((r01*x3714))+(((-1.0)*gconst104*r00*x3713))+((r02*x3707))+(((-1.0)*cj0*sj1*x3710)));
evalcond[5]=(((r12*x3707))+(((-1.0)*x3711*x3712))+(((-1.0)*sj0*sj1*x3710))+((x3708*x3709))+(((-1.0)*gconst104*r10*x3713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3717=((-1.0)*r11);
IkReal x3719 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3719)==0){
continue;
}
IkReal x3718=pow(x3719,-0.5);
CheckValue<IkReal> x3720 = IKatan2WithCheck(IkReal(x3717),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3720.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3720.value))));
IkReal gconst106=(x3717*x3718);
IkReal gconst107=((1.0)*r10*x3718);
CheckValue<IkReal> x3721 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3721.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3721.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3722=((-1.0)*r11);
CheckValue<IkReal> x3725 = IKatan2WithCheck(IkReal(x3722),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3725.valid){
continue;
}
IkReal x3723=((1.0)*(x3725.value));
IkReal x3724=x3718;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3723)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3723)));
IkReal gconst106=(x3722*x3724);
IkReal gconst107=((1.0)*r10*x3724);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3726=((-1.0)*r11);
CheckValue<IkReal> x3729 = IKatan2WithCheck(IkReal(x3726),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3729.valid){
continue;
}
IkReal x3727=((1.0)*(x3729.value));
IkReal x3728=x3718;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3727)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3727)));
IkReal gconst106=(x3726*x3728);
IkReal gconst107=((1.0)*r10*x3728);
IkReal x3730=r12*r12;
IkReal x3731=((1.0)*sj0);
IkReal x3732=(cj0*r02);
IkReal x3733=x3718;
j4eval[0]=((IKabs(((((-1.0)*x3731*x3733))+((r12*x3732*x3733))+((sj0*x3730*x3733)))))+(IKabs(((((-1.0)*r12*x3731))+(((-1.0)*x3732))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3734=((-1.0)*r11);
CheckValue<IkReal> x3737 = IKatan2WithCheck(IkReal(x3734),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3737.valid){
continue;
}
IkReal x3735=((1.0)*(x3737.value));
IkReal x3736=x3718;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3735)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3735)));
IkReal gconst106=(x3734*x3736);
IkReal gconst107=((1.0)*r10*x3736);
IkReal x3738=r12*r12;
IkReal x3739=((1.0)+(((-1.0)*x3738)));
IkReal x3740=(r22*sj1*sj2);
IkReal x3741=(cj1*cj2*r22);
CheckValue<IkReal> x3748=IKPowWithIntegerCheck(x3739,-1);
if(!x3748.valid){
continue;
}
IkReal x3742=x3748.value;
CheckValue<IkReal> x3749=IKPowWithIntegerCheck(((-1.0)+x3738),-1);
if(!x3749.valid){
continue;
}
IkReal x3743=x3749.value;
IkReal x3744=((1.0)*x3742);
if((x3739) < -0.00001)
continue;
IkReal x3745=IKsqrt(x3739);
IkReal x3746=(r12*x3743*x3745);
IkReal x3747=((((-1.0)*x3744*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x3742))+(((-1.0)*x3744*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22))));
j4eval[0]=x3747;
j4eval[1]=((IKabs(((((-1.0)*x3740*x3746))+((x3741*x3746)))))+(IKabs((x3740+(((-1.0)*x3741))))));
j4eval[2]=IKsign(x3747);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3750=(sj1*sj2);
IkReal x3751=(gconst106*r21);
IkReal x3752=(gconst107*r20);
IkReal x3753=(cj1*cj2);
CheckValue<IkReal> x3754 = IKatan2WithCheck(IkReal((((r22*x3750))+(((-1.0)*r22*x3753)))),IkReal((((x3752*x3753))+(((-1.0)*x3751*x3753))+((x3750*x3751))+(((-1.0)*x3750*x3752)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3754.valid){
continue;
}
CheckValue<IkReal> x3755=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3752*x3752)))+(((2.0)*x3751*x3752))+(((-1.0)*(r22*r22)))+(((-1.0)*(x3751*x3751))))),-1);
if(!x3755.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3754.value)+(((1.5707963267949)*(x3755.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3756=IKsin(j4);
IkReal x3757=IKcos(j4);
IkReal x3758=(gconst107*r10);
IkReal x3759=(gconst107*r00);
IkReal x3760=((1.0)*cj2);
IkReal x3761=(gconst107*r20);
IkReal x3762=((1.0)*sj0);
IkReal x3763=(cj1*sj2);
IkReal x3764=((1.0)*x3757);
IkReal x3765=(gconst106*x3757);
IkReal x3766=(gconst106*x3756);
IkReal x3767=((1.0)*x3756);
evalcond[0]=((((-1.0)*x3761*x3767))+((r21*x3766))+(((-1.0)*r22*x3764)));
evalcond[1]=(cj0+((r11*x3766))+(((-1.0)*r12*x3764))+(((-1.0)*x3758*x3767)));
evalcond[2]=((((-1.0)*x3759*x3767))+(((-1.0)*r02*x3764))+(((-1.0)*x3762))+((r01*x3766)));
evalcond[3]=((((-1.0)*x3761*x3764))+((r21*x3765))+((sj1*sj2))+((r22*x3756))+(((-1.0)*cj1*x3760)));
evalcond[4]=((((-1.0)*cj0*sj1*x3760))+(((-1.0)*x3759*x3764))+((r02*x3756))+(((-1.0)*cj0*x3763))+((r01*x3765)));
evalcond[5]=((((-1.0)*x3762*x3763))+((r12*x3756))+((r11*x3765))+(((-1.0)*sj0*sj1*x3760))+(((-1.0)*x3758*x3764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3768=((1.0)*sj0);
IkReal x3769=((1.0)*gconst106);
CheckValue<IkReal> x3770 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3768)))),IkReal(((((-1.0)*cj0*r01*x3769))+((gconst107*r10*sj0))+(((-1.0)*gconst106*r11*x3768))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3770.valid){
continue;
}
CheckValue<IkReal> x3771=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3769))+(((-1.0)*gconst107*r21)))),-1);
if(!x3771.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3770.value)+(((1.5707963267949)*(x3771.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3772=IKsin(j4);
IkReal x3773=IKcos(j4);
IkReal x3774=(gconst107*r10);
IkReal x3775=(gconst107*r00);
IkReal x3776=((1.0)*cj2);
IkReal x3777=(gconst107*r20);
IkReal x3778=((1.0)*sj0);
IkReal x3779=(cj1*sj2);
IkReal x3780=((1.0)*x3773);
IkReal x3781=(gconst106*x3773);
IkReal x3782=(gconst106*x3772);
IkReal x3783=((1.0)*x3772);
evalcond[0]=((((-1.0)*x3777*x3783))+((r21*x3782))+(((-1.0)*r22*x3780)));
evalcond[1]=(cj0+(((-1.0)*r12*x3780))+(((-1.0)*x3774*x3783))+((r11*x3782)));
evalcond[2]=((((-1.0)*r02*x3780))+((r01*x3782))+(((-1.0)*x3778))+(((-1.0)*x3775*x3783)));
evalcond[3]=((((-1.0)*x3777*x3780))+((r22*x3772))+((r21*x3781))+((sj1*sj2))+(((-1.0)*cj1*x3776)));
evalcond[4]=(((r02*x3772))+(((-1.0)*cj0*sj1*x3776))+((r01*x3781))+(((-1.0)*x3775*x3780))+(((-1.0)*cj0*x3779)));
evalcond[5]=((((-1.0)*x3778*x3779))+(((-1.0)*x3774*x3780))+((r12*x3772))+(((-1.0)*sj0*sj1*x3776))+((r11*x3781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3784=((1.0)*gconst107);
CheckValue<IkReal> x3785 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3784))+((cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3785.valid){
continue;
}
CheckValue<IkReal> x3786=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x3784)))),-1);
if(!x3786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3785.value)+(((1.5707963267949)*(x3786.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3787=IKsin(j4);
IkReal x3788=IKcos(j4);
IkReal x3789=(gconst107*r10);
IkReal x3790=(gconst107*r00);
IkReal x3791=((1.0)*cj2);
IkReal x3792=(gconst107*r20);
IkReal x3793=((1.0)*sj0);
IkReal x3794=(cj1*sj2);
IkReal x3795=((1.0)*x3788);
IkReal x3796=(gconst106*x3788);
IkReal x3797=(gconst106*x3787);
IkReal x3798=((1.0)*x3787);
evalcond[0]=(((r21*x3797))+(((-1.0)*r22*x3795))+(((-1.0)*x3792*x3798)));
evalcond[1]=((((-1.0)*r12*x3795))+cj0+(((-1.0)*x3789*x3798))+((r11*x3797)));
evalcond[2]=((((-1.0)*x3793))+(((-1.0)*x3790*x3798))+(((-1.0)*r02*x3795))+((r01*x3797)));
evalcond[3]=(((r21*x3796))+((r22*x3787))+((sj1*sj2))+(((-1.0)*cj1*x3791))+(((-1.0)*x3792*x3795)));
evalcond[4]=(((r02*x3787))+(((-1.0)*cj0*sj1*x3791))+(((-1.0)*x3790*x3795))+(((-1.0)*cj0*x3794))+((r01*x3796)));
evalcond[5]=((((-1.0)*sj0*sj1*x3791))+((r12*x3787))+(((-1.0)*x3789*x3795))+((r11*x3796))+(((-1.0)*x3793*x3794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3799=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3799;
j4eval[1]=IKsign(x3799);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3800=((1.0)*cj5);
IkReal x3801=((((-1.0)*r01*x3800))+(((-1.0)*r00*sj5)));
j4eval[0]=x3801;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x3800)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3801);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3802=(sj1*sj2);
IkReal x3803=(cj5*r10);
IkReal x3804=(r11*sj5);
IkReal x3805=(cj1*cj2);
IkReal x3806=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x3806;
j4eval[1]=((IKabs(((((-1.0)*r12*x3802))+((r12*x3805)))))+(IKabs(((((-1.0)*x3804*x3805))+((x3802*x3804))+(((-1.0)*x3802*x3803))+((x3803*x3805))))));
j4eval[2]=IKsign(x3806);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3807=(sj1*sj2);
IkReal x3808=(cj5*r10);
IkReal x3809=(r11*sj5);
IkReal x3810=(cj1*cj2);
CheckValue<IkReal> x3811=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x3811.valid){
continue;
}
CheckValue<IkReal> x3812 = IKatan2WithCheck(IkReal(((((-1.0)*x3807*x3808))+((x3807*x3809))+((x3808*x3810))+(((-1.0)*x3809*x3810)))),IkReal((((r12*x3810))+(((-1.0)*r12*x3807)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3812.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3811.value)))+(x3812.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3813=IKcos(j4);
IkReal x3814=IKsin(j4);
IkReal x3815=(cj5*r00);
IkReal x3816=(cj5*r10);
IkReal x3817=(r21*sj5);
IkReal x3818=((1.0)*cj2);
IkReal x3819=(cj5*r20);
IkReal x3820=((1.0)*x3813);
IkReal x3821=((1.0)*x3814);
IkReal x3822=(sj5*x3814);
IkReal x3823=(sj5*x3813);
evalcond[0]=(((r12*x3814))+((r11*x3823))+(((-1.0)*x3816*x3820)));
evalcond[1]=((((-1.0)*r22*x3820))+((x3814*x3817))+(((-1.0)*x3819*x3821)));
evalcond[2]=((((-1.0)*x3815*x3821))+(((-1.0)*r02*x3820))+((r01*x3822)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3820))+((r11*x3822))+(((-1.0)*x3816*x3821)));
evalcond[4]=(((x3813*x3817))+(((-1.0)*cj1*x3818))+((sj1*sj2))+((r22*x3814))+(((-1.0)*x3819*x3820)));
evalcond[5]=((((-1.0)*x3815*x3820))+(((-1.0)*sj1*x3818))+(((-1.0)*cj1*sj2))+((r02*x3814))+((r01*x3823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3824=((1.0)*cj5);
CheckValue<IkReal> x3825=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3824))+(((-1.0)*r00*sj5)))),-1);
if(!x3825.valid){
continue;
}
CheckValue<IkReal> x3826 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3824)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3826.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3825.value)))+(x3826.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3827=IKcos(j4);
IkReal x3828=IKsin(j4);
IkReal x3829=(cj5*r00);
IkReal x3830=(cj5*r10);
IkReal x3831=(r21*sj5);
IkReal x3832=((1.0)*cj2);
IkReal x3833=(cj5*r20);
IkReal x3834=((1.0)*x3827);
IkReal x3835=((1.0)*x3828);
IkReal x3836=(sj5*x3828);
IkReal x3837=(sj5*x3827);
evalcond[0]=(((r12*x3828))+(((-1.0)*x3830*x3834))+((r11*x3837)));
evalcond[1]=((((-1.0)*x3833*x3835))+((x3828*x3831))+(((-1.0)*r22*x3834)));
evalcond[2]=((((-1.0)*x3829*x3835))+((r01*x3836))+(((-1.0)*r02*x3834)));
evalcond[3]=((1.0)+(((-1.0)*x3830*x3835))+(((-1.0)*r12*x3834))+((r11*x3836)));
evalcond[4]=((((-1.0)*x3833*x3834))+((sj1*sj2))+((x3827*x3831))+((r22*x3828))+(((-1.0)*cj1*x3832)));
evalcond[5]=((((-1.0)*x3829*x3834))+((r01*x3837))+(((-1.0)*cj1*sj2))+((r02*x3828))+(((-1.0)*sj1*x3832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3838=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3838.valid){
continue;
}
CheckValue<IkReal> x3839 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3838.value)))+(x3839.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3840=IKcos(j4);
IkReal x3841=IKsin(j4);
IkReal x3842=(cj5*r00);
IkReal x3843=(cj5*r10);
IkReal x3844=(r21*sj5);
IkReal x3845=((1.0)*cj2);
IkReal x3846=(cj5*r20);
IkReal x3847=((1.0)*x3840);
IkReal x3848=((1.0)*x3841);
IkReal x3849=(sj5*x3841);
IkReal x3850=(sj5*x3840);
evalcond[0]=(((r12*x3841))+((r11*x3850))+(((-1.0)*x3843*x3847)));
evalcond[1]=(((x3841*x3844))+(((-1.0)*r22*x3847))+(((-1.0)*x3846*x3848)));
evalcond[2]=((((-1.0)*r02*x3847))+(((-1.0)*x3842*x3848))+((r01*x3849)));
evalcond[3]=((1.0)+(((-1.0)*x3843*x3848))+(((-1.0)*r12*x3847))+((r11*x3849)));
evalcond[4]=(((sj1*sj2))+((x3840*x3844))+(((-1.0)*cj1*x3845))+((r22*x3841))+(((-1.0)*x3846*x3847)));
evalcond[5]=((((-1.0)*x3842*x3847))+(((-1.0)*sj1*x3845))+(((-1.0)*cj1*sj2))+((r01*x3850))+((r02*x3841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3851=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3851;
j4eval[1]=IKsign(x3851);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3852=((1.0)*cj5);
IkReal x3853=((((-1.0)*r21*x3852))+(((-1.0)*r20*sj5)));
j4eval[0]=x3853;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3852))))));
j4eval[2]=IKsign(x3853);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3854=cj5*cj5;
IkReal x3855=r11*r11;
IkReal x3856=(r11*sj5);
IkReal x3857=(cj5*r10);
IkReal x3858=((((-2.0)*x3856*x3857))+(r12*r12)+((x3854*(r10*r10)))+(((-1.0)*x3854*x3855))+x3855);
j4eval[0]=x3858;
j4eval[1]=IKsign(x3858);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x3857))+x3856))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3859=cj5*cj5;
IkReal x3860=r11*r11;
IkReal x3861=(cj5*r10);
IkReal x3862=(r11*sj5);
CheckValue<IkReal> x3863 = IKatan2WithCheck(IkReal(((((-1.0)*x3861))+x3862)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3863.valid){
continue;
}
CheckValue<IkReal> x3864=IKPowWithIntegerCheck(IKsign(((((-2.0)*x3861*x3862))+(r12*r12)+((x3859*(r10*r10)))+x3860+(((-1.0)*x3859*x3860)))),-1);
if(!x3864.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3863.value)+(((1.5707963267949)*(x3864.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3865=IKcos(j4);
IkReal x3866=IKsin(j4);
IkReal x3867=(cj5*r00);
IkReal x3868=(cj5*r10);
IkReal x3869=(r21*sj5);
IkReal x3870=(cj5*r20);
IkReal x3871=((1.0)*x3865);
IkReal x3872=((1.0)*x3866);
IkReal x3873=(sj5*x3866);
IkReal x3874=(sj5*x3865);
evalcond[0]=((((-1.0)*x3868*x3871))+((r11*x3874))+((r12*x3866)));
evalcond[1]=(((x3866*x3869))+(((-1.0)*x3870*x3872))+(((-1.0)*r22*x3871)));
evalcond[2]=((((-1.0)*x3867*x3872))+((r01*x3873))+(((-1.0)*r02*x3871)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3871))+(((-1.0)*x3868*x3872))+((r11*x3873)));
evalcond[4]=((((-1.0)*x3867*x3871))+((cj2*sj1))+((r02*x3866))+((r01*x3874))+((cj1*sj2)));
evalcond[5]=(((x3865*x3869))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3870*x3871))+((r22*x3866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3875=((1.0)*cj5);
CheckValue<IkReal> x3876=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3875))+(((-1.0)*r20*sj5)))),-1);
if(!x3876.valid){
continue;
}
CheckValue<IkReal> x3877 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3875)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3876.value)))+(x3877.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3878=IKcos(j4);
IkReal x3879=IKsin(j4);
IkReal x3880=(cj5*r00);
IkReal x3881=(cj5*r10);
IkReal x3882=(r21*sj5);
IkReal x3883=(cj5*r20);
IkReal x3884=((1.0)*x3878);
IkReal x3885=((1.0)*x3879);
IkReal x3886=(sj5*x3879);
IkReal x3887=(sj5*x3878);
evalcond[0]=(((r11*x3887))+((r12*x3879))+(((-1.0)*x3881*x3884)));
evalcond[1]=((((-1.0)*x3883*x3885))+(((-1.0)*r22*x3884))+((x3879*x3882)));
evalcond[2]=((((-1.0)*r02*x3884))+(((-1.0)*x3880*x3885))+((r01*x3886)));
evalcond[3]=((-1.0)+((r11*x3886))+(((-1.0)*r12*x3884))+(((-1.0)*x3881*x3885)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x3880*x3884))+((cj1*sj2))+((r01*x3887))+((r02*x3879)));
evalcond[5]=(((x3878*x3882))+(((-1.0)*x3883*x3884))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3888 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3888.valid){
continue;
}
CheckValue<IkReal> x3889=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3888.value)+(((1.5707963267949)*(x3889.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3890=IKcos(j4);
IkReal x3891=IKsin(j4);
IkReal x3892=(cj5*r00);
IkReal x3893=(cj5*r10);
IkReal x3894=(r21*sj5);
IkReal x3895=(cj5*r20);
IkReal x3896=((1.0)*x3890);
IkReal x3897=((1.0)*x3891);
IkReal x3898=(sj5*x3891);
IkReal x3899=(sj5*x3890);
evalcond[0]=((((-1.0)*x3893*x3896))+((r11*x3899))+((r12*x3891)));
evalcond[1]=((((-1.0)*x3895*x3897))+(((-1.0)*r22*x3896))+((x3891*x3894)));
evalcond[2]=(((r01*x3898))+(((-1.0)*x3892*x3897))+(((-1.0)*r02*x3896)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3896))+(((-1.0)*x3893*x3897))+((r11*x3898)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x3899))+(((-1.0)*x3892*x3896))+((r02*x3891)));
evalcond[5]=(((x3890*x3894))+(((-1.0)*x3895*x3896))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3900=((-1.0)*r00);
IkReal x3902 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3902)==0){
continue;
}
IkReal x3901=pow(x3902,-0.5);
CheckValue<IkReal> x3903 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3900),IKFAST_ATAN2_MAGTHRESH);
if(!x3903.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3903.value));
IkReal gconst109=(r01*x3901);
IkReal gconst110=(x3900*x3901);
CheckValue<IkReal> x3904 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3904.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3904.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3905=((-1.0)*r00);
IkReal x3906=x3901;
CheckValue<IkReal> x3908 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3905),IKFAST_ATAN2_MAGTHRESH);
if(!x3908.valid){
continue;
}
IkReal x3907=((-1.0)*(x3908.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3907;
IkReal gconst108=x3907;
IkReal gconst109=(r01*x3906);
IkReal gconst110=(x3905*x3906);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3909=((1.0)*sj0);
IkReal x3910=((1.0)*gconst109);
CheckValue<IkReal> x3911 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3909))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3910))+((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x3909)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3911.valid){
continue;
}
CheckValue<IkReal> x3912=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3910))+(((-1.0)*gconst110*r21)))),-1);
if(!x3912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3911.value)+(((1.5707963267949)*(x3912.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3913=IKsin(j4);
IkReal x3914=IKcos(j4);
IkReal x3915=(gconst109*r21);
IkReal x3916=((1.0)*cj2);
IkReal x3917=((1.0)*sj0);
IkReal x3918=(cj1*sj2);
IkReal x3919=((1.0)*x3914);
IkReal x3920=(gconst109*x3913);
IkReal x3921=(gconst109*x3914);
IkReal x3922=((1.0)*gconst110*x3913);
evalcond[0]=((((-1.0)*r22*x3919))+((x3913*x3915))+(((-1.0)*r20*x3922)));
evalcond[1]=(((r11*x3920))+(((-1.0)*r10*x3922))+cj0+(((-1.0)*r12*x3919)));
evalcond[2]=((((-1.0)*x3917))+(((-1.0)*r02*x3919))+(((-1.0)*r00*x3922))+((r01*x3920)));
evalcond[3]=(((x3914*x3915))+(((-1.0)*gconst110*r20*x3919))+((sj1*sj2))+(((-1.0)*cj1*x3916))+((r22*x3913)));
evalcond[4]=((((-1.0)*gconst110*r00*x3919))+(((-1.0)*cj0*sj1*x3916))+((r02*x3913))+((r01*x3921))+(((-1.0)*cj0*x3918)));
evalcond[5]=(((r11*x3921))+(((-1.0)*x3917*x3918))+((r12*x3913))+(((-1.0)*gconst110*r10*x3919))+(((-1.0)*sj0*sj1*x3916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3923=((1.0)*gconst110);
CheckValue<IkReal> x3924=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3923))+(((-1.0)*gconst109*r10)))),-1);
if(!x3924.valid){
continue;
}
CheckValue<IkReal> x3925 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst109*r21*sj0))+(((-1.0)*r20*sj0*x3923)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3925.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3924.value)))+(x3925.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3926=IKsin(j4);
IkReal x3927=IKcos(j4);
IkReal x3928=(gconst109*r21);
IkReal x3929=((1.0)*cj2);
IkReal x3930=((1.0)*sj0);
IkReal x3931=(cj1*sj2);
IkReal x3932=((1.0)*x3927);
IkReal x3933=(gconst109*x3926);
IkReal x3934=(gconst109*x3927);
IkReal x3935=((1.0)*gconst110*x3926);
evalcond[0]=((((-1.0)*r22*x3932))+(((-1.0)*r20*x3935))+((x3926*x3928)));
evalcond[1]=(cj0+(((-1.0)*r12*x3932))+(((-1.0)*r10*x3935))+((r11*x3933)));
evalcond[2]=(((r01*x3933))+(((-1.0)*r00*x3935))+(((-1.0)*r02*x3932))+(((-1.0)*x3930)));
evalcond[3]=((((-1.0)*cj1*x3929))+((sj1*sj2))+(((-1.0)*gconst110*r20*x3932))+((r22*x3926))+((x3927*x3928)));
evalcond[4]=(((r01*x3934))+(((-1.0)*cj0*x3931))+((r02*x3926))+(((-1.0)*gconst110*r00*x3932))+(((-1.0)*cj0*sj1*x3929)));
evalcond[5]=(((r12*x3926))+(((-1.0)*sj0*sj1*x3929))+(((-1.0)*x3930*x3931))+(((-1.0)*gconst110*r10*x3932))+((r11*x3934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3936=((-1.0)*r01);
IkReal x3938 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3938)==0){
continue;
}
IkReal x3937=pow(x3938,-0.5);
CheckValue<IkReal> x3939 = IKatan2WithCheck(IkReal(x3936),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3939.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3939.value))));
IkReal gconst112=(x3936*x3937);
IkReal gconst113=((1.0)*r00*x3937);
CheckValue<IkReal> x3940 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3940.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3940.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x3941=((-1.0)*r01);
CheckValue<IkReal> x3944 = IKatan2WithCheck(IkReal(x3941),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3944.valid){
continue;
}
IkReal x3942=((1.0)*(x3944.value));
IkReal x3943=x3937;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3942)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3942)));
IkReal gconst112=(x3941*x3943);
IkReal gconst113=((1.0)*r00*x3943);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3945=((-1.0)*r01);
CheckValue<IkReal> x3948 = IKatan2WithCheck(IkReal(x3945),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3948.valid){
continue;
}
IkReal x3946=((1.0)*(x3948.value));
IkReal x3947=x3937;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3946)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3946)));
IkReal gconst112=(x3945*x3947);
IkReal gconst113=((1.0)*r00*x3947);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3949=((-1.0)*r01);
CheckValue<IkReal> x3952 = IKatan2WithCheck(IkReal(x3949),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3952.valid){
continue;
}
IkReal x3950=((1.0)*(x3952.value));
IkReal x3951=x3937;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3950)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3950)));
IkReal gconst112=(x3949*x3951);
IkReal gconst113=((1.0)*r00*x3951);
IkReal x3953=r02*r02;
IkReal x3954=(r12*sj0);
IkReal x3955=((1.0)*cj0);
IkReal x3956=x3937;
j4eval[0]=((IKabs(((((-1.0)*x3954))+(((-1.0)*r02*x3955)))))+(IKabs(((((-1.0)*x3955*x3956))+((r02*x3954*x3956))+((cj0*x3953*x3956))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3957=((1.0)*sj0);
IkReal x3958=((1.0)*gconst112);
CheckValue<IkReal> x3959 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3957)))),IkReal(((((-1.0)*cj0*r01*x3958))+((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*gconst112*r11*x3957)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3959.valid){
continue;
}
CheckValue<IkReal> x3960=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r21))+(((-1.0)*r20*x3958)))),-1);
if(!x3960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3959.value)+(((1.5707963267949)*(x3960.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3961=IKsin(j4);
IkReal x3962=IKcos(j4);
IkReal x3963=(gconst113*r20);
IkReal x3964=(gconst112*r21);
IkReal x3965=((1.0)*cj2);
IkReal x3966=(gconst113*r00);
IkReal x3967=(gconst113*r10);
IkReal x3968=((1.0)*sj0);
IkReal x3969=(cj1*sj2);
IkReal x3970=((1.0)*x3962);
IkReal x3971=((1.0)*x3961);
IkReal x3972=(gconst112*x3962);
IkReal x3973=(gconst112*x3961);
evalcond[0]=(((x3961*x3964))+(((-1.0)*r22*x3970))+(((-1.0)*x3963*x3971)));
evalcond[1]=((((-1.0)*r12*x3970))+cj0+((r11*x3973))+(((-1.0)*x3967*x3971)));
evalcond[2]=((((-1.0)*r02*x3970))+(((-1.0)*x3968))+((r01*x3973))+(((-1.0)*x3966*x3971)));
evalcond[3]=(((x3962*x3964))+((r22*x3961))+((sj1*sj2))+(((-1.0)*cj1*x3965))+(((-1.0)*x3963*x3970)));
evalcond[4]=((((-1.0)*cj0*x3969))+((r02*x3961))+(((-1.0)*cj0*sj1*x3965))+((r01*x3972))+(((-1.0)*x3966*x3970)));
evalcond[5]=(((r11*x3972))+(((-1.0)*x3968*x3969))+((r12*x3961))+(((-1.0)*x3967*x3970))+(((-1.0)*sj0*sj1*x3965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3974=((1.0)*gconst113);
CheckValue<IkReal> x3975 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x3974)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3975.valid){
continue;
}
CheckValue<IkReal> x3976=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r10))+(((-1.0)*r11*x3974)))),-1);
if(!x3976.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3975.value)+(((1.5707963267949)*(x3976.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3977=IKsin(j4);
IkReal x3978=IKcos(j4);
IkReal x3979=(gconst113*r20);
IkReal x3980=(gconst112*r21);
IkReal x3981=((1.0)*cj2);
IkReal x3982=(gconst113*r00);
IkReal x3983=(gconst113*r10);
IkReal x3984=((1.0)*sj0);
IkReal x3985=(cj1*sj2);
IkReal x3986=((1.0)*x3978);
IkReal x3987=((1.0)*x3977);
IkReal x3988=(gconst112*x3978);
IkReal x3989=(gconst112*x3977);
evalcond[0]=(((x3977*x3980))+(((-1.0)*r22*x3986))+(((-1.0)*x3979*x3987)));
evalcond[1]=((((-1.0)*r12*x3986))+((r11*x3989))+cj0+(((-1.0)*x3983*x3987)));
evalcond[2]=(((r01*x3989))+(((-1.0)*x3982*x3987))+(((-1.0)*x3984))+(((-1.0)*r02*x3986)));
evalcond[3]=(((sj1*sj2))+((r22*x3977))+(((-1.0)*x3979*x3986))+((x3978*x3980))+(((-1.0)*cj1*x3981)));
evalcond[4]=((((-1.0)*cj0*sj1*x3981))+((r02*x3977))+((r01*x3988))+(((-1.0)*cj0*x3985))+(((-1.0)*x3982*x3986)));
evalcond[5]=(((r11*x3988))+(((-1.0)*x3984*x3985))+((r12*x3977))+(((-1.0)*x3983*x3986))+(((-1.0)*sj0*sj1*x3981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3990=((1.0)*gconst113);
CheckValue<IkReal> x3991 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3990))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3991.valid){
continue;
}
CheckValue<IkReal> x3992=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3990))+(((-1.0)*gconst112*r00)))),-1);
if(!x3992.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3991.value)+(((1.5707963267949)*(x3992.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3993=IKsin(j4);
IkReal x3994=IKcos(j4);
IkReal x3995=(gconst113*r20);
IkReal x3996=(gconst112*r21);
IkReal x3997=((1.0)*cj2);
IkReal x3998=(gconst113*r00);
IkReal x3999=(gconst113*r10);
IkReal x4000=((1.0)*sj0);
IkReal x4001=(cj1*sj2);
IkReal x4002=((1.0)*x3994);
IkReal x4003=((1.0)*x3993);
IkReal x4004=(gconst112*x3994);
IkReal x4005=(gconst112*x3993);
evalcond[0]=((((-1.0)*r22*x4002))+(((-1.0)*x3995*x4003))+((x3993*x3996)));
evalcond[1]=((((-1.0)*x3999*x4003))+cj0+(((-1.0)*r12*x4002))+((r11*x4005)));
evalcond[2]=((((-1.0)*x3998*x4003))+(((-1.0)*r02*x4002))+(((-1.0)*x4000))+((r01*x4005)));
evalcond[3]=(((x3994*x3996))+((sj1*sj2))+(((-1.0)*x3995*x4002))+((r22*x3993))+(((-1.0)*cj1*x3997)));
evalcond[4]=((((-1.0)*x3998*x4002))+(((-1.0)*cj0*x4001))+((r01*x4004))+(((-1.0)*cj0*sj1*x3997))+((r02*x3993)));
evalcond[5]=((((-1.0)*x3999*x4002))+(((-1.0)*x4000*x4001))+((r12*x3993))+(((-1.0)*sj0*sj1*x3997))+((r11*x4004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4006=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4006;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4006);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4007=((1.0)*cj5);
IkReal x4008=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4007)));
j4eval[0]=x4008;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4007))))));
j4eval[2]=IKsign(x4008);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4009=cj5*cj5;
IkReal x4010=r01*r01;
IkReal x4011=(cj5*r00);
IkReal x4012=(r01*sj5);
IkReal x4013=((((-1.0)*x4009*x4010))+x4010+(((-2.0)*x4011*x4012))+(r02*r02)+((x4009*(r00*r00))));
j4eval[0]=x4013;
j4eval[1]=IKsign(x4013);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4011))+x4012))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4014=cj5*cj5;
IkReal x4015=r01*r01;
IkReal x4016=(r01*sj5);
IkReal x4017=(cj5*r00);
CheckValue<IkReal> x4018 = IKatan2WithCheck(IkReal(((((-1.0)*x4017))+x4016)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4018.valid){
continue;
}
CheckValue<IkReal> x4019=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4014*x4015))+((x4014*(r00*r00)))+(((-2.0)*x4016*x4017))+x4015+(r02*r02))),-1);
if(!x4019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4018.value)+(((1.5707963267949)*(x4019.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4020=IKcos(j4);
IkReal x4021=IKsin(j4);
IkReal x4022=(cj5*r00);
IkReal x4023=(cj5*r10);
IkReal x4024=(r21*sj5);
IkReal x4025=((1.0)*cj2);
IkReal x4026=(cj5*r20);
IkReal x4027=((1.0)*x4020);
IkReal x4028=((1.0)*x4021);
IkReal x4029=(sj5*x4021);
IkReal x4030=(sj5*x4020);
evalcond[0]=((((-1.0)*x4022*x4027))+((r01*x4030))+((r02*x4021)));
evalcond[1]=((((-1.0)*r22*x4027))+((x4021*x4024))+(((-1.0)*x4026*x4028)));
evalcond[2]=((((-1.0)*x4023*x4028))+(((-1.0)*r12*x4027))+((r11*x4029)));
evalcond[3]=((-1.0)+(((-1.0)*x4022*x4028))+(((-1.0)*r02*x4027))+((r01*x4029)));
evalcond[4]=(((x4020*x4024))+((sj1*sj2))+(((-1.0)*x4026*x4027))+(((-1.0)*cj1*x4025))+((r22*x4021)));
evalcond[5]=((((-1.0)*x4023*x4027))+(((-1.0)*cj1*sj2))+((r12*x4021))+(((-1.0)*sj1*x4025))+((r11*x4030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4031=((1.0)*cj5);
CheckValue<IkReal> x4032 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4031)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4032.valid){
continue;
}
CheckValue<IkReal> x4033=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4031)))),-1);
if(!x4033.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4032.value)+(((1.5707963267949)*(x4033.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4034=IKcos(j4);
IkReal x4035=IKsin(j4);
IkReal x4036=(cj5*r00);
IkReal x4037=(cj5*r10);
IkReal x4038=(r21*sj5);
IkReal x4039=((1.0)*cj2);
IkReal x4040=(cj5*r20);
IkReal x4041=((1.0)*x4034);
IkReal x4042=((1.0)*x4035);
IkReal x4043=(sj5*x4035);
IkReal x4044=(sj5*x4034);
evalcond[0]=((((-1.0)*x4036*x4041))+((r02*x4035))+((r01*x4044)));
evalcond[1]=(((x4035*x4038))+(((-1.0)*x4040*x4042))+(((-1.0)*r22*x4041)));
evalcond[2]=((((-1.0)*r12*x4041))+((r11*x4043))+(((-1.0)*x4037*x4042)));
evalcond[3]=((-1.0)+(((-1.0)*x4036*x4042))+(((-1.0)*r02*x4041))+((r01*x4043)));
evalcond[4]=((((-1.0)*cj1*x4039))+((sj1*sj2))+(((-1.0)*x4040*x4041))+((x4034*x4038))+((r22*x4035)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r11*x4044))+(((-1.0)*x4037*x4041))+((r12*x4035))+(((-1.0)*sj1*x4039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4045=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4045.valid){
continue;
}
CheckValue<IkReal> x4046 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4046.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4045.value)))+(x4046.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4047=IKcos(j4);
IkReal x4048=IKsin(j4);
IkReal x4049=(cj5*r00);
IkReal x4050=(cj5*r10);
IkReal x4051=(r21*sj5);
IkReal x4052=((1.0)*cj2);
IkReal x4053=(cj5*r20);
IkReal x4054=((1.0)*x4047);
IkReal x4055=((1.0)*x4048);
IkReal x4056=(sj5*x4048);
IkReal x4057=(sj5*x4047);
evalcond[0]=(((r02*x4048))+(((-1.0)*x4049*x4054))+((r01*x4057)));
evalcond[1]=(((x4048*x4051))+(((-1.0)*x4053*x4055))+(((-1.0)*r22*x4054)));
evalcond[2]=((((-1.0)*x4050*x4055))+(((-1.0)*r12*x4054))+((r11*x4056)));
evalcond[3]=((-1.0)+(((-1.0)*x4049*x4055))+(((-1.0)*r02*x4054))+((r01*x4056)));
evalcond[4]=(((r22*x4048))+(((-1.0)*x4053*x4054))+((sj1*sj2))+((x4047*x4051))+(((-1.0)*cj1*x4052)));
evalcond[5]=((((-1.0)*x4050*x4054))+(((-1.0)*cj1*sj2))+((r11*x4057))+((r12*x4048))+(((-1.0)*sj1*x4052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4058=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4058;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4058);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4059=((1.0)*cj5);
IkReal x4060=((((-1.0)*r21*x4059))+(((-1.0)*r20*sj5)));
j4eval[0]=x4060;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4059))))));
j4eval[2]=IKsign(x4060);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4061=cj5*cj5;
IkReal x4062=r01*r01;
IkReal x4063=(r01*sj5);
IkReal x4064=(cj5*r00);
IkReal x4065=(((x4061*x4062))+(((2.0)*x4063*x4064))+(((-1.0)*x4061*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x4062)));
j4eval[0]=x4065;
j4eval[1]=IKsign(x4065);
j4eval[2]=((IKabs(r02))+(IKabs((x4063+(((-1.0)*x4064))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4066=cj5*cj5;
IkReal x4067=r01*r01;
IkReal x4068=(r01*sj5);
IkReal x4069=(cj5*r00);
CheckValue<IkReal> x4070 = IKatan2WithCheck(IkReal((x4068+(((-1.0)*x4069)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4070.valid){
continue;
}
CheckValue<IkReal> x4071=IKPowWithIntegerCheck(IKsign((((x4066*x4067))+(((-1.0)*(r02*r02)))+(((-1.0)*x4067))+(((-1.0)*x4066*(r00*r00)))+(((2.0)*x4068*x4069)))),-1);
if(!x4071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4070.value)+(((1.5707963267949)*(x4071.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4072=IKcos(j4);
IkReal x4073=IKsin(j4);
IkReal x4074=(cj5*r00);
IkReal x4075=(cj5*r10);
IkReal x4076=(r21*sj5);
IkReal x4077=(cj5*r20);
IkReal x4078=((1.0)*x4072);
IkReal x4079=((1.0)*x4073);
IkReal x4080=(sj5*x4073);
IkReal x4081=(sj5*x4072);
evalcond[0]=(((r01*x4081))+(((-1.0)*x4074*x4078))+((r02*x4073)));
evalcond[1]=((((-1.0)*r22*x4078))+((x4073*x4076))+(((-1.0)*x4077*x4079)));
evalcond[2]=((((-1.0)*x4075*x4079))+(((-1.0)*r12*x4078))+((r11*x4080)));
evalcond[3]=((1.0)+((r01*x4080))+(((-1.0)*x4074*x4079))+(((-1.0)*r02*x4078)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x4075*x4078))+((r12*x4073))+((cj1*sj2))+((r11*x4081)));
evalcond[5]=(((r22*x4073))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4072*x4076))+(((-1.0)*x4077*x4078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4082=((1.0)*cj5);
CheckValue<IkReal> x4083 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4082)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4083.valid){
continue;
}
CheckValue<IkReal> x4084=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4082))+(((-1.0)*r20*sj5)))),-1);
if(!x4084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4083.value)+(((1.5707963267949)*(x4084.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4085=IKcos(j4);
IkReal x4086=IKsin(j4);
IkReal x4087=(cj5*r00);
IkReal x4088=(cj5*r10);
IkReal x4089=(r21*sj5);
IkReal x4090=(cj5*r20);
IkReal x4091=((1.0)*x4085);
IkReal x4092=((1.0)*x4086);
IkReal x4093=(sj5*x4086);
IkReal x4094=(sj5*x4085);
evalcond[0]=(((r01*x4094))+((r02*x4086))+(((-1.0)*x4087*x4091)));
evalcond[1]=(((x4086*x4089))+(((-1.0)*x4090*x4092))+(((-1.0)*r22*x4091)));
evalcond[2]=((((-1.0)*r12*x4091))+((r11*x4093))+(((-1.0)*x4088*x4092)));
evalcond[3]=((1.0)+((r01*x4093))+(((-1.0)*r02*x4091))+(((-1.0)*x4087*x4092)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x4094))+((r12*x4086))+(((-1.0)*x4088*x4091)));
evalcond[5]=(((x4085*x4089))+(((-1.0)*x4090*x4091))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4095 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4095.valid){
continue;
}
CheckValue<IkReal> x4096=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4095.value)+(((1.5707963267949)*(x4096.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4097=IKcos(j4);
IkReal x4098=IKsin(j4);
IkReal x4099=(cj5*r00);
IkReal x4100=(cj5*r10);
IkReal x4101=(r21*sj5);
IkReal x4102=(cj5*r20);
IkReal x4103=((1.0)*x4097);
IkReal x4104=((1.0)*x4098);
IkReal x4105=(sj5*x4098);
IkReal x4106=(sj5*x4097);
evalcond[0]=(((r02*x4098))+((r01*x4106))+(((-1.0)*x4099*x4103)));
evalcond[1]=((((-1.0)*r22*x4103))+((x4098*x4101))+(((-1.0)*x4102*x4104)));
evalcond[2]=((((-1.0)*r12*x4103))+((r11*x4105))+(((-1.0)*x4100*x4104)));
evalcond[3]=((1.0)+((r01*x4105))+(((-1.0)*r02*x4103))+(((-1.0)*x4099*x4104)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x4098))+((r11*x4106))+(((-1.0)*x4100*x4103)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4098))+(((-1.0)*x4102*x4103))+((x4097*x4101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4107=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4107);
rxp1_1=(px*r21);
rxp1_2=(r11*x4107);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4108=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4108);
rxp1_1=(px*r21);
rxp1_2=(r11*x4108);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4109=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4109);
rxp1_1=(px*r21);
rxp1_2=(r11*x4109);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4112=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4112.valid){
continue;
}
IkReal x4110=x4112.value;
IkReal x4111=(sj0*x4110);
cj4array[0]=(((cj1*sj2*x4111))+((cj2*sj1*x4111)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4113=IKsin(j4);
IkReal x4114=IKcos(j4);
IkReal x4115=(r21*sj5);
IkReal x4116=((1.0)*cj5*r20);
evalcond[0]=(r02*x4113);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4114)));
evalcond[2]=((((-1.0)*x4113*x4116))+((x4113*x4115)));
evalcond[3]=(((r11*sj5*x4113))+(((-1.0)*cj5*r10*x4113)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x4114*x4115))+(((-1.0)*x4114*x4116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4118=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4118.valid){
continue;
}
IkReal x4117=x4118.value;
cj4array[0]=((((-1.0)*sj1*sj2*x4117))+((cj1*cj2*x4117)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4119=IKsin(j4);
IkReal x4120=IKcos(j4);
IkReal x4121=((1.0)*sj0);
IkReal x4122=((1.0)*cj5);
IkReal x4123=(sj5*x4119);
evalcond[0]=(r02*x4119);
evalcond[1]=((((-1.0)*r02*x4120))+(((-1.0)*x4121)));
evalcond[2]=(((r21*x4123))+(((-1.0)*r20*x4119*x4122)));
evalcond[3]=((((-1.0)*r10*x4119*x4122))+((r11*x4123)));
evalcond[4]=(((r11*sj5*x4120))+(((-1.0)*cj2*sj1*x4121))+(((-1.0)*r10*x4120*x4122))+(((-1.0)*cj1*sj2*x4121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4124=IKPowWithIntegerCheck(r02,-1);
if(!x4124.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4124.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4125=IKsin(j4);
IkReal x4126=IKcos(j4);
IkReal x4127=((1.0)*cj1);
IkReal x4128=(r21*sj5);
IkReal x4129=((1.0)*cj5);
IkReal x4130=(r11*sj5);
evalcond[0]=(r02*x4125);
evalcond[1]=(((x4125*x4128))+(((-1.0)*r20*x4125*x4129)));
evalcond[2]=((((-1.0)*r10*x4125*x4129))+((x4125*x4130)));
evalcond[3]=((((-1.0)*cj2*x4127))+(((-1.0)*r20*x4126*x4129))+((sj1*sj2))+((x4126*x4128)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+((x4126*x4130))+(((-1.0)*r10*x4126*x4129))+(((-1.0)*sj0*sj2*x4127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4131=((1.0)*sj0);
IkReal x4132=((1.0)*cj0);
CheckValue<IkReal> x4133 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4132))+(((-1.0)*r12*x4131)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4131))+(((-1.0)*r01*sj5*x4132)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4133.valid){
continue;
}
CheckValue<IkReal> x4134=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4134.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4133.value)+(((1.5707963267949)*(x4134.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4135=IKsin(j4);
IkReal x4136=IKcos(j4);
IkReal x4137=(cj5*r00);
IkReal x4138=(cj5*r10);
IkReal x4139=(r21*sj5);
IkReal x4140=((1.0)*cj2);
IkReal x4141=((1.0)*sj0);
IkReal x4142=(cj1*sj2);
IkReal x4143=(cj5*r20);
IkReal x4144=((1.0)*x4136);
IkReal x4145=((1.0)*x4135);
IkReal x4146=(sj5*x4135);
IkReal x4147=(sj5*x4136);
evalcond[0]=((((-1.0)*x4143*x4145))+((x4135*x4139))+(((-1.0)*r22*x4144)));
evalcond[1]=(cj0+((r11*x4146))+(((-1.0)*x4138*x4145))+(((-1.0)*r12*x4144)));
evalcond[2]=(((r01*x4146))+(((-1.0)*r02*x4144))+(((-1.0)*x4141))+(((-1.0)*x4137*x4145)));
evalcond[3]=(((x4136*x4139))+((r22*x4135))+((sj1*sj2))+(((-1.0)*cj1*x4140))+(((-1.0)*x4143*x4144)));
evalcond[4]=(((r01*x4147))+(((-1.0)*cj0*x4142))+(((-1.0)*cj0*sj1*x4140))+(((-1.0)*x4137*x4144))+((r02*x4135)));
evalcond[5]=((((-1.0)*x4141*x4142))+(((-1.0)*sj0*sj1*x4140))+((r11*x4147))+((r12*x4135))+(((-1.0)*x4138*x4144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4148=((1.0)*cj5);
CheckValue<IkReal> x4149 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4148))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4149.valid){
continue;
}
CheckValue<IkReal> x4150=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4148)))),-1);
if(!x4150.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4149.value)+(((1.5707963267949)*(x4150.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4151=IKsin(j4);
IkReal x4152=IKcos(j4);
IkReal x4153=(cj5*r00);
IkReal x4154=(cj5*r10);
IkReal x4155=(r21*sj5);
IkReal x4156=((1.0)*cj2);
IkReal x4157=((1.0)*sj0);
IkReal x4158=(cj1*sj2);
IkReal x4159=(cj5*r20);
IkReal x4160=((1.0)*x4152);
IkReal x4161=((1.0)*x4151);
IkReal x4162=(sj5*x4151);
IkReal x4163=(sj5*x4152);
evalcond[0]=((((-1.0)*x4159*x4161))+((x4151*x4155))+(((-1.0)*r22*x4160)));
evalcond[1]=(cj0+(((-1.0)*r12*x4160))+((r11*x4162))+(((-1.0)*x4154*x4161)));
evalcond[2]=(((r01*x4162))+(((-1.0)*r02*x4160))+(((-1.0)*x4153*x4161))+(((-1.0)*x4157)));
evalcond[3]=(((x4152*x4155))+(((-1.0)*x4159*x4160))+((r22*x4151))+((sj1*sj2))+(((-1.0)*cj1*x4156)));
evalcond[4]=(((r01*x4163))+((r02*x4151))+(((-1.0)*x4153*x4160))+(((-1.0)*cj0*sj1*x4156))+(((-1.0)*cj0*x4158)));
evalcond[5]=(((r12*x4151))+(((-1.0)*x4157*x4158))+(((-1.0)*sj0*sj1*x4156))+((r11*x4163))+(((-1.0)*x4154*x4160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4164=((1.0)*cj5);
CheckValue<IkReal> x4165=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4164)))),-1);
if(!x4165.valid){
continue;
}
CheckValue<IkReal> x4166 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4164)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4166.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4165.value)))+(x4166.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4167=IKsin(j4);
IkReal x4168=IKcos(j4);
IkReal x4169=(cj5*r00);
IkReal x4170=(cj5*r10);
IkReal x4171=(r21*sj5);
IkReal x4172=((1.0)*cj2);
IkReal x4173=((1.0)*sj0);
IkReal x4174=(cj1*sj2);
IkReal x4175=(cj5*r20);
IkReal x4176=((1.0)*x4168);
IkReal x4177=((1.0)*x4167);
IkReal x4178=(sj5*x4167);
IkReal x4179=(sj5*x4168);
evalcond[0]=((((-1.0)*x4175*x4177))+(((-1.0)*r22*x4176))+((x4167*x4171)));
evalcond[1]=(((r11*x4178))+cj0+(((-1.0)*x4170*x4177))+(((-1.0)*r12*x4176)));
evalcond[2]=((((-1.0)*x4173))+(((-1.0)*x4169*x4177))+((r01*x4178))+(((-1.0)*r02*x4176)));
evalcond[3]=(((r22*x4167))+(((-1.0)*cj1*x4172))+((sj1*sj2))+(((-1.0)*x4175*x4176))+((x4168*x4171)));
evalcond[4]=((((-1.0)*x4169*x4176))+(((-1.0)*cj0*x4174))+((r02*x4167))+((r01*x4179))+(((-1.0)*cj0*sj1*x4172)));
evalcond[5]=(((r11*x4179))+(((-1.0)*x4170*x4176))+(((-1.0)*sj0*sj1*x4172))+(((-1.0)*x4173*x4174))+((r12*x4167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4180=r21*r21;
IkReal x4181=cj5*cj5;
IkReal x4182=(sj1*sj2);
IkReal x4183=(r21*sj5);
IkReal x4184=(cj1*cj2);
IkReal x4185=(cj5*r20);
CheckValue<IkReal> x4186=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4181*(r20*r20)))+((x4180*x4181))+(((-1.0)*x4180))+(((-1.0)*(r22*r22)))+(((2.0)*x4183*x4185)))),-1);
if(!x4186.valid){
continue;
}
CheckValue<IkReal> x4187 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4184))+((r22*x4182)))),IkReal(((((-1.0)*x4183*x4184))+((x4182*x4183))+((x4184*x4185))+(((-1.0)*x4182*x4185)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4186.value)))+(x4187.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4188=IKsin(j4);
IkReal x4189=IKcos(j4);
IkReal x4190=(r21*sj5);
IkReal x4191=(cj5*r20);
IkReal x4192=((1.0)*x4189);
evalcond[0]=(((x4188*x4190))+(((-1.0)*r22*x4192))+(((-1.0)*x4188*x4191)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4188))+((x4189*x4190))+(((-1.0)*x4191*x4192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4193=(cj5*sj4);
IkReal x4194=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4193))+((r01*x4194)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x4194))+((r10*x4193))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4193))+((r01*x4194))))+IKsqr(((((-1.0)*r11*x4194))+((r10*x4193))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4193))+((r01*x4194))), ((((-1.0)*r11*x4194))+((r10*x4193))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4195=IKcos(j0);
IkReal x4196=IKsin(j0);
IkReal x4197=((0.1)*sj5);
IkReal x4198=(cj5*r11);
IkReal x4199=(r11*sj5);
IkReal x4200=((1.0)*sj5);
IkReal x4201=((1.0)*cj2);
IkReal x4202=(cj1*cj2);
IkReal x4203=((1.0)*cj5);
IkReal x4204=(sj1*sj2);
IkReal x4205=((1.0)*cj4);
IkReal x4206=(r01*sj5);
IkReal x4207=((1.0)*cj1*sj2);
IkReal x4208=(cj4*x4203);
IkReal x4209=(sj1*x4195);
IkReal x4210=((0.3922)*x4196);
IkReal x4211=(cj1*x4195);
IkReal x4212=(cj1*x4196);
evalcond[0]=((((-1.0)*r12*x4205))+(((-1.0)*r10*sj4*x4203))+x4195+((sj4*x4199)));
evalcond[1]=((((-1.0)*r02*x4205))+(((-1.0)*x4196))+(((-1.0)*r00*sj4*x4203))+((sj4*x4206)));
evalcond[2]=((((-1.0)*r00*x4200))+(((-1.0)*r01*x4203))+(((-1.0)*x4201*x4211))+((x4195*x4204)));
evalcond[3]=((((-1.0)*r10*x4200))+((x4196*x4204))+(((-1.0)*x4198))+(((-1.0)*x4201*x4212)));
evalcond[4]=(((cj4*x4206))+(((-1.0)*x4201*x4209))+(((-1.0)*r00*x4208))+(((-1.0)*x4195*x4207))+((r02*sj4)));
evalcond[5]=((((-1.0)*r10*x4208))+((r12*sj4))+(((-1.0)*x4196*x4207))+((cj4*x4199))+(((-1.0)*sj1*x4196*x4201)));
evalcond[6]=((((-1.0)*r00*x4197))+(((-0.1)*cj5*r01))+(((-0.134)*x4196))+(((0.3922)*x4195*x4202))+(((-0.3922)*x4195*x4204))+(((-1.0)*px))+(((0.425)*x4211)));
evalcond[7]=((((-1.0)*x4204*x4210))+((x4202*x4210))+(((-1.0)*py))+(((0.425)*x4212))+(((0.134)*x4195))+(((-0.1)*x4198))+(((-1.0)*r10*x4197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4213 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4213.valid){
continue;
}
CheckValue<IkReal> x4214=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x4214.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4213.value)+(((1.5707963267949)*(x4214.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4215=IKcos(j0);
IkReal x4216=IKsin(j0);
IkReal x4217=((0.1)*sj5);
IkReal x4218=(cj5*r11);
IkReal x4219=((1.0)*sj5);
IkReal x4220=(cj1*cj2);
IkReal x4221=(sj1*sj2);
IkReal x4222=(cj5*r01);
IkReal x4223=((0.425)*cj1);
IkReal x4224=((0.3922)*x4216);
IkReal x4225=((0.3922)*x4215);
evalcond[0]=((((-1.0)*x4215*x4220))+(((-1.0)*x4222))+(((-1.0)*r00*x4219))+((x4215*x4221)));
evalcond[1]=(((x4216*x4221))+(((-1.0)*x4216*x4220))+(((-1.0)*x4218))+(((-1.0)*r10*x4219)));
evalcond[2]=((((-0.134)*x4216))+(((-0.1)*x4222))+(((-1.0)*r00*x4217))+((x4220*x4225))+(((-1.0)*x4221*x4225))+(((-1.0)*px))+((x4215*x4223)));
evalcond[3]=(((x4216*x4223))+((x4220*x4224))+(((-1.0)*x4221*x4224))+(((-0.1)*x4218))+(((-1.0)*py))+(((0.134)*x4215))+(((-1.0)*r10*x4217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4226=((1.0)*cj5);
IkReal x4227=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4226)));
j4eval[0]=x4227;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4226)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4227);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4228=((1.0)*cj5);
IkReal x4229=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4228)));
j4eval[0]=x4229;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4228))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x4229);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4230=((1.0)*sj0);
IkReal x4231=((1.0)*cj0);
IkReal x4232=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4232;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4230))+(((-1.0)*r01*sj5*x4231)))))+(IKabs(((((-1.0)*r12*x4230))+(((-1.0)*r02*x4231))))));
j4eval[2]=IKsign(x4232);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4233=((-1.0)*r20);
IkReal x4235 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4235)==0){
continue;
}
IkReal x4234=pow(x4235,-0.5);
CheckValue<IkReal> x4236 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4233),IKFAST_ATAN2_MAGTHRESH);
if(!x4236.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4236.value));
IkReal gconst97=(r21*x4234);
IkReal gconst98=(x4233*x4234);
CheckValue<IkReal> x4237 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4237.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4237.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4238=((-1.0)*r20);
IkReal x4239=x4234;
CheckValue<IkReal> x4241 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4238),IKFAST_ATAN2_MAGTHRESH);
if(!x4241.valid){
continue;
}
IkReal x4240=((-1.0)*(x4241.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4240;
IkReal gconst96=x4240;
IkReal gconst97=(r21*x4239);
IkReal gconst98=(x4238*x4239);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4242=((-1.0)*r20);
IkReal x4243=x4234;
CheckValue<IkReal> x4245 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4242),IKFAST_ATAN2_MAGTHRESH);
if(!x4245.valid){
continue;
}
IkReal x4244=((-1.0)*(x4245.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4244;
IkReal gconst96=x4244;
IkReal gconst97=(r21*x4243);
IkReal gconst98=(x4242*x4243);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4246=((-1.0)*r20);
IkReal x4247=x4234;
CheckValue<IkReal> x4249 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4246),IKFAST_ATAN2_MAGTHRESH);
if(!x4249.valid){
continue;
}
IkReal x4248=((-1.0)*(x4249.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4248;
IkReal gconst96=x4248;
IkReal gconst97=(r21*x4247);
IkReal gconst98=(x4246*x4247);
IkReal x4250=((1.0)*(r22*r22));
CheckValue<IkReal> x4254=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4250))),-1);
if(!x4254.valid){
continue;
}
IkReal x4251=x4254.value;
IkReal x4252=((1.0)*x4251);
IkReal x4253=((((-1.0)*x4252*(r21*r21*r21*r21)))+(((-2.0)*x4251*(r20*r20)*(r21*r21)))+(((-1.0)*x4252*(r20*r20*r20*r20)))+(((-1.0)*x4250)));
j4eval[0]=x4253;
j4eval[1]=IKsign(x4253);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4255=(cj1*cj2);
IkReal x4256=(gconst98*r20);
IkReal x4257=(sj1*sj2);
IkReal x4258=(gconst97*r21);
CheckValue<IkReal> x4259=IKPowWithIntegerCheck(IKsign(((((2.0)*x4256*x4258))+(((-1.0)*(x4258*x4258)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4256*x4256))))),-1);
if(!x4259.valid){
continue;
}
CheckValue<IkReal> x4260 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4255))+((r22*x4257)))),IkReal(((((-1.0)*x4255*x4258))+(((-1.0)*x4256*x4257))+((x4255*x4256))+((x4257*x4258)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4260.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4259.value)))+(x4260.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4261=IKsin(j4);
IkReal x4262=IKcos(j4);
IkReal x4263=(gconst98*r10);
IkReal x4264=(gconst97*r21);
IkReal x4265=(gconst98*r20);
IkReal x4266=((1.0)*cj2);
IkReal x4267=((1.0)*sj0);
IkReal x4268=(gconst98*r00);
IkReal x4269=(cj1*sj2);
IkReal x4270=((1.0)*x4262);
IkReal x4271=((1.0)*x4261);
IkReal x4272=(gconst97*x4261);
IkReal x4273=(gconst97*x4262);
evalcond[0]=((((-1.0)*r22*x4270))+(((-1.0)*x4265*x4271))+((x4261*x4264)));
evalcond[1]=((((-1.0)*r12*x4270))+cj0+((r11*x4272))+(((-1.0)*x4263*x4271)));
evalcond[2]=((((-1.0)*r02*x4270))+(((-1.0)*x4268*x4271))+(((-1.0)*x4267))+((r01*x4272)));
evalcond[3]=(((sj1*sj2))+((x4262*x4264))+(((-1.0)*x4265*x4270))+(((-1.0)*cj1*x4266))+((r22*x4261)));
evalcond[4]=(((r02*x4261))+(((-1.0)*cj0*x4269))+(((-1.0)*x4268*x4270))+(((-1.0)*cj0*sj1*x4266))+((r01*x4273)));
evalcond[5]=(((r11*x4273))+(((-1.0)*x4263*x4270))+((r12*x4261))+(((-1.0)*sj0*sj1*x4266))+(((-1.0)*x4267*x4269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4274=((1.0)*gconst98);
CheckValue<IkReal> x4275=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4274))+(((-1.0)*gconst97*r10)))),-1);
if(!x4275.valid){
continue;
}
CheckValue<IkReal> x4276 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x4274)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4276.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4275.value)))+(x4276.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4277=IKsin(j4);
IkReal x4278=IKcos(j4);
IkReal x4279=(gconst98*r10);
IkReal x4280=(gconst97*r21);
IkReal x4281=(gconst98*r20);
IkReal x4282=((1.0)*cj2);
IkReal x4283=((1.0)*sj0);
IkReal x4284=(gconst98*r00);
IkReal x4285=(cj1*sj2);
IkReal x4286=((1.0)*x4278);
IkReal x4287=((1.0)*x4277);
IkReal x4288=(gconst97*x4277);
IkReal x4289=(gconst97*x4278);
evalcond[0]=(((x4277*x4280))+(((-1.0)*r22*x4286))+(((-1.0)*x4281*x4287)));
evalcond[1]=(cj0+((r11*x4288))+(((-1.0)*r12*x4286))+(((-1.0)*x4279*x4287)));
evalcond[2]=((((-1.0)*x4283))+(((-1.0)*r02*x4286))+(((-1.0)*x4284*x4287))+((r01*x4288)));
evalcond[3]=(((x4278*x4280))+((sj1*sj2))+(((-1.0)*cj1*x4282))+(((-1.0)*x4281*x4286))+((r22*x4277)));
evalcond[4]=(((r02*x4277))+(((-1.0)*cj0*x4285))+(((-1.0)*x4284*x4286))+((r01*x4289))+(((-1.0)*cj0*sj1*x4282)));
evalcond[5]=((((-1.0)*x4283*x4285))+((r11*x4289))+((r12*x4277))+(((-1.0)*x4279*x4286))+(((-1.0)*sj0*sj1*x4282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4290=((1.0)*gconst98);
CheckValue<IkReal> x4291=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4290))+(((-1.0)*gconst97*r00)))),-1);
if(!x4291.valid){
continue;
}
CheckValue<IkReal> x4292 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4290))+((cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4292.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4291.value)))+(x4292.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4293=IKsin(j4);
IkReal x4294=IKcos(j4);
IkReal x4295=(gconst98*r10);
IkReal x4296=(gconst97*r21);
IkReal x4297=(gconst98*r20);
IkReal x4298=((1.0)*cj2);
IkReal x4299=((1.0)*sj0);
IkReal x4300=(gconst98*r00);
IkReal x4301=(cj1*sj2);
IkReal x4302=((1.0)*x4294);
IkReal x4303=((1.0)*x4293);
IkReal x4304=(gconst97*x4293);
IkReal x4305=(gconst97*x4294);
evalcond[0]=(((x4293*x4296))+(((-1.0)*r22*x4302))+(((-1.0)*x4297*x4303)));
evalcond[1]=((((-1.0)*r12*x4302))+((r11*x4304))+cj0+(((-1.0)*x4295*x4303)));
evalcond[2]=((((-1.0)*x4299))+((r01*x4304))+(((-1.0)*r02*x4302))+(((-1.0)*x4300*x4303)));
evalcond[3]=((((-1.0)*x4297*x4302))+((sj1*sj2))+((r22*x4293))+((x4294*x4296))+(((-1.0)*cj1*x4298)));
evalcond[4]=((((-1.0)*cj0*sj1*x4298))+(((-1.0)*cj0*x4301))+((r01*x4305))+(((-1.0)*x4300*x4302))+((r02*x4293)));
evalcond[5]=(((r11*x4305))+(((-1.0)*x4295*x4302))+((r12*x4293))+(((-1.0)*x4299*x4301))+(((-1.0)*sj0*sj1*x4298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4306=((-1.0)*r21);
IkReal x4308 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4308)==0){
continue;
}
IkReal x4307=pow(x4308,-0.5);
CheckValue<IkReal> x4309 = IKatan2WithCheck(IkReal(x4306),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4309.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4309.value))));
IkReal gconst100=(x4306*x4307);
IkReal gconst101=((1.0)*r20*x4307);
CheckValue<IkReal> x4310 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4310.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4310.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4311=((-1.0)*r21);
CheckValue<IkReal> x4314 = IKatan2WithCheck(IkReal(x4311),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4314.valid){
continue;
}
IkReal x4312=((1.0)*(x4314.value));
IkReal x4313=x4307;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4312)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4312)));
IkReal gconst100=(x4311*x4313);
IkReal gconst101=((1.0)*r20*x4313);
IkReal x4315=r22*r22;
IkReal x4316=((1.0)*x4315);
CheckValue<IkReal> x4320=IKPowWithIntegerCheck(((-1.0)+x4315),-1);
if(!x4320.valid){
continue;
}
IkReal x4317=x4320.value;
if((((1.0)+(((-1.0)*x4316)))) < -0.00001)
continue;
IkReal x4318=IKsqrt(((1.0)+(((-1.0)*x4316))));
IkReal x4319=(cj0*x4317*x4318);
j4eval[0]=((IKabs(((((-1.0)*x4316*x4319))+x4319)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4321=((-1.0)*r21);
CheckValue<IkReal> x4324 = IKatan2WithCheck(IkReal(x4321),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4324.valid){
continue;
}
IkReal x4322=((1.0)*(x4324.value));
IkReal x4323=x4307;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4322)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4322)));
IkReal gconst100=(x4321*x4323);
IkReal gconst101=((1.0)*r20*x4323);
IkReal x4325=r22*r22;
IkReal x4326=((1.0)*x4325);
CheckValue<IkReal> x4330=IKPowWithIntegerCheck(((-1.0)+x4325),-1);
if(!x4330.valid){
continue;
}
IkReal x4327=x4330.value;
if((((1.0)+(((-1.0)*x4326)))) < -0.00001)
continue;
IkReal x4328=IKsqrt(((1.0)+(((-1.0)*x4326))));
IkReal x4329=(sj0*x4327*x4328);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x4326*x4329))+x4329))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4331=((-1.0)*r21);
CheckValue<IkReal> x4334 = IKatan2WithCheck(IkReal(x4331),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4334.valid){
continue;
}
IkReal x4332=((1.0)*(x4334.value));
IkReal x4333=x4307;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4332)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4332)));
IkReal gconst100=(x4331*x4333);
IkReal gconst101=((1.0)*r20*x4333);
IkReal x4335=r22*r22;
IkReal x4336=(r12*sj0);
IkReal x4337=(cj0*r02);
CheckValue<IkReal> x4341=IKPowWithIntegerCheck(((-1.0)+x4335),-1);
if(!x4341.valid){
continue;
}
IkReal x4338=x4341.value;
if((((1.0)+(((-1.0)*x4335)))) < -0.00001)
continue;
IkReal x4339=IKsqrt(((1.0)+(((-1.0)*x4335))));
IkReal x4340=(r22*x4338*x4339);
j4eval[0]=0;
j4eval[1]=((IKabs((((x4337*x4340))+((x4336*x4340)))))+(IKabs(((((-1.0)*x4336))+(((-1.0)*x4337))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4342=((1.0)*sj0);
IkReal x4343=((1.0)*gconst100);
CheckValue<IkReal> x4344 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4342))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4343))+((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*gconst100*r11*x4342)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4344.valid){
continue;
}
CheckValue<IkReal> x4345=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4343))+(((-1.0)*gconst101*r21)))),-1);
if(!x4345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4344.value)+(((1.5707963267949)*(x4345.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4346=IKsin(j4);
IkReal x4347=IKcos(j4);
IkReal x4348=(gconst101*r20);
IkReal x4349=(gconst101*r10);
IkReal x4350=((1.0)*cj2);
IkReal x4351=(gconst101*r00);
IkReal x4352=((1.0)*sj0);
IkReal x4353=(cj1*sj2);
IkReal x4354=((1.0)*x4347);
IkReal x4355=((1.0)*x4346);
IkReal x4356=(gconst100*x4346);
IkReal x4357=(gconst100*x4347);
evalcond[0]=(((r21*x4356))+(((-1.0)*r22*x4354))+(((-1.0)*x4348*x4355)));
evalcond[1]=(cj0+(((-1.0)*x4349*x4355))+(((-1.0)*r12*x4354))+((r11*x4356)));
evalcond[2]=((((-1.0)*r02*x4354))+(((-1.0)*x4352))+(((-1.0)*x4351*x4355))+((r01*x4356)));
evalcond[3]=(((sj1*sj2))+((r22*x4346))+((r21*x4357))+(((-1.0)*cj1*x4350))+(((-1.0)*x4348*x4354)));
evalcond[4]=(((r02*x4346))+(((-1.0)*x4351*x4354))+(((-1.0)*cj0*sj1*x4350))+(((-1.0)*cj0*x4353))+((r01*x4357)));
evalcond[5]=((((-1.0)*x4349*x4354))+(((-1.0)*sj0*sj1*x4350))+(((-1.0)*x4352*x4353))+((r12*x4346))+((r11*x4357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4358=((1.0)*gconst101);
CheckValue<IkReal> x4359 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4358))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4359.valid){
continue;
}
CheckValue<IkReal> x4360=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x4358)))),-1);
if(!x4360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4359.value)+(((1.5707963267949)*(x4360.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4361=IKsin(j4);
IkReal x4362=IKcos(j4);
IkReal x4363=(gconst101*r20);
IkReal x4364=(gconst101*r10);
IkReal x4365=((1.0)*cj2);
IkReal x4366=(gconst101*r00);
IkReal x4367=((1.0)*sj0);
IkReal x4368=(cj1*sj2);
IkReal x4369=((1.0)*x4362);
IkReal x4370=((1.0)*x4361);
IkReal x4371=(gconst100*x4361);
IkReal x4372=(gconst100*x4362);
evalcond[0]=((((-1.0)*x4363*x4370))+(((-1.0)*r22*x4369))+((r21*x4371)));
evalcond[1]=(cj0+((r11*x4371))+(((-1.0)*x4364*x4370))+(((-1.0)*r12*x4369)));
evalcond[2]=((((-1.0)*x4366*x4370))+((r01*x4371))+(((-1.0)*x4367))+(((-1.0)*r02*x4369)));
evalcond[3]=((((-1.0)*cj1*x4365))+((sj1*sj2))+((r22*x4361))+((r21*x4372))+(((-1.0)*x4363*x4369)));
evalcond[4]=(((r01*x4372))+(((-1.0)*cj0*x4368))+(((-1.0)*cj0*sj1*x4365))+(((-1.0)*x4366*x4369))+((r02*x4361)));
evalcond[5]=(((r11*x4372))+((r12*x4361))+(((-1.0)*x4364*x4369))+(((-1.0)*sj0*sj1*x4365))+(((-1.0)*x4367*x4368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4373=((1.0)*gconst101);
CheckValue<IkReal> x4374 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x4373)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4374.valid){
continue;
}
CheckValue<IkReal> x4375=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x4373)))),-1);
if(!x4375.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4374.value)+(((1.5707963267949)*(x4375.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4376=IKsin(j4);
IkReal x4377=IKcos(j4);
IkReal x4378=(gconst101*r20);
IkReal x4379=(gconst101*r10);
IkReal x4380=((1.0)*cj2);
IkReal x4381=(gconst101*r00);
IkReal x4382=((1.0)*sj0);
IkReal x4383=(cj1*sj2);
IkReal x4384=((1.0)*x4377);
IkReal x4385=((1.0)*x4376);
IkReal x4386=(gconst100*x4376);
IkReal x4387=(gconst100*x4377);
evalcond[0]=((((-1.0)*r22*x4384))+((r21*x4386))+(((-1.0)*x4378*x4385)));
evalcond[1]=((((-1.0)*x4379*x4385))+(((-1.0)*r12*x4384))+cj0+((r11*x4386)));
evalcond[2]=((((-1.0)*r02*x4384))+(((-1.0)*x4381*x4385))+(((-1.0)*x4382))+((r01*x4386)));
evalcond[3]=(((r22*x4376))+((sj1*sj2))+((r21*x4387))+(((-1.0)*x4378*x4384))+(((-1.0)*cj1*x4380)));
evalcond[4]=(((r02*x4376))+(((-1.0)*x4381*x4384))+(((-1.0)*cj0*sj1*x4380))+(((-1.0)*cj0*x4383))+((r01*x4387)));
evalcond[5]=((((-1.0)*x4379*x4384))+((r12*x4376))+(((-1.0)*x4382*x4383))+((r11*x4387))+(((-1.0)*sj0*sj1*x4380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4388=((-1.0)*r10);
IkReal x4390 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4390)==0){
continue;
}
IkReal x4389=pow(x4390,-0.5);
CheckValue<IkReal> x4391 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4388),IKFAST_ATAN2_MAGTHRESH);
if(!x4391.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4391.value));
IkReal gconst103=(r11*x4389);
IkReal gconst104=(x4388*x4389);
CheckValue<IkReal> x4392 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4392.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4392.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4393=((-1.0)*r10);
IkReal x4394=x4389;
CheckValue<IkReal> x4396 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4393),IKFAST_ATAN2_MAGTHRESH);
if(!x4396.valid){
continue;
}
IkReal x4395=((-1.0)*(x4396.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4395;
IkReal gconst102=x4395;
IkReal gconst103=(r11*x4394);
IkReal gconst104=(x4393*x4394);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4397=((1.0)*sj0);
IkReal x4398=((1.0)*gconst103);
CheckValue<IkReal> x4399 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4397))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst103*r11*x4397))+((gconst104*r10*sj0))+(((-1.0)*cj0*r01*x4398))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4399.valid){
continue;
}
CheckValue<IkReal> x4400=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x4398)))),-1);
if(!x4400.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4399.value)+(((1.5707963267949)*(x4400.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4401=IKsin(j4);
IkReal x4402=IKcos(j4);
IkReal x4403=(gconst103*r11);
IkReal x4404=((1.0)*cj2);
IkReal x4405=((1.0)*sj0);
IkReal x4406=(cj1*sj2);
IkReal x4407=((1.0)*x4402);
IkReal x4408=(gconst103*x4402);
IkReal x4409=(gconst103*x4401);
IkReal x4410=((1.0)*gconst104*x4401);
evalcond[0]=(((r21*x4409))+(((-1.0)*r20*x4410))+(((-1.0)*r22*x4407)));
evalcond[1]=(cj0+(((-1.0)*r10*x4410))+((x4401*x4403))+(((-1.0)*r12*x4407)));
evalcond[2]=((((-1.0)*r00*x4410))+((r01*x4409))+(((-1.0)*r02*x4407))+(((-1.0)*x4405)));
evalcond[3]=(((r22*x4401))+((r21*x4408))+((sj1*sj2))+(((-1.0)*cj1*x4404))+(((-1.0)*gconst104*r20*x4407)));
evalcond[4]=((((-1.0)*cj0*x4406))+((r01*x4408))+(((-1.0)*gconst104*r00*x4407))+((r02*x4401))+(((-1.0)*cj0*sj1*x4404)));
evalcond[5]=((((-1.0)*gconst104*r10*x4407))+((r12*x4401))+((x4402*x4403))+(((-1.0)*x4405*x4406))+(((-1.0)*sj0*sj1*x4404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4411=((1.0)*gconst104);
CheckValue<IkReal> x4412=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x4411)))),-1);
if(!x4412.valid){
continue;
}
CheckValue<IkReal> x4413 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4411))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4413.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4412.value)))+(x4413.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4414=IKsin(j4);
IkReal x4415=IKcos(j4);
IkReal x4416=(gconst103*r11);
IkReal x4417=((1.0)*cj2);
IkReal x4418=((1.0)*sj0);
IkReal x4419=(cj1*sj2);
IkReal x4420=((1.0)*x4415);
IkReal x4421=(gconst103*x4415);
IkReal x4422=(gconst103*x4414);
IkReal x4423=((1.0)*gconst104*x4414);
evalcond[0]=((((-1.0)*r22*x4420))+(((-1.0)*r20*x4423))+((r21*x4422)));
evalcond[1]=(((x4414*x4416))+cj0+(((-1.0)*r12*x4420))+(((-1.0)*r10*x4423)));
evalcond[2]=((((-1.0)*x4418))+((r01*x4422))+(((-1.0)*r02*x4420))+(((-1.0)*r00*x4423)));
evalcond[3]=(((r22*x4414))+(((-1.0)*gconst104*r20*x4420))+((sj1*sj2))+((r21*x4421))+(((-1.0)*cj1*x4417)));
evalcond[4]=((((-1.0)*cj0*sj1*x4417))+(((-1.0)*cj0*x4419))+((r01*x4421))+((r02*x4414))+(((-1.0)*gconst104*r00*x4420)));
evalcond[5]=((((-1.0)*x4418*x4419))+((r12*x4414))+(((-1.0)*gconst104*r10*x4420))+((x4415*x4416))+(((-1.0)*sj0*sj1*x4417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4424=((-1.0)*r11);
IkReal x4426 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4426)==0){
continue;
}
IkReal x4425=pow(x4426,-0.5);
CheckValue<IkReal> x4427 = IKatan2WithCheck(IkReal(x4424),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4427.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4427.value))));
IkReal gconst106=(x4424*x4425);
IkReal gconst107=((1.0)*r10*x4425);
CheckValue<IkReal> x4428 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4428.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4428.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4429=((-1.0)*r11);
CheckValue<IkReal> x4432 = IKatan2WithCheck(IkReal(x4429),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4432.valid){
continue;
}
IkReal x4430=((1.0)*(x4432.value));
IkReal x4431=x4425;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4430)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4430)));
IkReal gconst106=(x4429*x4431);
IkReal gconst107=((1.0)*r10*x4431);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4433=((-1.0)*r11);
CheckValue<IkReal> x4436 = IKatan2WithCheck(IkReal(x4433),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4436.valid){
continue;
}
IkReal x4434=((1.0)*(x4436.value));
IkReal x4435=x4425;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4434)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4434)));
IkReal gconst106=(x4433*x4435);
IkReal gconst107=((1.0)*r10*x4435);
IkReal x4437=r12*r12;
IkReal x4438=((1.0)*sj0);
IkReal x4439=(cj0*r02);
IkReal x4440=x4425;
j4eval[0]=((IKabs(((((-1.0)*x4439))+(((-1.0)*r12*x4438)))))+(IKabs((((r12*x4439*x4440))+((sj0*x4437*x4440))+(((-1.0)*x4438*x4440))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4441=((-1.0)*r11);
CheckValue<IkReal> x4444 = IKatan2WithCheck(IkReal(x4441),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4444.valid){
continue;
}
IkReal x4442=((1.0)*(x4444.value));
IkReal x4443=x4425;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4442)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4442)));
IkReal gconst106=(x4441*x4443);
IkReal gconst107=((1.0)*r10*x4443);
IkReal x4445=r12*r12;
IkReal x4446=((1.0)+(((-1.0)*x4445)));
IkReal x4447=(r22*sj1*sj2);
IkReal x4448=(cj1*cj2*r22);
CheckValue<IkReal> x4455=IKPowWithIntegerCheck(x4446,-1);
if(!x4455.valid){
continue;
}
IkReal x4449=x4455.value;
CheckValue<IkReal> x4456=IKPowWithIntegerCheck(((-1.0)+x4445),-1);
if(!x4456.valid){
continue;
}
IkReal x4450=x4456.value;
IkReal x4451=((1.0)*x4449);
if((x4446) < -0.00001)
continue;
IkReal x4452=IKsqrt(x4446);
IkReal x4453=(r12*x4450*x4452);
IkReal x4454=((((-1.0)*x4451*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x4449))+(((-1.0)*(r22*r22)))+(((-1.0)*x4451*(r10*r10)*(r20*r20))));
j4eval[0]=x4454;
j4eval[1]=((IKabs(((((-1.0)*x4447*x4453))+((x4448*x4453)))))+(IKabs((x4447+(((-1.0)*x4448))))));
j4eval[2]=IKsign(x4454);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4457=(sj1*sj2);
IkReal x4458=(gconst106*r21);
IkReal x4459=(gconst107*r20);
IkReal x4460=(cj1*cj2);
CheckValue<IkReal> x4461=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4459*x4459)))+(((2.0)*x4458*x4459))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4458*x4458))))),-1);
if(!x4461.valid){
continue;
}
CheckValue<IkReal> x4462 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4460))+((r22*x4457)))),IkReal(((((-1.0)*x4457*x4459))+(((-1.0)*x4458*x4460))+((x4459*x4460))+((x4457*x4458)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4461.value)))+(x4462.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4463=IKsin(j4);
IkReal x4464=IKcos(j4);
IkReal x4465=(gconst107*r10);
IkReal x4466=(gconst107*r00);
IkReal x4467=((1.0)*cj2);
IkReal x4468=(gconst107*r20);
IkReal x4469=((1.0)*sj0);
IkReal x4470=(cj1*sj2);
IkReal x4471=((1.0)*x4464);
IkReal x4472=(gconst106*x4464);
IkReal x4473=(gconst106*x4463);
IkReal x4474=((1.0)*x4463);
evalcond[0]=(((r21*x4473))+(((-1.0)*r22*x4471))+(((-1.0)*x4468*x4474)));
evalcond[1]=((((-1.0)*r12*x4471))+cj0+((r11*x4473))+(((-1.0)*x4465*x4474)));
evalcond[2]=((((-1.0)*x4469))+((r01*x4473))+(((-1.0)*x4466*x4474))+(((-1.0)*r02*x4471)));
evalcond[3]=(((r22*x4463))+((r21*x4472))+((sj1*sj2))+(((-1.0)*cj1*x4467))+(((-1.0)*x4468*x4471)));
evalcond[4]=((((-1.0)*cj0*x4470))+(((-1.0)*cj0*sj1*x4467))+((r01*x4472))+(((-1.0)*x4466*x4471))+((r02*x4463)));
evalcond[5]=(((r12*x4463))+(((-1.0)*sj0*sj1*x4467))+(((-1.0)*x4469*x4470))+((r11*x4472))+(((-1.0)*x4465*x4471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4475=((1.0)*sj0);
IkReal x4476=((1.0)*gconst106);
CheckValue<IkReal> x4477=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4476))+(((-1.0)*gconst107*r21)))),-1);
if(!x4477.valid){
continue;
}
CheckValue<IkReal> x4478 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4475))+(((-1.0)*cj0*r02)))),IkReal((((gconst107*r10*sj0))+(((-1.0)*cj0*r01*x4476))+((cj0*gconst107*r00))+(((-1.0)*gconst106*r11*x4475)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4477.value)))+(x4478.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4479=IKsin(j4);
IkReal x4480=IKcos(j4);
IkReal x4481=(gconst107*r10);
IkReal x4482=(gconst107*r00);
IkReal x4483=((1.0)*cj2);
IkReal x4484=(gconst107*r20);
IkReal x4485=((1.0)*sj0);
IkReal x4486=(cj1*sj2);
IkReal x4487=((1.0)*x4480);
IkReal x4488=(gconst106*x4480);
IkReal x4489=(gconst106*x4479);
IkReal x4490=((1.0)*x4479);
evalcond[0]=((((-1.0)*x4484*x4490))+((r21*x4489))+(((-1.0)*r22*x4487)));
evalcond[1]=(((r11*x4489))+(((-1.0)*r12*x4487))+cj0+(((-1.0)*x4481*x4490)));
evalcond[2]=(((r01*x4489))+(((-1.0)*r02*x4487))+(((-1.0)*x4482*x4490))+(((-1.0)*x4485)));
evalcond[3]=((((-1.0)*x4484*x4487))+(((-1.0)*cj1*x4483))+((r21*x4488))+((sj1*sj2))+((r22*x4479)));
evalcond[4]=((((-1.0)*cj0*x4486))+(((-1.0)*cj0*sj1*x4483))+((r02*x4479))+((r01*x4488))+(((-1.0)*x4482*x4487)));
evalcond[5]=((((-1.0)*x4481*x4487))+((r11*x4488))+(((-1.0)*x4485*x4486))+(((-1.0)*sj0*sj1*x4483))+((r12*x4479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4491=((1.0)*gconst107);
CheckValue<IkReal> x4492=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x4491)))),-1);
if(!x4492.valid){
continue;
}
CheckValue<IkReal> x4493 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4491))+((cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4492.value)))+(x4493.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4494=IKsin(j4);
IkReal x4495=IKcos(j4);
IkReal x4496=(gconst107*r10);
IkReal x4497=(gconst107*r00);
IkReal x4498=((1.0)*cj2);
IkReal x4499=(gconst107*r20);
IkReal x4500=((1.0)*sj0);
IkReal x4501=(cj1*sj2);
IkReal x4502=((1.0)*x4495);
IkReal x4503=(gconst106*x4495);
IkReal x4504=(gconst106*x4494);
IkReal x4505=((1.0)*x4494);
evalcond[0]=(((r21*x4504))+(((-1.0)*r22*x4502))+(((-1.0)*x4499*x4505)));
evalcond[1]=(cj0+((r11*x4504))+(((-1.0)*x4496*x4505))+(((-1.0)*r12*x4502)));
evalcond[2]=((((-1.0)*x4500))+(((-1.0)*x4497*x4505))+(((-1.0)*r02*x4502))+((r01*x4504)));
evalcond[3]=((((-1.0)*cj1*x4498))+((r21*x4503))+((sj1*sj2))+((r22*x4494))+(((-1.0)*x4499*x4502)));
evalcond[4]=((((-1.0)*x4497*x4502))+((r02*x4494))+(((-1.0)*cj0*x4501))+((r01*x4503))+(((-1.0)*cj0*sj1*x4498)));
evalcond[5]=(((r12*x4494))+((r11*x4503))+(((-1.0)*x4496*x4502))+(((-1.0)*sj0*sj1*x4498))+(((-1.0)*x4500*x4501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4506=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4506;
j4eval[1]=IKsign(x4506);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4507=((1.0)*cj5);
IkReal x4508=((((-1.0)*r01*x4507))+(((-1.0)*r00*sj5)));
j4eval[0]=x4508;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4507))))));
j4eval[2]=IKsign(x4508);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4509=(sj1*sj2);
IkReal x4510=(cj5*r10);
IkReal x4511=(r11*sj5);
IkReal x4512=(cj1*cj2);
IkReal x4513=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x4513;
j4eval[1]=((IKabs(((((-1.0)*r12*x4509))+((r12*x4512)))))+(IKabs((((x4510*x4512))+(((-1.0)*x4511*x4512))+(((-1.0)*x4509*x4510))+((x4509*x4511))))));
j4eval[2]=IKsign(x4513);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4514=(sj1*sj2);
IkReal x4515=(cj5*r10);
IkReal x4516=(r11*sj5);
IkReal x4517=(cj1*cj2);
CheckValue<IkReal> x4518=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x4518.valid){
continue;
}
CheckValue<IkReal> x4519 = IKatan2WithCheck(IkReal(((((-1.0)*x4514*x4515))+(((-1.0)*x4516*x4517))+((x4515*x4517))+((x4514*x4516)))),IkReal((((r12*x4517))+(((-1.0)*r12*x4514)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4519.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4518.value)))+(x4519.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4520=IKcos(j4);
IkReal x4521=IKsin(j4);
IkReal x4522=(cj5*r00);
IkReal x4523=(cj5*r10);
IkReal x4524=(r21*sj5);
IkReal x4525=((1.0)*cj2);
IkReal x4526=(cj5*r20);
IkReal x4527=((1.0)*x4520);
IkReal x4528=((1.0)*x4521);
IkReal x4529=(sj5*x4521);
IkReal x4530=(sj5*x4520);
evalcond[0]=(((r12*x4521))+(((-1.0)*x4523*x4527))+((r11*x4530)));
evalcond[1]=(((x4521*x4524))+(((-1.0)*r22*x4527))+(((-1.0)*x4526*x4528)));
evalcond[2]=(((r01*x4529))+(((-1.0)*r02*x4527))+(((-1.0)*x4522*x4528)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4527))+((r11*x4529))+(((-1.0)*x4523*x4528)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x4525))+((r22*x4521))+(((-1.0)*x4526*x4527))+((x4520*x4524)));
evalcond[5]=(((r01*x4530))+(((-1.0)*sj1*x4525))+(((-1.0)*cj1*sj2))+((r02*x4521))+(((-1.0)*x4522*x4527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4531=((1.0)*cj5);
CheckValue<IkReal> x4532 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4531)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4532.valid){
continue;
}
CheckValue<IkReal> x4533=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4531))+(((-1.0)*r00*sj5)))),-1);
if(!x4533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4532.value)+(((1.5707963267949)*(x4533.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4534=IKcos(j4);
IkReal x4535=IKsin(j4);
IkReal x4536=(cj5*r00);
IkReal x4537=(cj5*r10);
IkReal x4538=(r21*sj5);
IkReal x4539=((1.0)*cj2);
IkReal x4540=(cj5*r20);
IkReal x4541=((1.0)*x4534);
IkReal x4542=((1.0)*x4535);
IkReal x4543=(sj5*x4535);
IkReal x4544=(sj5*x4534);
evalcond[0]=(((r12*x4535))+(((-1.0)*x4537*x4541))+((r11*x4544)));
evalcond[1]=((((-1.0)*r22*x4541))+(((-1.0)*x4540*x4542))+((x4535*x4538)));
evalcond[2]=((((-1.0)*r02*x4541))+(((-1.0)*x4536*x4542))+((r01*x4543)));
evalcond[3]=((1.0)+(((-1.0)*x4537*x4542))+(((-1.0)*r12*x4541))+((r11*x4543)));
evalcond[4]=((((-1.0)*cj1*x4539))+((sj1*sj2))+((r22*x4535))+(((-1.0)*x4540*x4541))+((x4534*x4538)));
evalcond[5]=((((-1.0)*sj1*x4539))+(((-1.0)*cj1*sj2))+(((-1.0)*x4536*x4541))+((r01*x4544))+((r02*x4535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4545=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4545.valid){
continue;
}
CheckValue<IkReal> x4546 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4546.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4545.value)))+(x4546.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4547=IKcos(j4);
IkReal x4548=IKsin(j4);
IkReal x4549=(cj5*r00);
IkReal x4550=(cj5*r10);
IkReal x4551=(r21*sj5);
IkReal x4552=((1.0)*cj2);
IkReal x4553=(cj5*r20);
IkReal x4554=((1.0)*x4547);
IkReal x4555=((1.0)*x4548);
IkReal x4556=(sj5*x4548);
IkReal x4557=(sj5*x4547);
evalcond[0]=((((-1.0)*x4550*x4554))+((r11*x4557))+((r12*x4548)));
evalcond[1]=((((-1.0)*x4553*x4555))+(((-1.0)*r22*x4554))+((x4548*x4551)));
evalcond[2]=(((r01*x4556))+(((-1.0)*x4549*x4555))+(((-1.0)*r02*x4554)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4554))+(((-1.0)*x4550*x4555))+((r11*x4556)));
evalcond[4]=(((r22*x4548))+(((-1.0)*cj1*x4552))+(((-1.0)*x4553*x4554))+((x4547*x4551))+((sj1*sj2)));
evalcond[5]=(((r01*x4557))+((r02*x4548))+(((-1.0)*cj1*sj2))+(((-1.0)*x4549*x4554))+(((-1.0)*sj1*x4552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4558=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4558;
j4eval[1]=IKsign(x4558);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4559=((1.0)*cj5);
IkReal x4560=((((-1.0)*r21*x4559))+(((-1.0)*r20*sj5)));
j4eval[0]=x4560;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x4559))+((r01*sj5))))));
j4eval[2]=IKsign(x4560);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4561=cj5*cj5;
IkReal x4562=r11*r11;
IkReal x4563=(r11*sj5);
IkReal x4564=(cj5*r10);
IkReal x4565=((((-1.0)*x4561*x4562))+(r12*r12)+x4562+((x4561*(r10*r10)))+(((-2.0)*x4563*x4564)));
j4eval[0]=x4565;
j4eval[1]=IKsign(x4565);
j4eval[2]=((IKabs(r12))+(IKabs((x4563+(((-1.0)*x4564))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4566=cj5*cj5;
IkReal x4567=r11*r11;
IkReal x4568=(cj5*r10);
IkReal x4569=(r11*sj5);
CheckValue<IkReal> x4570=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x4568*x4569))+x4567+((x4566*(r10*r10)))+(((-1.0)*x4566*x4567)))),-1);
if(!x4570.valid){
continue;
}
CheckValue<IkReal> x4571 = IKatan2WithCheck(IkReal((x4569+(((-1.0)*x4568)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4571.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4570.value)))+(x4571.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4572=IKcos(j4);
IkReal x4573=IKsin(j4);
IkReal x4574=(cj5*r00);
IkReal x4575=(cj5*r10);
IkReal x4576=(r21*sj5);
IkReal x4577=(cj5*r20);
IkReal x4578=((1.0)*x4572);
IkReal x4579=((1.0)*x4573);
IkReal x4580=(sj5*x4573);
IkReal x4581=(sj5*x4572);
evalcond[0]=(((r12*x4573))+(((-1.0)*x4575*x4578))+((r11*x4581)));
evalcond[1]=((((-1.0)*x4577*x4579))+((x4573*x4576))+(((-1.0)*r22*x4578)));
evalcond[2]=((((-1.0)*r02*x4578))+(((-1.0)*x4574*x4579))+((r01*x4580)));
evalcond[3]=((-1.0)+(((-1.0)*x4575*x4579))+((r11*x4580))+(((-1.0)*r12*x4578)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x4573))+(((-1.0)*x4574*x4578))+((r01*x4581)));
evalcond[5]=((((-1.0)*x4577*x4578))+((r22*x4573))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4572*x4576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4582=((1.0)*cj5);
CheckValue<IkReal> x4583 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x4582)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4583.valid){
continue;
}
CheckValue<IkReal> x4584=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4582))+(((-1.0)*r20*sj5)))),-1);
if(!x4584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4583.value)+(((1.5707963267949)*(x4584.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4585=IKcos(j4);
IkReal x4586=IKsin(j4);
IkReal x4587=(cj5*r00);
IkReal x4588=(cj5*r10);
IkReal x4589=(r21*sj5);
IkReal x4590=(cj5*r20);
IkReal x4591=((1.0)*x4585);
IkReal x4592=((1.0)*x4586);
IkReal x4593=(sj5*x4586);
IkReal x4594=(sj5*x4585);
evalcond[0]=(((r11*x4594))+(((-1.0)*x4588*x4591))+((r12*x4586)));
evalcond[1]=((((-1.0)*r22*x4591))+(((-1.0)*x4590*x4592))+((x4586*x4589)));
evalcond[2]=((((-1.0)*x4587*x4592))+(((-1.0)*r02*x4591))+((r01*x4593)));
evalcond[3]=((-1.0)+((r11*x4593))+(((-1.0)*x4588*x4592))+(((-1.0)*r12*x4591)));
evalcond[4]=(((cj2*sj1))+((r02*x4586))+((cj1*sj2))+(((-1.0)*x4587*x4591))+((r01*x4594)));
evalcond[5]=(((r22*x4586))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4585*x4589))+(((-1.0)*x4590*x4591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4595 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4595.valid){
continue;
}
CheckValue<IkReal> x4596=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4595.value)+(((1.5707963267949)*(x4596.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4597=IKcos(j4);
IkReal x4598=IKsin(j4);
IkReal x4599=(cj5*r00);
IkReal x4600=(cj5*r10);
IkReal x4601=(r21*sj5);
IkReal x4602=(cj5*r20);
IkReal x4603=((1.0)*x4597);
IkReal x4604=((1.0)*x4598);
IkReal x4605=(sj5*x4598);
IkReal x4606=(sj5*x4597);
evalcond[0]=(((r11*x4606))+(((-1.0)*x4600*x4603))+((r12*x4598)));
evalcond[1]=((((-1.0)*x4602*x4604))+((x4598*x4601))+(((-1.0)*r22*x4603)));
evalcond[2]=(((r01*x4605))+(((-1.0)*r02*x4603))+(((-1.0)*x4599*x4604)));
evalcond[3]=((-1.0)+((r11*x4605))+(((-1.0)*x4600*x4604))+(((-1.0)*r12*x4603)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x4606))+((r02*x4598))+(((-1.0)*x4599*x4603)));
evalcond[5]=(((r22*x4598))+((x4597*x4601))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4602*x4603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4607=((-1.0)*r00);
IkReal x4609 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4609)==0){
continue;
}
IkReal x4608=pow(x4609,-0.5);
CheckValue<IkReal> x4610 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4607),IKFAST_ATAN2_MAGTHRESH);
if(!x4610.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4610.value));
IkReal gconst109=(r01*x4608);
IkReal gconst110=(x4607*x4608);
CheckValue<IkReal> x4611 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4611.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4611.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4612=((-1.0)*r00);
IkReal x4613=x4608;
CheckValue<IkReal> x4615 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4612),IKFAST_ATAN2_MAGTHRESH);
if(!x4615.valid){
continue;
}
IkReal x4614=((-1.0)*(x4615.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4614;
IkReal gconst108=x4614;
IkReal gconst109=(r01*x4613);
IkReal gconst110=(x4612*x4613);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4616=((1.0)*sj0);
IkReal x4617=((1.0)*gconst109);
CheckValue<IkReal> x4618 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4616))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4617))+((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x4616)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4618.valid){
continue;
}
CheckValue<IkReal> x4619=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4617))+(((-1.0)*gconst110*r21)))),-1);
if(!x4619.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4618.value)+(((1.5707963267949)*(x4619.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4620=IKsin(j4);
IkReal x4621=IKcos(j4);
IkReal x4622=(gconst109*r21);
IkReal x4623=((1.0)*cj2);
IkReal x4624=((1.0)*sj0);
IkReal x4625=(cj1*sj2);
IkReal x4626=((1.0)*x4621);
IkReal x4627=(gconst109*x4620);
IkReal x4628=(gconst109*x4621);
IkReal x4629=((1.0)*gconst110*x4620);
evalcond[0]=(((x4620*x4622))+(((-1.0)*r22*x4626))+(((-1.0)*r20*x4629)));
evalcond[1]=(cj0+((r11*x4627))+(((-1.0)*r12*x4626))+(((-1.0)*r10*x4629)));
evalcond[2]=((((-1.0)*r02*x4626))+(((-1.0)*r00*x4629))+((r01*x4627))+(((-1.0)*x4624)));
evalcond[3]=((((-1.0)*gconst110*r20*x4626))+(((-1.0)*cj1*x4623))+((x4621*x4622))+((sj1*sj2))+((r22*x4620)));
evalcond[4]=((((-1.0)*gconst110*r00*x4626))+(((-1.0)*cj0*x4625))+((r02*x4620))+((r01*x4628))+(((-1.0)*cj0*sj1*x4623)));
evalcond[5]=(((r12*x4620))+((r11*x4628))+(((-1.0)*gconst110*r10*x4626))+(((-1.0)*sj0*sj1*x4623))+(((-1.0)*x4624*x4625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4630=((1.0)*gconst110);
CheckValue<IkReal> x4631 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4630))+((gconst109*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4631.valid){
continue;
}
CheckValue<IkReal> x4632=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4630))+(((-1.0)*gconst109*r10)))),-1);
if(!x4632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4631.value)+(((1.5707963267949)*(x4632.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4633=IKsin(j4);
IkReal x4634=IKcos(j4);
IkReal x4635=(gconst109*r21);
IkReal x4636=((1.0)*cj2);
IkReal x4637=((1.0)*sj0);
IkReal x4638=(cj1*sj2);
IkReal x4639=((1.0)*x4634);
IkReal x4640=(gconst109*x4633);
IkReal x4641=(gconst109*x4634);
IkReal x4642=((1.0)*gconst110*x4633);
evalcond[0]=(((x4633*x4635))+(((-1.0)*r20*x4642))+(((-1.0)*r22*x4639)));
evalcond[1]=(cj0+(((-1.0)*r10*x4642))+((r11*x4640))+(((-1.0)*r12*x4639)));
evalcond[2]=((((-1.0)*x4637))+(((-1.0)*r02*x4639))+((r01*x4640))+(((-1.0)*r00*x4642)));
evalcond[3]=((((-1.0)*gconst110*r20*x4639))+(((-1.0)*cj1*x4636))+((sj1*sj2))+((x4634*x4635))+((r22*x4633)));
evalcond[4]=((((-1.0)*gconst110*r00*x4639))+(((-1.0)*cj0*sj1*x4636))+(((-1.0)*cj0*x4638))+((r01*x4641))+((r02*x4633)));
evalcond[5]=(((r12*x4633))+(((-1.0)*gconst110*r10*x4639))+((r11*x4641))+(((-1.0)*sj0*sj1*x4636))+(((-1.0)*x4637*x4638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4643=((-1.0)*r01);
IkReal x4645 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4645)==0){
continue;
}
IkReal x4644=pow(x4645,-0.5);
CheckValue<IkReal> x4646 = IKatan2WithCheck(IkReal(x4643),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4646.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4646.value))));
IkReal gconst112=(x4643*x4644);
IkReal gconst113=((1.0)*r00*x4644);
CheckValue<IkReal> x4647 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4647.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4647.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x4648=((-1.0)*r01);
CheckValue<IkReal> x4651 = IKatan2WithCheck(IkReal(x4648),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4651.valid){
continue;
}
IkReal x4649=((1.0)*(x4651.value));
IkReal x4650=x4644;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4649)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4649)));
IkReal gconst112=(x4648*x4650);
IkReal gconst113=((1.0)*r00*x4650);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4652=((-1.0)*r01);
CheckValue<IkReal> x4655 = IKatan2WithCheck(IkReal(x4652),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4655.valid){
continue;
}
IkReal x4653=((1.0)*(x4655.value));
IkReal x4654=x4644;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4653)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4653)));
IkReal gconst112=(x4652*x4654);
IkReal gconst113=((1.0)*r00*x4654);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4656=((-1.0)*r01);
CheckValue<IkReal> x4659 = IKatan2WithCheck(IkReal(x4656),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4659.valid){
continue;
}
IkReal x4657=((1.0)*(x4659.value));
IkReal x4658=x4644;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4657)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4657)));
IkReal gconst112=(x4656*x4658);
IkReal gconst113=((1.0)*r00*x4658);
IkReal x4660=r02*r02;
IkReal x4661=(r12*sj0);
IkReal x4662=((1.0)*cj0);
IkReal x4663=x4644;
j4eval[0]=((IKabs(((((-1.0)*x4661))+(((-1.0)*r02*x4662)))))+(IKabs(((((-1.0)*x4662*x4663))+((r02*x4661*x4663))+((cj0*x4660*x4663))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4664=((1.0)*sj0);
IkReal x4665=((1.0)*gconst112);
CheckValue<IkReal> x4666=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4665))+(((-1.0)*gconst113*r21)))),-1);
if(!x4666.valid){
continue;
}
CheckValue<IkReal> x4667 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4664)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x4665))+(((-1.0)*gconst112*r11*x4664)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4666.value)))+(x4667.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4668=IKsin(j4);
IkReal x4669=IKcos(j4);
IkReal x4670=(gconst113*r20);
IkReal x4671=(gconst112*r21);
IkReal x4672=((1.0)*cj2);
IkReal x4673=(gconst113*r00);
IkReal x4674=(gconst113*r10);
IkReal x4675=((1.0)*sj0);
IkReal x4676=(cj1*sj2);
IkReal x4677=((1.0)*x4669);
IkReal x4678=((1.0)*x4668);
IkReal x4679=(gconst112*x4669);
IkReal x4680=(gconst112*x4668);
evalcond[0]=(((x4668*x4671))+(((-1.0)*r22*x4677))+(((-1.0)*x4670*x4678)));
evalcond[1]=(cj0+(((-1.0)*x4674*x4678))+(((-1.0)*r12*x4677))+((r11*x4680)));
evalcond[2]=((((-1.0)*r02*x4677))+(((-1.0)*x4675))+((r01*x4680))+(((-1.0)*x4673*x4678)));
evalcond[3]=((((-1.0)*cj1*x4672))+((x4669*x4671))+((sj1*sj2))+((r22*x4668))+(((-1.0)*x4670*x4677)));
evalcond[4]=((((-1.0)*cj0*x4676))+((r02*x4668))+(((-1.0)*cj0*sj1*x4672))+((r01*x4679))+(((-1.0)*x4673*x4677)));
evalcond[5]=((((-1.0)*x4675*x4676))+(((-1.0)*x4674*x4677))+((r12*x4668))+((r11*x4679))+(((-1.0)*sj0*sj1*x4672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4681=((1.0)*gconst113);
CheckValue<IkReal> x4682=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4681))+(((-1.0)*gconst112*r10)))),-1);
if(!x4682.valid){
continue;
}
CheckValue<IkReal> x4683 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4681)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4683.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4682.value)))+(x4683.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4684=IKsin(j4);
IkReal x4685=IKcos(j4);
IkReal x4686=(gconst113*r20);
IkReal x4687=(gconst112*r21);
IkReal x4688=((1.0)*cj2);
IkReal x4689=(gconst113*r00);
IkReal x4690=(gconst113*r10);
IkReal x4691=((1.0)*sj0);
IkReal x4692=(cj1*sj2);
IkReal x4693=((1.0)*x4685);
IkReal x4694=((1.0)*x4684);
IkReal x4695=(gconst112*x4685);
IkReal x4696=(gconst112*x4684);
evalcond[0]=((((-1.0)*x4686*x4694))+(((-1.0)*r22*x4693))+((x4684*x4687)));
evalcond[1]=((((-1.0)*r12*x4693))+cj0+(((-1.0)*x4690*x4694))+((r11*x4696)));
evalcond[2]=((((-1.0)*r02*x4693))+((r01*x4696))+(((-1.0)*x4691))+(((-1.0)*x4689*x4694)));
evalcond[3]=((((-1.0)*x4686*x4693))+(((-1.0)*cj1*x4688))+((sj1*sj2))+((r22*x4684))+((x4685*x4687)));
evalcond[4]=(((r02*x4684))+(((-1.0)*cj0*sj1*x4688))+(((-1.0)*cj0*x4692))+((r01*x4695))+(((-1.0)*x4689*x4693)));
evalcond[5]=((((-1.0)*sj0*sj1*x4688))+(((-1.0)*x4690*x4693))+((r12*x4684))+((r11*x4695))+(((-1.0)*x4691*x4692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4697=((1.0)*gconst113);
CheckValue<IkReal> x4698 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r21))+(((-1.0)*cj0*r20*x4697)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4698.valid){
continue;
}
CheckValue<IkReal> x4699=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4697))+(((-1.0)*gconst112*r00)))),-1);
if(!x4699.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4698.value)+(((1.5707963267949)*(x4699.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4700=IKsin(j4);
IkReal x4701=IKcos(j4);
IkReal x4702=(gconst113*r20);
IkReal x4703=(gconst112*r21);
IkReal x4704=((1.0)*cj2);
IkReal x4705=(gconst113*r00);
IkReal x4706=(gconst113*r10);
IkReal x4707=((1.0)*sj0);
IkReal x4708=(cj1*sj2);
IkReal x4709=((1.0)*x4701);
IkReal x4710=((1.0)*x4700);
IkReal x4711=(gconst112*x4701);
IkReal x4712=(gconst112*x4700);
evalcond[0]=((((-1.0)*r22*x4709))+((x4700*x4703))+(((-1.0)*x4702*x4710)));
evalcond[1]=(cj0+(((-1.0)*r12*x4709))+(((-1.0)*x4706*x4710))+((r11*x4712)));
evalcond[2]=((((-1.0)*r02*x4709))+((r01*x4712))+(((-1.0)*x4705*x4710))+(((-1.0)*x4707)));
evalcond[3]=((((-1.0)*x4702*x4709))+((sj1*sj2))+(((-1.0)*cj1*x4704))+((x4701*x4703))+((r22*x4700)));
evalcond[4]=((((-1.0)*cj0*sj1*x4704))+((r01*x4711))+(((-1.0)*cj0*x4708))+(((-1.0)*x4705*x4709))+((r02*x4700)));
evalcond[5]=((((-1.0)*sj0*sj1*x4704))+(((-1.0)*x4706*x4709))+(((-1.0)*x4707*x4708))+((r11*x4711))+((r12*x4700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4713=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4713;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4713);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4714=((1.0)*cj5);
IkReal x4715=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4714)));
j4eval[0]=x4715;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4714))))));
j4eval[2]=IKsign(x4715);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4716=cj5*cj5;
IkReal x4717=r01*r01;
IkReal x4718=(cj5*r00);
IkReal x4719=(r01*sj5);
IkReal x4720=((((-1.0)*x4716*x4717))+((x4716*(r00*r00)))+x4717+(((-2.0)*x4718*x4719))+(r02*r02));
j4eval[0]=x4720;
j4eval[1]=IKsign(x4720);
j4eval[2]=((IKabs(((((-1.0)*x4718))+x4719)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4721=cj5*cj5;
IkReal x4722=r01*r01;
IkReal x4723=(r01*sj5);
IkReal x4724=(cj5*r00);
CheckValue<IkReal> x4725=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4721*x4722))+((x4721*(r00*r00)))+x4722+(((-2.0)*x4723*x4724))+(r02*r02))),-1);
if(!x4725.valid){
continue;
}
CheckValue<IkReal> x4726 = IKatan2WithCheck(IkReal(((((-1.0)*x4724))+x4723)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4726.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4725.value)))+(x4726.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4727=IKcos(j4);
IkReal x4728=IKsin(j4);
IkReal x4729=(cj5*r00);
IkReal x4730=(cj5*r10);
IkReal x4731=(r21*sj5);
IkReal x4732=((1.0)*cj2);
IkReal x4733=(cj5*r20);
IkReal x4734=((1.0)*x4727);
IkReal x4735=((1.0)*x4728);
IkReal x4736=(sj5*x4728);
IkReal x4737=(sj5*x4727);
evalcond[0]=(((r02*x4728))+(((-1.0)*x4729*x4734))+((r01*x4737)));
evalcond[1]=((((-1.0)*x4733*x4735))+((x4728*x4731))+(((-1.0)*r22*x4734)));
evalcond[2]=(((r11*x4736))+(((-1.0)*x4730*x4735))+(((-1.0)*r12*x4734)));
evalcond[3]=((-1.0)+(((-1.0)*x4729*x4735))+((r01*x4736))+(((-1.0)*r02*x4734)));
evalcond[4]=((((-1.0)*cj1*x4732))+((sj1*sj2))+(((-1.0)*x4733*x4734))+((x4727*x4731))+((r22*x4728)));
evalcond[5]=(((r11*x4737))+(((-1.0)*x4730*x4734))+(((-1.0)*sj1*x4732))+(((-1.0)*cj1*sj2))+((r12*x4728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4738=((1.0)*cj5);
CheckValue<IkReal> x4739 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4738)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4739.valid){
continue;
}
CheckValue<IkReal> x4740=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4738)))),-1);
if(!x4740.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4739.value)+(((1.5707963267949)*(x4740.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4741=IKcos(j4);
IkReal x4742=IKsin(j4);
IkReal x4743=(cj5*r00);
IkReal x4744=(cj5*r10);
IkReal x4745=(r21*sj5);
IkReal x4746=((1.0)*cj2);
IkReal x4747=(cj5*r20);
IkReal x4748=((1.0)*x4741);
IkReal x4749=((1.0)*x4742);
IkReal x4750=(sj5*x4742);
IkReal x4751=(sj5*x4741);
evalcond[0]=(((r01*x4751))+((r02*x4742))+(((-1.0)*x4743*x4748)));
evalcond[1]=(((x4742*x4745))+(((-1.0)*r22*x4748))+(((-1.0)*x4747*x4749)));
evalcond[2]=((((-1.0)*r12*x4748))+((r11*x4750))+(((-1.0)*x4744*x4749)));
evalcond[3]=((-1.0)+((r01*x4750))+(((-1.0)*x4743*x4749))+(((-1.0)*r02*x4748)));
evalcond[4]=(((x4741*x4745))+(((-1.0)*cj1*x4746))+((sj1*sj2))+((r22*x4742))+(((-1.0)*x4747*x4748)));
evalcond[5]=((((-1.0)*sj1*x4746))+((r11*x4751))+((r12*x4742))+(((-1.0)*x4744*x4748))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4752=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4752.valid){
continue;
}
CheckValue<IkReal> x4753 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4752.value)))+(x4753.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4754=IKcos(j4);
IkReal x4755=IKsin(j4);
IkReal x4756=(cj5*r00);
IkReal x4757=(cj5*r10);
IkReal x4758=(r21*sj5);
IkReal x4759=((1.0)*cj2);
IkReal x4760=(cj5*r20);
IkReal x4761=((1.0)*x4754);
IkReal x4762=((1.0)*x4755);
IkReal x4763=(sj5*x4755);
IkReal x4764=(sj5*x4754);
evalcond[0]=(((r01*x4764))+(((-1.0)*x4756*x4761))+((r02*x4755)));
evalcond[1]=((((-1.0)*x4760*x4762))+(((-1.0)*r22*x4761))+((x4755*x4758)));
evalcond[2]=((((-1.0)*x4757*x4762))+(((-1.0)*r12*x4761))+((r11*x4763)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4761))+((r01*x4763))+(((-1.0)*x4756*x4762)));
evalcond[4]=((((-1.0)*x4760*x4761))+(((-1.0)*cj1*x4759))+((x4754*x4758))+((sj1*sj2))+((r22*x4755)));
evalcond[5]=(((r12*x4755))+(((-1.0)*sj1*x4759))+(((-1.0)*cj1*sj2))+(((-1.0)*x4757*x4761))+((r11*x4764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4765=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4765;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4765);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4766=((1.0)*cj5);
IkReal x4767=((((-1.0)*r21*x4766))+(((-1.0)*r20*sj5)));
j4eval[0]=x4767;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4766))))));
j4eval[2]=IKsign(x4767);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4768=cj5*cj5;
IkReal x4769=r01*r01;
IkReal x4770=(r01*sj5);
IkReal x4771=(cj5*r00);
IkReal x4772=((((2.0)*x4770*x4771))+(((-1.0)*x4769))+(((-1.0)*(r02*r02)))+((x4768*x4769))+(((-1.0)*x4768*(r00*r00))));
j4eval[0]=x4772;
j4eval[1]=IKsign(x4772);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4771))+x4770))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4773=cj5*cj5;
IkReal x4774=r01*r01;
IkReal x4775=(r01*sj5);
IkReal x4776=(cj5*r00);
CheckValue<IkReal> x4777 = IKatan2WithCheck(IkReal(((((-1.0)*x4776))+x4775)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4777.valid){
continue;
}
CheckValue<IkReal> x4778=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4774))+(((-1.0)*(r02*r02)))+((x4773*x4774))+(((-1.0)*x4773*(r00*r00)))+(((2.0)*x4775*x4776)))),-1);
if(!x4778.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4777.value)+(((1.5707963267949)*(x4778.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4779=IKcos(j4);
IkReal x4780=IKsin(j4);
IkReal x4781=(cj5*r00);
IkReal x4782=(cj5*r10);
IkReal x4783=(r21*sj5);
IkReal x4784=(cj5*r20);
IkReal x4785=((1.0)*x4779);
IkReal x4786=((1.0)*x4780);
IkReal x4787=(sj5*x4780);
IkReal x4788=(sj5*x4779);
evalcond[0]=(((r02*x4780))+((r01*x4788))+(((-1.0)*x4781*x4785)));
evalcond[1]=(((x4780*x4783))+(((-1.0)*r22*x4785))+(((-1.0)*x4784*x4786)));
evalcond[2]=(((r11*x4787))+(((-1.0)*x4782*x4786))+(((-1.0)*r12*x4785)));
evalcond[3]=((1.0)+((r01*x4787))+(((-1.0)*x4781*x4786))+(((-1.0)*r02*x4785)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x4780))+((r11*x4788))+(((-1.0)*x4782*x4785)));
evalcond[5]=(((x4779*x4783))+((r22*x4780))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4784*x4785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4789=((1.0)*cj5);
CheckValue<IkReal> x4790 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4789)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4790.valid){
continue;
}
CheckValue<IkReal> x4791=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4789))+(((-1.0)*r20*sj5)))),-1);
if(!x4791.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4790.value)+(((1.5707963267949)*(x4791.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4792=IKcos(j4);
IkReal x4793=IKsin(j4);
IkReal x4794=(cj5*r00);
IkReal x4795=(cj5*r10);
IkReal x4796=(r21*sj5);
IkReal x4797=(cj5*r20);
IkReal x4798=((1.0)*x4792);
IkReal x4799=((1.0)*x4793);
IkReal x4800=(sj5*x4793);
IkReal x4801=(sj5*x4792);
evalcond[0]=(((r01*x4801))+(((-1.0)*x4794*x4798))+((r02*x4793)));
evalcond[1]=(((x4793*x4796))+(((-1.0)*r22*x4798))+(((-1.0)*x4797*x4799)));
evalcond[2]=((((-1.0)*r12*x4798))+(((-1.0)*x4795*x4799))+((r11*x4800)));
evalcond[3]=((1.0)+((r01*x4800))+(((-1.0)*r02*x4798))+(((-1.0)*x4794*x4799)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4795*x4798))+((r12*x4793))+((r11*x4801)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x4792*x4796))+(((-1.0)*x4797*x4798))+((r22*x4793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4802 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4802.valid){
continue;
}
CheckValue<IkReal> x4803=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4803.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4802.value)+(((1.5707963267949)*(x4803.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4804=IKcos(j4);
IkReal x4805=IKsin(j4);
IkReal x4806=(cj5*r00);
IkReal x4807=(cj5*r10);
IkReal x4808=(r21*sj5);
IkReal x4809=(cj5*r20);
IkReal x4810=((1.0)*x4804);
IkReal x4811=((1.0)*x4805);
IkReal x4812=(sj5*x4805);
IkReal x4813=(sj5*x4804);
evalcond[0]=(((r02*x4805))+(((-1.0)*x4806*x4810))+((r01*x4813)));
evalcond[1]=((((-1.0)*x4809*x4811))+((x4805*x4808))+(((-1.0)*r22*x4810)));
evalcond[2]=(((r11*x4812))+(((-1.0)*x4807*x4811))+(((-1.0)*r12*x4810)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4810))+(((-1.0)*x4806*x4811))+((r01*x4812)));
evalcond[4]=(((cj2*sj1))+((r11*x4813))+((cj1*sj2))+(((-1.0)*x4807*x4810))+((r12*x4805)));
evalcond[5]=((((-1.0)*x4809*x4810))+(((-1.0)*cj1*cj2))+((x4804*x4808))+((sj1*sj2))+((r22*x4805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4814=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4814);
rxp1_1=(px*r21);
rxp1_2=(r11*x4814);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4815=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4815);
rxp1_1=(px*r21);
rxp1_2=(r11*x4815);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4816=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4816);
rxp1_1=(px*r21);
rxp1_2=(r11*x4816);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4819=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4819.valid){
continue;
}
IkReal x4817=x4819.value;
IkReal x4818=(sj0*x4817);
cj4array[0]=(((cj1*sj2*x4818))+((cj2*sj1*x4818)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4820=IKsin(j4);
IkReal x4821=IKcos(j4);
IkReal x4822=(r21*sj5);
IkReal x4823=((1.0)*cj5*r20);
evalcond[0]=(r02*x4820);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4821)));
evalcond[2]=(((x4820*x4822))+(((-1.0)*x4820*x4823)));
evalcond[3]=((((-1.0)*cj5*r10*x4820))+((r11*sj5*x4820)));
evalcond[4]=(((x4821*x4822))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4821*x4823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4825=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4825.valid){
continue;
}
IkReal x4824=x4825.value;
cj4array[0]=((((-1.0)*sj1*sj2*x4824))+((cj1*cj2*x4824)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4826=IKsin(j4);
IkReal x4827=IKcos(j4);
IkReal x4828=((1.0)*sj0);
IkReal x4829=((1.0)*cj5);
IkReal x4830=(sj5*x4826);
evalcond[0]=(r02*x4826);
evalcond[1]=((((-1.0)*x4828))+(((-1.0)*r02*x4827)));
evalcond[2]=((((-1.0)*r20*x4826*x4829))+((r21*x4830)));
evalcond[3]=(((r11*x4830))+(((-1.0)*r10*x4826*x4829)));
evalcond[4]=((((-1.0)*r10*x4827*x4829))+(((-1.0)*cj2*sj1*x4828))+(((-1.0)*cj1*sj2*x4828))+((r11*sj5*x4827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4831=IKPowWithIntegerCheck(r02,-1);
if(!x4831.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4831.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4832=IKsin(j4);
IkReal x4833=IKcos(j4);
IkReal x4834=((1.0)*cj1);
IkReal x4835=(r21*sj5);
IkReal x4836=((1.0)*cj5);
IkReal x4837=(r11*sj5);
evalcond[0]=(r02*x4832);
evalcond[1]=(((x4832*x4835))+(((-1.0)*r20*x4832*x4836)));
evalcond[2]=((((-1.0)*r10*x4832*x4836))+((x4832*x4837)));
evalcond[3]=(((sj1*sj2))+((x4833*x4835))+(((-1.0)*r20*x4833*x4836))+(((-1.0)*cj2*x4834)));
evalcond[4]=((((-1.0)*sj0*sj2*x4834))+(((-1.0)*cj2*sj0*sj1))+((x4833*x4837))+(((-1.0)*r10*x4833*x4836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4838=((1.0)*sj0);
IkReal x4839=((1.0)*cj0);
CheckValue<IkReal> x4840 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4838))+(((-1.0)*r02*x4839)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x4838))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x4839)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4840.valid){
continue;
}
CheckValue<IkReal> x4841=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4841.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4840.value)+(((1.5707963267949)*(x4841.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4842=IKsin(j4);
IkReal x4843=IKcos(j4);
IkReal x4844=(cj5*r00);
IkReal x4845=(cj5*r10);
IkReal x4846=(r21*sj5);
IkReal x4847=((1.0)*cj2);
IkReal x4848=((1.0)*sj0);
IkReal x4849=(cj1*sj2);
IkReal x4850=(cj5*r20);
IkReal x4851=((1.0)*x4843);
IkReal x4852=((1.0)*x4842);
IkReal x4853=(sj5*x4842);
IkReal x4854=(sj5*x4843);
evalcond[0]=(((x4842*x4846))+(((-1.0)*r22*x4851))+(((-1.0)*x4850*x4852)));
evalcond[1]=(cj0+(((-1.0)*r12*x4851))+((r11*x4853))+(((-1.0)*x4845*x4852)));
evalcond[2]=((((-1.0)*x4848))+((r01*x4853))+(((-1.0)*r02*x4851))+(((-1.0)*x4844*x4852)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x4847))+((r22*x4842))+(((-1.0)*x4850*x4851))+((x4843*x4846)));
evalcond[4]=(((r02*x4842))+((r01*x4854))+(((-1.0)*cj0*x4849))+(((-1.0)*cj0*sj1*x4847))+(((-1.0)*x4844*x4851)));
evalcond[5]=(((r12*x4842))+(((-1.0)*x4848*x4849))+(((-1.0)*sj0*sj1*x4847))+((r11*x4854))+(((-1.0)*x4845*x4851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4855=((1.0)*cj5);
CheckValue<IkReal> x4856 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4855))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4856.valid){
continue;
}
CheckValue<IkReal> x4857=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4855)))),-1);
if(!x4857.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4856.value)+(((1.5707963267949)*(x4857.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4858=IKsin(j4);
IkReal x4859=IKcos(j4);
IkReal x4860=(cj5*r00);
IkReal x4861=(cj5*r10);
IkReal x4862=(r21*sj5);
IkReal x4863=((1.0)*cj2);
IkReal x4864=((1.0)*sj0);
IkReal x4865=(cj1*sj2);
IkReal x4866=(cj5*r20);
IkReal x4867=((1.0)*x4859);
IkReal x4868=((1.0)*x4858);
IkReal x4869=(sj5*x4858);
IkReal x4870=(sj5*x4859);
evalcond[0]=((((-1.0)*r22*x4867))+(((-1.0)*x4866*x4868))+((x4858*x4862)));
evalcond[1]=(((r11*x4869))+cj0+(((-1.0)*r12*x4867))+(((-1.0)*x4861*x4868)));
evalcond[2]=(((r01*x4869))+(((-1.0)*x4864))+(((-1.0)*r02*x4867))+(((-1.0)*x4860*x4868)));
evalcond[3]=(((x4859*x4862))+((r22*x4858))+(((-1.0)*x4866*x4867))+((sj1*sj2))+(((-1.0)*cj1*x4863)));
evalcond[4]=((((-1.0)*cj0*sj1*x4863))+((r01*x4870))+(((-1.0)*cj0*x4865))+((r02*x4858))+(((-1.0)*x4860*x4867)));
evalcond[5]=((((-1.0)*sj0*sj1*x4863))+((r12*x4858))+(((-1.0)*x4864*x4865))+(((-1.0)*x4861*x4867))+((r11*x4870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4871=((1.0)*cj5);
CheckValue<IkReal> x4872=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4871)))),-1);
if(!x4872.valid){
continue;
}
CheckValue<IkReal> x4873 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4871)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4872.value)))+(x4873.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4874=IKsin(j4);
IkReal x4875=IKcos(j4);
IkReal x4876=(cj5*r00);
IkReal x4877=(cj5*r10);
IkReal x4878=(r21*sj5);
IkReal x4879=((1.0)*cj2);
IkReal x4880=((1.0)*sj0);
IkReal x4881=(cj1*sj2);
IkReal x4882=(cj5*r20);
IkReal x4883=((1.0)*x4875);
IkReal x4884=((1.0)*x4874);
IkReal x4885=(sj5*x4874);
IkReal x4886=(sj5*x4875);
evalcond[0]=(((x4874*x4878))+(((-1.0)*x4882*x4884))+(((-1.0)*r22*x4883)));
evalcond[1]=((((-1.0)*x4877*x4884))+((r11*x4885))+cj0+(((-1.0)*r12*x4883)));
evalcond[2]=((((-1.0)*x4876*x4884))+(((-1.0)*x4880))+(((-1.0)*r02*x4883))+((r01*x4885)));
evalcond[3]=((((-1.0)*x4882*x4883))+((sj1*sj2))+((r22*x4874))+(((-1.0)*cj1*x4879))+((x4875*x4878)));
evalcond[4]=((((-1.0)*cj0*x4881))+((r02*x4874))+(((-1.0)*x4876*x4883))+(((-1.0)*cj0*sj1*x4879))+((r01*x4886)));
evalcond[5]=((((-1.0)*x4877*x4883))+((r11*x4886))+(((-1.0)*x4880*x4881))+(((-1.0)*sj0*sj1*x4879))+((r12*x4874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4887=((1.0)*cj5);
IkReal x4888=((1.0)*sj5);
IkReal x4889=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x4889;
j0eval[1]=((IKabs(((((-1.0)*r00*x4888))+(((-1.0)*r01*x4887)))))+(IKabs(((((-1.0)*r10*x4888))+(((-1.0)*r11*x4887))))));
j0eval[2]=IKsign(x4889);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4890=r21*r21;
IkReal x4891=cj5*cj5;
IkReal x4892=(cj2*sj1);
IkReal x4893=(cj1*sj2);
IkReal x4894=(r21*sj5);
IkReal x4895=((1.0)*cj5*r20);
IkReal x4896=(((x4890*x4891))+(((-1.0)*x4890))+(((-1.0)*x4891*(r20*r20)))+(((-1.0)*(r22*r22)))+(((2.0)*cj5*r20*x4894)));
j4eval[0]=x4896;
j4eval[1]=((IKabs((((r22*x4893))+((r22*x4892)))))+(IKabs((((x4892*x4894))+(((-1.0)*x4893*x4895))+(((-1.0)*x4892*x4895))+((x4893*x4894))))));
j4eval[2]=IKsign(x4896);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4897=cj1*cj1;
IkReal x4898=(cj2*sj2);
IkReal x4899=(cj2*sj1);
IkReal x4900=(cj1*sj1);
j0eval[0]=(x4900+(((-2.0)*x4897*x4898))+(((-2.0)*cj1*cj2*x4899))+(((-1.08363080061193)*sj2*x4897))+(((-1.08363080061193)*cj1*x4899))+x4898);
j0eval[1]=((((-1.0)*cj1*sj2))+(((-1.0)*x4899)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.19164998084494)*py))+(((-0.195400266071001)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.19164998084494)*px))+(((0.195400266071001)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.19164998084494)*py))+(((-0.195400266071001)*px))))+IKsqr(((((1.19164998084494)*px))+(((0.195400266071001)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.19164998084494)*py))+(((-0.195400266071001)*px))), ((((1.19164998084494)*px))+(((0.195400266071001)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4901=IKsin(j0);
IkReal x4902=IKcos(j0);
evalcond[0]=((((-0.134)*x4901))+(((0.8172)*x4902))+(((-1.0)*px)));
evalcond[1]=((((0.134)*x4902))+(((0.8172)*x4901))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4903=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4903;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4903);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4904=((1.0)*cj5);
IkReal x4905=((((-1.0)*r01*x4904))+(((-1.0)*r00*sj5)));
j4eval[0]=x4905;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4904)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4905);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4906=((1.0)*cj5);
IkReal x4907=((((-1.0)*r01*x4906))+(((-1.0)*r00*sj5)));
j4eval[0]=x4907;
j4eval[1]=IKsign(x4907);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4906))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4908=((1.0)*cj5);
CheckValue<IkReal> x4909 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4908))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4909.valid){
continue;
}
CheckValue<IkReal> x4910=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4908))+(((-1.0)*r00*sj5)))),-1);
if(!x4910.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4909.value)+(((1.5707963267949)*(x4910.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4911=IKcos(j4);
IkReal x4912=IKsin(j4);
IkReal x4913=((1.0)*sj0);
IkReal x4914=(cj5*r00);
IkReal x4915=(cj5*r10);
IkReal x4916=(cj5*r20);
IkReal x4917=((1.0)*x4911);
IkReal x4918=((1.0)*x4912);
IkReal x4919=(sj5*x4911);
IkReal x4920=(sj5*x4912);
evalcond[0]=(((r21*x4919))+(((-1.0)*x4916*x4917))+((r22*x4912)));
evalcond[1]=(((r21*x4920))+(((-1.0)*r22*x4917))+(((-1.0)*x4916*x4918)));
evalcond[2]=((((-1.0)*x4915*x4918))+cj0+(((-1.0)*r12*x4917))+((r11*x4920)));
evalcond[3]=(((r02*x4912))+((r01*x4919))+(((-1.0)*x4914*x4917))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4915*x4917))+(((-1.0)*x4913))+((r12*x4912))+((r11*x4919)));
evalcond[5]=((((-1.0)*r02*x4917))+(((-1.0)*x4913))+((r01*x4920))+(((-1.0)*x4914*x4918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4921=((1.0)*cj5);
CheckValue<IkReal> x4922=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4921))+(((-1.0)*r00*sj5)))),-1);
if(!x4922.valid){
continue;
}
CheckValue<IkReal> x4923 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4921)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4923.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4922.value)))+(x4923.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4924=IKcos(j4);
IkReal x4925=IKsin(j4);
IkReal x4926=((1.0)*sj0);
IkReal x4927=(cj5*r00);
IkReal x4928=(cj5*r10);
IkReal x4929=(cj5*r20);
IkReal x4930=((1.0)*x4924);
IkReal x4931=((1.0)*x4925);
IkReal x4932=(sj5*x4924);
IkReal x4933=(sj5*x4925);
evalcond[0]=(((r22*x4925))+((r21*x4932))+(((-1.0)*x4929*x4930)));
evalcond[1]=(((r21*x4933))+(((-1.0)*x4929*x4931))+(((-1.0)*r22*x4930)));
evalcond[2]=(cj0+(((-1.0)*r12*x4930))+((r11*x4933))+(((-1.0)*x4928*x4931)));
evalcond[3]=(((r01*x4932))+((r02*x4925))+(((-1.0)*x4927*x4930))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x4932))+(((-1.0)*x4928*x4930))+(((-1.0)*x4926))+((r12*x4925)));
evalcond[5]=((((-1.0)*r02*x4930))+((r01*x4933))+(((-1.0)*x4927*x4931))+(((-1.0)*x4926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4934 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4934.valid){
continue;
}
CheckValue<IkReal> x4935=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4934.value)+(((1.5707963267949)*(x4935.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4936=IKcos(j4);
IkReal x4937=IKsin(j4);
IkReal x4938=((1.0)*sj0);
IkReal x4939=(cj5*r00);
IkReal x4940=(cj5*r10);
IkReal x4941=(cj5*r20);
IkReal x4942=((1.0)*x4936);
IkReal x4943=((1.0)*x4937);
IkReal x4944=(sj5*x4936);
IkReal x4945=(sj5*x4937);
evalcond[0]=(((r21*x4944))+(((-1.0)*x4941*x4942))+((r22*x4937)));
evalcond[1]=(((r21*x4945))+(((-1.0)*x4941*x4943))+(((-1.0)*r22*x4942)));
evalcond[2]=(cj0+(((-1.0)*x4940*x4943))+((r11*x4945))+(((-1.0)*r12*x4942)));
evalcond[3]=(((r01*x4944))+(((-1.0)*x4939*x4942))+((r02*x4937))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x4937))+(((-1.0)*x4940*x4942))+((r11*x4944))+(((-1.0)*x4938)));
evalcond[5]=(((r01*x4945))+(((-1.0)*x4939*x4943))+(((-1.0)*r02*x4942))+(((-1.0)*x4938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-7.04083262574717)*px))+(((1.72342768749632)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((7.04083262574717)*py))+(((1.72342768749632)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.04083262574717)*px))+(((1.72342768749632)*py))))+IKsqr(((((7.04083262574717)*py))+(((1.72342768749632)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-7.04083262574717)*px))+(((1.72342768749632)*py))), ((((7.04083262574717)*py))+(((1.72342768749632)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4946=IKcos(j0);
IkReal x4947=IKsin(j0);
evalcond[0]=((((-0.134)*x4947))+(((-1.0)*px))+(((0.0328)*x4946)));
evalcond[1]=((((-1.0)*py))+(((0.134)*x4946))+(((0.0328)*x4947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4948=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4948;
j4eval[1]=IKsign(x4948);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4949=((1.0)*cj5);
IkReal x4950=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4949)));
j4eval[0]=x4950;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x4949))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x4950);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4951=cj5*cj5;
IkReal x4952=((1.0)*r20);
IkReal x4953=(r01*r21);
IkReal x4954=(r21*sj5);
IkReal x4955=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x4954))+(((-1.0)*x4953))+(((-1.0)*r00*x4951*x4952))+((x4951*x4953)));
j4eval[0]=x4955;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x4952))+((cj0*x4954)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4955);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4956=cj5*cj5;
IkReal x4957=((1.0)*r20);
IkReal x4958=(r01*r21);
IkReal x4959=(r21*sj5);
CheckValue<IkReal> x4960=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x4959))+((x4956*x4958))+(((-1.0)*r00*x4956*x4957))+(((-1.0)*x4958)))),-1);
if(!x4960.valid){
continue;
}
CheckValue<IkReal> x4961 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4957))+((cj0*x4959)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4960.value)))+(x4961.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4962=IKcos(j4);
IkReal x4963=IKsin(j4);
IkReal x4964=(cj5*r00);
IkReal x4965=(cj5*r10);
IkReal x4966=(cj5*r20);
IkReal x4967=((1.0)*x4962);
IkReal x4968=((1.0)*x4963);
IkReal x4969=(sj5*x4962);
IkReal x4970=(sj5*x4963);
evalcond[0]=(((r22*x4963))+(((-1.0)*x4966*x4967))+((r21*x4969)));
evalcond[1]=((((-1.0)*r22*x4967))+(((-1.0)*x4966*x4968))+((r21*x4970)));
evalcond[2]=(cj0+((r02*x4963))+(((-1.0)*x4964*x4967))+((r01*x4969)));
evalcond[3]=(sj0+((r12*x4963))+((r11*x4969))+(((-1.0)*x4965*x4967)));
evalcond[4]=(cj0+((r11*x4970))+(((-1.0)*r12*x4967))+(((-1.0)*x4965*x4968)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x4967))+(((-1.0)*x4964*x4968))+((r01*x4970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4971=((1.0)*cj5);
CheckValue<IkReal> x4972=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4971)))),-1);
if(!x4972.valid){
continue;
}
CheckValue<IkReal> x4973 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4971)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4972.value)))+(x4973.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4974=IKcos(j4);
IkReal x4975=IKsin(j4);
IkReal x4976=(cj5*r00);
IkReal x4977=(cj5*r10);
IkReal x4978=(cj5*r20);
IkReal x4979=((1.0)*x4974);
IkReal x4980=((1.0)*x4975);
IkReal x4981=(sj5*x4974);
IkReal x4982=(sj5*x4975);
evalcond[0]=(((r22*x4975))+(((-1.0)*x4978*x4979))+((r21*x4981)));
evalcond[1]=(((r21*x4982))+(((-1.0)*r22*x4979))+(((-1.0)*x4978*x4980)));
evalcond[2]=(((r01*x4981))+cj0+(((-1.0)*x4976*x4979))+((r02*x4975)));
evalcond[3]=(sj0+((r11*x4981))+((r12*x4975))+(((-1.0)*x4977*x4979)));
evalcond[4]=((((-1.0)*x4977*x4980))+cj0+((r11*x4982))+(((-1.0)*r12*x4979)));
evalcond[5]=((((-1.0)*sj0))+((r01*x4982))+(((-1.0)*r02*x4979))+(((-1.0)*x4976*x4980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4983 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4983.valid){
continue;
}
CheckValue<IkReal> x4984=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4984.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4983.value)+(((1.5707963267949)*(x4984.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4985=IKcos(j4);
IkReal x4986=IKsin(j4);
IkReal x4987=(cj5*r00);
IkReal x4988=(cj5*r10);
IkReal x4989=(cj5*r20);
IkReal x4990=((1.0)*x4985);
IkReal x4991=((1.0)*x4986);
IkReal x4992=(sj5*x4985);
IkReal x4993=(sj5*x4986);
evalcond[0]=(((r22*x4986))+((r21*x4992))+(((-1.0)*x4989*x4990)));
evalcond[1]=((((-1.0)*r22*x4990))+((r21*x4993))+(((-1.0)*x4989*x4991)));
evalcond[2]=(cj0+(((-1.0)*x4987*x4990))+((r01*x4992))+((r02*x4986)));
evalcond[3]=(sj0+((r12*x4986))+((r11*x4992))+(((-1.0)*x4988*x4990)));
evalcond[4]=(cj0+(((-1.0)*r12*x4990))+((r11*x4993))+(((-1.0)*x4988*x4991)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x4990))+(((-1.0)*x4987*x4991))+((r01*x4993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4994=IKsin(j0);
IkReal x4995=IKcos(j0);
IkReal x4996=((0.1)*sj5);
IkReal x4997=(cj5*r11);
IkReal x4998=(cj5*r01);
evalcond[0]=(x4998+((r00*sj5))+(((-1.0)*x4995)));
evalcond[1]=(x4997+((r10*sj5))+(((-1.0)*x4994)));
evalcond[2]=((((-1.0)*r00*x4996))+(((-0.134)*x4994))+(((-1.0)*px))+(((-0.1)*x4998)));
evalcond[3]=((((-1.0)*py))+(((0.134)*x4995))+(((-1.0)*r10*x4996))+(((-0.1)*x4997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4999=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4999;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x4999);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5000=((1.0)*cj5);
IkReal x5001=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5000)));
j4eval[0]=x5001;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x5000))))));
j4eval[2]=IKsign(x5001);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5002=cj5*cj5;
IkReal x5003=(r01*r11);
IkReal x5004=((1.0)*r00);
IkReal x5005=(r01*sj5);
IkReal x5006=(((cj5*r10*x5005))+(((-1.0)*r02*r12))+((x5002*x5003))+(((-1.0)*x5003))+(((-1.0)*r10*x5002*x5004))+((cj5*r00*r11*sj5)));
j4eval[0]=x5006;
j4eval[1]=IKsign(x5006);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x5004))+((cj0*x5005))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5007=cj5*cj5;
IkReal x5008=(r01*r11);
IkReal x5009=(cj5*r00);
IkReal x5010=(r01*sj5);
CheckValue<IkReal> x5011 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5009))+((cj0*x5010)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5011.valid){
continue;
}
CheckValue<IkReal> x5012=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+(((-1.0)*x5008))+((r11*sj5*x5009))+((cj5*r10*x5010))+(((-1.0)*r00*r10*x5007))+((x5007*x5008)))),-1);
if(!x5012.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5011.value)+(((1.5707963267949)*(x5012.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5013=IKcos(j4);
IkReal x5014=IKsin(j4);
IkReal x5015=(cj5*r00);
IkReal x5016=(r01*sj5);
IkReal x5017=(cj5*r10);
IkReal x5018=(cj5*r20);
IkReal x5019=((1.0)*x5013);
IkReal x5020=((1.0)*x5014);
IkReal x5021=(sj5*x5014);
IkReal x5022=(sj5*x5013);
evalcond[0]=(((r02*x5014))+((x5013*x5016))+(((-1.0)*x5015*x5019)));
evalcond[1]=(((r11*x5022))+(((-1.0)*x5017*x5019))+((r12*x5014)));
evalcond[2]=((((-1.0)*r22*x5019))+(((-1.0)*x5018*x5020))+((r21*x5021)));
evalcond[3]=((1.0)+(((-1.0)*x5018*x5019))+((r22*x5014))+((r21*x5022)));
evalcond[4]=(((r11*x5021))+cj0+(((-1.0)*x5017*x5020))+(((-1.0)*r12*x5019)));
evalcond[5]=(((x5014*x5016))+(((-1.0)*sj0))+(((-1.0)*r02*x5019))+(((-1.0)*x5015*x5020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5023=((1.0)*cj5);
CheckValue<IkReal> x5024=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5023))+(((-1.0)*r00*sj5)))),-1);
if(!x5024.valid){
continue;
}
CheckValue<IkReal> x5025 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5023)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5024.value)))+(x5025.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5026=IKcos(j4);
IkReal x5027=IKsin(j4);
IkReal x5028=(cj5*r00);
IkReal x5029=(r01*sj5);
IkReal x5030=(cj5*r10);
IkReal x5031=(cj5*r20);
IkReal x5032=((1.0)*x5026);
IkReal x5033=((1.0)*x5027);
IkReal x5034=(sj5*x5027);
IkReal x5035=(sj5*x5026);
evalcond[0]=((((-1.0)*x5028*x5032))+((r02*x5027))+((x5026*x5029)));
evalcond[1]=((((-1.0)*x5030*x5032))+((r12*x5027))+((r11*x5035)));
evalcond[2]=((((-1.0)*x5031*x5033))+((r21*x5034))+(((-1.0)*r22*x5032)));
evalcond[3]=((1.0)+(((-1.0)*x5031*x5032))+((r22*x5027))+((r21*x5035)));
evalcond[4]=(cj0+(((-1.0)*x5030*x5033))+((r11*x5034))+(((-1.0)*r12*x5032)));
evalcond[5]=((((-1.0)*x5028*x5033))+(((-1.0)*sj0))+((x5027*x5029))+(((-1.0)*r02*x5032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5036 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5036.valid){
continue;
}
CheckValue<IkReal> x5037=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5037.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5036.value)+(((1.5707963267949)*(x5037.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5038=IKcos(j4);
IkReal x5039=IKsin(j4);
IkReal x5040=(cj5*r00);
IkReal x5041=(r01*sj5);
IkReal x5042=(cj5*r10);
IkReal x5043=(cj5*r20);
IkReal x5044=((1.0)*x5038);
IkReal x5045=((1.0)*x5039);
IkReal x5046=(sj5*x5039);
IkReal x5047=(sj5*x5038);
evalcond[0]=((((-1.0)*x5040*x5044))+((r02*x5039))+((x5038*x5041)));
evalcond[1]=(((r12*x5039))+(((-1.0)*x5042*x5044))+((r11*x5047)));
evalcond[2]=((((-1.0)*x5043*x5045))+((r21*x5046))+(((-1.0)*r22*x5044)));
evalcond[3]=((1.0)+(((-1.0)*x5043*x5044))+((r21*x5047))+((r22*x5039)));
evalcond[4]=(cj0+(((-1.0)*x5042*x5045))+(((-1.0)*r12*x5044))+((r11*x5046)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5040*x5045))+(((-1.0)*r02*x5044))+((x5039*x5041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.78008187832539)*px))+(((-2.28319487074043)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.78008187832539)*py))+(((-2.28319487074043)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.78008187832539)*px))+(((-2.28319487074043)*py))))+IKsqr(((((0.78008187832539)*py))+(((-2.28319487074043)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.78008187832539)*px))+(((-2.28319487074043)*py))), ((((0.78008187832539)*py))+(((-2.28319487074043)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5048=IKcos(j0);
IkReal x5049=IKsin(j0);
evalcond[0]=((((-0.3922)*x5048))+(((-1.0)*px))+(((-0.134)*x5049)));
evalcond[1]=((((-0.3922)*x5049))+(((-1.0)*py))+(((0.134)*x5048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5050=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5050;
j4eval[1]=IKsign(x5050);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5051=((1.0)*cj5);
IkReal x5052=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5051)));
j4eval[0]=x5052;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5051)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5052);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5053=cj5*cj5;
IkReal x5054=((1.0)*r20);
IkReal x5055=(r01*r21);
IkReal x5056=(r21*sj5);
IkReal x5057=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5053*x5055))+(((-1.0)*r00*x5053*x5054))+((cj5*r00*x5056))+(((-1.0)*x5055)));
j4eval[0]=x5057;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x5054))+((cj0*x5056))))));
j4eval[2]=IKsign(x5057);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5058=cj5*cj5;
IkReal x5059=((1.0)*r20);
IkReal x5060=(r01*r21);
IkReal x5061=(r21*sj5);
CheckValue<IkReal> x5062=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5058*x5059))+((x5058*x5060))+(((-1.0)*x5060))+((cj5*r00*x5061)))),-1);
if(!x5062.valid){
continue;
}
CheckValue<IkReal> x5063 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5061))+(((-1.0)*cj0*cj5*x5059)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5062.value)))+(x5063.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5064=IKcos(j4);
IkReal x5065=IKsin(j4);
IkReal x5066=(cj5*r00);
IkReal x5067=(cj5*r10);
IkReal x5068=(cj5*r20);
IkReal x5069=((1.0)*x5064);
IkReal x5070=((1.0)*x5065);
IkReal x5071=(sj5*x5064);
IkReal x5072=(sj5*x5065);
evalcond[0]=(((r21*x5071))+((r22*x5065))+(((-1.0)*x5068*x5069)));
evalcond[1]=(((r21*x5072))+(((-1.0)*r22*x5069))+(((-1.0)*x5068*x5070)));
evalcond[2]=(cj0+((r02*x5065))+(((-1.0)*x5066*x5069))+((r01*x5071)));
evalcond[3]=(sj0+((r12*x5065))+((r11*x5071))+(((-1.0)*x5067*x5069)));
evalcond[4]=((((-1.0)*x5067*x5070))+cj0+(((-1.0)*r12*x5069))+((r11*x5072)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5066*x5070))+(((-1.0)*r02*x5069))+((r01*x5072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5073=((1.0)*cj5);
CheckValue<IkReal> x5074 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x5073))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5074.valid){
continue;
}
CheckValue<IkReal> x5075=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5073)))),-1);
if(!x5075.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5074.value)+(((1.5707963267949)*(x5075.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5076=IKcos(j4);
IkReal x5077=IKsin(j4);
IkReal x5078=(cj5*r00);
IkReal x5079=(cj5*r10);
IkReal x5080=(cj5*r20);
IkReal x5081=((1.0)*x5076);
IkReal x5082=((1.0)*x5077);
IkReal x5083=(sj5*x5076);
IkReal x5084=(sj5*x5077);
evalcond[0]=(((r21*x5083))+(((-1.0)*x5080*x5081))+((r22*x5077)));
evalcond[1]=(((r21*x5084))+(((-1.0)*x5080*x5082))+(((-1.0)*r22*x5081)));
evalcond[2]=(cj0+((r01*x5083))+((r02*x5077))+(((-1.0)*x5078*x5081)));
evalcond[3]=(sj0+((r11*x5083))+(((-1.0)*x5079*x5081))+((r12*x5077)));
evalcond[4]=((((-1.0)*r12*x5081))+cj0+((r11*x5084))+(((-1.0)*x5079*x5082)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5084))+(((-1.0)*x5078*x5082))+(((-1.0)*r02*x5081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5085 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5085.valid){
continue;
}
CheckValue<IkReal> x5086=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5086.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5085.value)+(((1.5707963267949)*(x5086.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5087=IKcos(j4);
IkReal x5088=IKsin(j4);
IkReal x5089=(cj5*r00);
IkReal x5090=(cj5*r10);
IkReal x5091=(cj5*r20);
IkReal x5092=((1.0)*x5087);
IkReal x5093=((1.0)*x5088);
IkReal x5094=(sj5*x5087);
IkReal x5095=(sj5*x5088);
evalcond[0]=(((r21*x5094))+(((-1.0)*x5091*x5092))+((r22*x5088)));
evalcond[1]=((((-1.0)*r22*x5092))+((r21*x5095))+(((-1.0)*x5091*x5093)));
evalcond[2]=(cj0+((r01*x5094))+(((-1.0)*x5089*x5092))+((r02*x5088)));
evalcond[3]=(sj0+((r11*x5094))+(((-1.0)*x5090*x5092))+((r12*x5088)));
evalcond[4]=(cj0+((r11*x5095))+(((-1.0)*x5090*x5093))+(((-1.0)*r12*x5092)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5095))+(((-1.0)*x5089*x5093))+(((-1.0)*r02*x5092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5096=((1.0)*sj5);
IkReal x5097=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5097))+(((-1.0)*r10*x5096)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5096))+(((-1.0)*r01*x5097)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5097))+(((-1.0)*r10*x5096))))+IKsqr(((((-1.0)*r00*x5096))+(((-1.0)*r01*x5097))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5097))+(((-1.0)*r10*x5096))), ((((-1.0)*r00*x5096))+(((-1.0)*r01*x5097))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5098=IKsin(j0);
IkReal x5099=IKcos(j0);
IkReal x5100=(r10*sj5);
IkReal x5101=(r00*sj5);
IkReal x5102=(cj5*r11);
IkReal x5103=(cj5*r01);
evalcond[0]=(x5103+x5101+x5099);
evalcond[1]=(x5102+x5100+x5098);
evalcond[2]=((((-0.134)*x5098))+(((-1.0)*px))+(((-0.1)*x5101))+(((-0.1)*x5103)));
evalcond[3]=((((0.134)*x5099))+(((-1.0)*py))+(((-0.1)*x5100))+(((-0.1)*x5102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5104=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5104;
j4eval[1]=IKsign(x5104);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5105=((1.0)*cj5);
IkReal x5106=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5105)));
j4eval[0]=x5106;
j4eval[1]=IKsign(x5106);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5105))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5107=cj5*cj5;
IkReal x5108=(r01*r11);
IkReal x5109=((1.0)*r00);
IkReal x5110=(r01*sj5);
IkReal x5111=(((cj5*r10*x5110))+((x5107*x5108))+(((-1.0)*r02*r12))+(((-1.0)*x5108))+(((-1.0)*r10*x5107*x5109))+((cj5*r00*r11*sj5)));
j4eval[0]=x5111;
j4eval[1]=IKsign(x5111);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5110))+(((-1.0)*cj0*cj5*x5109))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5112=cj5*cj5;
IkReal x5113=(r01*r11);
IkReal x5114=(cj5*r00);
IkReal x5115=(r01*sj5);
CheckValue<IkReal> x5116=IKPowWithIntegerCheck(IKsign((((x5112*x5113))+((cj5*r10*x5115))+(((-1.0)*r00*r10*x5112))+(((-1.0)*r02*r12))+(((-1.0)*x5113))+((r11*sj5*x5114)))),-1);
if(!x5116.valid){
continue;
}
CheckValue<IkReal> x5117 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5114))+((cj0*x5115)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5116.value)))+(x5117.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5118=IKcos(j4);
IkReal x5119=IKsin(j4);
IkReal x5120=(cj5*r00);
IkReal x5121=(r01*sj5);
IkReal x5122=(cj5*r10);
IkReal x5123=(cj5*r20);
IkReal x5124=((1.0)*x5118);
IkReal x5125=((1.0)*x5119);
IkReal x5126=(sj5*x5119);
IkReal x5127=(sj5*x5118);
evalcond[0]=(((r02*x5119))+((x5118*x5121))+(((-1.0)*x5120*x5124)));
evalcond[1]=(((r11*x5127))+(((-1.0)*x5122*x5124))+((r12*x5119)));
evalcond[2]=((((-1.0)*x5123*x5125))+((r21*x5126))+(((-1.0)*r22*x5124)));
evalcond[3]=((-1.0)+((r22*x5119))+(((-1.0)*x5123*x5124))+((r21*x5127)));
evalcond[4]=(cj0+((r11*x5126))+(((-1.0)*x5122*x5125))+(((-1.0)*r12*x5124)));
evalcond[5]=((((-1.0)*sj0))+((x5119*x5121))+(((-1.0)*r02*x5124))+(((-1.0)*x5120*x5125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5128=((1.0)*cj5);
CheckValue<IkReal> x5129 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5128)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5129.valid){
continue;
}
CheckValue<IkReal> x5130=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5128)))),-1);
if(!x5130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5129.value)+(((1.5707963267949)*(x5130.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5131=IKcos(j4);
IkReal x5132=IKsin(j4);
IkReal x5133=(cj5*r00);
IkReal x5134=(r01*sj5);
IkReal x5135=(cj5*r10);
IkReal x5136=(cj5*r20);
IkReal x5137=((1.0)*x5131);
IkReal x5138=((1.0)*x5132);
IkReal x5139=(sj5*x5132);
IkReal x5140=(sj5*x5131);
evalcond[0]=(((x5131*x5134))+((r02*x5132))+(((-1.0)*x5133*x5137)));
evalcond[1]=(((r12*x5132))+(((-1.0)*x5135*x5137))+((r11*x5140)));
evalcond[2]=((((-1.0)*x5136*x5138))+((r21*x5139))+(((-1.0)*r22*x5137)));
evalcond[3]=((-1.0)+((r21*x5140))+((r22*x5132))+(((-1.0)*x5136*x5137)));
evalcond[4]=(cj0+(((-1.0)*x5135*x5138))+((r11*x5139))+(((-1.0)*r12*x5137)));
evalcond[5]=(((x5132*x5134))+(((-1.0)*sj0))+(((-1.0)*r02*x5137))+(((-1.0)*x5133*x5138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5141=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5141.valid){
continue;
}
CheckValue<IkReal> x5142 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5142.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5141.value)))+(x5142.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5143=IKcos(j4);
IkReal x5144=IKsin(j4);
IkReal x5145=(cj5*r00);
IkReal x5146=(r01*sj5);
IkReal x5147=(cj5*r10);
IkReal x5148=(cj5*r20);
IkReal x5149=((1.0)*x5143);
IkReal x5150=((1.0)*x5144);
IkReal x5151=(sj5*x5144);
IkReal x5152=(sj5*x5143);
evalcond[0]=(((x5143*x5146))+((r02*x5144))+(((-1.0)*x5145*x5149)));
evalcond[1]=(((r11*x5152))+((r12*x5144))+(((-1.0)*x5147*x5149)));
evalcond[2]=(((r21*x5151))+(((-1.0)*x5148*x5150))+(((-1.0)*r22*x5149)));
evalcond[3]=((-1.0)+((r21*x5152))+(((-1.0)*x5148*x5149))+((r22*x5144)));
evalcond[4]=(((r11*x5151))+cj0+(((-1.0)*r12*x5149))+(((-1.0)*x5147*x5150)));
evalcond[5]=(((x5144*x5146))+(((-1.0)*sj0))+(((-1.0)*r02*x5149))+(((-1.0)*x5145*x5150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.78008187832539)*px))+(((2.28319487074043)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.78008187832539)*py))+(((2.28319487074043)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.78008187832539)*px))+(((2.28319487074043)*py))))+IKsqr(((((0.78008187832539)*py))+(((2.28319487074043)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.78008187832539)*px))+(((2.28319487074043)*py))), ((((0.78008187832539)*py))+(((2.28319487074043)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5153=IKcos(j0);
IkReal x5154=IKsin(j0);
evalcond[0]=((((-0.134)*x5154))+(((0.3922)*x5153))+(((-1.0)*px)));
evalcond[1]=((((0.3922)*x5154))+(((-1.0)*py))+(((0.134)*x5153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5155=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5155;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5155);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5156=((1.0)*cj5);
IkReal x5157=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5156)));
j4eval[0]=x5157;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x5156))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5157);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5158=((1.0)*cj5);
IkReal x5159=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5158)));
j4eval[0]=x5159;
j4eval[1]=IKsign(x5159);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5158))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5160=((1.0)*cj5);
CheckValue<IkReal> x5161=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5160)))),-1);
if(!x5161.valid){
continue;
}
CheckValue<IkReal> x5162 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5160))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5161.value)))+(x5162.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5163=IKcos(j4);
IkReal x5164=IKsin(j4);
IkReal x5165=((1.0)*sj0);
IkReal x5166=(cj5*r00);
IkReal x5167=(cj5*r10);
IkReal x5168=(cj5*r20);
IkReal x5169=((1.0)*x5163);
IkReal x5170=((1.0)*x5164);
IkReal x5171=(sj5*x5163);
IkReal x5172=(sj5*x5164);
evalcond[0]=((((-1.0)*x5168*x5169))+((r22*x5164))+((r21*x5171)));
evalcond[1]=((((-1.0)*r22*x5169))+(((-1.0)*x5168*x5170))+((r21*x5172)));
evalcond[2]=(cj0+(((-1.0)*r12*x5169))+((r11*x5172))+(((-1.0)*x5167*x5170)));
evalcond[3]=(((r01*x5171))+((r02*x5164))+(((-1.0)*x5166*x5169))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5165))+((r12*x5164))+((r11*x5171))+(((-1.0)*x5167*x5169)));
evalcond[5]=(((r01*x5172))+(((-1.0)*r02*x5169))+(((-1.0)*x5165))+(((-1.0)*x5166*x5170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5173=((1.0)*cj5);
CheckValue<IkReal> x5174 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5173)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5174.valid){
continue;
}
CheckValue<IkReal> x5175=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5173)))),-1);
if(!x5175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5174.value)+(((1.5707963267949)*(x5175.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5176=IKcos(j4);
IkReal x5177=IKsin(j4);
IkReal x5178=((1.0)*sj0);
IkReal x5179=(cj5*r00);
IkReal x5180=(cj5*r10);
IkReal x5181=(cj5*r20);
IkReal x5182=((1.0)*x5176);
IkReal x5183=((1.0)*x5177);
IkReal x5184=(sj5*x5176);
IkReal x5185=(sj5*x5177);
evalcond[0]=(((r21*x5184))+((r22*x5177))+(((-1.0)*x5181*x5182)));
evalcond[1]=((((-1.0)*r22*x5182))+((r21*x5185))+(((-1.0)*x5181*x5183)));
evalcond[2]=(cj0+(((-1.0)*r12*x5182))+((r11*x5185))+(((-1.0)*x5180*x5183)));
evalcond[3]=(((r01*x5184))+((r02*x5177))+(((-1.0)*x5179*x5182))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5178))+((r12*x5177))+((r11*x5184))+(((-1.0)*x5180*x5182)));
evalcond[5]=((((-1.0)*r02*x5182))+((r01*x5185))+(((-1.0)*x5178))+(((-1.0)*x5179*x5183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5186 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5186.valid){
continue;
}
CheckValue<IkReal> x5187=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5186.value)+(((1.5707963267949)*(x5187.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5188=IKcos(j4);
IkReal x5189=IKsin(j4);
IkReal x5190=((1.0)*sj0);
IkReal x5191=(cj5*r00);
IkReal x5192=(cj5*r10);
IkReal x5193=(cj5*r20);
IkReal x5194=((1.0)*x5188);
IkReal x5195=((1.0)*x5189);
IkReal x5196=(sj5*x5188);
IkReal x5197=(sj5*x5189);
evalcond[0]=(((r22*x5189))+((r21*x5196))+(((-1.0)*x5193*x5194)));
evalcond[1]=(((r21*x5197))+(((-1.0)*x5193*x5195))+(((-1.0)*r22*x5194)));
evalcond[2]=((((-1.0)*r12*x5194))+cj0+((r11*x5197))+(((-1.0)*x5192*x5195)));
evalcond[3]=((((-1.0)*x5191*x5194))+((r02*x5189))+((r01*x5196))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x5196))+(((-1.0)*x5190))+(((-1.0)*x5192*x5194))+((r12*x5189)));
evalcond[5]=((((-1.0)*x5190))+(((-1.0)*x5191*x5195))+(((-1.0)*r02*x5194))+((r01*x5197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.19164998084494)*py))+(((-0.195400266071001)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.19164998084494)*px))+(((0.195400266071001)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.19164998084494)*py))+(((-0.195400266071001)*px))))+IKsqr(((((-1.19164998084494)*px))+(((0.195400266071001)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.19164998084494)*py))+(((-0.195400266071001)*px))), ((((-1.19164998084494)*px))+(((0.195400266071001)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5198=IKcos(j0);
IkReal x5199=IKsin(j0);
evalcond[0]=((((-0.8172)*x5198))+(((-1.0)*px))+(((-0.134)*x5199)));
evalcond[1]=((((0.134)*x5198))+(((-0.8172)*x5199))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5200=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5200;
j4eval[1]=IKsign(x5200);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5201=((1.0)*cj5);
IkReal x5202=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5201)));
j4eval[0]=x5202;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5201)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5202);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5203=cj5*cj5;
IkReal x5204=((1.0)*r20);
IkReal x5205=(r01*r21);
IkReal x5206=(r21*sj5);
IkReal x5207=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5203*x5205))+(((-1.0)*r00*x5203*x5204))+((cj5*r00*x5206))+(((-1.0)*x5205)));
j4eval[0]=x5207;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x5204))+((cj0*x5206))))));
j4eval[2]=IKsign(x5207);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5208=cj5*cj5;
IkReal x5209=((1.0)*r20);
IkReal x5210=(r01*r21);
IkReal x5211=(r21*sj5);
CheckValue<IkReal> x5212 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5209))+((cj0*x5211)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5212.valid){
continue;
}
CheckValue<IkReal> x5213=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5208*x5209))+((x5208*x5210))+((cj5*r00*x5211))+(((-1.0)*x5210)))),-1);
if(!x5213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5212.value)+(((1.5707963267949)*(x5213.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5214=IKcos(j4);
IkReal x5215=IKsin(j4);
IkReal x5216=(cj5*r00);
IkReal x5217=(cj5*r10);
IkReal x5218=(cj5*r20);
IkReal x5219=((1.0)*x5214);
IkReal x5220=((1.0)*x5215);
IkReal x5221=(sj5*x5214);
IkReal x5222=(sj5*x5215);
evalcond[0]=(((r21*x5221))+(((-1.0)*x5218*x5219))+((r22*x5215)));
evalcond[1]=(((r21*x5222))+(((-1.0)*x5218*x5220))+(((-1.0)*r22*x5219)));
evalcond[2]=(cj0+((r02*x5215))+((r01*x5221))+(((-1.0)*x5216*x5219)));
evalcond[3]=((((-1.0)*x5217*x5219))+sj0+((r12*x5215))+((r11*x5221)));
evalcond[4]=(cj0+(((-1.0)*x5217*x5220))+((r11*x5222))+(((-1.0)*r12*x5219)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5216*x5220))+((r01*x5222))+(((-1.0)*r02*x5219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5223=((1.0)*cj5);
CheckValue<IkReal> x5224 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5223)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5224.valid){
continue;
}
CheckValue<IkReal> x5225=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5223)))),-1);
if(!x5225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5224.value)+(((1.5707963267949)*(x5225.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5226=IKcos(j4);
IkReal x5227=IKsin(j4);
IkReal x5228=(cj5*r00);
IkReal x5229=(cj5*r10);
IkReal x5230=(cj5*r20);
IkReal x5231=((1.0)*x5226);
IkReal x5232=((1.0)*x5227);
IkReal x5233=(sj5*x5226);
IkReal x5234=(sj5*x5227);
evalcond[0]=(((r22*x5227))+((r21*x5233))+(((-1.0)*x5230*x5231)));
evalcond[1]=((((-1.0)*r22*x5231))+((r21*x5234))+(((-1.0)*x5230*x5232)));
evalcond[2]=(cj0+((r02*x5227))+((r01*x5233))+(((-1.0)*x5228*x5231)));
evalcond[3]=(sj0+((r11*x5233))+(((-1.0)*x5229*x5231))+((r12*x5227)));
evalcond[4]=(cj0+((r11*x5234))+(((-1.0)*r12*x5231))+(((-1.0)*x5229*x5232)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5231))+((r01*x5234))+(((-1.0)*x5228*x5232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5235 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5235.valid){
continue;
}
CheckValue<IkReal> x5236=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5235.value)+(((1.5707963267949)*(x5236.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5237=IKcos(j4);
IkReal x5238=IKsin(j4);
IkReal x5239=(cj5*r00);
IkReal x5240=(cj5*r10);
IkReal x5241=(cj5*r20);
IkReal x5242=((1.0)*x5237);
IkReal x5243=((1.0)*x5238);
IkReal x5244=(sj5*x5237);
IkReal x5245=(sj5*x5238);
evalcond[0]=((((-1.0)*x5241*x5242))+((r21*x5244))+((r22*x5238)));
evalcond[1]=((((-1.0)*r22*x5242))+(((-1.0)*x5241*x5243))+((r21*x5245)));
evalcond[2]=(cj0+((r01*x5244))+(((-1.0)*x5239*x5242))+((r02*x5238)));
evalcond[3]=(sj0+((r11*x5244))+((r12*x5238))+(((-1.0)*x5240*x5242)));
evalcond[4]=((((-1.0)*r12*x5242))+((r11*x5245))+cj0+(((-1.0)*x5240*x5243)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5245))+(((-1.0)*r02*x5242))+(((-1.0)*x5239*x5243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-7.04083262574717)*px))+(((-1.72342768749632)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((7.04083262574717)*py))+(((-1.72342768749632)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.04083262574717)*px))+(((-1.72342768749632)*py))))+IKsqr(((((7.04083262574717)*py))+(((-1.72342768749632)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-7.04083262574717)*px))+(((-1.72342768749632)*py))), ((((7.04083262574717)*py))+(((-1.72342768749632)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5246=IKcos(j0);
IkReal x5247=IKsin(j0);
evalcond[0]=((((-0.0328)*x5246))+(((-0.134)*x5247))+(((-1.0)*px)));
evalcond[1]=((((-0.0328)*x5247))+(((0.134)*x5246))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5248=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5248;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5248);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5249=((1.0)*cj5);
IkReal x5250=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5249)));
j4eval[0]=x5250;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x5249))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x5250);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5251=((1.0)*cj5);
IkReal x5252=((((-1.0)*r01*x5251))+(((-1.0)*r00*sj5)));
j4eval[0]=x5252;
j4eval[1]=IKsign(x5252);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5251))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5253=((1.0)*cj5);
CheckValue<IkReal> x5254=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5253))+(((-1.0)*r00*sj5)))),-1);
if(!x5254.valid){
continue;
}
CheckValue<IkReal> x5255 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5253))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5254.value)))+(x5255.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5256=IKcos(j4);
IkReal x5257=IKsin(j4);
IkReal x5258=((1.0)*sj0);
IkReal x5259=(cj5*r00);
IkReal x5260=(cj5*r10);
IkReal x5261=(cj5*r20);
IkReal x5262=((1.0)*x5256);
IkReal x5263=((1.0)*x5257);
IkReal x5264=(sj5*x5256);
IkReal x5265=(sj5*x5257);
evalcond[0]=(((r22*x5257))+((r21*x5264))+(((-1.0)*x5261*x5262)));
evalcond[1]=(((r21*x5265))+(((-1.0)*r22*x5262))+(((-1.0)*x5261*x5263)));
evalcond[2]=(cj0+(((-1.0)*r12*x5262))+((r11*x5265))+(((-1.0)*x5260*x5263)));
evalcond[3]=((((-1.0)*x5259*x5262))+((r01*x5264))+(((-1.0)*cj0))+((r02*x5257)));
evalcond[4]=(((r12*x5257))+(((-1.0)*x5258))+((r11*x5264))+(((-1.0)*x5260*x5262)));
evalcond[5]=((((-1.0)*x5259*x5263))+((r01*x5265))+(((-1.0)*r02*x5262))+(((-1.0)*x5258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5266=((1.0)*cj5);
CheckValue<IkReal> x5267 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5266)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5267.valid){
continue;
}
CheckValue<IkReal> x5268=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5266)))),-1);
if(!x5268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5267.value)+(((1.5707963267949)*(x5268.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5269=IKcos(j4);
IkReal x5270=IKsin(j4);
IkReal x5271=((1.0)*sj0);
IkReal x5272=(cj5*r00);
IkReal x5273=(cj5*r10);
IkReal x5274=(cj5*r20);
IkReal x5275=((1.0)*x5269);
IkReal x5276=((1.0)*x5270);
IkReal x5277=(sj5*x5269);
IkReal x5278=(sj5*x5270);
evalcond[0]=(((r22*x5270))+(((-1.0)*x5274*x5275))+((r21*x5277)));
evalcond[1]=((((-1.0)*x5274*x5276))+((r21*x5278))+(((-1.0)*r22*x5275)));
evalcond[2]=(cj0+(((-1.0)*r12*x5275))+((r11*x5278))+(((-1.0)*x5273*x5276)));
evalcond[3]=((((-1.0)*x5272*x5275))+((r02*x5270))+((r01*x5277))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5271))+((r11*x5277))+(((-1.0)*x5273*x5275))+((r12*x5270)));
evalcond[5]=((((-1.0)*x5272*x5276))+(((-1.0)*x5271))+((r01*x5278))+(((-1.0)*r02*x5275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5279 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5279.valid){
continue;
}
CheckValue<IkReal> x5280=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5279.value)+(((1.5707963267949)*(x5280.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5281=IKcos(j4);
IkReal x5282=IKsin(j4);
IkReal x5283=((1.0)*sj0);
IkReal x5284=(cj5*r00);
IkReal x5285=(cj5*r10);
IkReal x5286=(cj5*r20);
IkReal x5287=((1.0)*x5281);
IkReal x5288=((1.0)*x5282);
IkReal x5289=(sj5*x5281);
IkReal x5290=(sj5*x5282);
evalcond[0]=(((r22*x5282))+((r21*x5289))+(((-1.0)*x5286*x5287)));
evalcond[1]=((((-1.0)*r22*x5287))+(((-1.0)*x5286*x5288))+((r21*x5290)));
evalcond[2]=(cj0+(((-1.0)*r12*x5287))+((r11*x5290))+(((-1.0)*x5285*x5288)));
evalcond[3]=((((-1.0)*x5284*x5287))+((r02*x5282))+((r01*x5289))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5282))+(((-1.0)*x5283))+((r11*x5289))+(((-1.0)*x5285*x5287)));
evalcond[5]=((((-1.0)*x5284*x5288))+(((-1.0)*x5283))+(((-1.0)*r02*x5287))+((r01*x5290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5291=((1.0)*sj5);
IkReal x5292=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5292))+(((-1.0)*r10*x5291)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5291))+(((-1.0)*r01*x5292)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5292))+(((-1.0)*r10*x5291))))+IKsqr(((((-1.0)*r00*x5291))+(((-1.0)*r01*x5292))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5292))+(((-1.0)*r10*x5291))), ((((-1.0)*r00*x5291))+(((-1.0)*r01*x5292))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5293=IKsin(j0);
IkReal x5294=IKcos(j0);
IkReal x5295=(r10*sj5);
IkReal x5296=(r00*sj5);
IkReal x5297=(cj5*r11);
IkReal x5298=(cj5*r01);
evalcond[0]=(x5298+x5296+x5294);
evalcond[1]=(x5297+x5295+x5293);
evalcond[2]=((((-1.0)*px))+(((-0.134)*x5293))+(((-0.1)*x5296))+(((-0.1)*x5298)));
evalcond[3]=((((0.134)*x5294))+(((-1.0)*py))+(((-0.1)*x5295))+(((-0.1)*x5297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5299=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5299;
j4eval[1]=IKsign(x5299);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5300=((1.0)*cj5);
IkReal x5301=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5300)));
j4eval[0]=x5301;
j4eval[1]=IKsign(x5301);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5300))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5302=cj5*cj5;
IkReal x5303=(r01*r11);
IkReal x5304=((1.0)*r00);
IkReal x5305=(r01*sj5);
IkReal x5306=(((x5302*x5303))+(((-1.0)*r10*x5302*x5304))+(((-1.0)*r02*r12))+((cj5*r10*x5305))+(((-1.0)*x5303))+((cj5*r00*r11*sj5)));
j4eval[0]=x5306;
j4eval[1]=IKsign(x5306);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x5304))+((cj0*x5305))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5307=cj5*cj5;
IkReal x5308=(r01*r11);
IkReal x5309=(cj5*r00);
IkReal x5310=(r01*sj5);
CheckValue<IkReal> x5311=IKPowWithIntegerCheck(IKsign((((r11*sj5*x5309))+((cj5*r10*x5310))+(((-1.0)*r02*r12))+(((-1.0)*r00*r10*x5307))+(((-1.0)*x5308))+((x5307*x5308)))),-1);
if(!x5311.valid){
continue;
}
CheckValue<IkReal> x5312 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5309))+((cj0*x5310)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5311.value)))+(x5312.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5313=IKcos(j4);
IkReal x5314=IKsin(j4);
IkReal x5315=(cj5*r00);
IkReal x5316=(r01*sj5);
IkReal x5317=(cj5*r10);
IkReal x5318=(cj5*r20);
IkReal x5319=((1.0)*x5313);
IkReal x5320=((1.0)*x5314);
IkReal x5321=(sj5*x5314);
IkReal x5322=(sj5*x5313);
evalcond[0]=(((x5313*x5316))+((r02*x5314))+(((-1.0)*x5315*x5319)));
evalcond[1]=(((r11*x5322))+((r12*x5314))+(((-1.0)*x5317*x5319)));
evalcond[2]=((((-1.0)*x5318*x5320))+((r21*x5321))+(((-1.0)*r22*x5319)));
evalcond[3]=((-1.0)+((r22*x5314))+(((-1.0)*x5318*x5319))+((r21*x5322)));
evalcond[4]=((((-1.0)*r12*x5319))+((r11*x5321))+cj0+(((-1.0)*x5317*x5320)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5315*x5320))+((x5314*x5316))+(((-1.0)*r02*x5319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5323=((1.0)*cj5);
CheckValue<IkReal> x5324=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5323)))),-1);
if(!x5324.valid){
continue;
}
CheckValue<IkReal> x5325 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5323)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5324.value)))+(x5325.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5326=IKcos(j4);
IkReal x5327=IKsin(j4);
IkReal x5328=(cj5*r00);
IkReal x5329=(r01*sj5);
IkReal x5330=(cj5*r10);
IkReal x5331=(cj5*r20);
IkReal x5332=((1.0)*x5326);
IkReal x5333=((1.0)*x5327);
IkReal x5334=(sj5*x5327);
IkReal x5335=(sj5*x5326);
evalcond[0]=(((x5326*x5329))+(((-1.0)*x5328*x5332))+((r02*x5327)));
evalcond[1]=((((-1.0)*x5330*x5332))+((r11*x5335))+((r12*x5327)));
evalcond[2]=((((-1.0)*x5331*x5333))+(((-1.0)*r22*x5332))+((r21*x5334)));
evalcond[3]=((-1.0)+(((-1.0)*x5331*x5332))+((r22*x5327))+((r21*x5335)));
evalcond[4]=((((-1.0)*x5330*x5333))+cj0+((r11*x5334))+(((-1.0)*r12*x5332)));
evalcond[5]=((((-1.0)*sj0))+((x5327*x5329))+(((-1.0)*r02*x5332))+(((-1.0)*x5328*x5333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5336=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5336.valid){
continue;
}
CheckValue<IkReal> x5337 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5336.value)))+(x5337.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5338=IKcos(j4);
IkReal x5339=IKsin(j4);
IkReal x5340=(cj5*r00);
IkReal x5341=(r01*sj5);
IkReal x5342=(cj5*r10);
IkReal x5343=(cj5*r20);
IkReal x5344=((1.0)*x5338);
IkReal x5345=((1.0)*x5339);
IkReal x5346=(sj5*x5339);
IkReal x5347=(sj5*x5338);
evalcond[0]=(((x5338*x5341))+((r02*x5339))+(((-1.0)*x5340*x5344)));
evalcond[1]=(((r12*x5339))+((r11*x5347))+(((-1.0)*x5342*x5344)));
evalcond[2]=((((-1.0)*r22*x5344))+((r21*x5346))+(((-1.0)*x5343*x5345)));
evalcond[3]=((-1.0)+((r22*x5339))+((r21*x5347))+(((-1.0)*x5343*x5344)));
evalcond[4]=(cj0+((r11*x5346))+(((-1.0)*r12*x5344))+(((-1.0)*x5342*x5345)));
evalcond[5]=((((-1.0)*r02*x5344))+(((-1.0)*sj0))+((x5339*x5341))+(((-1.0)*x5340*x5345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.78008187832539)*px))+(((2.28319487074043)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.78008187832539)*py))+(((2.28319487074043)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.78008187832539)*px))+(((2.28319487074043)*py))))+IKsqr(((((0.78008187832539)*py))+(((2.28319487074043)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.78008187832539)*px))+(((2.28319487074043)*py))), ((((0.78008187832539)*py))+(((2.28319487074043)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5348=IKcos(j0);
IkReal x5349=IKsin(j0);
evalcond[0]=((((0.3922)*x5348))+(((-1.0)*px))+(((-0.134)*x5349)));
evalcond[1]=((((0.3922)*x5349))+(((-1.0)*py))+(((0.134)*x5348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5350=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5350;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5350);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5351=((1.0)*cj5);
IkReal x5352=((((-1.0)*r01*x5351))+(((-1.0)*r00*sj5)));
j4eval[0]=x5352;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5351)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5352);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5353=((1.0)*cj5);
IkReal x5354=((((-1.0)*r01*x5353))+(((-1.0)*r00*sj5)));
j4eval[0]=x5354;
j4eval[1]=IKsign(x5354);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x5353))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5355=((1.0)*cj5);
CheckValue<IkReal> x5356 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5355))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5356.valid){
continue;
}
CheckValue<IkReal> x5357=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5355))+(((-1.0)*r00*sj5)))),-1);
if(!x5357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5356.value)+(((1.5707963267949)*(x5357.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5358=IKcos(j4);
IkReal x5359=IKsin(j4);
IkReal x5360=((1.0)*sj0);
IkReal x5361=(cj5*r00);
IkReal x5362=(cj5*r10);
IkReal x5363=(cj5*r20);
IkReal x5364=((1.0)*x5358);
IkReal x5365=((1.0)*x5359);
IkReal x5366=(sj5*x5358);
IkReal x5367=(sj5*x5359);
evalcond[0]=(((r22*x5359))+((r21*x5366))+(((-1.0)*x5363*x5364)));
evalcond[1]=((((-1.0)*r22*x5364))+((r21*x5367))+(((-1.0)*x5363*x5365)));
evalcond[2]=(cj0+(((-1.0)*x5362*x5365))+(((-1.0)*r12*x5364))+((r11*x5367)));
evalcond[3]=(((r02*x5359))+(((-1.0)*x5361*x5364))+((r01*x5366))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5359))+(((-1.0)*x5362*x5364))+(((-1.0)*x5360))+((r11*x5366)));
evalcond[5]=((((-1.0)*r02*x5364))+(((-1.0)*x5361*x5365))+(((-1.0)*x5360))+((r01*x5367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5368=((1.0)*cj5);
CheckValue<IkReal> x5369 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5368)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5369.valid){
continue;
}
CheckValue<IkReal> x5370=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5368)))),-1);
if(!x5370.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5369.value)+(((1.5707963267949)*(x5370.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5371=IKcos(j4);
IkReal x5372=IKsin(j4);
IkReal x5373=((1.0)*sj0);
IkReal x5374=(cj5*r00);
IkReal x5375=(cj5*r10);
IkReal x5376=(cj5*r20);
IkReal x5377=((1.0)*x5371);
IkReal x5378=((1.0)*x5372);
IkReal x5379=(sj5*x5371);
IkReal x5380=(sj5*x5372);
evalcond[0]=(((r21*x5379))+(((-1.0)*x5376*x5377))+((r22*x5372)));
evalcond[1]=((((-1.0)*r22*x5377))+(((-1.0)*x5376*x5378))+((r21*x5380)));
evalcond[2]=(cj0+(((-1.0)*r12*x5377))+((r11*x5380))+(((-1.0)*x5375*x5378)));
evalcond[3]=(((r02*x5372))+(((-1.0)*x5374*x5377))+((r01*x5379))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5373))+((r12*x5372))+(((-1.0)*x5375*x5377))+((r11*x5379)));
evalcond[5]=((((-1.0)*x5373))+(((-1.0)*r02*x5377))+((r01*x5380))+(((-1.0)*x5374*x5378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5381 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5381.valid){
continue;
}
CheckValue<IkReal> x5382=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5382.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5381.value)+(((1.5707963267949)*(x5382.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5383=IKcos(j4);
IkReal x5384=IKsin(j4);
IkReal x5385=((1.0)*sj0);
IkReal x5386=(cj5*r00);
IkReal x5387=(cj5*r10);
IkReal x5388=(cj5*r20);
IkReal x5389=((1.0)*x5383);
IkReal x5390=((1.0)*x5384);
IkReal x5391=(sj5*x5383);
IkReal x5392=(sj5*x5384);
evalcond[0]=((((-1.0)*x5388*x5389))+((r21*x5391))+((r22*x5384)));
evalcond[1]=((((-1.0)*x5388*x5390))+((r21*x5392))+(((-1.0)*r22*x5389)));
evalcond[2]=(cj0+((r11*x5392))+(((-1.0)*r12*x5389))+(((-1.0)*x5387*x5390)));
evalcond[3]=(((r02*x5384))+(((-1.0)*x5386*x5389))+((r01*x5391))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x5391))+((r12*x5384))+(((-1.0)*x5387*x5389))+(((-1.0)*x5385)));
evalcond[5]=((((-1.0)*r02*x5389))+((r01*x5392))+(((-1.0)*x5386*x5390))+(((-1.0)*x5385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5393=IKsin(j0);
IkReal x5394=IKcos(j0);
IkReal x5395=((0.1)*sj5);
IkReal x5396=(cj5*r11);
IkReal x5397=(cj5*r01);
evalcond[0]=(((r00*sj5))+x5397+(((-1.0)*x5394)));
evalcond[1]=(((r10*sj5))+x5396+(((-1.0)*x5393)));
evalcond[2]=((((-0.134)*x5393))+(((-1.0)*px))+(((-0.1)*x5397))+(((-1.0)*r00*x5395)));
evalcond[3]=((((-1.0)*py))+(((-1.0)*r10*x5395))+(((-0.1)*x5396))+(((0.134)*x5394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5398=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5398;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5398);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5399=((1.0)*cj5);
IkReal x5400=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5399)));
j4eval[0]=x5400;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x5399)))))+(IKabs(r12)));
j4eval[2]=IKsign(x5400);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5401=cj5*cj5;
IkReal x5402=(r01*r11);
IkReal x5403=((1.0)*r00);
IkReal x5404=(r01*sj5);
IkReal x5405=((((-1.0)*x5402))+(((-1.0)*r10*x5401*x5403))+((x5401*x5402))+(((-1.0)*r02*r12))+((cj5*r10*x5404))+((cj5*r00*r11*sj5)));
j4eval[0]=x5405;
j4eval[1]=IKsign(x5405);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x5403))+((cj0*x5404))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5406=cj5*cj5;
IkReal x5407=(r01*r11);
IkReal x5408=(cj5*r00);
IkReal x5409=(r01*sj5);
CheckValue<IkReal> x5410 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5408))+((cj0*x5409)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5410.valid){
continue;
}
CheckValue<IkReal> x5411=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5407))+((r11*sj5*x5408))+(((-1.0)*r02*r12))+(((-1.0)*r00*r10*x5406))+((cj5*r10*x5409))+((x5406*x5407)))),-1);
if(!x5411.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5410.value)+(((1.5707963267949)*(x5411.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5412=IKcos(j4);
IkReal x5413=IKsin(j4);
IkReal x5414=(cj5*r00);
IkReal x5415=(r01*sj5);
IkReal x5416=(cj5*r10);
IkReal x5417=(cj5*r20);
IkReal x5418=((1.0)*x5412);
IkReal x5419=((1.0)*x5413);
IkReal x5420=(sj5*x5413);
IkReal x5421=(sj5*x5412);
evalcond[0]=((((-1.0)*x5414*x5418))+((r02*x5413))+((x5412*x5415)));
evalcond[1]=((((-1.0)*x5416*x5418))+((r12*x5413))+((r11*x5421)));
evalcond[2]=(((r21*x5420))+(((-1.0)*x5417*x5419))+(((-1.0)*r22*x5418)));
evalcond[3]=((1.0)+((r22*x5413))+((r21*x5421))+(((-1.0)*x5417*x5418)));
evalcond[4]=((((-1.0)*x5416*x5419))+cj0+(((-1.0)*r12*x5418))+((r11*x5420)));
evalcond[5]=((((-1.0)*r02*x5418))+(((-1.0)*sj0))+(((-1.0)*x5414*x5419))+((x5413*x5415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5422=((1.0)*cj5);
CheckValue<IkReal> x5423=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5422)))),-1);
if(!x5423.valid){
continue;
}
CheckValue<IkReal> x5424 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5422)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5424.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5423.value)))+(x5424.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5425=IKcos(j4);
IkReal x5426=IKsin(j4);
IkReal x5427=(cj5*r00);
IkReal x5428=(r01*sj5);
IkReal x5429=(cj5*r10);
IkReal x5430=(cj5*r20);
IkReal x5431=((1.0)*x5425);
IkReal x5432=((1.0)*x5426);
IkReal x5433=(sj5*x5426);
IkReal x5434=(sj5*x5425);
evalcond[0]=((((-1.0)*x5427*x5431))+((r02*x5426))+((x5425*x5428)));
evalcond[1]=(((r12*x5426))+(((-1.0)*x5429*x5431))+((r11*x5434)));
evalcond[2]=((((-1.0)*r22*x5431))+(((-1.0)*x5430*x5432))+((r21*x5433)));
evalcond[3]=((1.0)+((r22*x5426))+(((-1.0)*x5430*x5431))+((r21*x5434)));
evalcond[4]=(cj0+(((-1.0)*r12*x5431))+(((-1.0)*x5429*x5432))+((r11*x5433)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5431))+(((-1.0)*x5427*x5432))+((x5426*x5428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5435 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5435.valid){
continue;
}
CheckValue<IkReal> x5436=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5436.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5435.value)+(((1.5707963267949)*(x5436.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5437=IKcos(j4);
IkReal x5438=IKsin(j4);
IkReal x5439=(cj5*r00);
IkReal x5440=(r01*sj5);
IkReal x5441=(cj5*r10);
IkReal x5442=(cj5*r20);
IkReal x5443=((1.0)*x5437);
IkReal x5444=((1.0)*x5438);
IkReal x5445=(sj5*x5438);
IkReal x5446=(sj5*x5437);
evalcond[0]=(((x5437*x5440))+((r02*x5438))+(((-1.0)*x5439*x5443)));
evalcond[1]=((((-1.0)*x5441*x5443))+((r11*x5446))+((r12*x5438)));
evalcond[2]=((((-1.0)*x5442*x5444))+(((-1.0)*r22*x5443))+((r21*x5445)));
evalcond[3]=((1.0)+((r22*x5438))+(((-1.0)*x5442*x5443))+((r21*x5446)));
evalcond[4]=(cj0+(((-1.0)*r12*x5443))+(((-1.0)*x5441*x5444))+((r11*x5445)));
evalcond[5]=((((-1.0)*sj0))+((x5438*x5440))+(((-1.0)*x5439*x5444))+(((-1.0)*r02*x5443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.78008187832539)*px))+(((-2.28319487074043)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.78008187832539)*py))+(((-2.28319487074043)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.78008187832539)*px))+(((-2.28319487074043)*py))))+IKsqr(((((0.78008187832539)*py))+(((-2.28319487074043)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.78008187832539)*px))+(((-2.28319487074043)*py))), ((((0.78008187832539)*py))+(((-2.28319487074043)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5447=IKcos(j0);
IkReal x5448=IKsin(j0);
evalcond[0]=((((-0.3922)*x5447))+(((-0.134)*x5448))+(((-1.0)*px)));
evalcond[1]=((((0.134)*x5447))+(((-0.3922)*x5448))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5449=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5449;
j4eval[1]=IKsign(x5449);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5450=((1.0)*cj5);
IkReal x5451=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5450)));
j4eval[0]=x5451;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5450)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5451);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5452=cj5*cj5;
IkReal x5453=((1.0)*r20);
IkReal x5454=(r01*r21);
IkReal x5455=(r21*sj5);
IkReal x5456=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5452*x5453))+((cj5*r00*x5455))+(((-1.0)*x5454))+((x5452*x5454)));
j4eval[0]=x5456;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x5453))+((cj0*x5455)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5456);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5457=cj5*cj5;
IkReal x5458=((1.0)*r20);
IkReal x5459=(r01*r21);
IkReal x5460=(r21*sj5);
CheckValue<IkReal> x5461=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x5460))+(((-1.0)*x5459))+(((-1.0)*r00*x5457*x5458))+((x5457*x5459)))),-1);
if(!x5461.valid){
continue;
}
CheckValue<IkReal> x5462 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5458))+((cj0*x5460)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5461.value)))+(x5462.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5463=IKcos(j4);
IkReal x5464=IKsin(j4);
IkReal x5465=(cj5*r00);
IkReal x5466=(cj5*r10);
IkReal x5467=(cj5*r20);
IkReal x5468=((1.0)*x5463);
IkReal x5469=((1.0)*x5464);
IkReal x5470=(sj5*x5463);
IkReal x5471=(sj5*x5464);
evalcond[0]=((((-1.0)*x5467*x5468))+((r22*x5464))+((r21*x5470)));
evalcond[1]=((((-1.0)*x5467*x5469))+((r21*x5471))+(((-1.0)*r22*x5468)));
evalcond[2]=(cj0+((r02*x5464))+((r01*x5470))+(((-1.0)*x5465*x5468)));
evalcond[3]=((((-1.0)*x5466*x5468))+sj0+((r12*x5464))+((r11*x5470)));
evalcond[4]=((((-1.0)*x5466*x5469))+cj0+(((-1.0)*r12*x5468))+((r11*x5471)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5471))+(((-1.0)*r02*x5468))+(((-1.0)*x5465*x5469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5472=((1.0)*cj5);
CheckValue<IkReal> x5473 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5472)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5473.valid){
continue;
}
CheckValue<IkReal> x5474=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5472)))),-1);
if(!x5474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5473.value)+(((1.5707963267949)*(x5474.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5475=IKcos(j4);
IkReal x5476=IKsin(j4);
IkReal x5477=(cj5*r00);
IkReal x5478=(cj5*r10);
IkReal x5479=(cj5*r20);
IkReal x5480=((1.0)*x5475);
IkReal x5481=((1.0)*x5476);
IkReal x5482=(sj5*x5475);
IkReal x5483=(sj5*x5476);
evalcond[0]=((((-1.0)*x5479*x5480))+((r21*x5482))+((r22*x5476)));
evalcond[1]=((((-1.0)*x5479*x5481))+(((-1.0)*r22*x5480))+((r21*x5483)));
evalcond[2]=(cj0+((r01*x5482))+(((-1.0)*x5477*x5480))+((r02*x5476)));
evalcond[3]=(sj0+((r11*x5482))+((r12*x5476))+(((-1.0)*x5478*x5480)));
evalcond[4]=((((-1.0)*r12*x5480))+cj0+((r11*x5483))+(((-1.0)*x5478*x5481)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5483))+(((-1.0)*x5477*x5481))+(((-1.0)*r02*x5480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5484 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5484.valid){
continue;
}
CheckValue<IkReal> x5485=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5485.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5484.value)+(((1.5707963267949)*(x5485.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5486=IKcos(j4);
IkReal x5487=IKsin(j4);
IkReal x5488=(cj5*r00);
IkReal x5489=(cj5*r10);
IkReal x5490=(cj5*r20);
IkReal x5491=((1.0)*x5486);
IkReal x5492=((1.0)*x5487);
IkReal x5493=(sj5*x5486);
IkReal x5494=(sj5*x5487);
evalcond[0]=(((r21*x5493))+((r22*x5487))+(((-1.0)*x5490*x5491)));
evalcond[1]=(((r21*x5494))+(((-1.0)*r22*x5491))+(((-1.0)*x5490*x5492)));
evalcond[2]=(((r01*x5493))+cj0+(((-1.0)*x5488*x5491))+((r02*x5487)));
evalcond[3]=(sj0+(((-1.0)*x5489*x5491))+((r12*x5487))+((r11*x5493)));
evalcond[4]=((((-1.0)*x5489*x5492))+cj0+(((-1.0)*r12*x5491))+((r11*x5494)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5494))+(((-1.0)*x5488*x5492))+(((-1.0)*r02*x5491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5495=cj1*cj1;
IkReal x5496=((500.0)*py);
IkReal x5497=(cj1*sj2);
IkReal x5498=(cj1*sj1);
IkReal x5499=(cj5*r01);
IkReal x5500=(cj2*sj1);
IkReal x5501=(cj2*sj2);
IkReal x5502=(r00*sj5);
IkReal x5503=((50.0)*r10*sj5);
IkReal x5504=((50.0)*cj5*r11);
CheckValue<IkReal> x5505=IKPowWithIntegerCheck(((((196.1)*x5501))+(((196.1)*x5498))+(((-212.5)*sj2*x5495))+(((-212.5)*cj2*x5498))+(((-392.2)*x5495*x5501))+(((-392.2)*x5498*(cj2*cj2)))),-1);
if(!x5505.valid){
continue;
}
CheckValue<IkReal> x5506=IKPowWithIntegerCheck(((((-1.0)*x5497))+(((-1.0)*x5500))),-1);
if(!x5506.valid){
continue;
}
if( IKabs(((x5505.value)*(((((-1.0)*x5496*x5500))+(((-1.0)*x5500*x5504))+(((-1.0)*x5500*x5503))+(((-1.0)*x5497*x5503))+(((-1.0)*x5497*x5504))+(((67.0)*x5499))+(((-1.0)*x5496*x5497))+(((67.0)*x5502)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5506.value)*(((((-1.0)*x5499))+(((-1.0)*x5502)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5505.value)*(((((-1.0)*x5496*x5500))+(((-1.0)*x5500*x5504))+(((-1.0)*x5500*x5503))+(((-1.0)*x5497*x5503))+(((-1.0)*x5497*x5504))+(((67.0)*x5499))+(((-1.0)*x5496*x5497))+(((67.0)*x5502))))))+IKsqr(((x5506.value)*(((((-1.0)*x5499))+(((-1.0)*x5502))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5505.value)*(((((-1.0)*x5496*x5500))+(((-1.0)*x5500*x5504))+(((-1.0)*x5500*x5503))+(((-1.0)*x5497*x5503))+(((-1.0)*x5497*x5504))+(((67.0)*x5499))+(((-1.0)*x5496*x5497))+(((67.0)*x5502))))), ((x5506.value)*(((((-1.0)*x5499))+(((-1.0)*x5502))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5507=IKcos(j0);
IkReal x5508=IKsin(j0);
IkReal x5509=((0.1)*sj5);
IkReal x5510=(cj5*r11);
IkReal x5511=(cj5*r01);
IkReal x5512=((0.425)*cj1);
IkReal x5513=((1.0)*cj2);
IkReal x5514=(cj1*cj2);
IkReal x5515=((1.0)*cj1*sj2);
IkReal x5516=(sj1*x5507);
IkReal x5517=((0.3922)*x5508);
evalcond[0]=(((r00*sj5))+x5511+(((-1.0)*x5513*x5516))+(((-1.0)*x5507*x5515)));
evalcond[1]=(x5510+((r10*sj5))+(((-1.0)*x5508*x5515))+(((-1.0)*sj1*x5508*x5513)));
evalcond[2]=((((-1.0)*r00*x5509))+(((-0.3922)*sj2*x5516))+(((0.3922)*x5507*x5514))+(((-0.1)*x5511))+(((-1.0)*px))+(((-0.134)*x5508))+((x5507*x5512)));
evalcond[3]=((((-1.0)*r10*x5509))+((x5508*x5512))+(((-0.1)*x5510))+(((-1.0)*py))+(((-1.0)*sj1*sj2*x5517))+(((0.134)*x5507))+((x5514*x5517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5518=((1.0)*cj5);
IkReal x5519=((((-1.0)*r01*x5518))+(((-1.0)*r00*sj5)));
j4eval[0]=x5519;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5518))))));
j4eval[2]=IKsign(x5519);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5520=((1.0)*cj5);
IkReal x5521=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5520)));
j4eval[0]=x5521;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5520))))));
j4eval[2]=IKsign(x5521);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5522=((1.0)*sj0);
IkReal x5523=((1.0)*cj0);
IkReal x5524=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5524;
j4eval[1]=((IKabs(((((-1.0)*r02*x5523))+(((-1.0)*r12*x5522)))))+(IKabs(((((-1.0)*r01*sj5*x5523))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x5522))))));
j4eval[2]=IKsign(x5524);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5525=((-1.0)*r20);
IkReal x5527 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5527)==0){
continue;
}
IkReal x5526=pow(x5527,-0.5);
CheckValue<IkReal> x5528 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5525),IKFAST_ATAN2_MAGTHRESH);
if(!x5528.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5528.value));
IkReal gconst115=(r21*x5526);
IkReal gconst116=(x5525*x5526);
CheckValue<IkReal> x5529 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5529.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5529.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5530=((-1.0)*r20);
IkReal x5531=x5526;
CheckValue<IkReal> x5533 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5530),IKFAST_ATAN2_MAGTHRESH);
if(!x5533.valid){
continue;
}
IkReal x5532=((-1.0)*(x5533.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5532;
IkReal gconst114=x5532;
IkReal gconst115=(r21*x5531);
IkReal gconst116=(x5530*x5531);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5534=((-1.0)*r20);
IkReal x5535=x5526;
CheckValue<IkReal> x5537 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5534),IKFAST_ATAN2_MAGTHRESH);
if(!x5537.valid){
continue;
}
IkReal x5536=((-1.0)*(x5537.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5536;
IkReal gconst114=x5536;
IkReal gconst115=(r21*x5535);
IkReal gconst116=(x5534*x5535);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5538=((-1.0)*r20);
IkReal x5539=x5526;
CheckValue<IkReal> x5541 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5538),IKFAST_ATAN2_MAGTHRESH);
if(!x5541.valid){
continue;
}
IkReal x5540=((-1.0)*(x5541.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5540;
IkReal gconst114=x5540;
IkReal gconst115=(r21*x5539);
IkReal gconst116=(x5538*x5539);
IkReal x5542=((1.0)*(r22*r22));
CheckValue<IkReal> x5546=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5542))),-1);
if(!x5546.valid){
continue;
}
IkReal x5543=x5546.value;
IkReal x5544=((1.0)*x5543);
IkReal x5545=((((-1.0)*x5544*(r20*r20*r20*r20)))+(((-1.0)*x5544*(r21*r21*r21*r21)))+(((-2.0)*x5543*(r20*r20)*(r21*r21)))+(((-1.0)*x5542)));
j4eval[0]=x5545;
j4eval[1]=IKsign(x5545);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5547=(cj2*sj1);
IkReal x5548=(gconst115*r21);
IkReal x5549=(cj1*sj2);
IkReal x5550=((1.0)*gconst116*r20);
CheckValue<IkReal> x5551=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst116*r20*x5550))+(((-1.0)*(r22*r22)))+(((2.0)*gconst116*r20*x5548))+(((-1.0)*(x5548*x5548))))),-1);
if(!x5551.valid){
continue;
}
CheckValue<IkReal> x5552 = IKatan2WithCheck(IkReal((((r22*x5547))+((r22*x5549)))),IkReal(((((-1.0)*x5549*x5550))+((x5547*x5548))+((x5548*x5549))+(((-1.0)*x5547*x5550)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5552.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5551.value)))+(x5552.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5553=IKsin(j4);
IkReal x5554=IKcos(j4);
IkReal x5555=(sj1*sj2);
IkReal x5556=((1.0)*x5554);
IkReal x5557=((1.0)*cj1*cj2);
IkReal x5558=(gconst115*x5553);
IkReal x5559=(gconst115*x5554);
IkReal x5560=((1.0)*gconst116*x5553);
evalcond[0]=(((r21*x5558))+(((-1.0)*r22*x5556))+(((-1.0)*r20*x5560)));
evalcond[1]=(cj0+((r11*x5558))+(((-1.0)*r10*x5560))+(((-1.0)*r12*x5556)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5558))+(((-1.0)*r00*x5560))+(((-1.0)*r02*x5556)));
evalcond[3]=(((cj2*sj1))+((r21*x5559))+(((-1.0)*gconst116*r20*x5556))+((cj1*sj2))+((r22*x5553)));
evalcond[4]=(((r01*x5559))+((r02*x5553))+((cj0*x5555))+(((-1.0)*cj0*x5557))+(((-1.0)*gconst116*r00*x5556)));
evalcond[5]=((((-1.0)*sj0*x5557))+((r11*x5559))+(((-1.0)*gconst116*r10*x5556))+((sj0*x5555))+((r12*x5553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5561=((1.0)*gconst116);
CheckValue<IkReal> x5562=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5561))+(((-1.0)*gconst115*r10)))),-1);
if(!x5562.valid){
continue;
}
CheckValue<IkReal> x5563 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*r20*sj0*x5561)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5562.value)))+(x5563.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5564=IKsin(j4);
IkReal x5565=IKcos(j4);
IkReal x5566=(sj1*sj2);
IkReal x5567=((1.0)*x5565);
IkReal x5568=((1.0)*cj1*cj2);
IkReal x5569=(gconst115*x5564);
IkReal x5570=(gconst115*x5565);
IkReal x5571=((1.0)*gconst116*x5564);
evalcond[0]=((((-1.0)*r22*x5567))+((r21*x5569))+(((-1.0)*r20*x5571)));
evalcond[1]=((((-1.0)*r12*x5567))+cj0+(((-1.0)*r10*x5571))+((r11*x5569)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5571))+(((-1.0)*r02*x5567))+((r01*x5569)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5564))+((r21*x5570))+(((-1.0)*gconst116*r20*x5567)));
evalcond[4]=(((r02*x5564))+((cj0*x5566))+(((-1.0)*gconst116*r00*x5567))+(((-1.0)*cj0*x5568))+((r01*x5570)));
evalcond[5]=((((-1.0)*sj0*x5568))+((r11*x5570))+(((-1.0)*gconst116*r10*x5567))+((sj0*x5566))+((r12*x5564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5572=((1.0)*gconst116);
CheckValue<IkReal> x5573 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5572))+((cj0*gconst115*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5573.valid){
continue;
}
CheckValue<IkReal> x5574=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x5572)))),-1);
if(!x5574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5573.value)+(((1.5707963267949)*(x5574.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5575=IKsin(j4);
IkReal x5576=IKcos(j4);
IkReal x5577=(sj1*sj2);
IkReal x5578=((1.0)*x5576);
IkReal x5579=((1.0)*cj1*cj2);
IkReal x5580=(gconst115*x5575);
IkReal x5581=(gconst115*x5576);
IkReal x5582=((1.0)*gconst116*x5575);
evalcond[0]=(((r21*x5580))+(((-1.0)*r20*x5582))+(((-1.0)*r22*x5578)));
evalcond[1]=(cj0+(((-1.0)*r12*x5578))+((r11*x5580))+(((-1.0)*r10*x5582)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5578))+(((-1.0)*r00*x5582))+((r01*x5580)));
evalcond[3]=(((cj2*sj1))+((r21*x5581))+((cj1*sj2))+((r22*x5575))+(((-1.0)*gconst116*r20*x5578)));
evalcond[4]=(((r02*x5575))+((cj0*x5577))+(((-1.0)*gconst116*r00*x5578))+(((-1.0)*cj0*x5579))+((r01*x5581)));
evalcond[5]=((((-1.0)*sj0*x5579))+((r11*x5581))+((r12*x5575))+((sj0*x5577))+(((-1.0)*gconst116*r10*x5578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5583=((-1.0)*r21);
IkReal x5585 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5585)==0){
continue;
}
IkReal x5584=pow(x5585,-0.5);
CheckValue<IkReal> x5586 = IKatan2WithCheck(IkReal(x5583),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5586.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5586.value))));
IkReal gconst118=(x5583*x5584);
IkReal gconst119=((1.0)*r20*x5584);
CheckValue<IkReal> x5587 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5587.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5587.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5588=((-1.0)*r21);
CheckValue<IkReal> x5591 = IKatan2WithCheck(IkReal(x5588),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5591.valid){
continue;
}
IkReal x5589=((1.0)*(x5591.value));
IkReal x5590=x5584;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5589)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5589)));
IkReal gconst118=(x5588*x5590);
IkReal gconst119=((1.0)*r20*x5590);
IkReal x5592=r22*r22;
IkReal x5593=((1.0)*x5592);
CheckValue<IkReal> x5597=IKPowWithIntegerCheck(((-1.0)+x5592),-1);
if(!x5597.valid){
continue;
}
IkReal x5594=x5597.value;
if((((1.0)+(((-1.0)*x5593)))) < -0.00001)
continue;
IkReal x5595=IKsqrt(((1.0)+(((-1.0)*x5593))));
IkReal x5596=(cj0*x5594*x5595);
j4eval[0]=((IKabs((x5596+(((-1.0)*x5593*x5596)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5598=((-1.0)*r21);
CheckValue<IkReal> x5601 = IKatan2WithCheck(IkReal(x5598),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5601.valid){
continue;
}
IkReal x5599=((1.0)*(x5601.value));
IkReal x5600=x5584;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5599)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5599)));
IkReal gconst118=(x5598*x5600);
IkReal gconst119=((1.0)*r20*x5600);
IkReal x5602=r22*r22;
IkReal x5603=((1.0)*x5602);
CheckValue<IkReal> x5607=IKPowWithIntegerCheck(((-1.0)+x5602),-1);
if(!x5607.valid){
continue;
}
IkReal x5604=x5607.value;
if((((1.0)+(((-1.0)*x5603)))) < -0.00001)
continue;
IkReal x5605=IKsqrt(((1.0)+(((-1.0)*x5603))));
IkReal x5606=(sj0*x5604*x5605);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x5606+(((-1.0)*x5603*x5606))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5608=((-1.0)*r21);
CheckValue<IkReal> x5611 = IKatan2WithCheck(IkReal(x5608),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5611.valid){
continue;
}
IkReal x5609=((1.0)*(x5611.value));
IkReal x5610=x5584;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5609)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5609)));
IkReal gconst118=(x5608*x5610);
IkReal gconst119=((1.0)*r20*x5610);
IkReal x5612=r22*r22;
IkReal x5613=(r12*sj0);
IkReal x5614=(cj0*r02);
CheckValue<IkReal> x5618=IKPowWithIntegerCheck(((-1.0)+x5612),-1);
if(!x5618.valid){
continue;
}
IkReal x5615=x5618.value;
if((((1.0)+(((-1.0)*x5612)))) < -0.00001)
continue;
IkReal x5616=IKsqrt(((1.0)+(((-1.0)*x5612))));
IkReal x5617=(r22*x5615*x5616);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x5613))+(((-1.0)*x5614)))))+(IKabs((((x5613*x5617))+((x5614*x5617))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5619=((1.0)*sj0);
IkReal x5620=((1.0)*gconst118);
CheckValue<IkReal> x5621 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5619))+(((-1.0)*cj0*r02)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*cj0*r01*x5620))+(((-1.0)*gconst118*r11*x5619))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5621.valid){
continue;
}
CheckValue<IkReal> x5622=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x5620)))),-1);
if(!x5622.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5621.value)+(((1.5707963267949)*(x5622.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5623=IKsin(j4);
IkReal x5624=IKcos(j4);
IkReal x5625=(gconst118*r01);
IkReal x5626=(sj1*sj2);
IkReal x5627=(gconst119*r20);
IkReal x5628=(gconst119*r10);
IkReal x5629=(gconst119*r00);
IkReal x5630=(gconst118*r21);
IkReal x5631=(gconst118*r11);
IkReal x5632=((1.0)*x5624);
IkReal x5633=((1.0)*cj1*cj2);
IkReal x5634=((1.0)*x5623);
evalcond[0]=(((x5623*x5630))+(((-1.0)*x5627*x5634))+(((-1.0)*r22*x5632)));
evalcond[1]=(((x5623*x5631))+(((-1.0)*r12*x5632))+cj0+(((-1.0)*x5628*x5634)));
evalcond[2]=((((-1.0)*x5629*x5634))+(((-1.0)*sj0))+(((-1.0)*r02*x5632))+((x5623*x5625)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x5624*x5630))+(((-1.0)*x5627*x5632))+((r22*x5623)));
evalcond[4]=(((cj0*x5626))+((x5624*x5625))+(((-1.0)*x5629*x5632))+((r02*x5623))+(((-1.0)*cj0*x5633)));
evalcond[5]=((((-1.0)*sj0*x5633))+(((-1.0)*x5628*x5632))+((sj0*x5626))+((x5624*x5631))+((r12*x5623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5635=((1.0)*gconst119);
CheckValue<IkReal> x5636=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5635))+(((-1.0)*gconst118*r10)))),-1);
if(!x5636.valid){
continue;
}
CheckValue<IkReal> x5637 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5635))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5636.value)))+(x5637.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5638=IKsin(j4);
IkReal x5639=IKcos(j4);
IkReal x5640=(gconst118*r01);
IkReal x5641=(sj1*sj2);
IkReal x5642=(gconst119*r20);
IkReal x5643=(gconst119*r10);
IkReal x5644=(gconst119*r00);
IkReal x5645=(gconst118*r21);
IkReal x5646=(gconst118*r11);
IkReal x5647=((1.0)*x5639);
IkReal x5648=((1.0)*cj1*cj2);
IkReal x5649=((1.0)*x5638);
evalcond[0]=((((-1.0)*r22*x5647))+(((-1.0)*x5642*x5649))+((x5638*x5645)));
evalcond[1]=(cj0+(((-1.0)*r12*x5647))+((x5638*x5646))+(((-1.0)*x5643*x5649)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5644*x5649))+(((-1.0)*r02*x5647))+((x5638*x5640)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5642*x5647))+((x5639*x5645))+((cj1*sj2))+((r22*x5638)));
evalcond[4]=(((cj0*x5641))+((x5639*x5640))+(((-1.0)*x5644*x5647))+(((-1.0)*cj0*x5648))+((r02*x5638)));
evalcond[5]=(((r12*x5638))+((x5639*x5646))+(((-1.0)*sj0*x5648))+((sj0*x5641))+(((-1.0)*x5643*x5647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5650=((1.0)*gconst119);
CheckValue<IkReal> x5651 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x5650)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5651.valid){
continue;
}
CheckValue<IkReal> x5652=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x5650)))),-1);
if(!x5652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5651.value)+(((1.5707963267949)*(x5652.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5653=IKsin(j4);
IkReal x5654=IKcos(j4);
IkReal x5655=(gconst118*r01);
IkReal x5656=(sj1*sj2);
IkReal x5657=(gconst119*r20);
IkReal x5658=(gconst119*r10);
IkReal x5659=(gconst119*r00);
IkReal x5660=(gconst118*r21);
IkReal x5661=(gconst118*r11);
IkReal x5662=((1.0)*x5654);
IkReal x5663=((1.0)*cj1*cj2);
IkReal x5664=((1.0)*x5653);
evalcond[0]=((((-1.0)*r22*x5662))+(((-1.0)*x5657*x5664))+((x5653*x5660)));
evalcond[1]=(cj0+(((-1.0)*r12*x5662))+((x5653*x5661))+(((-1.0)*x5658*x5664)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5662))+(((-1.0)*x5659*x5664))+((x5653*x5655)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5657*x5662))+((cj1*sj2))+((r22*x5653))+((x5654*x5660)));
evalcond[4]=(((cj0*x5656))+((x5654*x5655))+(((-1.0)*x5659*x5662))+(((-1.0)*cj0*x5663))+((r02*x5653)));
evalcond[5]=(((sj0*x5656))+((r12*x5653))+(((-1.0)*sj0*x5663))+((x5654*x5661))+(((-1.0)*x5658*x5662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5665=((-1.0)*r10);
IkReal x5667 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5667)==0){
continue;
}
IkReal x5666=pow(x5667,-0.5);
CheckValue<IkReal> x5668 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5665),IKFAST_ATAN2_MAGTHRESH);
if(!x5668.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5668.value));
IkReal gconst121=(r11*x5666);
IkReal gconst122=(x5665*x5666);
CheckValue<IkReal> x5669 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5669.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5669.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5670=((-1.0)*r10);
IkReal x5671=x5666;
CheckValue<IkReal> x5673 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5670),IKFAST_ATAN2_MAGTHRESH);
if(!x5673.valid){
continue;
}
IkReal x5672=((-1.0)*(x5673.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5672;
IkReal gconst120=x5672;
IkReal gconst121=(r11*x5671);
IkReal gconst122=(x5670*x5671);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5674=((1.0)*sj0);
IkReal x5675=((1.0)*gconst121);
CheckValue<IkReal> x5676=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r21))+(((-1.0)*r20*x5675)))),-1);
if(!x5676.valid){
continue;
}
CheckValue<IkReal> x5677 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5674))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst121*r11*x5674))+((cj0*gconst122*r00))+(((-1.0)*cj0*r01*x5675))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5676.value)))+(x5677.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5678=IKsin(j4);
IkReal x5679=IKcos(j4);
IkReal x5680=(gconst121*r11);
IkReal x5681=(sj1*sj2);
IkReal x5682=(gconst122*r00);
IkReal x5683=(gconst122*r10);
IkReal x5684=(gconst122*r20);
IkReal x5685=((1.0)*x5679);
IkReal x5686=((1.0)*cj1*cj2);
IkReal x5687=((1.0)*x5678);
IkReal x5688=(gconst121*x5678);
IkReal x5689=(gconst121*x5679);
evalcond[0]=((((-1.0)*r22*x5685))+(((-1.0)*x5684*x5687))+((r21*x5688)));
evalcond[1]=(cj0+(((-1.0)*x5683*x5687))+((x5678*x5680))+(((-1.0)*r12*x5685)));
evalcond[2]=((((-1.0)*r02*x5685))+(((-1.0)*sj0))+(((-1.0)*x5682*x5687))+((r01*x5688)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5684*x5685))+((r22*x5678))+((r21*x5689)));
evalcond[4]=(((r02*x5678))+(((-1.0)*cj0*x5686))+((cj0*x5681))+(((-1.0)*x5682*x5685))+((r01*x5689)));
evalcond[5]=((((-1.0)*sj0*x5686))+(((-1.0)*x5683*x5685))+((sj0*x5681))+((x5679*x5680))+((r12*x5678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5690=((1.0)*gconst122);
CheckValue<IkReal> x5691 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5690))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5691.valid){
continue;
}
CheckValue<IkReal> x5692=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x5690)))),-1);
if(!x5692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5691.value)+(((1.5707963267949)*(x5692.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5693=IKsin(j4);
IkReal x5694=IKcos(j4);
IkReal x5695=(gconst121*r11);
IkReal x5696=(sj1*sj2);
IkReal x5697=(gconst122*r00);
IkReal x5698=(gconst122*r10);
IkReal x5699=(gconst122*r20);
IkReal x5700=((1.0)*x5694);
IkReal x5701=((1.0)*cj1*cj2);
IkReal x5702=((1.0)*x5693);
IkReal x5703=(gconst121*x5693);
IkReal x5704=(gconst121*x5694);
evalcond[0]=((((-1.0)*r22*x5700))+(((-1.0)*x5699*x5702))+((r21*x5703)));
evalcond[1]=((((-1.0)*r12*x5700))+((x5693*x5695))+cj0+(((-1.0)*x5698*x5702)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5697*x5702))+((r01*x5703))+(((-1.0)*r02*x5700)));
evalcond[3]=(((cj2*sj1))+((r22*x5693))+((cj1*sj2))+(((-1.0)*x5699*x5700))+((r21*x5704)));
evalcond[4]=((((-1.0)*x5697*x5700))+((r02*x5693))+((r01*x5704))+(((-1.0)*cj0*x5701))+((cj0*x5696)));
evalcond[5]=(((x5694*x5695))+(((-1.0)*x5698*x5700))+((sj0*x5696))+(((-1.0)*sj0*x5701))+((r12*x5693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5705=((-1.0)*r11);
IkReal x5707 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5707)==0){
continue;
}
IkReal x5706=pow(x5707,-0.5);
CheckValue<IkReal> x5708 = IKatan2WithCheck(IkReal(x5705),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5708.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5708.value))));
IkReal gconst124=(x5705*x5706);
IkReal gconst125=((1.0)*r10*x5706);
CheckValue<IkReal> x5709 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5709.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5709.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5710=((-1.0)*r11);
CheckValue<IkReal> x5713 = IKatan2WithCheck(IkReal(x5710),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5713.valid){
continue;
}
IkReal x5711=((1.0)*(x5713.value));
IkReal x5712=x5706;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5711)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5711)));
IkReal gconst124=(x5710*x5712);
IkReal gconst125=((1.0)*r10*x5712);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5714=((-1.0)*r11);
CheckValue<IkReal> x5717 = IKatan2WithCheck(IkReal(x5714),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5717.valid){
continue;
}
IkReal x5715=((1.0)*(x5717.value));
IkReal x5716=x5706;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5715)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5715)));
IkReal gconst124=(x5714*x5716);
IkReal gconst125=((1.0)*r10*x5716);
IkReal x5718=r12*r12;
IkReal x5719=((1.0)*sj0);
IkReal x5720=(cj0*r02);
IkReal x5721=x5706;
j4eval[0]=((IKabs((((r12*x5720*x5721))+(((-1.0)*x5719*x5721))+((sj0*x5718*x5721)))))+(IKabs(((((-1.0)*r12*x5719))+(((-1.0)*x5720))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5722=((-1.0)*r11);
CheckValue<IkReal> x5725 = IKatan2WithCheck(IkReal(x5722),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5725.valid){
continue;
}
IkReal x5723=((1.0)*(x5725.value));
IkReal x5724=x5706;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5723)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5723)));
IkReal gconst124=(x5722*x5724);
IkReal gconst125=((1.0)*r10*x5724);
IkReal x5726=r12*r12;
IkReal x5727=((1.0)+(((-1.0)*x5726)));
IkReal x5728=(cj2*r22*sj1);
IkReal x5729=(cj1*r22*sj2);
CheckValue<IkReal> x5736=IKPowWithIntegerCheck(x5727,-1);
if(!x5736.valid){
continue;
}
IkReal x5730=x5736.value;
CheckValue<IkReal> x5737=IKPowWithIntegerCheck(((-1.0)+x5726),-1);
if(!x5737.valid){
continue;
}
IkReal x5731=x5737.value;
IkReal x5732=((1.0)*x5730);
if((x5727) < -0.00001)
continue;
IkReal x5733=IKsqrt(x5727);
IkReal x5734=((1.0)*r12*x5731*x5733);
IkReal x5735=((((-2.0)*r10*r11*r20*r21*x5730))+(((-1.0)*(r22*r22)))+(((-1.0)*x5732*(r10*r10)*(r20*r20)))+(((-1.0)*x5732*(r11*r11)*(r21*r21))));
j4eval[0]=x5735;
j4eval[1]=IKsign(x5735);
j4eval[2]=((IKabs(((((-1.0)*x5729*x5734))+(((-1.0)*x5728*x5734)))))+(IKabs((x5728+x5729))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5738=(gconst124*r21);
IkReal x5739=(cj1*sj2);
IkReal x5740=(cj2*sj1);
IkReal x5741=(gconst125*r20);
CheckValue<IkReal> x5742=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5738*x5738)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5741*x5741)))+(((2.0)*x5738*x5741)))),-1);
if(!x5742.valid){
continue;
}
CheckValue<IkReal> x5743 = IKatan2WithCheck(IkReal((((r22*x5740))+((r22*x5739)))),IkReal((((x5738*x5739))+(((-1.0)*x5739*x5741))+((x5738*x5740))+(((-1.0)*x5740*x5741)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5743.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5742.value)))+(x5743.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5744=IKsin(j4);
IkReal x5745=IKcos(j4);
IkReal x5746=(sj1*sj2);
IkReal x5747=(gconst125*r20);
IkReal x5748=(gconst124*r01);
IkReal x5749=(gconst125*r00);
IkReal x5750=(gconst125*r10);
IkReal x5751=((1.0)*x5745);
IkReal x5752=((1.0)*cj1*cj2);
IkReal x5753=((1.0)*x5744);
IkReal x5754=(gconst124*x5744);
IkReal x5755=(gconst124*x5745);
evalcond[0]=(((r21*x5754))+(((-1.0)*x5747*x5753))+(((-1.0)*r22*x5751)));
evalcond[1]=(cj0+(((-1.0)*r12*x5751))+((r11*x5754))+(((-1.0)*x5750*x5753)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5749*x5753))+((x5744*x5748))+(((-1.0)*r02*x5751)));
evalcond[3]=(((cj2*sj1))+((r21*x5755))+((r22*x5744))+((cj1*sj2))+(((-1.0)*x5747*x5751)));
evalcond[4]=((((-1.0)*x5749*x5751))+(((-1.0)*cj0*x5752))+((cj0*x5746))+((x5745*x5748))+((r02*x5744)));
evalcond[5]=((((-1.0)*sj0*x5752))+((sj0*x5746))+((r11*x5755))+((r12*x5744))+(((-1.0)*x5750*x5751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5756=((1.0)*sj0);
IkReal x5757=((1.0)*cj0);
CheckValue<IkReal> x5758 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5756))+(((-1.0)*r02*x5757)))),IkReal(((((-1.0)*gconst124*r11*x5756))+((gconst125*r10*sj0))+((cj0*gconst125*r00))+(((-1.0)*gconst124*r01*x5757)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5758.valid){
continue;
}
CheckValue<IkReal> x5759=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x5759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5758.value)+(((1.5707963267949)*(x5759.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5760=IKsin(j4);
IkReal x5761=IKcos(j4);
IkReal x5762=(sj1*sj2);
IkReal x5763=(gconst125*r20);
IkReal x5764=(gconst124*r01);
IkReal x5765=(gconst125*r00);
IkReal x5766=(gconst125*r10);
IkReal x5767=((1.0)*x5761);
IkReal x5768=((1.0)*cj1*cj2);
IkReal x5769=((1.0)*x5760);
IkReal x5770=(gconst124*x5760);
IkReal x5771=(gconst124*x5761);
evalcond[0]=(((r21*x5770))+(((-1.0)*x5763*x5769))+(((-1.0)*r22*x5767)));
evalcond[1]=(cj0+(((-1.0)*r12*x5767))+(((-1.0)*x5766*x5769))+((r11*x5770)));
evalcond[2]=((((-1.0)*sj0))+((x5760*x5764))+(((-1.0)*r02*x5767))+(((-1.0)*x5765*x5769)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5760))+((r21*x5771))+(((-1.0)*x5763*x5767)));
evalcond[4]=((((-1.0)*cj0*x5768))+((cj0*x5762))+((r02*x5760))+((x5761*x5764))+(((-1.0)*x5765*x5767)));
evalcond[5]=((((-1.0)*x5766*x5767))+(((-1.0)*sj0*x5768))+((r11*x5771))+((r12*x5760))+((sj0*x5762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5772=((1.0)*gconst125);
CheckValue<IkReal> x5773=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x5772)))),-1);
if(!x5773.valid){
continue;
}
CheckValue<IkReal> x5774 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5772))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5774.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5773.value)))+(x5774.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5775=IKsin(j4);
IkReal x5776=IKcos(j4);
IkReal x5777=(sj1*sj2);
IkReal x5778=(gconst125*r20);
IkReal x5779=(gconst124*r01);
IkReal x5780=(gconst125*r00);
IkReal x5781=(gconst125*r10);
IkReal x5782=((1.0)*x5776);
IkReal x5783=((1.0)*cj1*cj2);
IkReal x5784=((1.0)*x5775);
IkReal x5785=(gconst124*x5775);
IkReal x5786=(gconst124*x5776);
evalcond[0]=(((r21*x5785))+(((-1.0)*x5778*x5784))+(((-1.0)*r22*x5782)));
evalcond[1]=(cj0+((r11*x5785))+(((-1.0)*r12*x5782))+(((-1.0)*x5781*x5784)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5780*x5784))+((x5775*x5779))+(((-1.0)*r02*x5782)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5786))+((r22*x5775))+(((-1.0)*x5778*x5782)));
evalcond[4]=(((x5776*x5779))+((cj0*x5777))+(((-1.0)*x5780*x5782))+((r02*x5775))+(((-1.0)*cj0*x5783)));
evalcond[5]=(((r11*x5786))+((r12*x5775))+(((-1.0)*x5781*x5782))+(((-1.0)*sj0*x5783))+((sj0*x5777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5787=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5787;
j4eval[1]=IKsign(x5787);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5788=((1.0)*cj5);
IkReal x5789=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5788)));
j4eval[0]=x5789;
j4eval[1]=((IKabs(((((-1.0)*r20*x5788))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5789);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5790=cj5*cj5;
IkReal x5791=r11*r11;
IkReal x5792=(cj5*r10);
IkReal x5793=(r11*sj5);
IkReal x5794=((((-1.0)*x5790*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x5792*x5793))+(((-1.0)*x5791))+((x5790*x5791)));
j4eval[0]=x5794;
j4eval[1]=IKsign(x5794);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5792))+x5793))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5795=cj5*cj5;
IkReal x5796=r11*r11;
IkReal x5797=(cj5*r10);
IkReal x5798=(r11*sj5);
CheckValue<IkReal> x5799 = IKatan2WithCheck(IkReal(((((-1.0)*x5797))+x5798)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5799.valid){
continue;
}
CheckValue<IkReal> x5800=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5795*(r10*r10)))+(((2.0)*x5797*x5798))+((x5795*x5796))+(((-1.0)*(r12*r12)))+(((-1.0)*x5796)))),-1);
if(!x5800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5799.value)+(((1.5707963267949)*(x5800.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5801=IKcos(j4);
IkReal x5802=IKsin(j4);
IkReal x5803=(cj5*r00);
IkReal x5804=(cj5*r10);
IkReal x5805=(r21*sj5);
IkReal x5806=(cj5*r20);
IkReal x5807=((1.0)*x5801);
IkReal x5808=((1.0)*x5802);
IkReal x5809=(sj5*x5802);
IkReal x5810=(sj5*x5801);
evalcond[0]=((((-1.0)*x5804*x5807))+((r11*x5810))+((r12*x5802)));
evalcond[1]=((((-1.0)*r22*x5807))+(((-1.0)*x5806*x5808))+((x5802*x5805)));
evalcond[2]=(((r01*x5809))+(((-1.0)*x5803*x5808))+(((-1.0)*r02*x5807)));
evalcond[3]=((1.0)+(((-1.0)*x5804*x5808))+(((-1.0)*r12*x5807))+((r11*x5809)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x5802))+(((-1.0)*x5806*x5807))+((x5801*x5805)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x5802))+(((-1.0)*x5803*x5807))+((r01*x5810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5811=((1.0)*cj5);
CheckValue<IkReal> x5812=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5811)))),-1);
if(!x5812.valid){
continue;
}
CheckValue<IkReal> x5813 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x5811)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5813.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5812.value)))+(x5813.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5814=IKcos(j4);
IkReal x5815=IKsin(j4);
IkReal x5816=(cj5*r00);
IkReal x5817=(cj5*r10);
IkReal x5818=(r21*sj5);
IkReal x5819=(cj5*r20);
IkReal x5820=((1.0)*x5814);
IkReal x5821=((1.0)*x5815);
IkReal x5822=(sj5*x5815);
IkReal x5823=(sj5*x5814);
evalcond[0]=((((-1.0)*x5817*x5820))+((r11*x5823))+((r12*x5815)));
evalcond[1]=((((-1.0)*r22*x5820))+((x5815*x5818))+(((-1.0)*x5819*x5821)));
evalcond[2]=((((-1.0)*r02*x5820))+((r01*x5822))+(((-1.0)*x5816*x5821)));
evalcond[3]=((1.0)+(((-1.0)*x5817*x5821))+((r11*x5822))+(((-1.0)*r12*x5820)));
evalcond[4]=(((cj2*sj1))+((x5814*x5818))+((r22*x5815))+((cj1*sj2))+(((-1.0)*x5819*x5820)));
evalcond[5]=(((r02*x5815))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x5823))+(((-1.0)*x5816*x5820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5824=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5824.valid){
continue;
}
CheckValue<IkReal> x5825 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5824.value)))+(x5825.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5826=IKcos(j4);
IkReal x5827=IKsin(j4);
IkReal x5828=(cj5*r00);
IkReal x5829=(cj5*r10);
IkReal x5830=(r21*sj5);
IkReal x5831=(cj5*r20);
IkReal x5832=((1.0)*x5826);
IkReal x5833=((1.0)*x5827);
IkReal x5834=(sj5*x5827);
IkReal x5835=(sj5*x5826);
evalcond[0]=(((r12*x5827))+((r11*x5835))+(((-1.0)*x5829*x5832)));
evalcond[1]=((((-1.0)*r22*x5832))+(((-1.0)*x5831*x5833))+((x5827*x5830)));
evalcond[2]=((((-1.0)*r02*x5832))+(((-1.0)*x5828*x5833))+((r01*x5834)));
evalcond[3]=((1.0)+((r11*x5834))+(((-1.0)*r12*x5832))+(((-1.0)*x5829*x5833)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5831*x5832))+((x5826*x5830))+((r22*x5827)));
evalcond[5]=(((r02*x5827))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5828*x5832))+((r01*x5835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5836=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5836;
j4eval[1]=IKsign(x5836);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5837=((1.0)*cj5);
IkReal x5838=((((-1.0)*r21*x5837))+(((-1.0)*r20*sj5)));
j4eval[0]=x5838;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5837))))));
j4eval[2]=IKsign(x5838);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5839=cj5*cj5;
IkReal x5840=r11*r11;
IkReal x5841=(r11*sj5);
IkReal x5842=(cj5*r10);
IkReal x5843=((r12*r12)+(((-1.0)*x5839*x5840))+(((-2.0)*x5841*x5842))+x5840+((x5839*(r10*r10))));
j4eval[0]=x5843;
j4eval[1]=IKsign(x5843);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5842))+x5841))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5844=cj5*cj5;
IkReal x5845=r11*r11;
IkReal x5846=(cj5*r10);
IkReal x5847=(r11*sj5);
CheckValue<IkReal> x5848 = IKatan2WithCheck(IkReal(((((-1.0)*x5846))+x5847)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5848.valid){
continue;
}
CheckValue<IkReal> x5849=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x5844*x5845))+(((-2.0)*x5846*x5847))+((x5844*(r10*r10)))+x5845)),-1);
if(!x5849.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5848.value)+(((1.5707963267949)*(x5849.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5850=IKcos(j4);
IkReal x5851=IKsin(j4);
IkReal x5852=(cj5*r00);
IkReal x5853=(cj5*r10);
IkReal x5854=(r21*sj5);
IkReal x5855=(cj5*r20);
IkReal x5856=((1.0)*x5850);
IkReal x5857=((1.0)*x5851);
IkReal x5858=(sj5*x5851);
IkReal x5859=(sj5*x5850);
evalcond[0]=((((-1.0)*x5853*x5856))+((r11*x5859))+((r12*x5851)));
evalcond[1]=(((x5851*x5854))+(((-1.0)*x5855*x5857))+(((-1.0)*r22*x5856)));
evalcond[2]=(((r01*x5858))+(((-1.0)*x5852*x5857))+(((-1.0)*r02*x5856)));
evalcond[3]=((-1.0)+(((-1.0)*x5853*x5857))+((r11*x5858))+(((-1.0)*r12*x5856)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5855*x5856))+((r22*x5851))+((x5850*x5854)));
evalcond[5]=(((r01*x5859))+(((-1.0)*sj1*sj2))+((r02*x5851))+(((-1.0)*x5852*x5856))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5860=((1.0)*cj5);
CheckValue<IkReal> x5861=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5860))+(((-1.0)*r20*sj5)))),-1);
if(!x5861.valid){
continue;
}
CheckValue<IkReal> x5862 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x5860)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5862.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5861.value)))+(x5862.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5863=IKcos(j4);
IkReal x5864=IKsin(j4);
IkReal x5865=(cj5*r00);
IkReal x5866=(cj5*r10);
IkReal x5867=(r21*sj5);
IkReal x5868=(cj5*r20);
IkReal x5869=((1.0)*x5863);
IkReal x5870=((1.0)*x5864);
IkReal x5871=(sj5*x5864);
IkReal x5872=(sj5*x5863);
evalcond[0]=((((-1.0)*x5866*x5869))+((r11*x5872))+((r12*x5864)));
evalcond[1]=((((-1.0)*r22*x5869))+(((-1.0)*x5868*x5870))+((x5864*x5867)));
evalcond[2]=((((-1.0)*r02*x5869))+(((-1.0)*x5865*x5870))+((r01*x5871)));
evalcond[3]=((-1.0)+(((-1.0)*x5866*x5870))+((r11*x5871))+(((-1.0)*r12*x5869)));
evalcond[4]=(((cj2*sj1))+((r22*x5864))+((cj1*sj2))+(((-1.0)*x5868*x5869))+((x5863*x5867)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x5864))+((cj1*cj2))+((r01*x5872))+(((-1.0)*x5865*x5869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5873 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5873.valid){
continue;
}
CheckValue<IkReal> x5874=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5873.value)+(((1.5707963267949)*(x5874.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5875=IKcos(j4);
IkReal x5876=IKsin(j4);
IkReal x5877=(cj5*r00);
IkReal x5878=(cj5*r10);
IkReal x5879=(r21*sj5);
IkReal x5880=(cj5*r20);
IkReal x5881=((1.0)*x5875);
IkReal x5882=((1.0)*x5876);
IkReal x5883=(sj5*x5876);
IkReal x5884=(sj5*x5875);
evalcond[0]=(((r11*x5884))+((r12*x5876))+(((-1.0)*x5878*x5881)));
evalcond[1]=((((-1.0)*x5880*x5882))+(((-1.0)*r22*x5881))+((x5876*x5879)));
evalcond[2]=(((r01*x5883))+(((-1.0)*r02*x5881))+(((-1.0)*x5877*x5882)));
evalcond[3]=((-1.0)+((r11*x5883))+(((-1.0)*r12*x5881))+(((-1.0)*x5878*x5882)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x5876))+(((-1.0)*x5880*x5881))+((x5875*x5879)));
evalcond[5]=(((r01*x5884))+(((-1.0)*sj1*sj2))+((r02*x5876))+((cj1*cj2))+(((-1.0)*x5877*x5881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5885=((-1.0)*r00);
IkReal x5887 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5887)==0){
continue;
}
IkReal x5886=pow(x5887,-0.5);
CheckValue<IkReal> x5888 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5885),IKFAST_ATAN2_MAGTHRESH);
if(!x5888.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5888.value));
IkReal gconst127=(r01*x5886);
IkReal gconst128=(x5885*x5886);
CheckValue<IkReal> x5889 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5889.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5889.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5890=((-1.0)*r00);
IkReal x5891=x5886;
CheckValue<IkReal> x5893 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5890),IKFAST_ATAN2_MAGTHRESH);
if(!x5893.valid){
continue;
}
IkReal x5892=((-1.0)*(x5893.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x5892;
IkReal gconst126=x5892;
IkReal gconst127=(r01*x5891);
IkReal gconst128=(x5890*x5891);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5894=((1.0)*sj0);
IkReal x5895=((1.0)*gconst127);
CheckValue<IkReal> x5896 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5894))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst127*r11*x5894))+((gconst128*r10*sj0))+((cj0*gconst128*r00))+(((-1.0)*cj0*r01*x5895)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5896.valid){
continue;
}
CheckValue<IkReal> x5897=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5895))+(((-1.0)*gconst128*r21)))),-1);
if(!x5897.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5896.value)+(((1.5707963267949)*(x5897.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5898=IKsin(j4);
IkReal x5899=IKcos(j4);
IkReal x5900=(gconst127*r01);
IkReal x5901=(sj1*sj2);
IkReal x5902=(gconst128*r10);
IkReal x5903=(gconst128*r00);
IkReal x5904=(gconst128*r20);
IkReal x5905=((1.0)*x5899);
IkReal x5906=((1.0)*cj1*cj2);
IkReal x5907=((1.0)*x5898);
IkReal x5908=(gconst127*x5899);
IkReal x5909=(gconst127*x5898);
evalcond[0]=((((-1.0)*x5904*x5907))+(((-1.0)*r22*x5905))+((r21*x5909)));
evalcond[1]=((((-1.0)*x5902*x5907))+(((-1.0)*r12*x5905))+cj0+((r11*x5909)));
evalcond[2]=((((-1.0)*sj0))+((x5898*x5900))+(((-1.0)*x5903*x5907))+(((-1.0)*r02*x5905)));
evalcond[3]=(((r22*x5898))+((cj2*sj1))+(((-1.0)*x5904*x5905))+((cj1*sj2))+((r21*x5908)));
evalcond[4]=((((-1.0)*cj0*x5906))+(((-1.0)*x5903*x5905))+((r02*x5898))+((x5899*x5900))+((cj0*x5901)));
evalcond[5]=((((-1.0)*x5902*x5905))+((sj0*x5901))+(((-1.0)*sj0*x5906))+((r12*x5898))+((r11*x5908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5910=((1.0)*gconst128);
CheckValue<IkReal> x5911 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x5910)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5911.valid){
continue;
}
CheckValue<IkReal> x5912=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5910))+(((-1.0)*gconst127*r10)))),-1);
if(!x5912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5911.value)+(((1.5707963267949)*(x5912.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5913=IKsin(j4);
IkReal x5914=IKcos(j4);
IkReal x5915=(gconst127*r01);
IkReal x5916=(sj1*sj2);
IkReal x5917=(gconst128*r10);
IkReal x5918=(gconst128*r00);
IkReal x5919=(gconst128*r20);
IkReal x5920=((1.0)*x5914);
IkReal x5921=((1.0)*cj1*cj2);
IkReal x5922=((1.0)*x5913);
IkReal x5923=(gconst127*x5914);
IkReal x5924=(gconst127*x5913);
evalcond[0]=((((-1.0)*r22*x5920))+((r21*x5924))+(((-1.0)*x5919*x5922)));
evalcond[1]=(cj0+((r11*x5924))+(((-1.0)*x5917*x5922))+(((-1.0)*r12*x5920)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5918*x5922))+(((-1.0)*r02*x5920))+((x5913*x5915)));
evalcond[3]=(((cj2*sj1))+((r22*x5913))+((cj1*sj2))+((r21*x5923))+(((-1.0)*x5919*x5920)));
evalcond[4]=((((-1.0)*x5918*x5920))+((r02*x5913))+((x5914*x5915))+(((-1.0)*cj0*x5921))+((cj0*x5916)));
evalcond[5]=(((r12*x5913))+((sj0*x5916))+(((-1.0)*sj0*x5921))+((r11*x5923))+(((-1.0)*x5917*x5920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5925=((-1.0)*r01);
IkReal x5927 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5927)==0){
continue;
}
IkReal x5926=pow(x5927,-0.5);
CheckValue<IkReal> x5928 = IKatan2WithCheck(IkReal(x5925),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5928.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5928.value))));
IkReal gconst130=(x5925*x5926);
IkReal gconst131=((1.0)*r00*x5926);
CheckValue<IkReal> x5929 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5929.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5929.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x5930=((-1.0)*r01);
CheckValue<IkReal> x5933 = IKatan2WithCheck(IkReal(x5930),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5933.valid){
continue;
}
IkReal x5931=((1.0)*(x5933.value));
IkReal x5932=x5926;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5931)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5931)));
IkReal gconst130=(x5930*x5932);
IkReal gconst131=((1.0)*r00*x5932);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5934=((-1.0)*r01);
CheckValue<IkReal> x5937 = IKatan2WithCheck(IkReal(x5934),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5937.valid){
continue;
}
IkReal x5935=((1.0)*(x5937.value));
IkReal x5936=x5926;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5935)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5935)));
IkReal gconst130=(x5934*x5936);
IkReal gconst131=((1.0)*r00*x5936);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5938=((-1.0)*r01);
CheckValue<IkReal> x5941 = IKatan2WithCheck(IkReal(x5938),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5941.valid){
continue;
}
IkReal x5939=((1.0)*(x5941.value));
IkReal x5940=x5926;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5939)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5939)));
IkReal gconst130=(x5938*x5940);
IkReal gconst131=((1.0)*r00*x5940);
IkReal x5942=r02*r02;
IkReal x5943=(r12*sj0);
IkReal x5944=((1.0)*cj0);
IkReal x5945=x5926;
j4eval[0]=((IKabs(((((-1.0)*x5944*x5945))+((cj0*x5942*x5945))+((r02*x5943*x5945)))))+(IKabs(((((-1.0)*x5943))+(((-1.0)*r02*x5944))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5946=((1.0)*sj0);
IkReal x5947=((1.0)*gconst130);
CheckValue<IkReal> x5948 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5946))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x5947))+(((-1.0)*gconst130*r11*x5946))+((gconst131*r10*sj0))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5948.valid){
continue;
}
CheckValue<IkReal> x5949=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5947))+(((-1.0)*gconst131*r21)))),-1);
if(!x5949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5948.value)+(((1.5707963267949)*(x5949.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5950=IKsin(j4);
IkReal x5951=IKcos(j4);
IkReal x5952=(gconst131*r10);
IkReal x5953=(sj1*sj2);
IkReal x5954=(gconst131*r20);
IkReal x5955=(gconst131*r00);
IkReal x5956=((1.0)*x5951);
IkReal x5957=((1.0)*cj1*cj2);
IkReal x5958=(gconst130*x5950);
IkReal x5959=((1.0)*x5950);
IkReal x5960=(gconst130*x5951);
evalcond[0]=(((r21*x5958))+(((-1.0)*r22*x5956))+(((-1.0)*x5954*x5959)));
evalcond[1]=(cj0+((r11*x5958))+(((-1.0)*x5952*x5959))+(((-1.0)*r12*x5956)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5956))+(((-1.0)*x5955*x5959))+((r01*x5958)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5960))+(((-1.0)*x5954*x5956))+((r22*x5950)));
evalcond[4]=(((r01*x5960))+((r02*x5950))+((cj0*x5953))+(((-1.0)*cj0*x5957))+(((-1.0)*x5955*x5956)));
evalcond[5]=(((sj0*x5953))+((r12*x5950))+(((-1.0)*x5952*x5956))+((r11*x5960))+(((-1.0)*sj0*x5957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5961=((1.0)*gconst131);
CheckValue<IkReal> x5962 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x5961)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5962.valid){
continue;
}
CheckValue<IkReal> x5963=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5961))+(((-1.0)*gconst130*r10)))),-1);
if(!x5963.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5962.value)+(((1.5707963267949)*(x5963.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5964=IKsin(j4);
IkReal x5965=IKcos(j4);
IkReal x5966=(gconst131*r10);
IkReal x5967=(sj1*sj2);
IkReal x5968=(gconst131*r20);
IkReal x5969=(gconst131*r00);
IkReal x5970=((1.0)*x5965);
IkReal x5971=((1.0)*cj1*cj2);
IkReal x5972=(gconst130*x5964);
IkReal x5973=((1.0)*x5964);
IkReal x5974=(gconst130*x5965);
evalcond[0]=((((-1.0)*r22*x5970))+((r21*x5972))+(((-1.0)*x5968*x5973)));
evalcond[1]=(cj0+(((-1.0)*r12*x5970))+((r11*x5972))+(((-1.0)*x5966*x5973)));
evalcond[2]=((((-1.0)*r02*x5970))+(((-1.0)*sj0))+((r01*x5972))+(((-1.0)*x5969*x5973)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5964))+((r21*x5974))+(((-1.0)*x5968*x5970)));
evalcond[4]=(((r02*x5964))+((cj0*x5967))+((r01*x5974))+(((-1.0)*cj0*x5971))+(((-1.0)*x5969*x5970)));
evalcond[5]=((((-1.0)*sj0*x5971))+((r11*x5974))+(((-1.0)*x5966*x5970))+((r12*x5964))+((sj0*x5967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5975=((1.0)*gconst131);
CheckValue<IkReal> x5976 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x5975)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5976.valid){
continue;
}
CheckValue<IkReal> x5977=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r00))+(((-1.0)*r01*x5975)))),-1);
if(!x5977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5976.value)+(((1.5707963267949)*(x5977.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5978=IKsin(j4);
IkReal x5979=IKcos(j4);
IkReal x5980=(gconst131*r10);
IkReal x5981=(sj1*sj2);
IkReal x5982=(gconst131*r20);
IkReal x5983=(gconst131*r00);
IkReal x5984=((1.0)*x5979);
IkReal x5985=((1.0)*cj1*cj2);
IkReal x5986=(gconst130*x5978);
IkReal x5987=((1.0)*x5978);
IkReal x5988=(gconst130*x5979);
evalcond[0]=(((r21*x5986))+(((-1.0)*x5982*x5987))+(((-1.0)*r22*x5984)));
evalcond[1]=((((-1.0)*x5980*x5987))+(((-1.0)*r12*x5984))+cj0+((r11*x5986)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5984))+((r01*x5986))+(((-1.0)*x5983*x5987)));
evalcond[3]=(((cj2*sj1))+((r21*x5988))+((cj1*sj2))+((r22*x5978))+(((-1.0)*x5982*x5984)));
evalcond[4]=(((cj0*x5981))+(((-1.0)*cj0*x5985))+((r02*x5978))+((r01*x5988))+(((-1.0)*x5983*x5984)));
evalcond[5]=((((-1.0)*x5980*x5984))+((r11*x5988))+((sj0*x5981))+(((-1.0)*sj0*x5985))+((r12*x5978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5989=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5989;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x5989);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5990=((1.0)*cj5);
IkReal x5991=((((-1.0)*r11*x5990))+(((-1.0)*r10*sj5)));
j4eval[0]=x5991;
j4eval[1]=((IKabs(((((-1.0)*r20*x5990))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5991);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5992=cj5*cj5;
IkReal x5993=r01*r01;
IkReal x5994=(cj5*r00);
IkReal x5995=(r01*sj5);
IkReal x5996=((((-1.0)*x5992*x5993))+(((-2.0)*x5994*x5995))+(r02*r02)+x5993+((x5992*(r00*r00))));
j4eval[0]=x5996;
j4eval[1]=IKsign(x5996);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x5994))+x5995))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5997=cj5*cj5;
IkReal x5998=r01*r01;
IkReal x5999=(r01*sj5);
IkReal x6000=(cj5*r00);
CheckValue<IkReal> x6001=IKPowWithIntegerCheck(IKsign((((x5997*(r00*r00)))+(((-1.0)*x5997*x5998))+(r02*r02)+x5998+(((-2.0)*x5999*x6000)))),-1);
if(!x6001.valid){
continue;
}
CheckValue<IkReal> x6002 = IKatan2WithCheck(IkReal((x5999+(((-1.0)*x6000)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6001.value)))+(x6002.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6003=IKcos(j4);
IkReal x6004=IKsin(j4);
IkReal x6005=(cj5*r00);
IkReal x6006=(cj5*r10);
IkReal x6007=(r21*sj5);
IkReal x6008=(cj5*r20);
IkReal x6009=((1.0)*x6003);
IkReal x6010=((1.0)*x6004);
IkReal x6011=(sj5*x6004);
IkReal x6012=(sj5*x6003);
evalcond[0]=(((r01*x6012))+((r02*x6004))+(((-1.0)*x6005*x6009)));
evalcond[1]=((((-1.0)*x6008*x6010))+((x6004*x6007))+(((-1.0)*r22*x6009)));
evalcond[2]=(((r11*x6011))+(((-1.0)*x6006*x6010))+(((-1.0)*r12*x6009)));
evalcond[3]=((-1.0)+((r01*x6011))+(((-1.0)*x6005*x6010))+(((-1.0)*r02*x6009)));
evalcond[4]=(((cj2*sj1))+((r22*x6004))+((cj1*sj2))+((x6003*x6007))+(((-1.0)*x6008*x6009)));
evalcond[5]=(((r12*x6004))+((r11*x6012))+(((-1.0)*x6006*x6009))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6013=((1.0)*cj5);
CheckValue<IkReal> x6014=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6013)))),-1);
if(!x6014.valid){
continue;
}
CheckValue<IkReal> x6015 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6013)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6015.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6014.value)))+(x6015.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6016=IKcos(j4);
IkReal x6017=IKsin(j4);
IkReal x6018=(cj5*r00);
IkReal x6019=(cj5*r10);
IkReal x6020=(r21*sj5);
IkReal x6021=(cj5*r20);
IkReal x6022=((1.0)*x6016);
IkReal x6023=((1.0)*x6017);
IkReal x6024=(sj5*x6017);
IkReal x6025=(sj5*x6016);
evalcond[0]=(((r01*x6025))+((r02*x6017))+(((-1.0)*x6018*x6022)));
evalcond[1]=((((-1.0)*x6021*x6023))+(((-1.0)*r22*x6022))+((x6017*x6020)));
evalcond[2]=((((-1.0)*x6019*x6023))+((r11*x6024))+(((-1.0)*r12*x6022)));
evalcond[3]=((-1.0)+((r01*x6024))+(((-1.0)*r02*x6022))+(((-1.0)*x6018*x6023)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6021*x6022))+((x6016*x6020))+((r22*x6017)));
evalcond[5]=(((r12*x6017))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6019*x6022))+((r11*x6025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6026=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6026.valid){
continue;
}
CheckValue<IkReal> x6027 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6026.value)))+(x6027.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6028=IKcos(j4);
IkReal x6029=IKsin(j4);
IkReal x6030=(cj5*r00);
IkReal x6031=(cj5*r10);
IkReal x6032=(r21*sj5);
IkReal x6033=(cj5*r20);
IkReal x6034=((1.0)*x6028);
IkReal x6035=((1.0)*x6029);
IkReal x6036=(sj5*x6029);
IkReal x6037=(sj5*x6028);
evalcond[0]=(((r02*x6029))+(((-1.0)*x6030*x6034))+((r01*x6037)));
evalcond[1]=(((x6029*x6032))+(((-1.0)*x6033*x6035))+(((-1.0)*r22*x6034)));
evalcond[2]=((((-1.0)*x6031*x6035))+((r11*x6036))+(((-1.0)*r12*x6034)));
evalcond[3]=((-1.0)+(((-1.0)*x6030*x6035))+((r01*x6036))+(((-1.0)*r02*x6034)));
evalcond[4]=(((cj2*sj1))+((x6028*x6032))+((cj1*sj2))+((r22*x6029))+(((-1.0)*x6033*x6034)));
evalcond[5]=((((-1.0)*x6031*x6034))+((r11*x6037))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6038=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6038;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6038);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6039=((1.0)*cj5);
IkReal x6040=((((-1.0)*r21*x6039))+(((-1.0)*r20*sj5)));
j4eval[0]=x6040;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x6039))))));
j4eval[2]=IKsign(x6040);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6041=(r01*sj5);
IkReal x6042=(cj1*sj2);
IkReal x6043=(cj2*sj1);
IkReal x6044=((1.0)*r02);
IkReal x6045=((1.0)*cj5*r00);
IkReal x6046=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6046;
j4eval[1]=((IKabs((((x6041*x6042))+((x6041*x6043))+(((-1.0)*x6042*x6045))+(((-1.0)*x6043*x6045)))))+(IKabs(((((-1.0)*x6042*x6044))+(((-1.0)*x6043*x6044))))));
j4eval[2]=IKsign(x6046);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6047=(r01*sj5);
IkReal x6048=(cj1*sj2);
IkReal x6049=(cj2*sj1);
IkReal x6050=((1.0)*r02);
IkReal x6051=((1.0)*cj5*r00);
CheckValue<IkReal> x6052 = IKatan2WithCheck(IkReal(((((-1.0)*x6048*x6051))+((x6047*x6048))+((x6047*x6049))+(((-1.0)*x6049*x6051)))),IkReal(((((-1.0)*x6048*x6050))+(((-1.0)*x6049*x6050)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6052.valid){
continue;
}
CheckValue<IkReal> x6053=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6052.value)+(((1.5707963267949)*(x6053.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6054=IKcos(j4);
IkReal x6055=IKsin(j4);
IkReal x6056=(cj5*r00);
IkReal x6057=(cj5*r10);
IkReal x6058=(r21*sj5);
IkReal x6059=(cj5*r20);
IkReal x6060=((1.0)*x6054);
IkReal x6061=((1.0)*x6055);
IkReal x6062=(sj5*x6055);
IkReal x6063=(sj5*x6054);
evalcond[0]=(((r01*x6063))+((r02*x6055))+(((-1.0)*x6056*x6060)));
evalcond[1]=((((-1.0)*r22*x6060))+((x6055*x6058))+(((-1.0)*x6059*x6061)));
evalcond[2]=((((-1.0)*x6057*x6061))+((r11*x6062))+(((-1.0)*r12*x6060)));
evalcond[3]=((1.0)+((r01*x6062))+(((-1.0)*r02*x6060))+(((-1.0)*x6056*x6061)));
evalcond[4]=(((cj2*sj1))+((r22*x6055))+((cj1*sj2))+(((-1.0)*x6059*x6060))+((x6054*x6058)));
evalcond[5]=(((r12*x6055))+(((-1.0)*x6057*x6060))+(((-1.0)*sj1*sj2))+((r11*x6063))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6064=((1.0)*cj5);
CheckValue<IkReal> x6065=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6064))+(((-1.0)*r20*sj5)))),-1);
if(!x6065.valid){
continue;
}
CheckValue<IkReal> x6066 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x6064))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6066.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6065.value)))+(x6066.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6067=IKcos(j4);
IkReal x6068=IKsin(j4);
IkReal x6069=(cj5*r00);
IkReal x6070=(cj5*r10);
IkReal x6071=(r21*sj5);
IkReal x6072=(cj5*r20);
IkReal x6073=((1.0)*x6067);
IkReal x6074=((1.0)*x6068);
IkReal x6075=(sj5*x6068);
IkReal x6076=(sj5*x6067);
evalcond[0]=(((r01*x6076))+((r02*x6068))+(((-1.0)*x6069*x6073)));
evalcond[1]=(((x6068*x6071))+(((-1.0)*x6072*x6074))+(((-1.0)*r22*x6073)));
evalcond[2]=(((r11*x6075))+(((-1.0)*r12*x6073))+(((-1.0)*x6070*x6074)));
evalcond[3]=((1.0)+((r01*x6075))+(((-1.0)*r02*x6073))+(((-1.0)*x6069*x6074)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6072*x6073))+((r22*x6068))+((x6067*x6071)));
evalcond[5]=(((r11*x6076))+(((-1.0)*sj1*sj2))+((r12*x6068))+((cj1*cj2))+(((-1.0)*x6070*x6073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6077 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6077.valid){
continue;
}
CheckValue<IkReal> x6078=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6077.value)+(((1.5707963267949)*(x6078.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6079=IKcos(j4);
IkReal x6080=IKsin(j4);
IkReal x6081=(cj5*r00);
IkReal x6082=(cj5*r10);
IkReal x6083=(r21*sj5);
IkReal x6084=(cj5*r20);
IkReal x6085=((1.0)*x6079);
IkReal x6086=((1.0)*x6080);
IkReal x6087=(sj5*x6080);
IkReal x6088=(sj5*x6079);
evalcond[0]=(((r01*x6088))+(((-1.0)*x6081*x6085))+((r02*x6080)));
evalcond[1]=((((-1.0)*r22*x6085))+(((-1.0)*x6084*x6086))+((x6080*x6083)));
evalcond[2]=((((-1.0)*r12*x6085))+(((-1.0)*x6082*x6086))+((r11*x6087)));
evalcond[3]=((1.0)+((r01*x6087))+(((-1.0)*r02*x6085))+(((-1.0)*x6081*x6086)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6079*x6083))+((r22*x6080))+(((-1.0)*x6084*x6085)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x6082*x6085))+((r12*x6080))+((cj1*cj2))+((r11*x6088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6089=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6089);
rxp1_1=(px*r21);
rxp1_2=(r11*x6089);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6090=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6090);
rxp1_1=(px*r21);
rxp1_2=(r11*x6090);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6091=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6091);
rxp1_1=(px*r21);
rxp1_2=(r11*x6091);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6094=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6094.valid){
continue;
}
IkReal x6092=x6094.value;
IkReal x6093=(sj0*x6092);
cj4array[0]=((((-1.0)*sj1*sj2*x6093))+((cj1*cj2*x6093)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6095=IKsin(j4);
IkReal x6096=IKcos(j4);
IkReal x6097=(r21*sj5);
IkReal x6098=((1.0)*cj5*r20);
evalcond[0]=(r02*x6095);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6096)));
evalcond[2]=(((x6095*x6097))+(((-1.0)*x6095*x6098)));
evalcond[3]=((((-1.0)*cj5*r10*x6095))+((r11*sj5*x6095)));
evalcond[4]=(((cj2*sj1))+((x6096*x6097))+((cj1*sj2))+(((-1.0)*x6096*x6098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6101=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6101.valid){
continue;
}
IkReal x6099=x6101.value;
IkReal x6100=((1.0)*x6099);
cj4array[0]=((((-1.0)*cj2*sj1*x6100))+(((-1.0)*cj1*sj2*x6100)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6102=IKsin(j4);
IkReal x6103=IKcos(j4);
IkReal x6104=((1.0)*sj0);
IkReal x6105=((1.0)*cj5);
IkReal x6106=(sj5*x6102);
evalcond[0]=(r02*x6102);
evalcond[1]=((((-1.0)*x6104))+(((-1.0)*r02*x6103)));
evalcond[2]=(((r21*x6106))+(((-1.0)*r20*x6102*x6105)));
evalcond[3]=(((r11*x6106))+(((-1.0)*r10*x6102*x6105)));
evalcond[4]=((((-1.0)*cj1*cj2*x6104))+((r11*sj5*x6103))+(((-1.0)*r10*x6103*x6105))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6107=IKPowWithIntegerCheck(r02,-1);
if(!x6107.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6107.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6108=IKsin(j4);
IkReal x6109=IKcos(j4);
IkReal x6110=(r21*sj5);
IkReal x6111=((1.0)*cj5);
IkReal x6112=(r11*sj5);
evalcond[0]=(r02*x6108);
evalcond[1]=((((-1.0)*r20*x6108*x6111))+((x6108*x6110)));
evalcond[2]=(((x6108*x6112))+(((-1.0)*r10*x6108*x6111)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x6109*x6110))+(((-1.0)*r20*x6109*x6111)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+(((-1.0)*r10*x6109*x6111))+((x6109*x6112))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6113=((1.0)*sj0);
IkReal x6114=((1.0)*cj0);
CheckValue<IkReal> x6115 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6113))+(((-1.0)*r02*x6114)))),IkReal(((((-1.0)*r01*sj5*x6114))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6113)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6115.valid){
continue;
}
CheckValue<IkReal> x6116=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6115.value)+(((1.5707963267949)*(x6116.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6117=IKsin(j4);
IkReal x6118=IKcos(j4);
IkReal x6119=(cj5*r00);
IkReal x6120=(cj5*r10);
IkReal x6121=(r21*sj5);
IkReal x6122=(sj1*sj2);
IkReal x6123=(cj5*r20);
IkReal x6124=((1.0)*x6118);
IkReal x6125=((1.0)*cj1*cj2);
IkReal x6126=((1.0)*x6117);
IkReal x6127=(sj5*x6117);
IkReal x6128=(sj5*x6118);
evalcond[0]=((((-1.0)*r22*x6124))+(((-1.0)*x6123*x6126))+((x6117*x6121)));
evalcond[1]=(cj0+(((-1.0)*r12*x6124))+(((-1.0)*x6120*x6126))+((r11*x6127)));
evalcond[2]=(((r01*x6127))+(((-1.0)*sj0))+(((-1.0)*r02*x6124))+(((-1.0)*x6119*x6126)));
evalcond[3]=(((cj2*sj1))+((x6118*x6121))+((cj1*sj2))+((r22*x6117))+(((-1.0)*x6123*x6124)));
evalcond[4]=(((r01*x6128))+((r02*x6117))+((cj0*x6122))+(((-1.0)*x6119*x6124))+(((-1.0)*cj0*x6125)));
evalcond[5]=((((-1.0)*sj0*x6125))+((sj0*x6122))+((r12*x6117))+(((-1.0)*x6120*x6124))+((r11*x6128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6129=((1.0)*cj5);
CheckValue<IkReal> x6130 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6129)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6130.valid){
continue;
}
CheckValue<IkReal> x6131=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6129)))),-1);
if(!x6131.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6130.value)+(((1.5707963267949)*(x6131.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6132=IKsin(j4);
IkReal x6133=IKcos(j4);
IkReal x6134=(cj5*r00);
IkReal x6135=(cj5*r10);
IkReal x6136=(r21*sj5);
IkReal x6137=(sj1*sj2);
IkReal x6138=(cj5*r20);
IkReal x6139=((1.0)*x6133);
IkReal x6140=((1.0)*cj1*cj2);
IkReal x6141=((1.0)*x6132);
IkReal x6142=(sj5*x6132);
IkReal x6143=(sj5*x6133);
evalcond[0]=((((-1.0)*r22*x6139))+(((-1.0)*x6138*x6141))+((x6132*x6136)));
evalcond[1]=(cj0+((r11*x6142))+(((-1.0)*x6135*x6141))+(((-1.0)*r12*x6139)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6142))+(((-1.0)*x6134*x6141))+(((-1.0)*r02*x6139)));
evalcond[3]=(((cj2*sj1))+((r22*x6132))+((cj1*sj2))+((x6133*x6136))+(((-1.0)*x6138*x6139)));
evalcond[4]=(((cj0*x6137))+(((-1.0)*x6134*x6139))+((r01*x6143))+((r02*x6132))+(((-1.0)*cj0*x6140)));
evalcond[5]=((((-1.0)*sj0*x6140))+((r11*x6143))+((r12*x6132))+(((-1.0)*x6135*x6139))+((sj0*x6137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6144=((1.0)*cj5);
CheckValue<IkReal> x6145 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6144)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6145.valid){
continue;
}
CheckValue<IkReal> x6146=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6144))+(((-1.0)*r00*sj5)))),-1);
if(!x6146.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6145.value)+(((1.5707963267949)*(x6146.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6147=IKsin(j4);
IkReal x6148=IKcos(j4);
IkReal x6149=(cj5*r00);
IkReal x6150=(cj5*r10);
IkReal x6151=(r21*sj5);
IkReal x6152=(sj1*sj2);
IkReal x6153=(cj5*r20);
IkReal x6154=((1.0)*x6148);
IkReal x6155=((1.0)*cj1*cj2);
IkReal x6156=((1.0)*x6147);
IkReal x6157=(sj5*x6147);
IkReal x6158=(sj5*x6148);
evalcond[0]=((((-1.0)*r22*x6154))+((x6147*x6151))+(((-1.0)*x6153*x6156)));
evalcond[1]=(cj0+(((-1.0)*x6150*x6156))+(((-1.0)*r12*x6154))+((r11*x6157)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6154))+(((-1.0)*x6149*x6156))+((r01*x6157)));
evalcond[3]=(((cj2*sj1))+((x6148*x6151))+((cj1*sj2))+((r22*x6147))+(((-1.0)*x6153*x6154)));
evalcond[4]=(((cj0*x6152))+(((-1.0)*cj0*x6155))+(((-1.0)*x6149*x6154))+((r02*x6147))+((r01*x6158)));
evalcond[5]=(((sj0*x6152))+(((-1.0)*x6150*x6154))+((r12*x6147))+((r11*x6158))+(((-1.0)*sj0*x6155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6159=r21*r21;
IkReal x6160=cj5*cj5;
IkReal x6161=(cj2*sj1);
IkReal x6162=(cj1*sj2);
IkReal x6163=(r21*sj5);
IkReal x6164=((1.0)*cj5*r20);
CheckValue<IkReal> x6165=IKPowWithIntegerCheck(IKsign((((x6159*x6160))+(((2.0)*cj5*r20*x6163))+(((-1.0)*(r22*r22)))+(((-1.0)*x6160*(r20*r20)))+(((-1.0)*x6159)))),-1);
if(!x6165.valid){
continue;
}
CheckValue<IkReal> x6166 = IKatan2WithCheck(IkReal((((r22*x6161))+((r22*x6162)))),IkReal((((x6162*x6163))+((x6161*x6163))+(((-1.0)*x6161*x6164))+(((-1.0)*x6162*x6164)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6166.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6165.value)))+(x6166.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6167=IKsin(j4);
IkReal x6168=IKcos(j4);
IkReal x6169=(r21*sj5);
IkReal x6170=(cj5*r20);
IkReal x6171=((1.0)*x6168);
evalcond[0]=(((x6167*x6169))+(((-1.0)*r22*x6171))+(((-1.0)*x6167*x6170)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6170*x6171))+((x6168*x6169))+((r22*x6167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6172=(cj5*sj4);
IkReal x6173=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x6173))+(((-1.0)*r00*x6172)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x6172))+(((-1.0)*r11*x6173))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x6173))+(((-1.0)*r00*x6172))))+IKsqr((((r10*x6172))+(((-1.0)*r11*x6173))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x6173))+(((-1.0)*r00*x6172))), (((r10*x6172))+(((-1.0)*r11*x6173))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6174=IKcos(j0);
IkReal x6175=IKsin(j0);
IkReal x6176=((0.1)*sj5);
IkReal x6177=(cj5*r11);
IkReal x6178=(cj5*r01);
IkReal x6179=(r11*sj5);
IkReal x6180=((1.0)*cj2);
IkReal x6181=(sj1*sj2);
IkReal x6182=((1.0)*cj4);
IkReal x6183=(r01*sj5);
IkReal x6184=((1.0)*cj1*sj2);
IkReal x6185=(cj5*x6182);
IkReal x6186=(cj1*x6174);
IkReal x6187=(sj1*x6174);
IkReal x6188=((0.3922)*x6175);
IkReal x6189=((1.0)*cj5*sj4);
IkReal x6190=(cj1*x6175);
evalcond[0]=(x6174+((sj4*x6179))+(((-1.0)*r12*x6182))+(((-1.0)*r10*x6189)));
evalcond[1]=((((-1.0)*r00*x6189))+(((-1.0)*r02*x6182))+(((-1.0)*x6175))+((sj4*x6183)));
evalcond[2]=(((r00*sj5))+x6178+(((-1.0)*x6174*x6184))+(((-1.0)*x6180*x6187)));
evalcond[3]=(((r10*sj5))+x6177+(((-1.0)*sj1*x6175*x6180))+(((-1.0)*x6175*x6184)));
evalcond[4]=(((cj4*x6183))+(((-1.0)*r00*x6185))+((r02*sj4))+((x6174*x6181))+(((-1.0)*x6180*x6186)));
evalcond[5]=((((-1.0)*x6180*x6190))+((r12*sj4))+(((-1.0)*r10*x6185))+((x6175*x6181))+((cj4*x6179)));
evalcond[6]=((((-0.1)*x6178))+(((0.425)*x6186))+(((-0.3922)*x6174*x6181))+(((-1.0)*px))+(((0.3922)*cj2*x6186))+(((-1.0)*r00*x6176))+(((-0.134)*x6175)));
evalcond[7]=((((0.425)*x6190))+(((-0.1)*x6177))+((cj1*cj2*x6188))+(((-1.0)*py))+(((0.134)*x6174))+(((-1.0)*r10*x6176))+(((-1.0)*x6181*x6188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6191=((1.0)*cj5);
IkReal x6192=((1.0)*sj5);
CheckValue<IkReal> x6193 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x6192))+(((-1.0)*r11*x6191)))),IkReal(((((-1.0)*r00*x6192))+(((-1.0)*r01*x6191)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6193.valid){
continue;
}
CheckValue<IkReal> x6194=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x6194.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6193.value)+(((1.5707963267949)*(x6194.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6195=IKcos(j0);
IkReal x6196=IKsin(j0);
IkReal x6197=((0.1)*sj5);
IkReal x6198=(cj5*r11);
IkReal x6199=(cj5*r01);
IkReal x6200=((0.425)*cj1);
IkReal x6201=((1.0)*cj2);
IkReal x6202=(cj1*cj2);
IkReal x6203=((1.0)*cj1*sj2);
IkReal x6204=(sj1*x6195);
IkReal x6205=((0.3922)*x6196);
evalcond[0]=(((r00*sj5))+x6199+(((-1.0)*x6195*x6203))+(((-1.0)*x6201*x6204)));
evalcond[1]=(((r10*sj5))+(((-1.0)*x6196*x6203))+x6198+(((-1.0)*sj1*x6196*x6201)));
evalcond[2]=((((-0.1)*x6199))+(((-1.0)*px))+(((0.3922)*x6195*x6202))+(((-0.134)*x6196))+((x6195*x6200))+(((-0.3922)*sj2*x6204))+(((-1.0)*r00*x6197)));
evalcond[3]=((((-1.0)*r10*x6197))+(((-0.1)*x6198))+(((-1.0)*py))+(((0.134)*x6195))+((x6196*x6200))+((x6202*x6205))+(((-1.0)*sj1*sj2*x6205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6206=((1.0)*cj5);
IkReal x6207=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6206)));
j4eval[0]=x6207;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6206)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6207);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6208=((1.0)*cj5);
IkReal x6209=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6208)));
j4eval[0]=x6209;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6208))))));
j4eval[2]=IKsign(x6209);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6210=((1.0)*sj0);
IkReal x6211=((1.0)*cj0);
IkReal x6212=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x6212;
j4eval[1]=((IKabs(((((-1.0)*r12*x6210))+(((-1.0)*r02*x6211)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6211))+(((-1.0)*r11*sj5*x6210))))));
j4eval[2]=IKsign(x6212);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6213=((-1.0)*r20);
IkReal x6215 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6215)==0){
continue;
}
IkReal x6214=pow(x6215,-0.5);
CheckValue<IkReal> x6216 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6213),IKFAST_ATAN2_MAGTHRESH);
if(!x6216.valid){
continue;
}
IkReal gconst114=((-1.0)*(x6216.value));
IkReal gconst115=(r21*x6214);
IkReal gconst116=(x6213*x6214);
CheckValue<IkReal> x6217 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6217.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6217.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6218=((-1.0)*r20);
IkReal x6219=x6214;
CheckValue<IkReal> x6221 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6218),IKFAST_ATAN2_MAGTHRESH);
if(!x6221.valid){
continue;
}
IkReal x6220=((-1.0)*(x6221.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6220;
IkReal gconst114=x6220;
IkReal gconst115=(r21*x6219);
IkReal gconst116=(x6218*x6219);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6222=((-1.0)*r20);
IkReal x6223=x6214;
CheckValue<IkReal> x6225 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6222),IKFAST_ATAN2_MAGTHRESH);
if(!x6225.valid){
continue;
}
IkReal x6224=((-1.0)*(x6225.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6224;
IkReal gconst114=x6224;
IkReal gconst115=(r21*x6223);
IkReal gconst116=(x6222*x6223);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6226=((-1.0)*r20);
IkReal x6227=x6214;
CheckValue<IkReal> x6229 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6226),IKFAST_ATAN2_MAGTHRESH);
if(!x6229.valid){
continue;
}
IkReal x6228=((-1.0)*(x6229.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6228;
IkReal gconst114=x6228;
IkReal gconst115=(r21*x6227);
IkReal gconst116=(x6226*x6227);
IkReal x6230=((1.0)*(r22*r22));
CheckValue<IkReal> x6234=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6230))),-1);
if(!x6234.valid){
continue;
}
IkReal x6231=x6234.value;
IkReal x6232=((1.0)*x6231);
IkReal x6233=((((-1.0)*x6230))+(((-2.0)*x6231*(r20*r20)*(r21*r21)))+(((-1.0)*x6232*(r21*r21*r21*r21)))+(((-1.0)*x6232*(r20*r20*r20*r20))));
j4eval[0]=x6233;
j4eval[1]=IKsign(x6233);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6235=(cj2*sj1);
IkReal x6236=(gconst115*r21);
IkReal x6237=(cj1*sj2);
IkReal x6238=((1.0)*gconst116*r20);
CheckValue<IkReal> x6239=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst116*r20*x6236))+(((-1.0)*(x6236*x6236)))+(((-1.0)*(r22*r22)))+(((-1.0)*gconst116*r20*x6238)))),-1);
if(!x6239.valid){
continue;
}
CheckValue<IkReal> x6240 = IKatan2WithCheck(IkReal((((r22*x6235))+((r22*x6237)))),IkReal((((x6236*x6237))+((x6235*x6236))+(((-1.0)*x6235*x6238))+(((-1.0)*x6237*x6238)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6240.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6239.value)))+(x6240.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6241=IKsin(j4);
IkReal x6242=IKcos(j4);
IkReal x6243=(sj1*sj2);
IkReal x6244=((1.0)*x6242);
IkReal x6245=((1.0)*cj1*cj2);
IkReal x6246=(gconst115*x6241);
IkReal x6247=(gconst115*x6242);
IkReal x6248=((1.0)*gconst116*x6241);
evalcond[0]=(((r21*x6246))+(((-1.0)*r20*x6248))+(((-1.0)*r22*x6244)));
evalcond[1]=(cj0+((r11*x6246))+(((-1.0)*r10*x6248))+(((-1.0)*r12*x6244)));
evalcond[2]=((((-1.0)*r02*x6244))+(((-1.0)*sj0))+(((-1.0)*r00*x6248))+((r01*x6246)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x6244))+((cj1*sj2))+((r21*x6247))+((r22*x6241)));
evalcond[4]=(((r02*x6241))+(((-1.0)*cj0*x6245))+((cj0*x6243))+(((-1.0)*gconst116*r00*x6244))+((r01*x6247)));
evalcond[5]=(((r11*x6247))+((r12*x6241))+(((-1.0)*sj0*x6245))+(((-1.0)*gconst116*r10*x6244))+((sj0*x6243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6249=((1.0)*gconst116);
CheckValue<IkReal> x6250 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6249))+((gconst115*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6250.valid){
continue;
}
CheckValue<IkReal> x6251=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x6249)))),-1);
if(!x6251.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6250.value)+(((1.5707963267949)*(x6251.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6252=IKsin(j4);
IkReal x6253=IKcos(j4);
IkReal x6254=(sj1*sj2);
IkReal x6255=((1.0)*x6253);
IkReal x6256=((1.0)*cj1*cj2);
IkReal x6257=(gconst115*x6252);
IkReal x6258=(gconst115*x6253);
IkReal x6259=((1.0)*gconst116*x6252);
evalcond[0]=(((r21*x6257))+(((-1.0)*r22*x6255))+(((-1.0)*r20*x6259)));
evalcond[1]=(cj0+(((-1.0)*r12*x6255))+(((-1.0)*r10*x6259))+((r11*x6257)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6257))+(((-1.0)*r02*x6255))+(((-1.0)*r00*x6259)));
evalcond[3]=(((cj2*sj1))+((r22*x6252))+((cj1*sj2))+((r21*x6258))+(((-1.0)*gconst116*r20*x6255)));
evalcond[4]=(((r01*x6258))+(((-1.0)*gconst116*r00*x6255))+(((-1.0)*cj0*x6256))+((r02*x6252))+((cj0*x6254)));
evalcond[5]=(((sj0*x6254))+((r12*x6252))+(((-1.0)*sj0*x6256))+((r11*x6258))+(((-1.0)*gconst116*r10*x6255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6260=((1.0)*gconst116);
CheckValue<IkReal> x6261=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x6260)))),-1);
if(!x6261.valid){
continue;
}
CheckValue<IkReal> x6262 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6260))+((cj0*gconst115*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6262.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6261.value)))+(x6262.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6263=IKsin(j4);
IkReal x6264=IKcos(j4);
IkReal x6265=(sj1*sj2);
IkReal x6266=((1.0)*x6264);
IkReal x6267=((1.0)*cj1*cj2);
IkReal x6268=(gconst115*x6263);
IkReal x6269=(gconst115*x6264);
IkReal x6270=((1.0)*gconst116*x6263);
evalcond[0]=((((-1.0)*r20*x6270))+((r21*x6268))+(((-1.0)*r22*x6266)));
evalcond[1]=((((-1.0)*r10*x6270))+cj0+(((-1.0)*r12*x6266))+((r11*x6268)));
evalcond[2]=(((r01*x6268))+(((-1.0)*sj0))+(((-1.0)*r02*x6266))+(((-1.0)*r00*x6270)));
evalcond[3]=(((cj2*sj1))+((r22*x6263))+((cj1*sj2))+((r21*x6269))+(((-1.0)*gconst116*r20*x6266)));
evalcond[4]=(((r01*x6269))+(((-1.0)*gconst116*r00*x6266))+(((-1.0)*cj0*x6267))+((r02*x6263))+((cj0*x6265)));
evalcond[5]=((((-1.0)*gconst116*r10*x6266))+((sj0*x6265))+((r12*x6263))+(((-1.0)*sj0*x6267))+((r11*x6269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6271=((-1.0)*r21);
IkReal x6273 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6273)==0){
continue;
}
IkReal x6272=pow(x6273,-0.5);
CheckValue<IkReal> x6274 = IKatan2WithCheck(IkReal(x6271),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6274.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x6274.value))));
IkReal gconst118=(x6271*x6272);
IkReal gconst119=((1.0)*r20*x6272);
CheckValue<IkReal> x6275 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6275.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6275.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6276=((-1.0)*r21);
CheckValue<IkReal> x6279 = IKatan2WithCheck(IkReal(x6276),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6279.valid){
continue;
}
IkReal x6277=((1.0)*(x6279.value));
IkReal x6278=x6272;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6277)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6277)));
IkReal gconst118=(x6276*x6278);
IkReal gconst119=((1.0)*r20*x6278);
IkReal x6280=r22*r22;
IkReal x6281=((1.0)*x6280);
CheckValue<IkReal> x6285=IKPowWithIntegerCheck(((-1.0)+x6280),-1);
if(!x6285.valid){
continue;
}
IkReal x6282=x6285.value;
if((((1.0)+(((-1.0)*x6281)))) < -0.00001)
continue;
IkReal x6283=IKsqrt(((1.0)+(((-1.0)*x6281))));
IkReal x6284=(cj0*x6282*x6283);
j4eval[0]=((IKabs((x6284+(((-1.0)*x6281*x6284)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6286=((-1.0)*r21);
CheckValue<IkReal> x6289 = IKatan2WithCheck(IkReal(x6286),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6289.valid){
continue;
}
IkReal x6287=((1.0)*(x6289.value));
IkReal x6288=x6272;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6287)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6287)));
IkReal gconst118=(x6286*x6288);
IkReal gconst119=((1.0)*r20*x6288);
IkReal x6290=r22*r22;
IkReal x6291=((1.0)*x6290);
CheckValue<IkReal> x6295=IKPowWithIntegerCheck(((-1.0)+x6290),-1);
if(!x6295.valid){
continue;
}
IkReal x6292=x6295.value;
if((((1.0)+(((-1.0)*x6291)))) < -0.00001)
continue;
IkReal x6293=IKsqrt(((1.0)+(((-1.0)*x6291))));
IkReal x6294=(sj0*x6292*x6293);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x6294+(((-1.0)*x6291*x6294))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6296=((-1.0)*r21);
CheckValue<IkReal> x6299 = IKatan2WithCheck(IkReal(x6296),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6299.valid){
continue;
}
IkReal x6297=((1.0)*(x6299.value));
IkReal x6298=x6272;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6297)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6297)));
IkReal gconst118=(x6296*x6298);
IkReal gconst119=((1.0)*r20*x6298);
IkReal x6300=r22*r22;
IkReal x6301=(r12*sj0);
IkReal x6302=(cj0*r02);
CheckValue<IkReal> x6306=IKPowWithIntegerCheck(((-1.0)+x6300),-1);
if(!x6306.valid){
continue;
}
IkReal x6303=x6306.value;
if((((1.0)+(((-1.0)*x6300)))) < -0.00001)
continue;
IkReal x6304=IKsqrt(((1.0)+(((-1.0)*x6300))));
IkReal x6305=(r22*x6303*x6304);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x6302))+(((-1.0)*x6301)))))+(IKabs((((x6302*x6305))+((x6301*x6305))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6307=((1.0)*sj0);
IkReal x6308=((1.0)*gconst118);
CheckValue<IkReal> x6309=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x6308)))),-1);
if(!x6309.valid){
continue;
}
CheckValue<IkReal> x6310 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6307))+(((-1.0)*cj0*r02)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*cj0*r01*x6308))+((cj0*gconst119*r00))+(((-1.0)*gconst118*r11*x6307)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6310.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6309.value)))+(x6310.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6311=IKsin(j4);
IkReal x6312=IKcos(j4);
IkReal x6313=(gconst118*r01);
IkReal x6314=(sj1*sj2);
IkReal x6315=(gconst119*r20);
IkReal x6316=(gconst119*r10);
IkReal x6317=(gconst119*r00);
IkReal x6318=(gconst118*r21);
IkReal x6319=(gconst118*r11);
IkReal x6320=((1.0)*x6312);
IkReal x6321=((1.0)*cj1*cj2);
IkReal x6322=((1.0)*x6311);
evalcond[0]=((((-1.0)*x6315*x6322))+((x6311*x6318))+(((-1.0)*r22*x6320)));
evalcond[1]=(cj0+((x6311*x6319))+(((-1.0)*x6316*x6322))+(((-1.0)*r12*x6320)));
evalcond[2]=((((-1.0)*sj0))+((x6311*x6313))+(((-1.0)*x6317*x6322))+(((-1.0)*r02*x6320)));
evalcond[3]=(((cj2*sj1))+((x6312*x6318))+((cj1*sj2))+((r22*x6311))+(((-1.0)*x6315*x6320)));
evalcond[4]=(((x6312*x6313))+(((-1.0)*cj0*x6321))+((r02*x6311))+(((-1.0)*x6317*x6320))+((cj0*x6314)));
evalcond[5]=((((-1.0)*sj0*x6321))+((x6312*x6319))+(((-1.0)*x6316*x6320))+((r12*x6311))+((sj0*x6314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6323=((1.0)*gconst119);
CheckValue<IkReal> x6324 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6323))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6324.valid){
continue;
}
CheckValue<IkReal> x6325=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x6323)))),-1);
if(!x6325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6324.value)+(((1.5707963267949)*(x6325.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6326=IKsin(j4);
IkReal x6327=IKcos(j4);
IkReal x6328=(gconst118*r01);
IkReal x6329=(sj1*sj2);
IkReal x6330=(gconst119*r20);
IkReal x6331=(gconst119*r10);
IkReal x6332=(gconst119*r00);
IkReal x6333=(gconst118*r21);
IkReal x6334=(gconst118*r11);
IkReal x6335=((1.0)*x6327);
IkReal x6336=((1.0)*cj1*cj2);
IkReal x6337=((1.0)*x6326);
evalcond[0]=((((-1.0)*x6330*x6337))+((x6326*x6333))+(((-1.0)*r22*x6335)));
evalcond[1]=((((-1.0)*r12*x6335))+cj0+((x6326*x6334))+(((-1.0)*x6331*x6337)));
evalcond[2]=((((-1.0)*sj0))+((x6326*x6328))+(((-1.0)*r02*x6335))+(((-1.0)*x6332*x6337)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6330*x6335))+((cj1*sj2))+((x6327*x6333))+((r22*x6326)));
evalcond[4]=(((r02*x6326))+((cj0*x6329))+((x6327*x6328))+(((-1.0)*cj0*x6336))+(((-1.0)*x6332*x6335)));
evalcond[5]=(((r12*x6326))+((x6327*x6334))+((sj0*x6329))+(((-1.0)*x6331*x6335))+(((-1.0)*sj0*x6336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6338=((1.0)*gconst119);
CheckValue<IkReal> x6339=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x6338)))),-1);
if(!x6339.valid){
continue;
}
CheckValue<IkReal> x6340 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x6338)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6339.value)))+(x6340.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6341=IKsin(j4);
IkReal x6342=IKcos(j4);
IkReal x6343=(gconst118*r01);
IkReal x6344=(sj1*sj2);
IkReal x6345=(gconst119*r20);
IkReal x6346=(gconst119*r10);
IkReal x6347=(gconst119*r00);
IkReal x6348=(gconst118*r21);
IkReal x6349=(gconst118*r11);
IkReal x6350=((1.0)*x6342);
IkReal x6351=((1.0)*cj1*cj2);
IkReal x6352=((1.0)*x6341);
evalcond[0]=(((x6341*x6348))+(((-1.0)*x6345*x6352))+(((-1.0)*r22*x6350)));
evalcond[1]=(((x6341*x6349))+cj0+(((-1.0)*r12*x6350))+(((-1.0)*x6346*x6352)));
evalcond[2]=(((x6341*x6343))+(((-1.0)*sj0))+(((-1.0)*x6347*x6352))+(((-1.0)*r02*x6350)));
evalcond[3]=(((cj2*sj1))+((r22*x6341))+((cj1*sj2))+(((-1.0)*x6345*x6350))+((x6342*x6348)));
evalcond[4]=((((-1.0)*cj0*x6351))+(((-1.0)*x6347*x6350))+((cj0*x6344))+((r02*x6341))+((x6342*x6343)));
evalcond[5]=(((sj0*x6344))+((r12*x6341))+(((-1.0)*sj0*x6351))+((x6342*x6349))+(((-1.0)*x6346*x6350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6353=((-1.0)*r10);
IkReal x6355 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6355)==0){
continue;
}
IkReal x6354=pow(x6355,-0.5);
CheckValue<IkReal> x6356 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6353),IKFAST_ATAN2_MAGTHRESH);
if(!x6356.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6356.value));
IkReal gconst121=(r11*x6354);
IkReal gconst122=(x6353*x6354);
CheckValue<IkReal> x6357 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6357.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6357.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6358=((-1.0)*r10);
IkReal x6359=x6354;
CheckValue<IkReal> x6361 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6358),IKFAST_ATAN2_MAGTHRESH);
if(!x6361.valid){
continue;
}
IkReal x6360=((-1.0)*(x6361.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6360;
IkReal gconst120=x6360;
IkReal gconst121=(r11*x6359);
IkReal gconst122=(x6358*x6359);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6362=((1.0)*sj0);
IkReal x6363=((1.0)*gconst121);
CheckValue<IkReal> x6364 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6362)))),IkReal((((cj0*gconst122*r00))+(((-1.0)*cj0*r01*x6363))+(((-1.0)*gconst121*r11*x6362))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6364.valid){
continue;
}
CheckValue<IkReal> x6365=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r21))+(((-1.0)*r20*x6363)))),-1);
if(!x6365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6364.value)+(((1.5707963267949)*(x6365.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6366=IKsin(j4);
IkReal x6367=IKcos(j4);
IkReal x6368=(gconst121*r11);
IkReal x6369=(sj1*sj2);
IkReal x6370=(gconst122*r00);
IkReal x6371=(gconst122*r10);
IkReal x6372=(gconst122*r20);
IkReal x6373=((1.0)*x6367);
IkReal x6374=((1.0)*cj1*cj2);
IkReal x6375=((1.0)*x6366);
IkReal x6376=(gconst121*x6366);
IkReal x6377=(gconst121*x6367);
evalcond[0]=(((r21*x6376))+(((-1.0)*x6372*x6375))+(((-1.0)*r22*x6373)));
evalcond[1]=(cj0+((x6366*x6368))+(((-1.0)*x6371*x6375))+(((-1.0)*r12*x6373)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6373))+((r01*x6376))+(((-1.0)*x6370*x6375)));
evalcond[3]=(((r21*x6377))+((cj2*sj1))+(((-1.0)*x6372*x6373))+((cj1*sj2))+((r22*x6366)));
evalcond[4]=(((r01*x6377))+(((-1.0)*x6370*x6373))+((cj0*x6369))+((r02*x6366))+(((-1.0)*cj0*x6374)));
evalcond[5]=((((-1.0)*sj0*x6374))+((r12*x6366))+((x6367*x6368))+((sj0*x6369))+(((-1.0)*x6371*x6373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6378=((1.0)*gconst122);
CheckValue<IkReal> x6379 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6378))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6379.valid){
continue;
}
CheckValue<IkReal> x6380=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6378))+(((-1.0)*gconst121*r00)))),-1);
if(!x6380.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6379.value)+(((1.5707963267949)*(x6380.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6381=IKsin(j4);
IkReal x6382=IKcos(j4);
IkReal x6383=(gconst121*r11);
IkReal x6384=(sj1*sj2);
IkReal x6385=(gconst122*r00);
IkReal x6386=(gconst122*r10);
IkReal x6387=(gconst122*r20);
IkReal x6388=((1.0)*x6382);
IkReal x6389=((1.0)*cj1*cj2);
IkReal x6390=((1.0)*x6381);
IkReal x6391=(gconst121*x6381);
IkReal x6392=(gconst121*x6382);
evalcond[0]=((((-1.0)*x6387*x6390))+(((-1.0)*r22*x6388))+((r21*x6391)));
evalcond[1]=(cj0+(((-1.0)*r12*x6388))+((x6381*x6383))+(((-1.0)*x6386*x6390)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6391))+(((-1.0)*x6385*x6390))+(((-1.0)*r02*x6388)));
evalcond[3]=(((cj2*sj1))+((r22*x6381))+((cj1*sj2))+((r21*x6392))+(((-1.0)*x6387*x6388)));
evalcond[4]=(((cj0*x6384))+((r02*x6381))+(((-1.0)*cj0*x6389))+((r01*x6392))+(((-1.0)*x6385*x6388)));
evalcond[5]=(((sj0*x6384))+(((-1.0)*x6386*x6388))+(((-1.0)*sj0*x6389))+((r12*x6381))+((x6382*x6383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6393=((-1.0)*r11);
IkReal x6395 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6395)==0){
continue;
}
IkReal x6394=pow(x6395,-0.5);
CheckValue<IkReal> x6396 = IKatan2WithCheck(IkReal(x6393),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6396.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6396.value))));
IkReal gconst124=(x6393*x6394);
IkReal gconst125=((1.0)*r10*x6394);
CheckValue<IkReal> x6397 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6397.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6397.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6398=((-1.0)*r11);
CheckValue<IkReal> x6401 = IKatan2WithCheck(IkReal(x6398),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6401.valid){
continue;
}
IkReal x6399=((1.0)*(x6401.value));
IkReal x6400=x6394;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6399)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6399)));
IkReal gconst124=(x6398*x6400);
IkReal gconst125=((1.0)*r10*x6400);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6402=((-1.0)*r11);
CheckValue<IkReal> x6405 = IKatan2WithCheck(IkReal(x6402),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6405.valid){
continue;
}
IkReal x6403=((1.0)*(x6405.value));
IkReal x6404=x6394;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6403)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6403)));
IkReal gconst124=(x6402*x6404);
IkReal gconst125=((1.0)*r10*x6404);
IkReal x6406=r12*r12;
IkReal x6407=((1.0)*sj0);
IkReal x6408=(cj0*r02);
IkReal x6409=x6394;
j4eval[0]=((IKabs((((r12*x6408*x6409))+(((-1.0)*x6407*x6409))+((sj0*x6406*x6409)))))+(IKabs(((((-1.0)*x6408))+(((-1.0)*r12*x6407))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6410=((-1.0)*r11);
CheckValue<IkReal> x6413 = IKatan2WithCheck(IkReal(x6410),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6413.valid){
continue;
}
IkReal x6411=((1.0)*(x6413.value));
IkReal x6412=x6394;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6411)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6411)));
IkReal gconst124=(x6410*x6412);
IkReal gconst125=((1.0)*r10*x6412);
IkReal x6414=r12*r12;
IkReal x6415=((1.0)+(((-1.0)*x6414)));
IkReal x6416=(cj2*r22*sj1);
IkReal x6417=(cj1*r22*sj2);
CheckValue<IkReal> x6424=IKPowWithIntegerCheck(x6415,-1);
if(!x6424.valid){
continue;
}
IkReal x6418=x6424.value;
CheckValue<IkReal> x6425=IKPowWithIntegerCheck(((-1.0)+x6414),-1);
if(!x6425.valid){
continue;
}
IkReal x6419=x6425.value;
IkReal x6420=((1.0)*x6418);
if((x6415) < -0.00001)
continue;
IkReal x6421=IKsqrt(x6415);
IkReal x6422=((1.0)*r12*x6419*x6421);
IkReal x6423=((((-1.0)*(r22*r22)))+(((-1.0)*x6420*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x6418))+(((-1.0)*x6420*(r11*r11)*(r21*r21))));
j4eval[0]=x6423;
j4eval[1]=IKsign(x6423);
j4eval[2]=((IKabs((x6417+x6416)))+(IKabs(((((-1.0)*x6417*x6422))+(((-1.0)*x6416*x6422))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6426=(gconst124*r21);
IkReal x6427=(cj1*sj2);
IkReal x6428=(cj2*sj1);
IkReal x6429=(gconst125*r20);
CheckValue<IkReal> x6430 = IKatan2WithCheck(IkReal((((r22*x6428))+((r22*x6427)))),IkReal(((((-1.0)*x6428*x6429))+(((-1.0)*x6427*x6429))+((x6426*x6427))+((x6426*x6428)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6430.valid){
continue;
}
CheckValue<IkReal> x6431=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6426*x6426)))+(((-1.0)*(x6429*x6429)))+(((2.0)*x6426*x6429))+(((-1.0)*(r22*r22))))),-1);
if(!x6431.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6430.value)+(((1.5707963267949)*(x6431.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6432=IKsin(j4);
IkReal x6433=IKcos(j4);
IkReal x6434=(sj1*sj2);
IkReal x6435=(gconst125*r20);
IkReal x6436=(gconst124*r01);
IkReal x6437=(gconst125*r00);
IkReal x6438=(gconst125*r10);
IkReal x6439=((1.0)*x6433);
IkReal x6440=((1.0)*cj1*cj2);
IkReal x6441=((1.0)*x6432);
IkReal x6442=(gconst124*x6432);
IkReal x6443=(gconst124*x6433);
evalcond[0]=((((-1.0)*r22*x6439))+((r21*x6442))+(((-1.0)*x6435*x6441)));
evalcond[1]=(((r11*x6442))+cj0+(((-1.0)*x6438*x6441))+(((-1.0)*r12*x6439)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6439))+((x6432*x6436))+(((-1.0)*x6437*x6441)));
evalcond[3]=(((r22*x6432))+((cj2*sj1))+(((-1.0)*x6435*x6439))+((cj1*sj2))+((r21*x6443)));
evalcond[4]=(((cj0*x6434))+((x6433*x6436))+((r02*x6432))+(((-1.0)*cj0*x6440))+(((-1.0)*x6437*x6439)));
evalcond[5]=((((-1.0)*sj0*x6440))+((r11*x6443))+(((-1.0)*x6438*x6439))+((r12*x6432))+((sj0*x6434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6444=((1.0)*sj0);
IkReal x6445=((1.0)*cj0);
CheckValue<IkReal> x6446 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6445))+(((-1.0)*r12*x6444)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*gconst124*r11*x6444))+(((-1.0)*gconst124*r01*x6445))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6446.valid){
continue;
}
CheckValue<IkReal> x6447=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x6447.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6446.value)+(((1.5707963267949)*(x6447.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6448=IKsin(j4);
IkReal x6449=IKcos(j4);
IkReal x6450=(sj1*sj2);
IkReal x6451=(gconst125*r20);
IkReal x6452=(gconst124*r01);
IkReal x6453=(gconst125*r00);
IkReal x6454=(gconst125*r10);
IkReal x6455=((1.0)*x6449);
IkReal x6456=((1.0)*cj1*cj2);
IkReal x6457=((1.0)*x6448);
IkReal x6458=(gconst124*x6448);
IkReal x6459=(gconst124*x6449);
evalcond[0]=((((-1.0)*x6451*x6457))+((r21*x6458))+(((-1.0)*r22*x6455)));
evalcond[1]=(cj0+((r11*x6458))+(((-1.0)*r12*x6455))+(((-1.0)*x6454*x6457)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6455))+(((-1.0)*x6453*x6457))+((x6448*x6452)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6451*x6455))+((cj1*sj2))+((r21*x6459))+((r22*x6448)));
evalcond[4]=(((cj0*x6450))+((x6449*x6452))+(((-1.0)*x6453*x6455))+(((-1.0)*cj0*x6456))+((r02*x6448)));
evalcond[5]=(((r12*x6448))+(((-1.0)*sj0*x6456))+((r11*x6459))+((sj0*x6450))+(((-1.0)*x6454*x6455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6460=((1.0)*gconst125);
CheckValue<IkReal> x6461=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6460))+(((-1.0)*gconst124*r00)))),-1);
if(!x6461.valid){
continue;
}
CheckValue<IkReal> x6462 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6460))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6461.value)))+(x6462.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6463=IKsin(j4);
IkReal x6464=IKcos(j4);
IkReal x6465=(sj1*sj2);
IkReal x6466=(gconst125*r20);
IkReal x6467=(gconst124*r01);
IkReal x6468=(gconst125*r00);
IkReal x6469=(gconst125*r10);
IkReal x6470=((1.0)*x6464);
IkReal x6471=((1.0)*cj1*cj2);
IkReal x6472=((1.0)*x6463);
IkReal x6473=(gconst124*x6463);
IkReal x6474=(gconst124*x6464);
evalcond[0]=((((-1.0)*r22*x6470))+((r21*x6473))+(((-1.0)*x6466*x6472)));
evalcond[1]=((((-1.0)*r12*x6470))+cj0+((r11*x6473))+(((-1.0)*x6469*x6472)));
evalcond[2]=((((-1.0)*sj0))+((x6463*x6467))+(((-1.0)*x6468*x6472))+(((-1.0)*r02*x6470)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6463))+((r21*x6474))+(((-1.0)*x6466*x6470)));
evalcond[4]=(((x6464*x6467))+(((-1.0)*cj0*x6471))+(((-1.0)*x6468*x6470))+((cj0*x6465))+((r02*x6463)));
evalcond[5]=(((sj0*x6465))+(((-1.0)*sj0*x6471))+((r11*x6474))+(((-1.0)*x6469*x6470))+((r12*x6463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6475=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6475;
j4eval[1]=IKsign(x6475);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6476=((1.0)*cj5);
IkReal x6477=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6476)));
j4eval[0]=x6477;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x6476))))));
j4eval[2]=IKsign(x6477);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6478=cj5*cj5;
IkReal x6479=r11*r11;
IkReal x6480=(cj5*r10);
IkReal x6481=(r11*sj5);
IkReal x6482=(((x6478*x6479))+(((-1.0)*x6478*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x6480*x6481))+(((-1.0)*x6479)));
j4eval[0]=x6482;
j4eval[1]=IKsign(x6482);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x6480))+x6481))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6483=cj5*cj5;
IkReal x6484=r11*r11;
IkReal x6485=(cj5*r10);
IkReal x6486=(r11*sj5);
CheckValue<IkReal> x6487=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6484))+(((-1.0)*x6483*(r10*r10)))+((x6483*x6484))+(((-1.0)*(r12*r12)))+(((2.0)*x6485*x6486)))),-1);
if(!x6487.valid){
continue;
}
CheckValue<IkReal> x6488 = IKatan2WithCheck(IkReal(((((-1.0)*x6485))+x6486)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6488.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6487.value)))+(x6488.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6489=IKcos(j4);
IkReal x6490=IKsin(j4);
IkReal x6491=(cj5*r00);
IkReal x6492=(cj5*r10);
IkReal x6493=(r21*sj5);
IkReal x6494=(cj5*r20);
IkReal x6495=((1.0)*x6489);
IkReal x6496=((1.0)*x6490);
IkReal x6497=(sj5*x6490);
IkReal x6498=(sj5*x6489);
evalcond[0]=(((r11*x6498))+((r12*x6490))+(((-1.0)*x6492*x6495)));
evalcond[1]=((((-1.0)*r22*x6495))+(((-1.0)*x6494*x6496))+((x6490*x6493)));
evalcond[2]=(((r01*x6497))+(((-1.0)*r02*x6495))+(((-1.0)*x6491*x6496)));
evalcond[3]=((1.0)+((r11*x6497))+(((-1.0)*r12*x6495))+(((-1.0)*x6492*x6496)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6489*x6493))+(((-1.0)*x6494*x6495))+((r22*x6490)));
evalcond[5]=(((r01*x6498))+((r02*x6490))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6491*x6495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6499=((1.0)*cj5);
CheckValue<IkReal> x6500=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6499))+(((-1.0)*r00*sj5)))),-1);
if(!x6500.valid){
continue;
}
CheckValue<IkReal> x6501 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6499))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6500.value)))+(x6501.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6502=IKcos(j4);
IkReal x6503=IKsin(j4);
IkReal x6504=(cj5*r00);
IkReal x6505=(cj5*r10);
IkReal x6506=(r21*sj5);
IkReal x6507=(cj5*r20);
IkReal x6508=((1.0)*x6502);
IkReal x6509=((1.0)*x6503);
IkReal x6510=(sj5*x6503);
IkReal x6511=(sj5*x6502);
evalcond[0]=(((r12*x6503))+((r11*x6511))+(((-1.0)*x6505*x6508)));
evalcond[1]=((((-1.0)*x6507*x6509))+(((-1.0)*r22*x6508))+((x6503*x6506)));
evalcond[2]=(((r01*x6510))+(((-1.0)*r02*x6508))+(((-1.0)*x6504*x6509)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6508))+((r11*x6510))+(((-1.0)*x6505*x6509)));
evalcond[4]=(((cj2*sj1))+((x6502*x6506))+(((-1.0)*x6507*x6508))+((cj1*sj2))+((r22*x6503)));
evalcond[5]=(((r02*x6503))+((r01*x6511))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6504*x6508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6512=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6512.valid){
continue;
}
CheckValue<IkReal> x6513 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6512.value)))+(x6513.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6514=IKcos(j4);
IkReal x6515=IKsin(j4);
IkReal x6516=(cj5*r00);
IkReal x6517=(cj5*r10);
IkReal x6518=(r21*sj5);
IkReal x6519=(cj5*r20);
IkReal x6520=((1.0)*x6514);
IkReal x6521=((1.0)*x6515);
IkReal x6522=(sj5*x6515);
IkReal x6523=(sj5*x6514);
evalcond[0]=(((r12*x6515))+(((-1.0)*x6517*x6520))+((r11*x6523)));
evalcond[1]=(((x6515*x6518))+(((-1.0)*x6519*x6521))+(((-1.0)*r22*x6520)));
evalcond[2]=((((-1.0)*r02*x6520))+(((-1.0)*x6516*x6521))+((r01*x6522)));
evalcond[3]=((1.0)+(((-1.0)*x6517*x6521))+(((-1.0)*r12*x6520))+((r11*x6522)));
evalcond[4]=(((x6514*x6518))+((cj2*sj1))+(((-1.0)*x6519*x6520))+((cj1*sj2))+((r22*x6515)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6516*x6520))+((r02*x6515))+((r01*x6523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6524=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6524;
j4eval[1]=IKsign(x6524);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6525=((1.0)*cj5);
IkReal x6526=((((-1.0)*r21*x6525))+(((-1.0)*r20*sj5)));
j4eval[0]=x6526;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x6525))))));
j4eval[2]=IKsign(x6526);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6527=cj5*cj5;
IkReal x6528=r11*r11;
IkReal x6529=(r11*sj5);
IkReal x6530=(cj5*r10);
IkReal x6531=((((-1.0)*x6527*x6528))+(r12*r12)+(((-2.0)*x6529*x6530))+x6528+((x6527*(r10*r10))));
j4eval[0]=x6531;
j4eval[1]=IKsign(x6531);
j4eval[2]=((IKabs((x6529+(((-1.0)*x6530)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6532=cj5*cj5;
IkReal x6533=r11*r11;
IkReal x6534=(cj5*r10);
IkReal x6535=(r11*sj5);
CheckValue<IkReal> x6536 = IKatan2WithCheck(IkReal((x6535+(((-1.0)*x6534)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6536.valid){
continue;
}
CheckValue<IkReal> x6537=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x6532*x6533))+x6533+(((-2.0)*x6534*x6535))+((x6532*(r10*r10))))),-1);
if(!x6537.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6536.value)+(((1.5707963267949)*(x6537.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6538=IKcos(j4);
IkReal x6539=IKsin(j4);
IkReal x6540=(cj5*r00);
IkReal x6541=(cj5*r10);
IkReal x6542=(r21*sj5);
IkReal x6543=(cj5*r20);
IkReal x6544=((1.0)*x6538);
IkReal x6545=((1.0)*x6539);
IkReal x6546=(sj5*x6539);
IkReal x6547=(sj5*x6538);
evalcond[0]=((((-1.0)*x6541*x6544))+((r11*x6547))+((r12*x6539)));
evalcond[1]=(((x6539*x6542))+(((-1.0)*r22*x6544))+(((-1.0)*x6543*x6545)));
evalcond[2]=((((-1.0)*x6540*x6545))+(((-1.0)*r02*x6544))+((r01*x6546)));
evalcond[3]=((-1.0)+(((-1.0)*x6541*x6545))+(((-1.0)*r12*x6544))+((r11*x6546)));
evalcond[4]=(((cj2*sj1))+((x6538*x6542))+((cj1*sj2))+((r22*x6539))+(((-1.0)*x6543*x6544)));
evalcond[5]=(((r02*x6539))+(((-1.0)*x6540*x6544))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r01*x6547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6548=((1.0)*cj5);
CheckValue<IkReal> x6549=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6548))+(((-1.0)*r20*sj5)))),-1);
if(!x6549.valid){
continue;
}
CheckValue<IkReal> x6550 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x6548))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6549.value)))+(x6550.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6551=IKcos(j4);
IkReal x6552=IKsin(j4);
IkReal x6553=(cj5*r00);
IkReal x6554=(cj5*r10);
IkReal x6555=(r21*sj5);
IkReal x6556=(cj5*r20);
IkReal x6557=((1.0)*x6551);
IkReal x6558=((1.0)*x6552);
IkReal x6559=(sj5*x6552);
IkReal x6560=(sj5*x6551);
evalcond[0]=(((r11*x6560))+(((-1.0)*x6554*x6557))+((r12*x6552)));
evalcond[1]=(((x6552*x6555))+(((-1.0)*r22*x6557))+(((-1.0)*x6556*x6558)));
evalcond[2]=((((-1.0)*x6553*x6558))+(((-1.0)*r02*x6557))+((r01*x6559)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6557))+(((-1.0)*x6554*x6558))+((r11*x6559)));
evalcond[4]=(((cj2*sj1))+((x6551*x6555))+((cj1*sj2))+((r22*x6552))+(((-1.0)*x6556*x6557)));
evalcond[5]=((((-1.0)*x6553*x6557))+(((-1.0)*sj1*sj2))+((r02*x6552))+((cj1*cj2))+((r01*x6560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6561 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6561.valid){
continue;
}
CheckValue<IkReal> x6562=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6562.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6561.value)+(((1.5707963267949)*(x6562.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6563=IKcos(j4);
IkReal x6564=IKsin(j4);
IkReal x6565=(cj5*r00);
IkReal x6566=(cj5*r10);
IkReal x6567=(r21*sj5);
IkReal x6568=(cj5*r20);
IkReal x6569=((1.0)*x6563);
IkReal x6570=((1.0)*x6564);
IkReal x6571=(sj5*x6564);
IkReal x6572=(sj5*x6563);
evalcond[0]=((((-1.0)*x6566*x6569))+((r12*x6564))+((r11*x6572)));
evalcond[1]=(((x6564*x6567))+(((-1.0)*r22*x6569))+(((-1.0)*x6568*x6570)));
evalcond[2]=(((r01*x6571))+(((-1.0)*x6565*x6570))+(((-1.0)*r02*x6569)));
evalcond[3]=((-1.0)+(((-1.0)*x6566*x6570))+((r11*x6571))+(((-1.0)*r12*x6569)));
evalcond[4]=(((cj2*sj1))+((r22*x6564))+((x6563*x6567))+((cj1*sj2))+(((-1.0)*x6568*x6569)));
evalcond[5]=((((-1.0)*x6565*x6569))+((r01*x6572))+(((-1.0)*sj1*sj2))+((r02*x6564))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6573=((-1.0)*r00);
IkReal x6575 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6575)==0){
continue;
}
IkReal x6574=pow(x6575,-0.5);
CheckValue<IkReal> x6576 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6573),IKFAST_ATAN2_MAGTHRESH);
if(!x6576.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6576.value));
IkReal gconst127=(r01*x6574);
IkReal gconst128=(x6573*x6574);
CheckValue<IkReal> x6577 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6577.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6577.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6578=((-1.0)*r00);
IkReal x6579=x6574;
CheckValue<IkReal> x6581 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6578),IKFAST_ATAN2_MAGTHRESH);
if(!x6581.valid){
continue;
}
IkReal x6580=((-1.0)*(x6581.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6580;
IkReal gconst126=x6580;
IkReal gconst127=(r01*x6579);
IkReal gconst128=(x6578*x6579);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6582=((1.0)*sj0);
IkReal x6583=((1.0)*gconst127);
CheckValue<IkReal> x6584=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x6583)))),-1);
if(!x6584.valid){
continue;
}
CheckValue<IkReal> x6585 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6582))+(((-1.0)*cj0*r02)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*gconst127*r11*x6582))+(((-1.0)*cj0*r01*x6583))+((cj0*gconst128*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6584.value)))+(x6585.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6586=IKsin(j4);
IkReal x6587=IKcos(j4);
IkReal x6588=(gconst127*r01);
IkReal x6589=(sj1*sj2);
IkReal x6590=(gconst128*r10);
IkReal x6591=(gconst128*r00);
IkReal x6592=(gconst128*r20);
IkReal x6593=((1.0)*x6587);
IkReal x6594=((1.0)*cj1*cj2);
IkReal x6595=((1.0)*x6586);
IkReal x6596=(gconst127*x6587);
IkReal x6597=(gconst127*x6586);
evalcond[0]=(((r21*x6597))+(((-1.0)*x6592*x6595))+(((-1.0)*r22*x6593)));
evalcond[1]=(((r11*x6597))+cj0+(((-1.0)*r12*x6593))+(((-1.0)*x6590*x6595)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6593))+(((-1.0)*x6591*x6595))+((x6586*x6588)));
evalcond[3]=(((cj2*sj1))+((r22*x6586))+((r21*x6596))+((cj1*sj2))+(((-1.0)*x6592*x6593)));
evalcond[4]=(((r02*x6586))+((cj0*x6589))+(((-1.0)*cj0*x6594))+(((-1.0)*x6591*x6593))+((x6587*x6588)));
evalcond[5]=(((sj0*x6589))+((r11*x6596))+(((-1.0)*x6590*x6593))+(((-1.0)*sj0*x6594))+((r12*x6586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6598=((1.0)*gconst128);
CheckValue<IkReal> x6599=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6598))+(((-1.0)*gconst127*r10)))),-1);
if(!x6599.valid){
continue;
}
CheckValue<IkReal> x6600 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6598))+((gconst127*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6600.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6599.value)))+(x6600.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6601=IKsin(j4);
IkReal x6602=IKcos(j4);
IkReal x6603=(gconst127*r01);
IkReal x6604=(sj1*sj2);
IkReal x6605=(gconst128*r10);
IkReal x6606=(gconst128*r00);
IkReal x6607=(gconst128*r20);
IkReal x6608=((1.0)*x6602);
IkReal x6609=((1.0)*cj1*cj2);
IkReal x6610=((1.0)*x6601);
IkReal x6611=(gconst127*x6602);
IkReal x6612=(gconst127*x6601);
evalcond[0]=(((r21*x6612))+(((-1.0)*x6607*x6610))+(((-1.0)*r22*x6608)));
evalcond[1]=((((-1.0)*x6605*x6610))+cj0+((r11*x6612))+(((-1.0)*r12*x6608)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6606*x6610))+(((-1.0)*r02*x6608))+((x6601*x6603)));
evalcond[3]=(((cj2*sj1))+((r21*x6611))+((r22*x6601))+((cj1*sj2))+(((-1.0)*x6607*x6608)));
evalcond[4]=((((-1.0)*cj0*x6609))+((r02*x6601))+((cj0*x6604))+(((-1.0)*x6606*x6608))+((x6602*x6603)));
evalcond[5]=(((sj0*x6604))+(((-1.0)*sj0*x6609))+((r11*x6611))+(((-1.0)*x6605*x6608))+((r12*x6601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6613=((-1.0)*r01);
IkReal x6615 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6615)==0){
continue;
}
IkReal x6614=pow(x6615,-0.5);
CheckValue<IkReal> x6616 = IKatan2WithCheck(IkReal(x6613),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6616.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6616.value))));
IkReal gconst130=(x6613*x6614);
IkReal gconst131=((1.0)*r00*x6614);
CheckValue<IkReal> x6617 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6617.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6617.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x6618=((-1.0)*r01);
CheckValue<IkReal> x6621 = IKatan2WithCheck(IkReal(x6618),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6621.valid){
continue;
}
IkReal x6619=((1.0)*(x6621.value));
IkReal x6620=x6614;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6619)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6619)));
IkReal gconst130=(x6618*x6620);
IkReal gconst131=((1.0)*r00*x6620);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6622=((-1.0)*r01);
CheckValue<IkReal> x6625 = IKatan2WithCheck(IkReal(x6622),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6625.valid){
continue;
}
IkReal x6623=((1.0)*(x6625.value));
IkReal x6624=x6614;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6623)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6623)));
IkReal gconst130=(x6622*x6624);
IkReal gconst131=((1.0)*r00*x6624);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6626=((-1.0)*r01);
CheckValue<IkReal> x6629 = IKatan2WithCheck(IkReal(x6626),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6629.valid){
continue;
}
IkReal x6627=((1.0)*(x6629.value));
IkReal x6628=x6614;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6627)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6627)));
IkReal gconst130=(x6626*x6628);
IkReal gconst131=((1.0)*r00*x6628);
IkReal x6630=r02*r02;
IkReal x6631=(r12*sj0);
IkReal x6632=((1.0)*cj0);
IkReal x6633=x6614;
j4eval[0]=((IKabs(((((-1.0)*x6631))+(((-1.0)*r02*x6632)))))+(IKabs((((cj0*x6630*x6633))+(((-1.0)*x6632*x6633))+((r02*x6631*x6633))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6634=((1.0)*sj0);
IkReal x6635=((1.0)*gconst130);
CheckValue<IkReal> x6636=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r21))+(((-1.0)*r20*x6635)))),-1);
if(!x6636.valid){
continue;
}
CheckValue<IkReal> x6637 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6634)))),IkReal(((((-1.0)*gconst130*r11*x6634))+((gconst131*r10*sj0))+(((-1.0)*cj0*r01*x6635))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6636.value)))+(x6637.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6638=IKsin(j4);
IkReal x6639=IKcos(j4);
IkReal x6640=(gconst131*r10);
IkReal x6641=(sj1*sj2);
IkReal x6642=(gconst131*r20);
IkReal x6643=(gconst131*r00);
IkReal x6644=((1.0)*x6639);
IkReal x6645=((1.0)*cj1*cj2);
IkReal x6646=(gconst130*x6638);
IkReal x6647=((1.0)*x6638);
IkReal x6648=(gconst130*x6639);
evalcond[0]=((((-1.0)*r22*x6644))+((r21*x6646))+(((-1.0)*x6642*x6647)));
evalcond[1]=(cj0+(((-1.0)*x6640*x6647))+((r11*x6646))+(((-1.0)*r12*x6644)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6646))+(((-1.0)*x6643*x6647))+(((-1.0)*r02*x6644)));
evalcond[3]=(((cj2*sj1))+((r21*x6648))+((cj1*sj2))+(((-1.0)*x6642*x6644))+((r22*x6638)));
evalcond[4]=(((r01*x6648))+(((-1.0)*x6643*x6644))+(((-1.0)*cj0*x6645))+((cj0*x6641))+((r02*x6638)));
evalcond[5]=((((-1.0)*x6640*x6644))+((r11*x6648))+((r12*x6638))+(((-1.0)*sj0*x6645))+((sj0*x6641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6649=((1.0)*gconst131);
CheckValue<IkReal> x6650 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x6649)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6650.valid){
continue;
}
CheckValue<IkReal> x6651=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6649))+(((-1.0)*gconst130*r10)))),-1);
if(!x6651.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6650.value)+(((1.5707963267949)*(x6651.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6652=IKsin(j4);
IkReal x6653=IKcos(j4);
IkReal x6654=(gconst131*r10);
IkReal x6655=(sj1*sj2);
IkReal x6656=(gconst131*r20);
IkReal x6657=(gconst131*r00);
IkReal x6658=((1.0)*x6653);
IkReal x6659=((1.0)*cj1*cj2);
IkReal x6660=(gconst130*x6652);
IkReal x6661=((1.0)*x6652);
IkReal x6662=(gconst130*x6653);
evalcond[0]=((((-1.0)*r22*x6658))+((r21*x6660))+(((-1.0)*x6656*x6661)));
evalcond[1]=(cj0+(((-1.0)*r12*x6658))+((r11*x6660))+(((-1.0)*x6654*x6661)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6657*x6661))+((r01*x6660))+(((-1.0)*r02*x6658)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x6662))+(((-1.0)*x6656*x6658))+((r22*x6652)));
evalcond[4]=((((-1.0)*x6657*x6658))+((r02*x6652))+((r01*x6662))+(((-1.0)*cj0*x6659))+((cj0*x6655)));
evalcond[5]=(((r12*x6652))+(((-1.0)*sj0*x6659))+((r11*x6662))+((sj0*x6655))+(((-1.0)*x6654*x6658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6663=((1.0)*gconst131);
CheckValue<IkReal> x6664=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6663))+(((-1.0)*gconst130*r00)))),-1);
if(!x6664.valid){
continue;
}
CheckValue<IkReal> x6665 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x6663)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6665.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6664.value)))+(x6665.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6666=IKsin(j4);
IkReal x6667=IKcos(j4);
IkReal x6668=(gconst131*r10);
IkReal x6669=(sj1*sj2);
IkReal x6670=(gconst131*r20);
IkReal x6671=(gconst131*r00);
IkReal x6672=((1.0)*x6667);
IkReal x6673=((1.0)*cj1*cj2);
IkReal x6674=(gconst130*x6666);
IkReal x6675=((1.0)*x6666);
IkReal x6676=(gconst130*x6667);
evalcond[0]=((((-1.0)*x6670*x6675))+(((-1.0)*r22*x6672))+((r21*x6674)));
evalcond[1]=(((r11*x6674))+cj0+(((-1.0)*x6668*x6675))+(((-1.0)*r12*x6672)));
evalcond[2]=((((-1.0)*r02*x6672))+(((-1.0)*sj0))+(((-1.0)*x6671*x6675))+((r01*x6674)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6670*x6672))+((cj1*sj2))+((r22*x6666))+((r21*x6676)));
evalcond[4]=((((-1.0)*x6671*x6672))+((r02*x6666))+((r01*x6676))+((cj0*x6669))+(((-1.0)*cj0*x6673)));
evalcond[5]=(((r11*x6676))+((r12*x6666))+(((-1.0)*x6668*x6672))+((sj0*x6669))+(((-1.0)*sj0*x6673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6677=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6677;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6677);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6678=((1.0)*cj5);
IkReal x6679=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6678)));
j4eval[0]=x6679;
j4eval[1]=((IKabs(((((-1.0)*r20*x6678))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6679);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6680=cj5*cj5;
IkReal x6681=r01*r01;
IkReal x6682=(cj5*r00);
IkReal x6683=(r01*sj5);
IkReal x6684=(x6681+(((-2.0)*x6682*x6683))+(((-1.0)*x6680*x6681))+(r02*r02)+((x6680*(r00*r00))));
j4eval[0]=x6684;
j4eval[1]=IKsign(x6684);
j4eval[2]=((IKabs(r02))+(IKabs((x6683+(((-1.0)*x6682))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6685=cj5*cj5;
IkReal x6686=r01*r01;
IkReal x6687=(r01*sj5);
IkReal x6688=(cj5*r00);
CheckValue<IkReal> x6689=IKPowWithIntegerCheck(IKsign((x6686+(((-1.0)*x6685*x6686))+((x6685*(r00*r00)))+(r02*r02)+(((-2.0)*x6687*x6688)))),-1);
if(!x6689.valid){
continue;
}
CheckValue<IkReal> x6690 = IKatan2WithCheck(IkReal((x6687+(((-1.0)*x6688)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6689.value)))+(x6690.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6691=IKcos(j4);
IkReal x6692=IKsin(j4);
IkReal x6693=(cj5*r00);
IkReal x6694=(cj5*r10);
IkReal x6695=(r21*sj5);
IkReal x6696=(cj5*r20);
IkReal x6697=((1.0)*x6691);
IkReal x6698=((1.0)*x6692);
IkReal x6699=(sj5*x6692);
IkReal x6700=(sj5*x6691);
evalcond[0]=(((r01*x6700))+(((-1.0)*x6693*x6697))+((r02*x6692)));
evalcond[1]=((((-1.0)*x6696*x6698))+((x6692*x6695))+(((-1.0)*r22*x6697)));
evalcond[2]=((((-1.0)*x6694*x6698))+((r11*x6699))+(((-1.0)*r12*x6697)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6697))+(((-1.0)*x6693*x6698))+((r01*x6699)));
evalcond[4]=(((cj2*sj1))+((r22*x6692))+(((-1.0)*x6696*x6697))+((cj1*sj2))+((x6691*x6695)));
evalcond[5]=((((-1.0)*x6694*x6697))+((r12*x6692))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6701=((1.0)*cj5);
CheckValue<IkReal> x6702=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6701)))),-1);
if(!x6702.valid){
continue;
}
CheckValue<IkReal> x6703 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6701)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6703.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6702.value)))+(x6703.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6704=IKcos(j4);
IkReal x6705=IKsin(j4);
IkReal x6706=(cj5*r00);
IkReal x6707=(cj5*r10);
IkReal x6708=(r21*sj5);
IkReal x6709=(cj5*r20);
IkReal x6710=((1.0)*x6704);
IkReal x6711=((1.0)*x6705);
IkReal x6712=(sj5*x6705);
IkReal x6713=(sj5*x6704);
evalcond[0]=((((-1.0)*x6706*x6710))+((r01*x6713))+((r02*x6705)));
evalcond[1]=(((x6705*x6708))+(((-1.0)*x6709*x6711))+(((-1.0)*r22*x6710)));
evalcond[2]=(((r11*x6712))+(((-1.0)*x6707*x6711))+(((-1.0)*r12*x6710)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6710))+(((-1.0)*x6706*x6711))+((r01*x6712)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6704*x6708))+(((-1.0)*x6709*x6710))+((r22*x6705)));
evalcond[5]=(((r11*x6713))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6707*x6710))+((r12*x6705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6714=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6714.valid){
continue;
}
CheckValue<IkReal> x6715 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6714.value)))+(x6715.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6716=IKcos(j4);
IkReal x6717=IKsin(j4);
IkReal x6718=(cj5*r00);
IkReal x6719=(cj5*r10);
IkReal x6720=(r21*sj5);
IkReal x6721=(cj5*r20);
IkReal x6722=((1.0)*x6716);
IkReal x6723=((1.0)*x6717);
IkReal x6724=(sj5*x6717);
IkReal x6725=(sj5*x6716);
evalcond[0]=((((-1.0)*x6718*x6722))+((r02*x6717))+((r01*x6725)));
evalcond[1]=((((-1.0)*r22*x6722))+((x6717*x6720))+(((-1.0)*x6721*x6723)));
evalcond[2]=(((r11*x6724))+(((-1.0)*x6719*x6723))+(((-1.0)*r12*x6722)));
evalcond[3]=((-1.0)+(((-1.0)*x6718*x6723))+(((-1.0)*r02*x6722))+((r01*x6724)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6716*x6720))+((r22*x6717))+(((-1.0)*x6721*x6722)));
evalcond[5]=(((r11*x6725))+(((-1.0)*x6719*x6722))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6726=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6726;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6726);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6727=((1.0)*cj5);
IkReal x6728=((((-1.0)*r21*x6727))+(((-1.0)*r20*sj5)));
j4eval[0]=x6728;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x6727))))));
j4eval[2]=IKsign(x6728);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6729=(r01*sj5);
IkReal x6730=(cj1*sj2);
IkReal x6731=(cj2*sj1);
IkReal x6732=((1.0)*r02);
IkReal x6733=((1.0)*cj5*r00);
IkReal x6734=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6734;
j4eval[1]=((IKabs(((((-1.0)*x6730*x6732))+(((-1.0)*x6731*x6732)))))+(IKabs(((((-1.0)*x6730*x6733))+((x6729*x6731))+((x6729*x6730))+(((-1.0)*x6731*x6733))))));
j4eval[2]=IKsign(x6734);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6735=(r01*sj5);
IkReal x6736=(cj1*sj2);
IkReal x6737=(cj2*sj1);
IkReal x6738=((1.0)*r02);
IkReal x6739=((1.0)*cj5*r00);
CheckValue<IkReal> x6740 = IKatan2WithCheck(IkReal(((((-1.0)*x6737*x6739))+((x6735*x6736))+((x6735*x6737))+(((-1.0)*x6736*x6739)))),IkReal(((((-1.0)*x6737*x6738))+(((-1.0)*x6736*x6738)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6740.valid){
continue;
}
CheckValue<IkReal> x6741=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6741.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6740.value)+(((1.5707963267949)*(x6741.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6742=IKcos(j4);
IkReal x6743=IKsin(j4);
IkReal x6744=(cj5*r00);
IkReal x6745=(cj5*r10);
IkReal x6746=(r21*sj5);
IkReal x6747=(cj5*r20);
IkReal x6748=((1.0)*x6742);
IkReal x6749=((1.0)*x6743);
IkReal x6750=(sj5*x6743);
IkReal x6751=(sj5*x6742);
evalcond[0]=(((r02*x6743))+(((-1.0)*x6744*x6748))+((r01*x6751)));
evalcond[1]=((((-1.0)*r22*x6748))+(((-1.0)*x6747*x6749))+((x6743*x6746)));
evalcond[2]=((((-1.0)*r12*x6748))+((r11*x6750))+(((-1.0)*x6745*x6749)));
evalcond[3]=((1.0)+(((-1.0)*x6744*x6749))+((r01*x6750))+(((-1.0)*r02*x6748)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6747*x6748))+((x6742*x6746))+((cj1*sj2))+((r22*x6743)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r11*x6751))+((r12*x6743))+(((-1.0)*x6745*x6748))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6752=((1.0)*cj5);
CheckValue<IkReal> x6753=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6752))+(((-1.0)*r20*sj5)))),-1);
if(!x6753.valid){
continue;
}
CheckValue<IkReal> x6754 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6752)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6754.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6753.value)))+(x6754.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6755=IKcos(j4);
IkReal x6756=IKsin(j4);
IkReal x6757=(cj5*r00);
IkReal x6758=(cj5*r10);
IkReal x6759=(r21*sj5);
IkReal x6760=(cj5*r20);
IkReal x6761=((1.0)*x6755);
IkReal x6762=((1.0)*x6756);
IkReal x6763=(sj5*x6756);
IkReal x6764=(sj5*x6755);
evalcond[0]=(((r01*x6764))+((r02*x6756))+(((-1.0)*x6757*x6761)));
evalcond[1]=((((-1.0)*x6760*x6762))+((x6756*x6759))+(((-1.0)*r22*x6761)));
evalcond[2]=((((-1.0)*x6758*x6762))+((r11*x6763))+(((-1.0)*r12*x6761)));
evalcond[3]=((1.0)+((r01*x6763))+(((-1.0)*r02*x6761))+(((-1.0)*x6757*x6762)));
evalcond[4]=((((-1.0)*x6760*x6761))+((cj2*sj1))+((r22*x6756))+((cj1*sj2))+((x6755*x6759)));
evalcond[5]=((((-1.0)*x6758*x6761))+((r12*x6756))+(((-1.0)*sj1*sj2))+((r11*x6764))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6765 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6765.valid){
continue;
}
CheckValue<IkReal> x6766=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6766.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6765.value)+(((1.5707963267949)*(x6766.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6767=IKcos(j4);
IkReal x6768=IKsin(j4);
IkReal x6769=(cj5*r00);
IkReal x6770=(cj5*r10);
IkReal x6771=(r21*sj5);
IkReal x6772=(cj5*r20);
IkReal x6773=((1.0)*x6767);
IkReal x6774=((1.0)*x6768);
IkReal x6775=(sj5*x6768);
IkReal x6776=(sj5*x6767);
evalcond[0]=((((-1.0)*x6769*x6773))+((r02*x6768))+((r01*x6776)));
evalcond[1]=((((-1.0)*r22*x6773))+(((-1.0)*x6772*x6774))+((x6768*x6771)));
evalcond[2]=(((r11*x6775))+(((-1.0)*x6770*x6774))+(((-1.0)*r12*x6773)));
evalcond[3]=((1.0)+(((-1.0)*x6769*x6774))+(((-1.0)*r02*x6773))+((r01*x6775)));
evalcond[4]=(((cj2*sj1))+((r22*x6768))+((cj1*sj2))+(((-1.0)*x6772*x6773))+((x6767*x6771)));
evalcond[5]=(((r11*x6776))+((r12*x6768))+(((-1.0)*x6770*x6773))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6777=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6777);
rxp1_1=(px*r21);
rxp1_2=(r11*x6777);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6778=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6778);
rxp1_1=(px*r21);
rxp1_2=(r11*x6778);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6779=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6779);
rxp1_1=(px*r21);
rxp1_2=(r11*x6779);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6782=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6782.valid){
continue;
}
IkReal x6780=x6782.value;
IkReal x6781=(sj0*x6780);
cj4array[0]=((((-1.0)*sj1*sj2*x6781))+((cj1*cj2*x6781)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6783=IKsin(j4);
IkReal x6784=IKcos(j4);
IkReal x6785=(r21*sj5);
IkReal x6786=((1.0)*cj5*r20);
evalcond[0]=(r02*x6783);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6784)));
evalcond[2]=(((x6783*x6785))+(((-1.0)*x6783*x6786)));
evalcond[3]=(((r11*sj5*x6783))+(((-1.0)*cj5*r10*x6783)));
evalcond[4]=(((x6784*x6785))+((cj2*sj1))+(((-1.0)*x6784*x6786))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6789=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6789.valid){
continue;
}
IkReal x6787=x6789.value;
IkReal x6788=((1.0)*x6787);
cj4array[0]=((((-1.0)*cj2*sj1*x6788))+(((-1.0)*cj1*sj2*x6788)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6790=IKsin(j4);
IkReal x6791=IKcos(j4);
IkReal x6792=((1.0)*sj0);
IkReal x6793=((1.0)*cj5);
IkReal x6794=(sj5*x6790);
evalcond[0]=(r02*x6790);
evalcond[1]=((((-1.0)*r02*x6791))+(((-1.0)*x6792)));
evalcond[2]=(((r21*x6794))+(((-1.0)*r20*x6790*x6793)));
evalcond[3]=((((-1.0)*r10*x6790*x6793))+((r11*x6794)));
evalcond[4]=((((-1.0)*cj1*cj2*x6792))+((r11*sj5*x6791))+((sj0*sj1*sj2))+(((-1.0)*r10*x6791*x6793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6795=IKPowWithIntegerCheck(r02,-1);
if(!x6795.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6795.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6796=IKsin(j4);
IkReal x6797=IKcos(j4);
IkReal x6798=(r21*sj5);
IkReal x6799=((1.0)*cj5);
IkReal x6800=(r11*sj5);
evalcond[0]=(r02*x6796);
evalcond[1]=((((-1.0)*r20*x6796*x6799))+((x6796*x6798)));
evalcond[2]=((((-1.0)*r10*x6796*x6799))+((x6796*x6800)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x6797*x6799))+((x6797*x6798)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((x6797*x6800))+(((-1.0)*r10*x6797*x6799))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6801=((1.0)*sj0);
IkReal x6802=((1.0)*cj0);
CheckValue<IkReal> x6803 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6802))+(((-1.0)*r12*x6801)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6801))+(((-1.0)*r01*sj5*x6802)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6803.valid){
continue;
}
CheckValue<IkReal> x6804=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6803.value)+(((1.5707963267949)*(x6804.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6805=IKsin(j4);
IkReal x6806=IKcos(j4);
IkReal x6807=(cj5*r00);
IkReal x6808=(cj5*r10);
IkReal x6809=(r21*sj5);
IkReal x6810=(sj1*sj2);
IkReal x6811=(cj5*r20);
IkReal x6812=((1.0)*x6806);
IkReal x6813=((1.0)*cj1*cj2);
IkReal x6814=((1.0)*x6805);
IkReal x6815=(sj5*x6805);
IkReal x6816=(sj5*x6806);
evalcond[0]=(((x6805*x6809))+(((-1.0)*x6811*x6814))+(((-1.0)*r22*x6812)));
evalcond[1]=(((r11*x6815))+cj0+(((-1.0)*x6808*x6814))+(((-1.0)*r12*x6812)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6807*x6814))+(((-1.0)*r02*x6812))+((r01*x6815)));
evalcond[3]=(((cj2*sj1))+((r22*x6805))+((cj1*sj2))+(((-1.0)*x6811*x6812))+((x6806*x6809)));
evalcond[4]=((((-1.0)*x6807*x6812))+((cj0*x6810))+((r01*x6816))+((r02*x6805))+(((-1.0)*cj0*x6813)));
evalcond[5]=(((r11*x6816))+(((-1.0)*x6808*x6812))+((r12*x6805))+((sj0*x6810))+(((-1.0)*sj0*x6813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6817=((1.0)*cj5);
CheckValue<IkReal> x6818=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6817)))),-1);
if(!x6818.valid){
continue;
}
CheckValue<IkReal> x6819 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6817)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6819.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6818.value)))+(x6819.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6820=IKsin(j4);
IkReal x6821=IKcos(j4);
IkReal x6822=(cj5*r00);
IkReal x6823=(cj5*r10);
IkReal x6824=(r21*sj5);
IkReal x6825=(sj1*sj2);
IkReal x6826=(cj5*r20);
IkReal x6827=((1.0)*x6821);
IkReal x6828=((1.0)*cj1*cj2);
IkReal x6829=((1.0)*x6820);
IkReal x6830=(sj5*x6820);
IkReal x6831=(sj5*x6821);
evalcond[0]=(((x6820*x6824))+(((-1.0)*r22*x6827))+(((-1.0)*x6826*x6829)));
evalcond[1]=(cj0+(((-1.0)*x6823*x6829))+(((-1.0)*r12*x6827))+((r11*x6830)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6827))+((r01*x6830))+(((-1.0)*x6822*x6829)));
evalcond[3]=(((cj2*sj1))+((r22*x6820))+((cj1*sj2))+((x6821*x6824))+(((-1.0)*x6826*x6827)));
evalcond[4]=(((r02*x6820))+((r01*x6831))+(((-1.0)*cj0*x6828))+((cj0*x6825))+(((-1.0)*x6822*x6827)));
evalcond[5]=((((-1.0)*sj0*x6828))+((sj0*x6825))+(((-1.0)*x6823*x6827))+((r11*x6831))+((r12*x6820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6832=((1.0)*cj5);
CheckValue<IkReal> x6833 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6832)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6833.valid){
continue;
}
CheckValue<IkReal> x6834=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6832)))),-1);
if(!x6834.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6833.value)+(((1.5707963267949)*(x6834.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6835=IKsin(j4);
IkReal x6836=IKcos(j4);
IkReal x6837=(cj5*r00);
IkReal x6838=(cj5*r10);
IkReal x6839=(r21*sj5);
IkReal x6840=(sj1*sj2);
IkReal x6841=(cj5*r20);
IkReal x6842=((1.0)*x6836);
IkReal x6843=((1.0)*cj1*cj2);
IkReal x6844=((1.0)*x6835);
IkReal x6845=(sj5*x6835);
IkReal x6846=(sj5*x6836);
evalcond[0]=((((-1.0)*r22*x6842))+(((-1.0)*x6841*x6844))+((x6835*x6839)));
evalcond[1]=(cj0+((r11*x6845))+(((-1.0)*r12*x6842))+(((-1.0)*x6838*x6844)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6842))+(((-1.0)*x6837*x6844))+((r01*x6845)));
evalcond[3]=(((cj2*sj1))+((r22*x6835))+((cj1*sj2))+(((-1.0)*x6841*x6842))+((x6836*x6839)));
evalcond[4]=(((r02*x6835))+((cj0*x6840))+(((-1.0)*x6837*x6842))+((r01*x6846))+(((-1.0)*cj0*x6843)));
evalcond[5]=(((r11*x6846))+((r12*x6835))+(((-1.0)*sj0*x6843))+(((-1.0)*x6838*x6842))+((sj0*x6840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6847=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x6847;
j0eval[1]=IKsign(x6847);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6848=cj5*cj5;
IkReal x6849=r21*r21;
IkReal x6850=(cj2*sj1);
IkReal x6851=(cj1*sj2);
IkReal x6852=(r21*sj5);
IkReal x6853=((1.0)*cj5*r20);
IkReal x6854=((r22*r22)+(((-1.0)*x6848*x6849))+((x6848*(r20*r20)))+x6849+(((-2.0)*cj5*r20*x6852)));
j4eval[0]=x6854;
j4eval[1]=IKsign(x6854);
j4eval[2]=((IKabs((((r22*x6851))+((r22*x6850)))))+(IKabs((((x6851*x6852))+((x6850*x6852))+(((-1.0)*x6851*x6853))+(((-1.0)*x6850*x6853))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6855=cj1*cj1;
IkReal x6856=(cj2*sj2);
IkReal x6857=(cj2*sj1);
IkReal x6858=(cj1*sj1);
j0eval[0]=((((-1.08363080061193)*sj2*x6855))+x6856+x6858+(((-2.0)*x6855*x6856))+(((-1.08363080061193)*cj1*x6857))+(((-2.0)*cj1*cj2*x6857)));
j0eval[1]=((((-1.0)*cj1*sj2))+(((-1.0)*x6857)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.19164998084494)*py))+(((-0.195400266071001)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.19164998084494)*px))+(((0.195400266071001)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.19164998084494)*py))+(((-0.195400266071001)*px))))+IKsqr(((((1.19164998084494)*px))+(((0.195400266071001)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.19164998084494)*py))+(((-0.195400266071001)*px))), ((((1.19164998084494)*px))+(((0.195400266071001)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6859=IKsin(j0);
IkReal x6860=IKcos(j0);
evalcond[0]=((((0.8172)*x6860))+(((-0.134)*x6859))+(((-1.0)*px)));
evalcond[1]=((((0.134)*x6860))+(((-1.0)*py))+(((0.8172)*x6859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6861=((1.0)*cj5);
IkReal x6862=((((-1.0)*r01*x6861))+(((-1.0)*r00*sj5)));
j4eval[0]=x6862;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6861))))));
j4eval[2]=IKsign(x6862);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6863=((1.0)*cj5);
IkReal x6864=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6863)));
j4eval[0]=x6864;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x6863))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x6864);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6865=cj5*cj5;
IkReal x6866=((1.0)*sj5);
IkReal x6867=(cj5*r20);
IkReal x6868=(r11*r21);
IkReal x6869=((((-1.0)*x6865*x6868))+(((-1.0)*cj5*r10*r21*x6866))+((r12*r22))+x6868+((r10*r20*x6865))+(((-1.0)*r11*x6866*x6867)));
j4eval[0]=x6869;
j4eval[1]=IKsign(x6869);
j4eval[2]=((IKabs((((cj0*x6867))+(((-1.0)*cj0*r21*x6866)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6870=cj5*cj5;
IkReal x6871=((1.0)*sj5);
IkReal x6872=(cj5*r20);
IkReal x6873=(r11*r21);
CheckValue<IkReal> x6874=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x6871))+(((-1.0)*r11*x6871*x6872))+((r12*r22))+x6873+((r10*r20*x6870))+(((-1.0)*x6870*x6873)))),-1);
if(!x6874.valid){
continue;
}
CheckValue<IkReal> x6875 = IKatan2WithCheck(IkReal((((cj0*x6872))+(((-1.0)*cj0*r21*x6871)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6875.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6874.value)))+(x6875.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6876=IKsin(j4);
IkReal x6877=IKcos(j4);
IkReal x6878=((1.0)*sj0);
IkReal x6879=(cj5*r00);
IkReal x6880=(r11*sj5);
IkReal x6881=(cj5*r10);
IkReal x6882=(r21*sj5);
IkReal x6883=(cj5*r20);
IkReal x6884=(r01*sj5);
IkReal x6885=((1.0)*x6877);
IkReal x6886=((1.0)*x6876);
evalcond[0]=(((x6876*x6882))+(((-1.0)*x6883*x6886))+(((-1.0)*r22*x6885)));
evalcond[1]=(((x6877*x6883))+(((-1.0)*x6882*x6885))+(((-1.0)*r22*x6886)));
evalcond[2]=((((-1.0)*x6881*x6886))+cj0+((x6876*x6880))+(((-1.0)*r12*x6885)));
evalcond[3]=(((x6876*x6884))+(((-1.0)*x6878))+(((-1.0)*r02*x6885))+(((-1.0)*x6879*x6886)));
evalcond[4]=((((-1.0)*x6884*x6885))+(((-1.0)*r02*x6886))+((x6877*x6879))+(((-1.0)*cj0)));
evalcond[5]=(((x6877*x6881))+(((-1.0)*x6878))+(((-1.0)*x6880*x6885))+(((-1.0)*r12*x6886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6887=((1.0)*cj5);
CheckValue<IkReal> x6888 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6887)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6888.valid){
continue;
}
CheckValue<IkReal> x6889=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6887)))),-1);
if(!x6889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6888.value)+(((1.5707963267949)*(x6889.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6890=IKsin(j4);
IkReal x6891=IKcos(j4);
IkReal x6892=((1.0)*sj0);
IkReal x6893=(cj5*r00);
IkReal x6894=(r11*sj5);
IkReal x6895=(cj5*r10);
IkReal x6896=(r21*sj5);
IkReal x6897=(cj5*r20);
IkReal x6898=(r01*sj5);
IkReal x6899=((1.0)*x6891);
IkReal x6900=((1.0)*x6890);
evalcond[0]=((((-1.0)*x6897*x6900))+((x6890*x6896))+(((-1.0)*r22*x6899)));
evalcond[1]=((((-1.0)*x6896*x6899))+((x6891*x6897))+(((-1.0)*r22*x6900)));
evalcond[2]=(cj0+(((-1.0)*r12*x6899))+(((-1.0)*x6895*x6900))+((x6890*x6894)));
evalcond[3]=((((-1.0)*x6893*x6900))+(((-1.0)*x6892))+(((-1.0)*r02*x6899))+((x6890*x6898)));
evalcond[4]=((((-1.0)*r02*x6900))+((x6891*x6893))+(((-1.0)*x6898*x6899))+(((-1.0)*cj0)));
evalcond[5]=(((x6891*x6895))+(((-1.0)*x6894*x6899))+(((-1.0)*r12*x6900))+(((-1.0)*x6892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6901=((1.0)*cj5);
CheckValue<IkReal> x6902 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6901)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6902.valid){
continue;
}
CheckValue<IkReal> x6903=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6901)))),-1);
if(!x6903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6902.value)+(((1.5707963267949)*(x6903.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6904=IKsin(j4);
IkReal x6905=IKcos(j4);
IkReal x6906=((1.0)*sj0);
IkReal x6907=(cj5*r00);
IkReal x6908=(r11*sj5);
IkReal x6909=(cj5*r10);
IkReal x6910=(r21*sj5);
IkReal x6911=(cj5*r20);
IkReal x6912=(r01*sj5);
IkReal x6913=((1.0)*x6905);
IkReal x6914=((1.0)*x6904);
evalcond[0]=((((-1.0)*x6911*x6914))+(((-1.0)*r22*x6913))+((x6904*x6910)));
evalcond[1]=((((-1.0)*x6910*x6913))+(((-1.0)*r22*x6914))+((x6905*x6911)));
evalcond[2]=(cj0+(((-1.0)*r12*x6913))+(((-1.0)*x6909*x6914))+((x6904*x6908)));
evalcond[3]=((((-1.0)*x6907*x6914))+(((-1.0)*x6906))+((x6904*x6912))+(((-1.0)*r02*x6913)));
evalcond[4]=((((-1.0)*x6912*x6913))+((x6905*x6907))+(((-1.0)*r02*x6914))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6908*x6913))+(((-1.0)*x6906))+(((-1.0)*r12*x6914))+((x6905*x6909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-7.04083262574717)*px))+(((1.72342768749632)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((7.04083262574717)*py))+(((1.72342768749632)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.04083262574717)*px))+(((1.72342768749632)*py))))+IKsqr(((((7.04083262574717)*py))+(((1.72342768749632)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-7.04083262574717)*px))+(((1.72342768749632)*py))), ((((7.04083262574717)*py))+(((1.72342768749632)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6915=IKcos(j0);
IkReal x6916=IKsin(j0);
evalcond[0]=((((0.0328)*x6915))+(((-0.134)*x6916))+(((-1.0)*px)));
evalcond[1]=((((0.0328)*x6916))+(((0.134)*x6915))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6917=((1.0)*cj5);
IkReal x6918=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6917)));
j4eval[0]=x6918;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6917)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6918);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6919=cj5*cj5;
IkReal x6920=((1.0)*r21);
IkReal x6921=(cj5*sj5);
IkReal x6922=((1.0)*r20);
IkReal x6923=((((-1.0)*r01*x6919*x6920))+((r01*r21))+((r00*r20*x6919))+(((-1.0)*r01*x6921*x6922))+((r02*r22))+(((-1.0)*r00*x6920*x6921)));
j4eval[0]=x6923;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6922))))));
j4eval[2]=IKsign(x6923);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6924=cj5*cj5;
IkReal x6925=(r21*sj5);
IkReal x6926=(r11*r21);
IkReal x6927=((1.0)*cj5*r20);
IkReal x6928=((((-1.0)*r11*sj5*x6927))+((r12*r22))+x6926+((r10*r20*x6924))+(((-1.0)*x6924*x6926))+(((-1.0)*cj5*r10*x6925)));
j4eval[0]=x6928;
j4eval[1]=((IKabs((((sj0*x6925))+(((-1.0)*sj0*x6927)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6928);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6929=cj5*cj5;
IkReal x6930=(r21*sj5);
IkReal x6931=(r11*r21);
IkReal x6932=((1.0)*cj5*r20);
CheckValue<IkReal> x6933=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x6930))+(((-1.0)*r11*sj5*x6932))+((r12*r22))+x6931+((r10*r20*x6929))+(((-1.0)*x6929*x6931)))),-1);
if(!x6933.valid){
continue;
}
CheckValue<IkReal> x6934 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x6930))+(((-1.0)*sj0*x6932)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6933.value)))+(x6934.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6935=IKsin(j4);
IkReal x6936=IKcos(j4);
IkReal x6937=(r11*sj5);
IkReal x6938=(cj5*r00);
IkReal x6939=(cj5*r10);
IkReal x6940=(r21*sj5);
IkReal x6941=(cj5*r20);
IkReal x6942=(r01*sj5);
IkReal x6943=((1.0)*x6936);
IkReal x6944=((1.0)*x6935);
evalcond[0]=((((-1.0)*x6941*x6944))+(((-1.0)*r22*x6943))+((x6935*x6940)));
evalcond[1]=(((x6936*x6941))+(((-1.0)*r22*x6944))+(((-1.0)*x6940*x6943)));
evalcond[2]=(cj0+(((-1.0)*r12*x6943))+((x6935*x6937))+(((-1.0)*x6939*x6944)));
evalcond[3]=(cj0+(((-1.0)*x6942*x6943))+(((-1.0)*r02*x6944))+((x6936*x6938)));
evalcond[4]=(sj0+(((-1.0)*r12*x6944))+(((-1.0)*x6937*x6943))+((x6936*x6939)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x6943))+(((-1.0)*x6938*x6944))+((x6935*x6942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6945=cj5*cj5;
IkReal x6946=((1.0)*r21);
IkReal x6947=(cj5*sj5);
IkReal x6948=((1.0)*r20);
CheckValue<IkReal> x6949=IKPowWithIntegerCheck(IKsign((((r00*r20*x6945))+((r01*r21))+(((-1.0)*r01*x6945*x6946))+(((-1.0)*r00*x6946*x6947))+(((-1.0)*r01*x6947*x6948))+((r02*r22)))),-1);
if(!x6949.valid){
continue;
}
CheckValue<IkReal> x6950 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6948)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6950.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6949.value)))+(x6950.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6951=IKsin(j4);
IkReal x6952=IKcos(j4);
IkReal x6953=(r11*sj5);
IkReal x6954=(cj5*r00);
IkReal x6955=(cj5*r10);
IkReal x6956=(r21*sj5);
IkReal x6957=(cj5*r20);
IkReal x6958=(r01*sj5);
IkReal x6959=((1.0)*x6952);
IkReal x6960=((1.0)*x6951);
evalcond[0]=(((x6951*x6956))+(((-1.0)*x6957*x6960))+(((-1.0)*r22*x6959)));
evalcond[1]=(((x6952*x6957))+(((-1.0)*x6956*x6959))+(((-1.0)*r22*x6960)));
evalcond[2]=(cj0+(((-1.0)*r12*x6959))+((x6951*x6953))+(((-1.0)*x6955*x6960)));
evalcond[3]=((((-1.0)*r02*x6960))+((x6952*x6954))+cj0+(((-1.0)*x6958*x6959)));
evalcond[4]=(((x6952*x6955))+sj0+(((-1.0)*r12*x6960))+(((-1.0)*x6953*x6959)));
evalcond[5]=((((-1.0)*x6954*x6960))+(((-1.0)*sj0))+((x6951*x6958))+(((-1.0)*r02*x6959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6961=((1.0)*cj5);
CheckValue<IkReal> x6962 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6961))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6962.valid){
continue;
}
CheckValue<IkReal> x6963=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6961)))),-1);
if(!x6963.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6962.value)+(((1.5707963267949)*(x6963.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6964=IKsin(j4);
IkReal x6965=IKcos(j4);
IkReal x6966=(r11*sj5);
IkReal x6967=(cj5*r00);
IkReal x6968=(cj5*r10);
IkReal x6969=(r21*sj5);
IkReal x6970=(cj5*r20);
IkReal x6971=(r01*sj5);
IkReal x6972=((1.0)*x6965);
IkReal x6973=((1.0)*x6964);
evalcond[0]=((((-1.0)*x6970*x6973))+((x6964*x6969))+(((-1.0)*r22*x6972)));
evalcond[1]=((((-1.0)*x6969*x6972))+(((-1.0)*r22*x6973))+((x6965*x6970)));
evalcond[2]=(cj0+(((-1.0)*x6968*x6973))+((x6964*x6966))+(((-1.0)*r12*x6972)));
evalcond[3]=(((x6965*x6967))+(((-1.0)*r02*x6973))+cj0+(((-1.0)*x6971*x6972)));
evalcond[4]=(((x6965*x6968))+sj0+(((-1.0)*r12*x6973))+(((-1.0)*x6966*x6972)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x6972))+((x6964*x6971))+(((-1.0)*x6967*x6973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6974=((1.0)*sj5);
IkReal x6975=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x6974))+(((-1.0)*r11*x6975)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x6974))+(((-1.0)*r01*x6975)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x6974))+(((-1.0)*r11*x6975))))+IKsqr(((((-1.0)*r00*x6974))+(((-1.0)*r01*x6975))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x6974))+(((-1.0)*r11*x6975))), ((((-1.0)*r00*x6974))+(((-1.0)*r01*x6975))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6976=IKsin(j0);
IkReal x6977=IKcos(j0);
IkReal x6978=((0.1)*sj5);
IkReal x6979=(cj5*r11);
IkReal x6980=(cj5*r01);
IkReal x6981=((1.0)*sj5);
evalcond[0]=((((-1.0)*x6977))+(((-1.0)*x6980))+(((-1.0)*r00*x6981)));
evalcond[1]=((((-1.0)*x6976))+(((-1.0)*x6979))+(((-1.0)*r10*x6981)));
evalcond[2]=((((-0.134)*x6976))+(((-0.1)*x6980))+(((-1.0)*px))+(((-1.0)*r00*x6978)));
evalcond[3]=((((0.134)*x6977))+(((-1.0)*r10*x6978))+(((-1.0)*py))+(((-0.1)*x6979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6982=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6982;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x6982);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6983=((1.0)*cj5);
IkReal x6984=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6983)));
j4eval[0]=x6984;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x6983))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x6984);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6985=cj5*cj5;
IkReal x6986=r21*r21;
IkReal x6987=(r21*sj5);
IkReal x6988=(cj5*r20);
IkReal x6989=((r22*r22)+(((-1.0)*x6985*x6986))+(((-2.0)*x6987*x6988))+x6986+((x6985*(r20*r20))));
j4eval[0]=x6989;
j4eval[1]=IKsign(x6989);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x6988))+x6987))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6990=cj5*cj5;
IkReal x6991=r21*r21;
IkReal x6992=(r21*sj5);
IkReal x6993=(cj5*r20);
CheckValue<IkReal> x6994 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x6993))+x6992)),IKFAST_ATAN2_MAGTHRESH);
if(!x6994.valid){
continue;
}
CheckValue<IkReal> x6995=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x6992*x6993))+((x6990*(r20*r20)))+x6991+(((-1.0)*x6990*x6991)))),-1);
if(!x6995.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6994.value)+(((1.5707963267949)*(x6995.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6996=IKsin(j4);
IkReal x6997=IKcos(j4);
IkReal x6998=(r11*sj5);
IkReal x6999=(r21*sj5);
IkReal x7000=(cj5*r00);
IkReal x7001=(cj5*r20);
IkReal x7002=(r01*sj5);
IkReal x7003=(cj5*r10);
IkReal x7004=((1.0)*x6997);
IkReal x7005=((1.0)*x6996);
evalcond[0]=((((-1.0)*r22*x7004))+(((-1.0)*x7001*x7005))+((x6996*x6999)));
evalcond[1]=((((-1.0)*r02*x7005))+(((-1.0)*x7002*x7004))+((x6997*x7000)));
evalcond[2]=((((-1.0)*r12*x7005))+(((-1.0)*x6998*x7004))+((x6997*x7003)));
evalcond[3]=((((-1.0)*r12*x7004))+cj0+(((-1.0)*x7003*x7005))+((x6996*x6998)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7005))+(((-1.0)*x6999*x7004))+((x6997*x7001)));
evalcond[5]=((((-1.0)*r02*x7004))+(((-1.0)*sj0))+((x6996*x7002))+(((-1.0)*x7000*x7005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7006=((1.0)*cj5);
CheckValue<IkReal> x7007 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7006)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7007.valid){
continue;
}
CheckValue<IkReal> x7008=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7006)))),-1);
if(!x7008.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7007.value)+(((1.5707963267949)*(x7008.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7009=IKsin(j4);
IkReal x7010=IKcos(j4);
IkReal x7011=(r11*sj5);
IkReal x7012=(r21*sj5);
IkReal x7013=(cj5*r00);
IkReal x7014=(cj5*r20);
IkReal x7015=(r01*sj5);
IkReal x7016=(cj5*r10);
IkReal x7017=((1.0)*x7010);
IkReal x7018=((1.0)*x7009);
evalcond[0]=((((-1.0)*r22*x7017))+((x7009*x7012))+(((-1.0)*x7014*x7018)));
evalcond[1]=(((x7010*x7013))+(((-1.0)*x7015*x7017))+(((-1.0)*r02*x7018)));
evalcond[2]=((((-1.0)*x7011*x7017))+((x7010*x7016))+(((-1.0)*r12*x7018)));
evalcond[3]=(cj0+((x7009*x7011))+(((-1.0)*x7016*x7018))+(((-1.0)*r12*x7017)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7018))+((x7010*x7014))+(((-1.0)*x7012*x7017)));
evalcond[5]=((((-1.0)*sj0))+((x7009*x7015))+(((-1.0)*x7013*x7018))+(((-1.0)*r02*x7017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7019 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7019.valid){
continue;
}
CheckValue<IkReal> x7020=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7019.value)+(((1.5707963267949)*(x7020.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7021=IKsin(j4);
IkReal x7022=IKcos(j4);
IkReal x7023=(r11*sj5);
IkReal x7024=(r21*sj5);
IkReal x7025=(cj5*r00);
IkReal x7026=(cj5*r20);
IkReal x7027=(r01*sj5);
IkReal x7028=(cj5*r10);
IkReal x7029=((1.0)*x7022);
IkReal x7030=((1.0)*x7021);
evalcond[0]=((((-1.0)*r22*x7029))+(((-1.0)*x7026*x7030))+((x7021*x7024)));
evalcond[1]=((((-1.0)*r02*x7030))+(((-1.0)*x7027*x7029))+((x7022*x7025)));
evalcond[2]=((((-1.0)*r12*x7030))+((x7022*x7028))+(((-1.0)*x7023*x7029)));
evalcond[3]=((((-1.0)*r12*x7029))+cj0+(((-1.0)*x7028*x7030))+((x7021*x7023)));
evalcond[4]=((1.0)+(((-1.0)*x7024*x7029))+(((-1.0)*r22*x7030))+((x7022*x7026)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7029))+((x7021*x7027))+(((-1.0)*x7025*x7030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.78008187832539)*px))+(((-2.28319487074043)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.78008187832539)*py))+(((-2.28319487074043)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.78008187832539)*px))+(((-2.28319487074043)*py))))+IKsqr(((((0.78008187832539)*py))+(((-2.28319487074043)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.78008187832539)*px))+(((-2.28319487074043)*py))), ((((0.78008187832539)*py))+(((-2.28319487074043)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7031=IKcos(j0);
IkReal x7032=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.134)*x7032))+(((-0.3922)*x7031)));
evalcond[1]=((((-1.0)*py))+(((-0.3922)*x7032))+(((0.134)*x7031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7033=((1.0)*cj5);
IkReal x7034=((((-1.0)*r01*x7033))+(((-1.0)*r00*sj5)));
j4eval[0]=x7034;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7033)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7034);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7035=cj5*cj5;
IkReal x7036=((1.0)*r21);
IkReal x7037=(cj5*sj5);
IkReal x7038=((1.0)*r20);
IkReal x7039=(((r01*r21))+(((-1.0)*r01*x7035*x7036))+(((-1.0)*r01*x7037*x7038))+(((-1.0)*r00*x7036*x7037))+((r00*r20*x7035))+((r02*r22)));
j4eval[0]=x7039;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7038)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7039);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7040=cj5*cj5;
IkReal x7041=(r21*sj5);
IkReal x7042=(r11*r21);
IkReal x7043=((1.0)*cj5*r20);
IkReal x7044=((((-1.0)*r11*sj5*x7043))+x7042+(((-1.0)*x7040*x7042))+((r12*r22))+((r10*r20*x7040))+(((-1.0)*cj5*r10*x7041)));
j4eval[0]=x7044;
j4eval[1]=((IKabs((((sj0*x7041))+(((-1.0)*sj0*x7043)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7044);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7045=cj5*cj5;
IkReal x7046=(r21*sj5);
IkReal x7047=(r11*r21);
IkReal x7048=((1.0)*cj5*r20);
CheckValue<IkReal> x7049 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7046))+(((-1.0)*sj0*x7048)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7049.valid){
continue;
}
CheckValue<IkReal> x7050=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x7048))+x7047+((r12*r22))+((r10*r20*x7045))+(((-1.0)*cj5*r10*x7046))+(((-1.0)*x7045*x7047)))),-1);
if(!x7050.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7049.value)+(((1.5707963267949)*(x7050.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7051=IKsin(j4);
IkReal x7052=IKcos(j4);
IkReal x7053=(r11*sj5);
IkReal x7054=(cj5*r00);
IkReal x7055=(cj5*r10);
IkReal x7056=(r21*sj5);
IkReal x7057=(cj5*r20);
IkReal x7058=(r01*sj5);
IkReal x7059=((1.0)*x7052);
IkReal x7060=((1.0)*x7051);
evalcond[0]=(((x7051*x7056))+(((-1.0)*r22*x7059))+(((-1.0)*x7057*x7060)));
evalcond[1]=((((-1.0)*r22*x7060))+(((-1.0)*x7056*x7059))+((x7052*x7057)));
evalcond[2]=(((x7051*x7053))+cj0+(((-1.0)*x7055*x7060))+(((-1.0)*r12*x7059)));
evalcond[3]=((((-1.0)*x7058*x7059))+cj0+(((-1.0)*r02*x7060))+((x7052*x7054)));
evalcond[4]=(sj0+(((-1.0)*r12*x7060))+(((-1.0)*x7053*x7059))+((x7052*x7055)));
evalcond[5]=((((-1.0)*sj0))+((x7051*x7058))+(((-1.0)*x7054*x7060))+(((-1.0)*r02*x7059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7061=cj5*cj5;
IkReal x7062=((1.0)*r21);
IkReal x7063=(cj5*sj5);
IkReal x7064=((1.0)*r20);
CheckValue<IkReal> x7065 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7064)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7065.valid){
continue;
}
CheckValue<IkReal> x7066=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7061*x7062))+(((-1.0)*r00*x7062*x7063))+((r01*r21))+(((-1.0)*r01*x7063*x7064))+((r00*r20*x7061))+((r02*r22)))),-1);
if(!x7066.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7065.value)+(((1.5707963267949)*(x7066.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7067=IKsin(j4);
IkReal x7068=IKcos(j4);
IkReal x7069=(r11*sj5);
IkReal x7070=(cj5*r00);
IkReal x7071=(cj5*r10);
IkReal x7072=(r21*sj5);
IkReal x7073=(cj5*r20);
IkReal x7074=(r01*sj5);
IkReal x7075=((1.0)*x7068);
IkReal x7076=((1.0)*x7067);
evalcond[0]=(((x7067*x7072))+(((-1.0)*x7073*x7076))+(((-1.0)*r22*x7075)));
evalcond[1]=(((x7068*x7073))+(((-1.0)*x7072*x7075))+(((-1.0)*r22*x7076)));
evalcond[2]=(((x7067*x7069))+cj0+(((-1.0)*x7071*x7076))+(((-1.0)*r12*x7075)));
evalcond[3]=(cj0+((x7068*x7070))+(((-1.0)*r02*x7076))+(((-1.0)*x7074*x7075)));
evalcond[4]=((((-1.0)*x7069*x7075))+sj0+((x7068*x7071))+(((-1.0)*r12*x7076)));
evalcond[5]=((((-1.0)*sj0))+((x7067*x7074))+(((-1.0)*x7070*x7076))+(((-1.0)*r02*x7075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7077=((1.0)*cj5);
CheckValue<IkReal> x7078=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7077))+(((-1.0)*r00*sj5)))),-1);
if(!x7078.valid){
continue;
}
CheckValue<IkReal> x7079 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7077)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7079.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7078.value)))+(x7079.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7080=IKsin(j4);
IkReal x7081=IKcos(j4);
IkReal x7082=(r11*sj5);
IkReal x7083=(cj5*r00);
IkReal x7084=(cj5*r10);
IkReal x7085=(r21*sj5);
IkReal x7086=(cj5*r20);
IkReal x7087=(r01*sj5);
IkReal x7088=((1.0)*x7081);
IkReal x7089=((1.0)*x7080);
evalcond[0]=((((-1.0)*x7086*x7089))+(((-1.0)*r22*x7088))+((x7080*x7085)));
evalcond[1]=(((x7081*x7086))+(((-1.0)*r22*x7089))+(((-1.0)*x7085*x7088)));
evalcond[2]=((((-1.0)*x7084*x7089))+cj0+(((-1.0)*r12*x7088))+((x7080*x7082)));
evalcond[3]=(cj0+((x7081*x7083))+(((-1.0)*x7087*x7088))+(((-1.0)*r02*x7089)));
evalcond[4]=(sj0+((x7081*x7084))+(((-1.0)*r12*x7089))+(((-1.0)*x7082*x7088)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7083*x7089))+(((-1.0)*r02*x7088))+((x7080*x7087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7090=IKsin(j0);
IkReal x7091=IKcos(j0);
IkReal x7092=((0.1)*sj5);
IkReal x7093=(cj5*r11);
IkReal x7094=(cj5*r01);
IkReal x7095=((1.0)*sj5);
evalcond[0]=((((-1.0)*x7094))+x7091+(((-1.0)*r00*x7095)));
evalcond[1]=((((-1.0)*x7093))+x7090+(((-1.0)*r10*x7095)));
evalcond[2]=((((-0.1)*x7094))+(((-1.0)*r00*x7092))+(((-0.134)*x7090))+(((-1.0)*px)));
evalcond[3]=((((-0.1)*x7093))+(((0.134)*x7091))+(((-1.0)*r10*x7092))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7096=((1.0)*sj5);
IkReal x7097=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7096)));
j4eval[0]=x7097;
j4eval[1]=IKsign(x7097);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7096))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7098=((1.0)*cj5);
IkReal x7099=((((-1.0)*r01*x7098))+(((-1.0)*r00*sj5)));
j4eval[0]=x7099;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7098)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7099);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7100=r21*r21;
IkReal x7101=cj5*cj5;
IkReal x7102=(r21*sj5);
IkReal x7103=(cj5*r20);
IkReal x7104=(((x7100*x7101))+(((-1.0)*x7100))+(((2.0)*x7102*x7103))+(((-1.0)*(r22*r22)))+(((-1.0)*x7101*(r20*r20))));
j4eval[0]=x7104;
j4eval[1]=((IKabs(r22))+(IKabs((x7102+(((-1.0)*x7103))))));
j4eval[2]=IKsign(x7104);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7105=r21*r21;
IkReal x7106=cj5*cj5;
IkReal x7107=(r21*sj5);
IkReal x7108=(cj5*r20);
CheckValue<IkReal> x7109 = IKatan2WithCheck(IkReal(r22),IkReal((x7107+(((-1.0)*x7108)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7109.valid){
continue;
}
CheckValue<IkReal> x7110=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7106*(r20*r20)))+(((-1.0)*x7105))+(((2.0)*x7107*x7108))+(((-1.0)*(r22*r22)))+((x7105*x7106)))),-1);
if(!x7110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7109.value)+(((1.5707963267949)*(x7110.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7111=IKsin(j4);
IkReal x7112=IKcos(j4);
IkReal x7113=(r11*sj5);
IkReal x7114=(r21*sj5);
IkReal x7115=(cj5*r00);
IkReal x7116=(cj5*r20);
IkReal x7117=(r01*sj5);
IkReal x7118=(cj5*r10);
IkReal x7119=((1.0)*x7112);
IkReal x7120=((1.0)*x7111);
evalcond[0]=((((-1.0)*x7116*x7120))+((x7111*x7114))+(((-1.0)*r22*x7119)));
evalcond[1]=((((-1.0)*x7117*x7119))+(((-1.0)*r02*x7120))+((x7112*x7115)));
evalcond[2]=((((-1.0)*r12*x7120))+(((-1.0)*x7113*x7119))+((x7112*x7118)));
evalcond[3]=(cj0+(((-1.0)*x7118*x7120))+(((-1.0)*r12*x7119))+((x7111*x7113)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7120))+(((-1.0)*x7114*x7119))+((x7112*x7116)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7115*x7120))+((x7111*x7117))+(((-1.0)*r02*x7119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7121=((1.0)*cj5);
CheckValue<IkReal> x7122 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7121)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7122.valid){
continue;
}
CheckValue<IkReal> x7123=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7121)))),-1);
if(!x7123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7122.value)+(((1.5707963267949)*(x7123.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7124=IKsin(j4);
IkReal x7125=IKcos(j4);
IkReal x7126=(r11*sj5);
IkReal x7127=(r21*sj5);
IkReal x7128=(cj5*r00);
IkReal x7129=(cj5*r20);
IkReal x7130=(r01*sj5);
IkReal x7131=(cj5*r10);
IkReal x7132=((1.0)*x7125);
IkReal x7133=((1.0)*x7124);
evalcond[0]=((((-1.0)*r22*x7132))+((x7124*x7127))+(((-1.0)*x7129*x7133)));
evalcond[1]=((((-1.0)*x7130*x7132))+((x7125*x7128))+(((-1.0)*r02*x7133)));
evalcond[2]=((((-1.0)*r12*x7133))+((x7125*x7131))+(((-1.0)*x7126*x7132)));
evalcond[3]=((((-1.0)*r12*x7132))+cj0+((x7124*x7126))+(((-1.0)*x7131*x7133)));
evalcond[4]=((-1.0)+(((-1.0)*x7127*x7132))+(((-1.0)*r22*x7133))+((x7125*x7129)));
evalcond[5]=((((-1.0)*sj0))+((x7124*x7130))+(((-1.0)*x7128*x7133))+(((-1.0)*r02*x7132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7134=((1.0)*sj5);
CheckValue<IkReal> x7135=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7134)))),-1);
if(!x7135.valid){
continue;
}
CheckValue<IkReal> x7136 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7134))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7136.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7135.value)))+(x7136.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7137=IKsin(j4);
IkReal x7138=IKcos(j4);
IkReal x7139=(r11*sj5);
IkReal x7140=(r21*sj5);
IkReal x7141=(cj5*r00);
IkReal x7142=(cj5*r20);
IkReal x7143=(r01*sj5);
IkReal x7144=(cj5*r10);
IkReal x7145=((1.0)*x7138);
IkReal x7146=((1.0)*x7137);
evalcond[0]=((((-1.0)*x7142*x7146))+(((-1.0)*r22*x7145))+((x7137*x7140)));
evalcond[1]=(((x7138*x7141))+(((-1.0)*r02*x7146))+(((-1.0)*x7143*x7145)));
evalcond[2]=(((x7138*x7144))+(((-1.0)*x7139*x7145))+(((-1.0)*r12*x7146)));
evalcond[3]=(cj0+(((-1.0)*x7144*x7146))+((x7137*x7139))+(((-1.0)*r12*x7145)));
evalcond[4]=((-1.0)+((x7138*x7142))+(((-1.0)*r22*x7146))+(((-1.0)*x7140*x7145)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7141*x7146))+((x7137*x7143))+(((-1.0)*r02*x7145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.78008187832539)*px))+(((2.28319487074043)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.78008187832539)*py))+(((2.28319487074043)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.78008187832539)*px))+(((2.28319487074043)*py))))+IKsqr(((((0.78008187832539)*py))+(((2.28319487074043)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.78008187832539)*px))+(((2.28319487074043)*py))), ((((0.78008187832539)*py))+(((2.28319487074043)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7147=IKcos(j0);
IkReal x7148=IKsin(j0);
evalcond[0]=((((0.3922)*x7147))+(((-1.0)*px))+(((-0.134)*x7148)));
evalcond[1]=((((0.3922)*x7148))+(((0.134)*x7147))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7149=((1.0)*cj5);
IkReal x7150=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7149)));
j4eval[0]=x7150;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7149))))));
j4eval[2]=IKsign(x7150);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7151=((1.0)*cj5);
IkReal x7152=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7151)));
j4eval[0]=x7152;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7151))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7152);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7153=cj5*cj5;
IkReal x7154=((1.0)*sj5);
IkReal x7155=(cj5*r20);
IkReal x7156=(r11*r21);
IkReal x7157=(x7156+((r10*r20*x7153))+(((-1.0)*x7153*x7156))+(((-1.0)*r11*x7154*x7155))+((r12*r22))+(((-1.0)*cj5*r10*r21*x7154)));
j4eval[0]=x7157;
j4eval[1]=IKsign(x7157);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x7154))+((cj0*x7155))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7158=cj5*cj5;
IkReal x7159=((1.0)*sj5);
IkReal x7160=(cj5*r20);
IkReal x7161=(r11*r21);
CheckValue<IkReal> x7162=IKPowWithIntegerCheck(IKsign((x7161+((r10*r20*x7158))+(((-1.0)*r11*x7159*x7160))+((r12*r22))+(((-1.0)*x7158*x7161))+(((-1.0)*cj5*r10*r21*x7159)))),-1);
if(!x7162.valid){
continue;
}
CheckValue<IkReal> x7163 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7159))+((cj0*x7160)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7163.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7162.value)))+(x7163.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7164=IKsin(j4);
IkReal x7165=IKcos(j4);
IkReal x7166=((1.0)*sj0);
IkReal x7167=(cj5*r00);
IkReal x7168=(r11*sj5);
IkReal x7169=(cj5*r10);
IkReal x7170=(r21*sj5);
IkReal x7171=(cj5*r20);
IkReal x7172=(r01*sj5);
IkReal x7173=((1.0)*x7165);
IkReal x7174=((1.0)*x7164);
evalcond[0]=((((-1.0)*x7171*x7174))+(((-1.0)*r22*x7173))+((x7164*x7170)));
evalcond[1]=((((-1.0)*x7170*x7173))+(((-1.0)*r22*x7174))+((x7165*x7171)));
evalcond[2]=((((-1.0)*x7169*x7174))+cj0+((x7164*x7168))+(((-1.0)*r12*x7173)));
evalcond[3]=((((-1.0)*r02*x7173))+(((-1.0)*x7166))+(((-1.0)*x7167*x7174))+((x7164*x7172)));
evalcond[4]=((((-1.0)*r02*x7174))+((x7165*x7167))+(((-1.0)*x7172*x7173))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7168*x7173))+((x7165*x7169))+(((-1.0)*x7166))+(((-1.0)*r12*x7174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7175=((1.0)*cj5);
CheckValue<IkReal> x7176=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7175)))),-1);
if(!x7176.valid){
continue;
}
CheckValue<IkReal> x7177 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7175))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7177.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7176.value)))+(x7177.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7178=IKsin(j4);
IkReal x7179=IKcos(j4);
IkReal x7180=((1.0)*sj0);
IkReal x7181=(cj5*r00);
IkReal x7182=(r11*sj5);
IkReal x7183=(cj5*r10);
IkReal x7184=(r21*sj5);
IkReal x7185=(cj5*r20);
IkReal x7186=(r01*sj5);
IkReal x7187=((1.0)*x7179);
IkReal x7188=((1.0)*x7178);
evalcond[0]=(((x7178*x7184))+(((-1.0)*x7185*x7188))+(((-1.0)*r22*x7187)));
evalcond[1]=(((x7179*x7185))+(((-1.0)*x7184*x7187))+(((-1.0)*r22*x7188)));
evalcond[2]=(cj0+((x7178*x7182))+(((-1.0)*x7183*x7188))+(((-1.0)*r12*x7187)));
evalcond[3]=(((x7178*x7186))+(((-1.0)*x7180))+(((-1.0)*x7181*x7188))+(((-1.0)*r02*x7187)));
evalcond[4]=(((x7179*x7181))+(((-1.0)*x7186*x7187))+(((-1.0)*r02*x7188))+(((-1.0)*cj0)));
evalcond[5]=(((x7179*x7183))+(((-1.0)*x7180))+(((-1.0)*x7182*x7187))+(((-1.0)*r12*x7188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7189=((1.0)*cj5);
CheckValue<IkReal> x7190 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7189)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7190.valid){
continue;
}
CheckValue<IkReal> x7191=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7189)))),-1);
if(!x7191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7190.value)+(((1.5707963267949)*(x7191.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7192=IKsin(j4);
IkReal x7193=IKcos(j4);
IkReal x7194=((1.0)*sj0);
IkReal x7195=(cj5*r00);
IkReal x7196=(r11*sj5);
IkReal x7197=(cj5*r10);
IkReal x7198=(r21*sj5);
IkReal x7199=(cj5*r20);
IkReal x7200=(r01*sj5);
IkReal x7201=((1.0)*x7193);
IkReal x7202=((1.0)*x7192);
evalcond[0]=((((-1.0)*x7199*x7202))+((x7192*x7198))+(((-1.0)*r22*x7201)));
evalcond[1]=((((-1.0)*x7198*x7201))+((x7193*x7199))+(((-1.0)*r22*x7202)));
evalcond[2]=(cj0+(((-1.0)*x7197*x7202))+((x7192*x7196))+(((-1.0)*r12*x7201)));
evalcond[3]=((((-1.0)*x7194))+(((-1.0)*x7195*x7202))+((x7192*x7200))+(((-1.0)*r02*x7201)));
evalcond[4]=(((x7193*x7195))+(((-1.0)*x7200*x7201))+(((-1.0)*cj0))+(((-1.0)*r02*x7202)));
evalcond[5]=((((-1.0)*x7194))+(((-1.0)*x7196*x7201))+((x7193*x7197))+(((-1.0)*r12*x7202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.19164998084494)*py))+(((-0.195400266071001)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.19164998084494)*px))+(((0.195400266071001)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.19164998084494)*py))+(((-0.195400266071001)*px))))+IKsqr(((((-1.19164998084494)*px))+(((0.195400266071001)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.19164998084494)*py))+(((-0.195400266071001)*px))), ((((-1.19164998084494)*px))+(((0.195400266071001)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7203=IKcos(j0);
IkReal x7204=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.134)*x7204))+(((-0.8172)*x7203)));
evalcond[1]=((((-1.0)*py))+(((-0.8172)*x7204))+(((0.134)*x7203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7205=((1.0)*cj5);
IkReal x7206=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7205)));
j4eval[0]=x7206;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x7205))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x7206);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7207=cj5*cj5;
IkReal x7208=((1.0)*r21);
IkReal x7209=(cj5*sj5);
IkReal x7210=((1.0)*r20);
IkReal x7211=(((r00*r20*x7207))+(((-1.0)*r00*x7208*x7209))+((r01*r21))+(((-1.0)*r01*x7207*x7208))+(((-1.0)*r01*x7209*x7210))+((r02*r22)));
j4eval[0]=x7211;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7210)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7211);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7212=cj5*cj5;
IkReal x7213=(r21*sj5);
IkReal x7214=(r11*r21);
IkReal x7215=((1.0)*cj5*r20);
IkReal x7216=(x7214+(((-1.0)*r11*sj5*x7215))+((r10*r20*x7212))+((r12*r22))+(((-1.0)*x7212*x7214))+(((-1.0)*cj5*r10*x7213)));
j4eval[0]=x7216;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x7215))+((sj0*x7213))))));
j4eval[2]=IKsign(x7216);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7217=cj5*cj5;
IkReal x7218=(r21*sj5);
IkReal x7219=(r11*r21);
IkReal x7220=((1.0)*cj5*r20);
CheckValue<IkReal> x7221 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7218))+(((-1.0)*sj0*x7220)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7221.valid){
continue;
}
CheckValue<IkReal> x7222=IKPowWithIntegerCheck(IKsign((x7219+((r10*r20*x7217))+((r12*r22))+(((-1.0)*cj5*r10*x7218))+(((-1.0)*r11*sj5*x7220))+(((-1.0)*x7217*x7219)))),-1);
if(!x7222.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7221.value)+(((1.5707963267949)*(x7222.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7223=IKsin(j4);
IkReal x7224=IKcos(j4);
IkReal x7225=(r11*sj5);
IkReal x7226=(cj5*r00);
IkReal x7227=(cj5*r10);
IkReal x7228=(r21*sj5);
IkReal x7229=(cj5*r20);
IkReal x7230=(r01*sj5);
IkReal x7231=((1.0)*x7224);
IkReal x7232=((1.0)*x7223);
evalcond[0]=((((-1.0)*x7229*x7232))+((x7223*x7228))+(((-1.0)*r22*x7231)));
evalcond[1]=((((-1.0)*x7228*x7231))+((x7224*x7229))+(((-1.0)*r22*x7232)));
evalcond[2]=(cj0+((x7223*x7225))+(((-1.0)*x7227*x7232))+(((-1.0)*r12*x7231)));
evalcond[3]=(cj0+(((-1.0)*x7230*x7231))+((x7224*x7226))+(((-1.0)*r02*x7232)));
evalcond[4]=(sj0+(((-1.0)*x7225*x7231))+((x7224*x7227))+(((-1.0)*r12*x7232)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7226*x7232))+((x7223*x7230))+(((-1.0)*r02*x7231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7233=cj5*cj5;
IkReal x7234=((1.0)*r21);
IkReal x7235=(cj5*sj5);
IkReal x7236=((1.0)*r20);
CheckValue<IkReal> x7237=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r00*x7234*x7235))+((r02*r22))+((r00*r20*x7233))+(((-1.0)*r01*x7235*x7236))+(((-1.0)*r01*x7233*x7234)))),-1);
if(!x7237.valid){
continue;
}
CheckValue<IkReal> x7238 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7236)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7238.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7237.value)))+(x7238.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7239=IKsin(j4);
IkReal x7240=IKcos(j4);
IkReal x7241=(r11*sj5);
IkReal x7242=(cj5*r00);
IkReal x7243=(cj5*r10);
IkReal x7244=(r21*sj5);
IkReal x7245=(cj5*r20);
IkReal x7246=(r01*sj5);
IkReal x7247=((1.0)*x7240);
IkReal x7248=((1.0)*x7239);
evalcond[0]=((((-1.0)*x7245*x7248))+(((-1.0)*r22*x7247))+((x7239*x7244)));
evalcond[1]=(((x7240*x7245))+(((-1.0)*x7244*x7247))+(((-1.0)*r22*x7248)));
evalcond[2]=((((-1.0)*r12*x7247))+cj0+((x7239*x7241))+(((-1.0)*x7243*x7248)));
evalcond[3]=(((x7240*x7242))+(((-1.0)*x7246*x7247))+cj0+(((-1.0)*r02*x7248)));
evalcond[4]=(((x7240*x7243))+sj0+(((-1.0)*r12*x7248))+(((-1.0)*x7241*x7247)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7242*x7248))+(((-1.0)*r02*x7247))+((x7239*x7246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7249=((1.0)*cj5);
CheckValue<IkReal> x7250 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7249)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7250.valid){
continue;
}
CheckValue<IkReal> x7251=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7249)))),-1);
if(!x7251.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7250.value)+(((1.5707963267949)*(x7251.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7252=IKsin(j4);
IkReal x7253=IKcos(j4);
IkReal x7254=(r11*sj5);
IkReal x7255=(cj5*r00);
IkReal x7256=(cj5*r10);
IkReal x7257=(r21*sj5);
IkReal x7258=(cj5*r20);
IkReal x7259=(r01*sj5);
IkReal x7260=((1.0)*x7253);
IkReal x7261=((1.0)*x7252);
evalcond[0]=((((-1.0)*r22*x7260))+((x7252*x7257))+(((-1.0)*x7258*x7261)));
evalcond[1]=((((-1.0)*r22*x7261))+(((-1.0)*x7257*x7260))+((x7253*x7258)));
evalcond[2]=(cj0+((x7252*x7254))+(((-1.0)*x7256*x7261))+(((-1.0)*r12*x7260)));
evalcond[3]=(cj0+(((-1.0)*x7259*x7260))+(((-1.0)*r02*x7261))+((x7253*x7255)));
evalcond[4]=(sj0+(((-1.0)*r12*x7261))+((x7253*x7256))+(((-1.0)*x7254*x7260)));
evalcond[5]=((((-1.0)*sj0))+((x7252*x7259))+(((-1.0)*x7255*x7261))+(((-1.0)*r02*x7260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-7.04083262574717)*px))+(((-1.72342768749632)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((7.04083262574717)*py))+(((-1.72342768749632)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.04083262574717)*px))+(((-1.72342768749632)*py))))+IKsqr(((((7.04083262574717)*py))+(((-1.72342768749632)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-7.04083262574717)*px))+(((-1.72342768749632)*py))), ((((7.04083262574717)*py))+(((-1.72342768749632)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7262=IKcos(j0);
IkReal x7263=IKsin(j0);
evalcond[0]=((((-0.134)*x7263))+(((-1.0)*px))+(((-0.0328)*x7262)));
evalcond[1]=((((0.134)*x7262))+(((-1.0)*py))+(((-0.0328)*x7263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7264=((1.0)*cj5);
IkReal x7265=((((-1.0)*r01*x7264))+(((-1.0)*r00*sj5)));
j4eval[0]=x7265;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7264))))));
j4eval[2]=IKsign(x7265);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7266=((1.0)*cj5);
IkReal x7267=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7266)));
j4eval[0]=x7267;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7266))))));
j4eval[2]=IKsign(x7267);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7268=cj5*cj5;
IkReal x7269=((1.0)*sj5);
IkReal x7270=(cj5*r20);
IkReal x7271=(r11*r21);
IkReal x7272=((((-1.0)*cj5*r10*r21*x7269))+x7271+((r12*r22))+((r10*r20*x7268))+(((-1.0)*x7268*x7271))+(((-1.0)*r11*x7269*x7270)));
j4eval[0]=x7272;
j4eval[1]=IKsign(x7272);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7269))+((cj0*x7270)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7273=cj5*cj5;
IkReal x7274=((1.0)*sj5);
IkReal x7275=(cj5*r20);
IkReal x7276=(r11*r21);
CheckValue<IkReal> x7277 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7274))+((cj0*x7275)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7277.valid){
continue;
}
CheckValue<IkReal> x7278=IKPowWithIntegerCheck(IKsign((x7276+(((-1.0)*x7273*x7276))+((r12*r22))+((r10*r20*x7273))+(((-1.0)*r11*x7274*x7275))+(((-1.0)*cj5*r10*r21*x7274)))),-1);
if(!x7278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7277.value)+(((1.5707963267949)*(x7278.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7279=IKsin(j4);
IkReal x7280=IKcos(j4);
IkReal x7281=((1.0)*sj0);
IkReal x7282=(cj5*r00);
IkReal x7283=(r11*sj5);
IkReal x7284=(cj5*r10);
IkReal x7285=(r21*sj5);
IkReal x7286=(cj5*r20);
IkReal x7287=(r01*sj5);
IkReal x7288=((1.0)*x7280);
IkReal x7289=((1.0)*x7279);
evalcond[0]=((((-1.0)*x7286*x7289))+((x7279*x7285))+(((-1.0)*r22*x7288)));
evalcond[1]=(((x7280*x7286))+(((-1.0)*x7285*x7288))+(((-1.0)*r22*x7289)));
evalcond[2]=((((-1.0)*x7284*x7289))+cj0+(((-1.0)*r12*x7288))+((x7279*x7283)));
evalcond[3]=((((-1.0)*x7282*x7289))+(((-1.0)*x7281))+((x7279*x7287))+(((-1.0)*r02*x7288)));
evalcond[4]=(((x7280*x7282))+(((-1.0)*x7287*x7288))+(((-1.0)*r02*x7289))+(((-1.0)*cj0)));
evalcond[5]=(((x7280*x7284))+(((-1.0)*x7281))+(((-1.0)*r12*x7289))+(((-1.0)*x7283*x7288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7290=((1.0)*cj5);
CheckValue<IkReal> x7291 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7290))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7291.valid){
continue;
}
CheckValue<IkReal> x7292=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7290)))),-1);
if(!x7292.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7291.value)+(((1.5707963267949)*(x7292.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7293=IKsin(j4);
IkReal x7294=IKcos(j4);
IkReal x7295=((1.0)*sj0);
IkReal x7296=(cj5*r00);
IkReal x7297=(r11*sj5);
IkReal x7298=(cj5*r10);
IkReal x7299=(r21*sj5);
IkReal x7300=(cj5*r20);
IkReal x7301=(r01*sj5);
IkReal x7302=((1.0)*x7294);
IkReal x7303=((1.0)*x7293);
evalcond[0]=(((x7293*x7299))+(((-1.0)*x7300*x7303))+(((-1.0)*r22*x7302)));
evalcond[1]=(((x7294*x7300))+(((-1.0)*x7299*x7302))+(((-1.0)*r22*x7303)));
evalcond[2]=(cj0+((x7293*x7297))+(((-1.0)*r12*x7302))+(((-1.0)*x7298*x7303)));
evalcond[3]=((((-1.0)*r02*x7302))+((x7293*x7301))+(((-1.0)*x7295))+(((-1.0)*x7296*x7303)));
evalcond[4]=((((-1.0)*r02*x7303))+(((-1.0)*x7301*x7302))+(((-1.0)*cj0))+((x7294*x7296)));
evalcond[5]=((((-1.0)*x7297*x7302))+(((-1.0)*x7295))+(((-1.0)*r12*x7303))+((x7294*x7298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7304=((1.0)*cj5);
CheckValue<IkReal> x7305 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7304)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7305.valid){
continue;
}
CheckValue<IkReal> x7306=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7304)))),-1);
if(!x7306.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7305.value)+(((1.5707963267949)*(x7306.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7307=IKsin(j4);
IkReal x7308=IKcos(j4);
IkReal x7309=((1.0)*sj0);
IkReal x7310=(cj5*r00);
IkReal x7311=(r11*sj5);
IkReal x7312=(cj5*r10);
IkReal x7313=(r21*sj5);
IkReal x7314=(cj5*r20);
IkReal x7315=(r01*sj5);
IkReal x7316=((1.0)*x7308);
IkReal x7317=((1.0)*x7307);
evalcond[0]=(((x7307*x7313))+(((-1.0)*r22*x7316))+(((-1.0)*x7314*x7317)));
evalcond[1]=(((x7308*x7314))+(((-1.0)*r22*x7317))+(((-1.0)*x7313*x7316)));
evalcond[2]=(cj0+((x7307*x7311))+(((-1.0)*r12*x7316))+(((-1.0)*x7312*x7317)));
evalcond[3]=(((x7307*x7315))+(((-1.0)*x7309))+(((-1.0)*x7310*x7317))+(((-1.0)*r02*x7316)));
evalcond[4]=(((x7308*x7310))+(((-1.0)*x7315*x7316))+(((-1.0)*cj0))+(((-1.0)*r02*x7317)));
evalcond[5]=((((-1.0)*x7311*x7316))+((x7308*x7312))+(((-1.0)*r12*x7317))+(((-1.0)*x7309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7318=IKsin(j0);
IkReal x7319=IKcos(j0);
IkReal x7320=((0.1)*sj5);
IkReal x7321=(cj5*r11);
IkReal x7322=(cj5*r01);
IkReal x7323=((1.0)*sj5);
evalcond[0]=(x7319+(((-1.0)*x7322))+(((-1.0)*r00*x7323)));
evalcond[1]=(x7318+(((-1.0)*x7321))+(((-1.0)*r10*x7323)));
evalcond[2]=((((-0.134)*x7318))+(((-0.1)*x7322))+(((-1.0)*r00*x7320))+(((-1.0)*px)));
evalcond[3]=((((-0.1)*x7321))+(((-1.0)*py))+(((0.134)*x7319))+(((-1.0)*r10*x7320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7324=((1.0)*sj5);
IkReal x7325=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7324)));
j4eval[0]=x7325;
j4eval[1]=IKsign(x7325);
j4eval[2]=((IKabs(((((-1.0)*r01*x7324))+((cj5*r00)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7326=((1.0)*cj5);
IkReal x7327=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7326)));
j4eval[0]=x7327;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7326)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7327);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7328=r21*r21;
IkReal x7329=cj5*cj5;
IkReal x7330=(r21*sj5);
IkReal x7331=(cj5*r20);
IkReal x7332=((((-1.0)*x7328))+(((-1.0)*x7329*(r20*r20)))+(((-1.0)*(r22*r22)))+((x7328*x7329))+(((2.0)*x7330*x7331)));
j4eval[0]=x7332;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*x7331))+x7330))));
j4eval[2]=IKsign(x7332);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7333=r21*r21;
IkReal x7334=cj5*cj5;
IkReal x7335=(r21*sj5);
IkReal x7336=(cj5*r20);
CheckValue<IkReal> x7337 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x7336))+x7335)),IKFAST_ATAN2_MAGTHRESH);
if(!x7337.valid){
continue;
}
CheckValue<IkReal> x7338=IKPowWithIntegerCheck(IKsign(((((2.0)*x7335*x7336))+(((-1.0)*x7333))+(((-1.0)*x7334*(r20*r20)))+(((-1.0)*(r22*r22)))+((x7333*x7334)))),-1);
if(!x7338.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7337.value)+(((1.5707963267949)*(x7338.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7339=IKsin(j4);
IkReal x7340=IKcos(j4);
IkReal x7341=(r11*sj5);
IkReal x7342=(r21*sj5);
IkReal x7343=(cj5*r00);
IkReal x7344=(cj5*r20);
IkReal x7345=(r01*sj5);
IkReal x7346=(cj5*r10);
IkReal x7347=((1.0)*x7340);
IkReal x7348=((1.0)*x7339);
evalcond[0]=(((x7339*x7342))+(((-1.0)*r22*x7347))+(((-1.0)*x7344*x7348)));
evalcond[1]=((((-1.0)*x7345*x7347))+((x7340*x7343))+(((-1.0)*r02*x7348)));
evalcond[2]=((((-1.0)*r12*x7348))+(((-1.0)*x7341*x7347))+((x7340*x7346)));
evalcond[3]=(((x7339*x7341))+cj0+(((-1.0)*r12*x7347))+(((-1.0)*x7346*x7348)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7348))+(((-1.0)*x7342*x7347))+((x7340*x7344)));
evalcond[5]=(((x7339*x7345))+(((-1.0)*sj0))+(((-1.0)*x7343*x7348))+(((-1.0)*r02*x7347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7349=((1.0)*cj5);
CheckValue<IkReal> x7350 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7349)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7350.valid){
continue;
}
CheckValue<IkReal> x7351=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7349))+(((-1.0)*r00*sj5)))),-1);
if(!x7351.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7350.value)+(((1.5707963267949)*(x7351.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7352=IKsin(j4);
IkReal x7353=IKcos(j4);
IkReal x7354=(r11*sj5);
IkReal x7355=(r21*sj5);
IkReal x7356=(cj5*r00);
IkReal x7357=(cj5*r20);
IkReal x7358=(r01*sj5);
IkReal x7359=(cj5*r10);
IkReal x7360=((1.0)*x7353);
IkReal x7361=((1.0)*x7352);
evalcond[0]=(((x7352*x7355))+(((-1.0)*r22*x7360))+(((-1.0)*x7357*x7361)));
evalcond[1]=(((x7353*x7356))+(((-1.0)*r02*x7361))+(((-1.0)*x7358*x7360)));
evalcond[2]=(((x7353*x7359))+(((-1.0)*r12*x7361))+(((-1.0)*x7354*x7360)));
evalcond[3]=(((x7352*x7354))+cj0+(((-1.0)*r12*x7360))+(((-1.0)*x7359*x7361)));
evalcond[4]=((-1.0)+((x7353*x7357))+(((-1.0)*r22*x7361))+(((-1.0)*x7355*x7360)));
evalcond[5]=((((-1.0)*sj0))+((x7352*x7358))+(((-1.0)*x7356*x7361))+(((-1.0)*r02*x7360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7362=((1.0)*sj5);
CheckValue<IkReal> x7363 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7362))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7363.valid){
continue;
}
CheckValue<IkReal> x7364=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7362)))),-1);
if(!x7364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7363.value)+(((1.5707963267949)*(x7364.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7365=IKsin(j4);
IkReal x7366=IKcos(j4);
IkReal x7367=(r11*sj5);
IkReal x7368=(r21*sj5);
IkReal x7369=(cj5*r00);
IkReal x7370=(cj5*r20);
IkReal x7371=(r01*sj5);
IkReal x7372=(cj5*r10);
IkReal x7373=((1.0)*x7366);
IkReal x7374=((1.0)*x7365);
evalcond[0]=((((-1.0)*r22*x7373))+(((-1.0)*x7370*x7374))+((x7365*x7368)));
evalcond[1]=(((x7366*x7369))+(((-1.0)*r02*x7374))+(((-1.0)*x7371*x7373)));
evalcond[2]=((((-1.0)*r12*x7374))+((x7366*x7372))+(((-1.0)*x7367*x7373)));
evalcond[3]=(cj0+(((-1.0)*r12*x7373))+((x7365*x7367))+(((-1.0)*x7372*x7374)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7374))+((x7366*x7370))+(((-1.0)*x7368*x7373)));
evalcond[5]=((((-1.0)*sj0))+((x7365*x7371))+(((-1.0)*r02*x7373))+(((-1.0)*x7369*x7374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.78008187832539)*px))+(((2.28319487074043)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.78008187832539)*py))+(((2.28319487074043)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.78008187832539)*px))+(((2.28319487074043)*py))))+IKsqr(((((0.78008187832539)*py))+(((2.28319487074043)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.78008187832539)*px))+(((2.28319487074043)*py))), ((((0.78008187832539)*py))+(((2.28319487074043)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7375=IKcos(j0);
IkReal x7376=IKsin(j0);
evalcond[0]=((((-0.134)*x7376))+(((-1.0)*px))+(((0.3922)*x7375)));
evalcond[1]=((((0.134)*x7375))+(((-1.0)*py))+(((0.3922)*x7376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7377=((1.0)*cj5);
IkReal x7378=((((-1.0)*r01*x7377))+(((-1.0)*r00*sj5)));
j4eval[0]=x7378;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7377)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7378);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7379=((1.0)*cj5);
IkReal x7380=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7379)));
j4eval[0]=x7380;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7379))))));
j4eval[2]=IKsign(x7380);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7381=cj5*cj5;
IkReal x7382=((1.0)*sj5);
IkReal x7383=(cj5*r20);
IkReal x7384=(r11*r21);
IkReal x7385=(x7384+(((-1.0)*r11*x7382*x7383))+(((-1.0)*x7381*x7384))+((r10*r20*x7381))+((r12*r22))+(((-1.0)*cj5*r10*r21*x7382)));
j4eval[0]=x7385;
j4eval[1]=IKsign(x7385);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7382))+((cj0*x7383)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7386=cj5*cj5;
IkReal x7387=((1.0)*sj5);
IkReal x7388=(cj5*r20);
IkReal x7389=(r11*r21);
CheckValue<IkReal> x7390 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7387))+((cj0*x7388)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7390.valid){
continue;
}
CheckValue<IkReal> x7391=IKPowWithIntegerCheck(IKsign((x7389+((r10*r20*x7386))+(((-1.0)*x7386*x7389))+((r12*r22))+(((-1.0)*r11*x7387*x7388))+(((-1.0)*cj5*r10*r21*x7387)))),-1);
if(!x7391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7390.value)+(((1.5707963267949)*(x7391.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7392=IKsin(j4);
IkReal x7393=IKcos(j4);
IkReal x7394=((1.0)*sj0);
IkReal x7395=(cj5*r00);
IkReal x7396=(r11*sj5);
IkReal x7397=(cj5*r10);
IkReal x7398=(r21*sj5);
IkReal x7399=(cj5*r20);
IkReal x7400=(r01*sj5);
IkReal x7401=((1.0)*x7393);
IkReal x7402=((1.0)*x7392);
evalcond[0]=((((-1.0)*x7399*x7402))+(((-1.0)*r22*x7401))+((x7392*x7398)));
evalcond[1]=((((-1.0)*x7398*x7401))+(((-1.0)*r22*x7402))+((x7393*x7399)));
evalcond[2]=((((-1.0)*r12*x7401))+cj0+(((-1.0)*x7397*x7402))+((x7392*x7396)));
evalcond[3]=(((x7392*x7400))+(((-1.0)*x7395*x7402))+(((-1.0)*x7394))+(((-1.0)*r02*x7401)));
evalcond[4]=(((x7393*x7395))+(((-1.0)*x7400*x7401))+(((-1.0)*r02*x7402))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7402))+(((-1.0)*x7396*x7401))+((x7393*x7397))+(((-1.0)*x7394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7403=((1.0)*cj5);
CheckValue<IkReal> x7404 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7403)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7404.valid){
continue;
}
CheckValue<IkReal> x7405=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7403))+(((-1.0)*r10*sj5)))),-1);
if(!x7405.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7404.value)+(((1.5707963267949)*(x7405.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7406=IKsin(j4);
IkReal x7407=IKcos(j4);
IkReal x7408=((1.0)*sj0);
IkReal x7409=(cj5*r00);
IkReal x7410=(r11*sj5);
IkReal x7411=(cj5*r10);
IkReal x7412=(r21*sj5);
IkReal x7413=(cj5*r20);
IkReal x7414=(r01*sj5);
IkReal x7415=((1.0)*x7407);
IkReal x7416=((1.0)*x7406);
evalcond[0]=(((x7406*x7412))+(((-1.0)*r22*x7415))+(((-1.0)*x7413*x7416)));
evalcond[1]=(((x7407*x7413))+(((-1.0)*r22*x7416))+(((-1.0)*x7412*x7415)));
evalcond[2]=((((-1.0)*r12*x7415))+cj0+((x7406*x7410))+(((-1.0)*x7411*x7416)));
evalcond[3]=(((x7406*x7414))+(((-1.0)*x7408))+(((-1.0)*x7409*x7416))+(((-1.0)*r02*x7415)));
evalcond[4]=((((-1.0)*x7414*x7415))+((x7407*x7409))+(((-1.0)*cj0))+(((-1.0)*r02*x7416)));
evalcond[5]=((((-1.0)*r12*x7416))+(((-1.0)*x7408))+((x7407*x7411))+(((-1.0)*x7410*x7415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7417=((1.0)*cj5);
CheckValue<IkReal> x7418 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7417)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7418.valid){
continue;
}
CheckValue<IkReal> x7419=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7417))+(((-1.0)*r00*sj5)))),-1);
if(!x7419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7418.value)+(((1.5707963267949)*(x7419.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7420=IKsin(j4);
IkReal x7421=IKcos(j4);
IkReal x7422=((1.0)*sj0);
IkReal x7423=(cj5*r00);
IkReal x7424=(r11*sj5);
IkReal x7425=(cj5*r10);
IkReal x7426=(r21*sj5);
IkReal x7427=(cj5*r20);
IkReal x7428=(r01*sj5);
IkReal x7429=((1.0)*x7421);
IkReal x7430=((1.0)*x7420);
evalcond[0]=((((-1.0)*r22*x7429))+(((-1.0)*x7427*x7430))+((x7420*x7426)));
evalcond[1]=((((-1.0)*r22*x7430))+((x7421*x7427))+(((-1.0)*x7426*x7429)));
evalcond[2]=(cj0+(((-1.0)*r12*x7429))+((x7420*x7424))+(((-1.0)*x7425*x7430)));
evalcond[3]=((((-1.0)*r02*x7429))+(((-1.0)*x7422))+((x7420*x7428))+(((-1.0)*x7423*x7430)));
evalcond[4]=((((-1.0)*r02*x7430))+(((-1.0)*x7428*x7429))+((x7421*x7423))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7430))+(((-1.0)*x7422))+(((-1.0)*x7424*x7429))+((x7421*x7425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7431=((1.0)*sj5);
IkReal x7432=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x7432))+(((-1.0)*r10*x7431)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x7432))+(((-1.0)*r00*x7431)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x7432))+(((-1.0)*r10*x7431))))+IKsqr(((((-1.0)*r01*x7432))+(((-1.0)*r00*x7431))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x7432))+(((-1.0)*r10*x7431))), ((((-1.0)*r01*x7432))+(((-1.0)*r00*x7431))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7433=IKsin(j0);
IkReal x7434=IKcos(j0);
IkReal x7435=((0.1)*sj5);
IkReal x7436=(cj5*r11);
IkReal x7437=(cj5*r01);
IkReal x7438=((1.0)*sj5);
evalcond[0]=((((-1.0)*x7434))+(((-1.0)*x7437))+(((-1.0)*r00*x7438)));
evalcond[1]=((((-1.0)*x7433))+(((-1.0)*x7436))+(((-1.0)*r10*x7438)));
evalcond[2]=((((-1.0)*r00*x7435))+(((-1.0)*px))+(((-0.1)*x7437))+(((-0.134)*x7433)));
evalcond[3]=((((0.134)*x7434))+(((-1.0)*py))+(((-1.0)*r10*x7435))+(((-0.1)*x7436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7439=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7439;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7439);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7440=((1.0)*cj5);
IkReal x7441=((((-1.0)*r01*x7440))+(((-1.0)*r00*sj5)));
j4eval[0]=x7441;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7440)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7441);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7442=cj5*cj5;
IkReal x7443=r21*r21;
IkReal x7444=(r21*sj5);
IkReal x7445=(cj5*r20);
IkReal x7446=((((-1.0)*x7442*x7443))+((x7442*(r20*r20)))+(r22*r22)+(((-2.0)*x7444*x7445))+x7443);
j4eval[0]=x7446;
j4eval[1]=IKsign(x7446);
j4eval[2]=((IKabs(((((-1.0)*x7445))+x7444)))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7447=cj5*cj5;
IkReal x7448=r21*r21;
IkReal x7449=(r21*sj5);
IkReal x7450=(cj5*r20);
CheckValue<IkReal> x7451=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7447*x7448))+(r22*r22)+(((-2.0)*x7449*x7450))+((x7447*(r20*r20)))+x7448)),-1);
if(!x7451.valid){
continue;
}
CheckValue<IkReal> x7452 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x7450))+x7449)),IKFAST_ATAN2_MAGTHRESH);
if(!x7452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7451.value)))+(x7452.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7453=IKsin(j4);
IkReal x7454=IKcos(j4);
IkReal x7455=(r11*sj5);
IkReal x7456=(r21*sj5);
IkReal x7457=(cj5*r00);
IkReal x7458=(cj5*r20);
IkReal x7459=(r01*sj5);
IkReal x7460=(cj5*r10);
IkReal x7461=((1.0)*x7454);
IkReal x7462=((1.0)*x7453);
evalcond[0]=((((-1.0)*x7458*x7462))+(((-1.0)*r22*x7461))+((x7453*x7456)));
evalcond[1]=(((x7454*x7457))+(((-1.0)*r02*x7462))+(((-1.0)*x7459*x7461)));
evalcond[2]=((((-1.0)*r12*x7462))+(((-1.0)*x7455*x7461))+((x7454*x7460)));
evalcond[3]=(cj0+(((-1.0)*r12*x7461))+(((-1.0)*x7460*x7462))+((x7453*x7455)));
evalcond[4]=((1.0)+((x7454*x7458))+(((-1.0)*r22*x7462))+(((-1.0)*x7456*x7461)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7461))+((x7453*x7459))+(((-1.0)*x7457*x7462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7463=((1.0)*cj5);
CheckValue<IkReal> x7464 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7463)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7464.valid){
continue;
}
CheckValue<IkReal> x7465=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7463)))),-1);
if(!x7465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7464.value)+(((1.5707963267949)*(x7465.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7466=IKsin(j4);
IkReal x7467=IKcos(j4);
IkReal x7468=(r11*sj5);
IkReal x7469=(r21*sj5);
IkReal x7470=(cj5*r00);
IkReal x7471=(cj5*r20);
IkReal x7472=(r01*sj5);
IkReal x7473=(cj5*r10);
IkReal x7474=((1.0)*x7467);
IkReal x7475=((1.0)*x7466);
evalcond[0]=((((-1.0)*r22*x7474))+((x7466*x7469))+(((-1.0)*x7471*x7475)));
evalcond[1]=(((x7467*x7470))+(((-1.0)*r02*x7475))+(((-1.0)*x7472*x7474)));
evalcond[2]=(((x7467*x7473))+(((-1.0)*x7468*x7474))+(((-1.0)*r12*x7475)));
evalcond[3]=(cj0+(((-1.0)*x7473*x7475))+((x7466*x7468))+(((-1.0)*r12*x7474)));
evalcond[4]=((1.0)+((x7467*x7471))+(((-1.0)*r22*x7475))+(((-1.0)*x7469*x7474)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7474))+((x7466*x7472))+(((-1.0)*x7470*x7475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7476 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7476.valid){
continue;
}
CheckValue<IkReal> x7477=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7476.value)+(((1.5707963267949)*(x7477.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7478=IKsin(j4);
IkReal x7479=IKcos(j4);
IkReal x7480=(r11*sj5);
IkReal x7481=(r21*sj5);
IkReal x7482=(cj5*r00);
IkReal x7483=(cj5*r20);
IkReal x7484=(r01*sj5);
IkReal x7485=(cj5*r10);
IkReal x7486=((1.0)*x7479);
IkReal x7487=((1.0)*x7478);
evalcond[0]=(((x7478*x7481))+(((-1.0)*r22*x7486))+(((-1.0)*x7483*x7487)));
evalcond[1]=((((-1.0)*x7484*x7486))+(((-1.0)*r02*x7487))+((x7479*x7482)));
evalcond[2]=((((-1.0)*x7480*x7486))+(((-1.0)*r12*x7487))+((x7479*x7485)));
evalcond[3]=(((x7478*x7480))+cj0+(((-1.0)*r12*x7486))+(((-1.0)*x7485*x7487)));
evalcond[4]=((1.0)+(((-1.0)*x7481*x7486))+(((-1.0)*r22*x7487))+((x7479*x7483)));
evalcond[5]=((((-1.0)*x7482*x7487))+((x7478*x7484))+(((-1.0)*sj0))+(((-1.0)*r02*x7486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.78008187832539)*px))+(((-2.28319487074043)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.78008187832539)*py))+(((-2.28319487074043)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.78008187832539)*px))+(((-2.28319487074043)*py))))+IKsqr(((((0.78008187832539)*py))+(((-2.28319487074043)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.78008187832539)*px))+(((-2.28319487074043)*py))), ((((0.78008187832539)*py))+(((-2.28319487074043)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7488=IKcos(j0);
IkReal x7489=IKsin(j0);
evalcond[0]=((((-0.134)*x7489))+(((-1.0)*px))+(((-0.3922)*x7488)));
evalcond[1]=((((-1.0)*py))+(((0.134)*x7488))+(((-0.3922)*x7489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7490=((1.0)*cj5);
IkReal x7491=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7490)));
j4eval[0]=x7491;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7490)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7491);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7492=cj5*cj5;
IkReal x7493=((1.0)*r21);
IkReal x7494=(cj5*sj5);
IkReal x7495=((1.0)*r20);
IkReal x7496=(((r01*r21))+(((-1.0)*r01*x7492*x7493))+((r00*r20*x7492))+(((-1.0)*r00*x7493*x7494))+(((-1.0)*r01*x7494*x7495))+((r02*r22)));
j4eval[0]=x7496;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7495)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7496);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7497=cj5*cj5;
IkReal x7498=(r21*sj5);
IkReal x7499=(r11*r21);
IkReal x7500=((1.0)*cj5*r20);
IkReal x7501=(((r10*r20*x7497))+(((-1.0)*cj5*r10*x7498))+(((-1.0)*x7497*x7499))+((r12*r22))+(((-1.0)*r11*sj5*x7500))+x7499);
j4eval[0]=x7501;
j4eval[1]=((IKabs(((((-1.0)*sj0*x7500))+((sj0*x7498)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7501);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7502=cj5*cj5;
IkReal x7503=(r21*sj5);
IkReal x7504=(r11*r21);
IkReal x7505=((1.0)*cj5*r20);
CheckValue<IkReal> x7506=IKPowWithIntegerCheck(IKsign((((r12*r22))+(((-1.0)*cj5*r10*x7503))+(((-1.0)*x7502*x7504))+x7504+(((-1.0)*r11*sj5*x7505))+((r10*r20*x7502)))),-1);
if(!x7506.valid){
continue;
}
CheckValue<IkReal> x7507 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7503))+(((-1.0)*sj0*x7505)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7507.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7506.value)))+(x7507.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7508=IKsin(j4);
IkReal x7509=IKcos(j4);
IkReal x7510=(r11*sj5);
IkReal x7511=(cj5*r00);
IkReal x7512=(cj5*r10);
IkReal x7513=(r21*sj5);
IkReal x7514=(cj5*r20);
IkReal x7515=(r01*sj5);
IkReal x7516=((1.0)*x7509);
IkReal x7517=((1.0)*x7508);
evalcond[0]=(((x7508*x7513))+(((-1.0)*r22*x7516))+(((-1.0)*x7514*x7517)));
evalcond[1]=(((x7509*x7514))+(((-1.0)*x7513*x7516))+(((-1.0)*r22*x7517)));
evalcond[2]=(cj0+(((-1.0)*x7512*x7517))+(((-1.0)*r12*x7516))+((x7508*x7510)));
evalcond[3]=(((x7509*x7511))+(((-1.0)*x7515*x7516))+cj0+(((-1.0)*r02*x7517)));
evalcond[4]=(((x7509*x7512))+sj0+(((-1.0)*x7510*x7516))+(((-1.0)*r12*x7517)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7511*x7517))+(((-1.0)*r02*x7516))+((x7508*x7515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7518=cj5*cj5;
IkReal x7519=((1.0)*r21);
IkReal x7520=(cj5*sj5);
IkReal x7521=((1.0)*r20);
CheckValue<IkReal> x7522=IKPowWithIntegerCheck(IKsign((((r00*r20*x7518))+((r01*r21))+(((-1.0)*r01*x7520*x7521))+(((-1.0)*r00*x7519*x7520))+((r02*r22))+(((-1.0)*r01*x7518*x7519)))),-1);
if(!x7522.valid){
continue;
}
CheckValue<IkReal> x7523 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7521)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7522.value)))+(x7523.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7524=IKsin(j4);
IkReal x7525=IKcos(j4);
IkReal x7526=(r11*sj5);
IkReal x7527=(cj5*r00);
IkReal x7528=(cj5*r10);
IkReal x7529=(r21*sj5);
IkReal x7530=(cj5*r20);
IkReal x7531=(r01*sj5);
IkReal x7532=((1.0)*x7525);
IkReal x7533=((1.0)*x7524);
evalcond[0]=(((x7524*x7529))+(((-1.0)*r22*x7532))+(((-1.0)*x7530*x7533)));
evalcond[1]=((((-1.0)*x7529*x7532))+(((-1.0)*r22*x7533))+((x7525*x7530)));
evalcond[2]=(cj0+(((-1.0)*r12*x7532))+((x7524*x7526))+(((-1.0)*x7528*x7533)));
evalcond[3]=(((x7525*x7527))+cj0+(((-1.0)*x7531*x7532))+(((-1.0)*r02*x7533)));
evalcond[4]=((((-1.0)*x7526*x7532))+sj0+((x7525*x7528))+(((-1.0)*r12*x7533)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7527*x7533))+((x7524*x7531))+(((-1.0)*r02*x7532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7534=((1.0)*cj5);
CheckValue<IkReal> x7535=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7534)))),-1);
if(!x7535.valid){
continue;
}
CheckValue<IkReal> x7536 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7534)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7536.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7535.value)))+(x7536.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7537=IKsin(j4);
IkReal x7538=IKcos(j4);
IkReal x7539=(r11*sj5);
IkReal x7540=(cj5*r00);
IkReal x7541=(cj5*r10);
IkReal x7542=(r21*sj5);
IkReal x7543=(cj5*r20);
IkReal x7544=(r01*sj5);
IkReal x7545=((1.0)*x7538);
IkReal x7546=((1.0)*x7537);
evalcond[0]=((((-1.0)*x7543*x7546))+(((-1.0)*r22*x7545))+((x7537*x7542)));
evalcond[1]=((((-1.0)*x7542*x7545))+(((-1.0)*r22*x7546))+((x7538*x7543)));
evalcond[2]=(cj0+((x7537*x7539))+(((-1.0)*r12*x7545))+(((-1.0)*x7541*x7546)));
evalcond[3]=(cj0+(((-1.0)*x7544*x7545))+((x7538*x7540))+(((-1.0)*r02*x7546)));
evalcond[4]=(sj0+(((-1.0)*x7539*x7545))+((x7538*x7541))+(((-1.0)*r12*x7546)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7540*x7546))+((x7537*x7544))+(((-1.0)*r02*x7545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7547=cj1*cj1;
IkReal x7548=((500.0)*py);
IkReal x7549=(cj1*sj2);
IkReal x7550=(cj1*sj1);
IkReal x7551=(cj5*r01);
IkReal x7552=(cj2*sj1);
IkReal x7553=(r00*sj5);
IkReal x7554=((50.0)*r10*sj5);
IkReal x7555=(sj2*x7547);
IkReal x7556=((50.0)*cj5*r11);
CheckValue<IkReal> x7557=IKPowWithIntegerCheck(((((196.1)*cj2*sj2))+(((-392.2)*cj2*x7555))+(((-212.5)*x7555))+(((-212.5)*cj2*x7550))+(((196.1)*x7550))+(((-392.2)*x7550*(cj2*cj2)))),-1);
if(!x7557.valid){
continue;
}
CheckValue<IkReal> x7558=IKPowWithIntegerCheck(((((-1.0)*x7552))+(((-1.0)*x7549))),-1);
if(!x7558.valid){
continue;
}
if( IKabs(((x7557.value)*(((((-67.0)*x7553))+(((-67.0)*x7551))+(((-1.0)*x7552*x7556))+(((-1.0)*x7552*x7554))+(((-1.0)*x7548*x7549))+(((-1.0)*x7548*x7552))+(((-1.0)*x7549*x7554))+(((-1.0)*x7549*x7556)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7558.value)*((x7553+x7551)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7557.value)*(((((-67.0)*x7553))+(((-67.0)*x7551))+(((-1.0)*x7552*x7556))+(((-1.0)*x7552*x7554))+(((-1.0)*x7548*x7549))+(((-1.0)*x7548*x7552))+(((-1.0)*x7549*x7554))+(((-1.0)*x7549*x7556))))))+IKsqr(((x7558.value)*((x7553+x7551))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7557.value)*(((((-67.0)*x7553))+(((-67.0)*x7551))+(((-1.0)*x7552*x7556))+(((-1.0)*x7552*x7554))+(((-1.0)*x7548*x7549))+(((-1.0)*x7548*x7552))+(((-1.0)*x7549*x7554))+(((-1.0)*x7549*x7556))))), ((x7558.value)*((x7553+x7551))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7559=IKcos(j0);
IkReal x7560=IKsin(j0);
IkReal x7561=(r00*sj5);
IkReal x7562=(cj5*r11);
IkReal x7563=(r10*sj5);
IkReal x7564=((1.0)*cj2);
IkReal x7565=(cj1*cj2);
IkReal x7566=(cj5*r01);
IkReal x7567=((0.425)*cj1);
IkReal x7568=((1.0)*cj1*sj2);
IkReal x7569=(sj1*x7559);
IkReal x7570=((0.3922)*x7560);
evalcond[0]=((((-1.0)*x7559*x7568))+(((-1.0)*x7564*x7569))+(((-1.0)*x7561))+(((-1.0)*x7566)));
evalcond[1]=((((-1.0)*sj1*x7560*x7564))+(((-1.0)*x7562))+(((-1.0)*x7563))+(((-1.0)*x7560*x7568)));
evalcond[2]=((((0.3922)*x7559*x7565))+(((-0.134)*x7560))+((x7559*x7567))+(((-0.1)*x7566))+(((-0.1)*x7561))+(((-1.0)*px))+(((-0.3922)*sj2*x7569)));
evalcond[3]=(((x7565*x7570))+((x7560*x7567))+(((-0.1)*x7563))+(((-0.1)*x7562))+(((-1.0)*py))+(((0.134)*x7559))+(((-1.0)*sj1*sj2*x7570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7571=((1.0)*cj5);
IkReal x7572=((((-1.0)*r01*x7571))+(((-1.0)*r00*sj5)));
j4eval[0]=x7572;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7571)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7572);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7573=((1.0)*cj5);
IkReal x7574=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7573)));
j4eval[0]=x7574;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7573))))));
j4eval[2]=IKsign(x7574);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7575=((1.0)*sj0);
IkReal x7576=((1.0)*cj0);
IkReal x7577=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7577;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x7576))+(((-1.0)*r11*sj5*x7575)))))+(IKabs(((((-1.0)*r02*x7576))+(((-1.0)*r12*x7575))))));
j4eval[2]=IKsign(x7577);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7578=((-1.0)*r20);
IkReal x7580 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7580)==0){
continue;
}
IkReal x7579=pow(x7580,-0.5);
CheckValue<IkReal> x7581 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7578),IKFAST_ATAN2_MAGTHRESH);
if(!x7581.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7581.value));
IkReal gconst133=(r21*x7579);
IkReal gconst134=(x7578*x7579);
CheckValue<IkReal> x7582 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7582.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7582.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7583=((-1.0)*r20);
IkReal x7584=x7579;
CheckValue<IkReal> x7586 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7583),IKFAST_ATAN2_MAGTHRESH);
if(!x7586.valid){
continue;
}
IkReal x7585=((-1.0)*(x7586.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7585;
IkReal gconst132=x7585;
IkReal gconst133=(r21*x7584);
IkReal gconst134=(x7583*x7584);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7587=((-1.0)*r20);
IkReal x7588=x7579;
CheckValue<IkReal> x7590 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7587),IKFAST_ATAN2_MAGTHRESH);
if(!x7590.valid){
continue;
}
IkReal x7589=((-1.0)*(x7590.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7589;
IkReal gconst132=x7589;
IkReal gconst133=(r21*x7588);
IkReal gconst134=(x7587*x7588);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7591=((-1.0)*r20);
IkReal x7592=x7579;
CheckValue<IkReal> x7594 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7591),IKFAST_ATAN2_MAGTHRESH);
if(!x7594.valid){
continue;
}
IkReal x7593=((-1.0)*(x7594.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7593;
IkReal gconst132=x7593;
IkReal gconst133=(r21*x7592);
IkReal gconst134=(x7591*x7592);
IkReal x7595=r22*r22;
CheckValue<IkReal> x7598=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7595))),-1);
if(!x7598.valid){
continue;
}
IkReal x7596=x7598.value;
IkReal x7597=(((x7596*(r20*r20*r20*r20)))+(((2.0)*x7596*(r20*r20)*(r21*r21)))+x7595+((x7596*(r21*r21*r21*r21))));
j4eval[0]=x7597;
j4eval[1]=IKsign(x7597);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7599=(gconst133*r21);
IkReal x7600=(cj1*sj2);
IkReal x7601=(gconst134*r20);
IkReal x7602=(cj2*sj1);
CheckValue<IkReal> x7603=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7599*x7599)+(((-2.0)*x7599*x7601))+(x7601*x7601))),-1);
if(!x7603.valid){
continue;
}
CheckValue<IkReal> x7604 = IKatan2WithCheck(IkReal((((r22*x7602))+((r22*x7600)))),IkReal((((x7599*x7602))+((x7599*x7600))+(((-1.0)*x7601*x7602))+(((-1.0)*x7600*x7601)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7604.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7603.value)))+(x7604.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7605=IKsin(j4);
IkReal x7606=IKcos(j4);
IkReal x7607=(sj1*sj2);
IkReal x7608=(gconst133*r11);
IkReal x7609=(gconst133*r21);
IkReal x7610=(gconst133*r01);
IkReal x7611=((1.0)*x7606);
IkReal x7612=(gconst134*x7606);
IkReal x7613=((1.0)*x7605);
IkReal x7614=((1.0)*cj1*cj2);
evalcond[0]=(((x7605*x7609))+(((-1.0)*r22*x7611))+(((-1.0)*gconst134*r20*x7613)));
evalcond[1]=((((-1.0)*r12*x7611))+((x7605*x7608))+cj0+(((-1.0)*gconst134*r10*x7613)));
evalcond[2]=((((-1.0)*sj0))+((x7605*x7610))+(((-1.0)*r02*x7611))+(((-1.0)*gconst134*r00*x7613)));
evalcond[3]=(((cj2*sj1))+((r20*x7612))+(((-1.0)*r22*x7613))+((cj1*sj2))+(((-1.0)*x7609*x7611)));
evalcond[4]=(((r00*x7612))+(((-1.0)*x7610*x7611))+(((-1.0)*r02*x7613))+((cj0*x7607))+(((-1.0)*cj0*x7614)));
evalcond[5]=((((-1.0)*r12*x7613))+((r10*x7612))+(((-1.0)*sj0*x7614))+(((-1.0)*x7608*x7611))+((sj0*x7607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7615=((1.0)*gconst134);
CheckValue<IkReal> x7616=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7615))+(((-1.0)*gconst133*r10)))),-1);
if(!x7616.valid){
continue;
}
CheckValue<IkReal> x7617 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7615))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7617.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7616.value)))+(x7617.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7618=IKsin(j4);
IkReal x7619=IKcos(j4);
IkReal x7620=(sj1*sj2);
IkReal x7621=(gconst133*r11);
IkReal x7622=(gconst133*r21);
IkReal x7623=(gconst133*r01);
IkReal x7624=((1.0)*x7619);
IkReal x7625=(gconst134*x7619);
IkReal x7626=((1.0)*x7618);
IkReal x7627=((1.0)*cj1*cj2);
evalcond[0]=(((x7618*x7622))+(((-1.0)*gconst134*r20*x7626))+(((-1.0)*r22*x7624)));
evalcond[1]=(cj0+(((-1.0)*gconst134*r10*x7626))+(((-1.0)*r12*x7624))+((x7618*x7621)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst134*r00*x7626))+((x7618*x7623))+(((-1.0)*r02*x7624)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x7622*x7624))+((r20*x7625))+(((-1.0)*r22*x7626)));
evalcond[4]=((((-1.0)*x7623*x7624))+(((-1.0)*cj0*x7627))+((r00*x7625))+((cj0*x7620))+(((-1.0)*r02*x7626)));
evalcond[5]=((((-1.0)*x7621*x7624))+(((-1.0)*r12*x7626))+((sj0*x7620))+(((-1.0)*sj0*x7627))+((r10*x7625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7628=((1.0)*gconst134);
CheckValue<IkReal> x7629=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x7628)))),-1);
if(!x7629.valid){
continue;
}
CheckValue<IkReal> x7630 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7628))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7630.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7629.value)))+(x7630.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7631=IKsin(j4);
IkReal x7632=IKcos(j4);
IkReal x7633=(sj1*sj2);
IkReal x7634=(gconst133*r11);
IkReal x7635=(gconst133*r21);
IkReal x7636=(gconst133*r01);
IkReal x7637=((1.0)*x7632);
IkReal x7638=(gconst134*x7632);
IkReal x7639=((1.0)*x7631);
IkReal x7640=((1.0)*cj1*cj2);
evalcond[0]=(((x7631*x7635))+(((-1.0)*r22*x7637))+(((-1.0)*gconst134*r20*x7639)));
evalcond[1]=(((x7631*x7634))+(((-1.0)*gconst134*r10*x7639))+cj0+(((-1.0)*r12*x7637)));
evalcond[2]=(((x7631*x7636))+(((-1.0)*sj0))+(((-1.0)*r02*x7637))+(((-1.0)*gconst134*r00*x7639)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7639))+((cj1*sj2))+(((-1.0)*x7635*x7637))+((r20*x7638)));
evalcond[4]=(((r00*x7638))+(((-1.0)*x7636*x7637))+(((-1.0)*cj0*x7640))+(((-1.0)*r02*x7639))+((cj0*x7633)));
evalcond[5]=((((-1.0)*x7634*x7637))+(((-1.0)*sj0*x7640))+((r10*x7638))+((sj0*x7633))+(((-1.0)*r12*x7639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7641=((-1.0)*r21);
IkReal x7643 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7643)==0){
continue;
}
IkReal x7642=pow(x7643,-0.5);
CheckValue<IkReal> x7644 = IKatan2WithCheck(IkReal(x7641),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7644.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7644.value))));
IkReal gconst136=(x7641*x7642);
IkReal gconst137=((1.0)*r20*x7642);
CheckValue<IkReal> x7645 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7645.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7645.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7646=((-1.0)*r21);
CheckValue<IkReal> x7649 = IKatan2WithCheck(IkReal(x7646),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7649.valid){
continue;
}
IkReal x7647=((1.0)*(x7649.value));
IkReal x7648=x7642;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7647)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7647)));
IkReal gconst136=(x7646*x7648);
IkReal gconst137=((1.0)*r20*x7648);
IkReal x7650=r22*r22;
IkReal x7651=((1.0)*x7650);
CheckValue<IkReal> x7655=IKPowWithIntegerCheck(((-1.0)+x7650),-1);
if(!x7655.valid){
continue;
}
IkReal x7652=x7655.value;
if((((1.0)+(((-1.0)*x7651)))) < -0.00001)
continue;
IkReal x7653=IKsqrt(((1.0)+(((-1.0)*x7651))));
IkReal x7654=(cj0*x7652*x7653);
j4eval[0]=((IKabs(((((-1.0)*x7651*x7654))+x7654)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7656=((-1.0)*r21);
CheckValue<IkReal> x7659 = IKatan2WithCheck(IkReal(x7656),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7659.valid){
continue;
}
IkReal x7657=((1.0)*(x7659.value));
IkReal x7658=x7642;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7657)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7657)));
IkReal gconst136=(x7656*x7658);
IkReal gconst137=((1.0)*r20*x7658);
IkReal x7660=r22*r22;
IkReal x7661=((1.0)*x7660);
CheckValue<IkReal> x7665=IKPowWithIntegerCheck(((-1.0)+x7660),-1);
if(!x7665.valid){
continue;
}
IkReal x7662=x7665.value;
if((((1.0)+(((-1.0)*x7661)))) < -0.00001)
continue;
IkReal x7663=IKsqrt(((1.0)+(((-1.0)*x7661))));
IkReal x7664=(sj0*x7662*x7663);
j4eval[0]=((IKabs(((((-1.0)*x7661*x7664))+x7664)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7666=((-1.0)*r21);
CheckValue<IkReal> x7669 = IKatan2WithCheck(IkReal(x7666),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7669.valid){
continue;
}
IkReal x7667=((1.0)*(x7669.value));
IkReal x7668=x7642;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7667)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7667)));
IkReal gconst136=(x7666*x7668);
IkReal gconst137=((1.0)*r20*x7668);
IkReal x7670=r22*r22;
IkReal x7671=(r12*sj0);
IkReal x7672=(cj0*r02);
CheckValue<IkReal> x7676=IKPowWithIntegerCheck(((-1.0)+x7670),-1);
if(!x7676.valid){
continue;
}
IkReal x7673=x7676.value;
if((((1.0)+(((-1.0)*x7670)))) < -0.00001)
continue;
IkReal x7674=IKsqrt(((1.0)+(((-1.0)*x7670))));
IkReal x7675=(r22*x7673*x7674);
j4eval[0]=0;
j4eval[1]=((IKabs((((x7672*x7675))+((x7671*x7675)))))+(IKabs(((((-1.0)*x7671))+(((-1.0)*x7672))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7677=((1.0)*sj0);
IkReal x7678=((1.0)*cj0);
CheckValue<IkReal> x7679=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x7679.valid){
continue;
}
CheckValue<IkReal> x7680 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x7678))+(((-1.0)*r12*x7677)))),IkReal(((((-1.0)*gconst136*r11*x7677))+((gconst137*r10*sj0))+(((-1.0)*gconst136*r01*x7678))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7680.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7679.value)))+(x7680.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7681=IKsin(j4);
IkReal x7682=IKcos(j4);
IkReal x7683=(gconst136*r01);
IkReal x7684=(gconst137*r10);
IkReal x7685=(sj1*sj2);
IkReal x7686=(gconst137*r20);
IkReal x7687=(gconst136*r11);
IkReal x7688=(gconst136*r21);
IkReal x7689=(gconst137*r00);
IkReal x7690=((1.0)*x7682);
IkReal x7691=((1.0)*cj1*cj2);
IkReal x7692=((1.0)*x7681);
evalcond[0]=(((x7681*x7688))+(((-1.0)*r22*x7690))+(((-1.0)*x7686*x7692)));
evalcond[1]=(((x7681*x7687))+cj0+(((-1.0)*r12*x7690))+(((-1.0)*x7684*x7692)));
evalcond[2]=((((-1.0)*r02*x7690))+(((-1.0)*sj0))+((x7681*x7683))+(((-1.0)*x7689*x7692)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7692))+(((-1.0)*x7688*x7690))+((x7682*x7686)));
evalcond[4]=((((-1.0)*r02*x7692))+(((-1.0)*cj0*x7691))+((cj0*x7685))+(((-1.0)*x7683*x7690))+((x7682*x7689)));
evalcond[5]=((((-1.0)*x7687*x7690))+((sj0*x7685))+(((-1.0)*r12*x7692))+(((-1.0)*sj0*x7691))+((x7682*x7684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7693=((1.0)*gconst137);
CheckValue<IkReal> x7694 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7693))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7694.valid){
continue;
}
CheckValue<IkReal> x7695=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x7693)))),-1);
if(!x7695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7694.value)+(((1.5707963267949)*(x7695.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7696=IKsin(j4);
IkReal x7697=IKcos(j4);
IkReal x7698=(gconst136*r01);
IkReal x7699=(gconst137*r10);
IkReal x7700=(sj1*sj2);
IkReal x7701=(gconst137*r20);
IkReal x7702=(gconst136*r11);
IkReal x7703=(gconst136*r21);
IkReal x7704=(gconst137*r00);
IkReal x7705=((1.0)*x7697);
IkReal x7706=((1.0)*cj1*cj2);
IkReal x7707=((1.0)*x7696);
evalcond[0]=((((-1.0)*r22*x7705))+((x7696*x7703))+(((-1.0)*x7701*x7707)));
evalcond[1]=(cj0+((x7696*x7702))+(((-1.0)*r12*x7705))+(((-1.0)*x7699*x7707)));
evalcond[2]=((((-1.0)*sj0))+((x7696*x7698))+(((-1.0)*x7704*x7707))+(((-1.0)*r02*x7705)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7707))+((cj1*sj2))+(((-1.0)*x7703*x7705))+((x7697*x7701)));
evalcond[4]=((((-1.0)*x7698*x7705))+((cj0*x7700))+(((-1.0)*r02*x7707))+((x7697*x7704))+(((-1.0)*cj0*x7706)));
evalcond[5]=(((sj0*x7700))+(((-1.0)*r12*x7707))+(((-1.0)*x7702*x7705))+((x7697*x7699))+(((-1.0)*sj0*x7706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7708=((1.0)*gconst137);
CheckValue<IkReal> x7709=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7708))+(((-1.0)*gconst136*r00)))),-1);
if(!x7709.valid){
continue;
}
CheckValue<IkReal> x7710 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7708))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7710.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7709.value)))+(x7710.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7711=IKsin(j4);
IkReal x7712=IKcos(j4);
IkReal x7713=(gconst136*r01);
IkReal x7714=(gconst137*r10);
IkReal x7715=(sj1*sj2);
IkReal x7716=(gconst137*r20);
IkReal x7717=(gconst136*r11);
IkReal x7718=(gconst136*r21);
IkReal x7719=(gconst137*r00);
IkReal x7720=((1.0)*x7712);
IkReal x7721=((1.0)*cj1*cj2);
IkReal x7722=((1.0)*x7711);
evalcond[0]=((((-1.0)*x7716*x7722))+((x7711*x7718))+(((-1.0)*r22*x7720)));
evalcond[1]=(cj0+(((-1.0)*x7714*x7722))+((x7711*x7717))+(((-1.0)*r12*x7720)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7720))+(((-1.0)*x7719*x7722))+((x7711*x7713)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x7718*x7720))+((x7712*x7716))+(((-1.0)*r22*x7722)));
evalcond[4]=((((-1.0)*x7713*x7720))+((cj0*x7715))+(((-1.0)*r02*x7722))+(((-1.0)*cj0*x7721))+((x7712*x7719)));
evalcond[5]=((((-1.0)*sj0*x7721))+((sj0*x7715))+((x7712*x7714))+(((-1.0)*x7717*x7720))+(((-1.0)*r12*x7722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7723=((-1.0)*r10);
IkReal x7725 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7725)==0){
continue;
}
IkReal x7724=pow(x7725,-0.5);
CheckValue<IkReal> x7726 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7723),IKFAST_ATAN2_MAGTHRESH);
if(!x7726.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7726.value));
IkReal gconst139=(r11*x7724);
IkReal gconst140=(x7723*x7724);
CheckValue<IkReal> x7727 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7727.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7727.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7728=((-1.0)*r10);
IkReal x7729=x7724;
CheckValue<IkReal> x7731 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7728),IKFAST_ATAN2_MAGTHRESH);
if(!x7731.valid){
continue;
}
IkReal x7730=((-1.0)*(x7731.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7730;
IkReal gconst138=x7730;
IkReal gconst139=(r11*x7729);
IkReal gconst140=(x7728*x7729);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7732=((1.0)*sj0);
IkReal x7733=((1.0)*gconst139);
CheckValue<IkReal> x7734 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7732))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x7733))+((gconst140*r10*sj0))+(((-1.0)*gconst139*r11*x7732))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7734.valid){
continue;
}
CheckValue<IkReal> x7735=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x7733)))),-1);
if(!x7735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7734.value)+(((1.5707963267949)*(x7735.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7736=IKsin(j4);
IkReal x7737=IKcos(j4);
IkReal x7738=(gconst140*r00);
IkReal x7739=(sj1*sj2);
IkReal x7740=(gconst139*r11);
IkReal x7741=(gconst139*r01);
IkReal x7742=(gconst139*r21);
IkReal x7743=((1.0)*x7737);
IkReal x7744=((1.0)*x7736);
IkReal x7745=((1.0)*cj1*cj2);
IkReal x7746=(gconst140*x7737);
evalcond[0]=((((-1.0)*r22*x7743))+((x7736*x7742))+(((-1.0)*gconst140*r20*x7744)));
evalcond[1]=(cj0+(((-1.0)*r12*x7743))+(((-1.0)*gconst140*r10*x7744))+((x7736*x7740)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7743))+(((-1.0)*x7738*x7744))+((x7736*x7741)));
evalcond[3]=((((-1.0)*x7742*x7743))+((cj2*sj1))+(((-1.0)*r22*x7744))+((cj1*sj2))+((r20*x7746)));
evalcond[4]=((((-1.0)*r02*x7744))+(((-1.0)*x7741*x7743))+((cj0*x7739))+(((-1.0)*cj0*x7745))+((x7737*x7738)));
evalcond[5]=(((r10*x7746))+(((-1.0)*x7740*x7743))+(((-1.0)*r12*x7744))+((sj0*x7739))+(((-1.0)*sj0*x7745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7747=((1.0)*gconst140);
CheckValue<IkReal> x7748 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x7747)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7748.valid){
continue;
}
CheckValue<IkReal> x7749=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7747))+(((-1.0)*gconst139*r00)))),-1);
if(!x7749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7748.value)+(((1.5707963267949)*(x7749.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7750=IKsin(j4);
IkReal x7751=IKcos(j4);
IkReal x7752=(gconst140*r00);
IkReal x7753=(sj1*sj2);
IkReal x7754=(gconst139*r11);
IkReal x7755=(gconst139*r01);
IkReal x7756=(gconst139*r21);
IkReal x7757=((1.0)*x7751);
IkReal x7758=((1.0)*x7750);
IkReal x7759=((1.0)*cj1*cj2);
IkReal x7760=(gconst140*x7751);
evalcond[0]=((((-1.0)*r22*x7757))+((x7750*x7756))+(((-1.0)*gconst140*r20*x7758)));
evalcond[1]=(cj0+(((-1.0)*r12*x7757))+((x7750*x7754))+(((-1.0)*gconst140*r10*x7758)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7757))+(((-1.0)*x7752*x7758))+((x7750*x7755)));
evalcond[3]=((((-1.0)*r22*x7758))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x7756*x7757))+((r20*x7760)));
evalcond[4]=((((-1.0)*x7755*x7757))+(((-1.0)*r02*x7758))+(((-1.0)*cj0*x7759))+((cj0*x7753))+((x7751*x7752)));
evalcond[5]=((((-1.0)*x7754*x7757))+((sj0*x7753))+(((-1.0)*r12*x7758))+(((-1.0)*sj0*x7759))+((r10*x7760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7761=((-1.0)*r11);
IkReal x7763 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7763)==0){
continue;
}
IkReal x7762=pow(x7763,-0.5);
CheckValue<IkReal> x7764 = IKatan2WithCheck(IkReal(x7761),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7764.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7764.value))));
IkReal gconst142=(x7761*x7762);
IkReal gconst143=((1.0)*r10*x7762);
CheckValue<IkReal> x7765 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7765.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7765.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7766=((-1.0)*r11);
CheckValue<IkReal> x7769 = IKatan2WithCheck(IkReal(x7766),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7769.valid){
continue;
}
IkReal x7767=((1.0)*(x7769.value));
IkReal x7768=x7762;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7767)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7767)));
IkReal gconst142=(x7766*x7768);
IkReal gconst143=((1.0)*r10*x7768);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7770=((-1.0)*r11);
CheckValue<IkReal> x7773 = IKatan2WithCheck(IkReal(x7770),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7773.valid){
continue;
}
IkReal x7771=((1.0)*(x7773.value));
IkReal x7772=x7762;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7771)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7771)));
IkReal gconst142=(x7770*x7772);
IkReal gconst143=((1.0)*r10*x7772);
IkReal x7774=r12*r12;
IkReal x7775=((1.0)*sj0);
IkReal x7776=(cj0*r02);
IkReal x7777=x7762;
j4eval[0]=((IKabs(((((-1.0)*x7776))+(((-1.0)*r12*x7775)))))+(IKabs((((r12*x7776*x7777))+(((-1.0)*x7775*x7777))+((sj0*x7774*x7777))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7778=((-1.0)*r11);
CheckValue<IkReal> x7781 = IKatan2WithCheck(IkReal(x7778),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7781.valid){
continue;
}
IkReal x7779=((1.0)*(x7781.value));
IkReal x7780=x7762;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7779)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7779)));
IkReal gconst142=(x7778*x7780);
IkReal gconst143=((1.0)*r10*x7780);
IkReal x7782=r12*r12;
IkReal x7783=(cj1*r22*sj2);
IkReal x7784=(cj2*r22*sj1);
CheckValue<IkReal> x7788=IKPowWithIntegerCheck(((-1.0)+x7782),-1);
if(!x7788.valid){
continue;
}
IkReal x7785=x7788.value;
if((((1.0)+(((-1.0)*x7782)))) < -0.00001)
continue;
IkReal x7786=IKsqrt(((1.0)+(((-1.0)*x7782))));
IkReal x7787=((1.0)*r12*x7785*x7786);
j4eval[0]=((IKabs((x7784+x7783)))+(IKabs(((((-1.0)*x7783*x7787))+(((-1.0)*x7784*x7787))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7789=(gconst142*r21);
IkReal x7790=(cj1*sj2);
IkReal x7791=(cj2*sj1);
IkReal x7792=(gconst143*r20);
CheckValue<IkReal> x7793=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7792*x7792)+(((-2.0)*x7789*x7792))+(x7789*x7789))),-1);
if(!x7793.valid){
continue;
}
CheckValue<IkReal> x7794 = IKatan2WithCheck(IkReal((((r22*x7791))+((r22*x7790)))),IkReal((((x7789*x7791))+((x7789*x7790))+(((-1.0)*x7791*x7792))+(((-1.0)*x7790*x7792)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7794.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7793.value)))+(x7794.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7795=IKsin(j4);
IkReal x7796=IKcos(j4);
IkReal x7797=(sj1*sj2);
IkReal x7798=(gconst143*r20);
IkReal x7799=((1.0)*x7796);
IkReal x7800=((1.0)*cj1*cj2);
IkReal x7801=((1.0)*x7795);
IkReal x7802=(gconst142*x7795);
IkReal x7803=(gconst143*x7796);
evalcond[0]=((((-1.0)*r22*x7799))+((r21*x7802))+(((-1.0)*x7798*x7801)));
evalcond[1]=(cj0+((r11*x7802))+(((-1.0)*r12*x7799))+(((-1.0)*gconst143*r10*x7801)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7802))+(((-1.0)*gconst143*r00*x7801))+(((-1.0)*r02*x7799)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7801))+(((-1.0)*gconst142*r21*x7799))+((x7796*x7798)));
evalcond[4]=((((-1.0)*gconst142*r01*x7799))+((r00*x7803))+(((-1.0)*r02*x7801))+((cj0*x7797))+(((-1.0)*cj0*x7800)));
evalcond[5]=((((-1.0)*gconst142*r11*x7799))+(((-1.0)*sj0*x7800))+(((-1.0)*r12*x7801))+((sj0*x7797))+((r10*x7803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7804=((1.0)*sj0);
IkReal x7805=((1.0)*gconst142);
CheckValue<IkReal> x7806 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7804))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x7805))+(((-1.0)*gconst142*r11*x7804))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7806.valid){
continue;
}
CheckValue<IkReal> x7807=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7805))+(((-1.0)*gconst143*r21)))),-1);
if(!x7807.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7806.value)+(((1.5707963267949)*(x7807.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7808=IKsin(j4);
IkReal x7809=IKcos(j4);
IkReal x7810=(sj1*sj2);
IkReal x7811=(gconst143*r20);
IkReal x7812=((1.0)*x7809);
IkReal x7813=((1.0)*cj1*cj2);
IkReal x7814=((1.0)*x7808);
IkReal x7815=(gconst142*x7808);
IkReal x7816=(gconst143*x7809);
evalcond[0]=((((-1.0)*x7811*x7814))+(((-1.0)*r22*x7812))+((r21*x7815)));
evalcond[1]=(cj0+((r11*x7815))+(((-1.0)*r12*x7812))+(((-1.0)*gconst143*r10*x7814)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7812))+((r01*x7815))+(((-1.0)*gconst143*r00*x7814)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7814))+(((-1.0)*gconst142*r21*x7812))+((x7809*x7811)));
evalcond[4]=((((-1.0)*gconst142*r01*x7812))+(((-1.0)*r02*x7814))+((r00*x7816))+(((-1.0)*cj0*x7813))+((cj0*x7810)));
evalcond[5]=(((r10*x7816))+(((-1.0)*gconst142*r11*x7812))+((sj0*x7810))+(((-1.0)*r12*x7814))+(((-1.0)*sj0*x7813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7817=((1.0)*gconst143);
CheckValue<IkReal> x7818 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst142*r21))+(((-1.0)*cj0*r20*x7817)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7818.valid){
continue;
}
CheckValue<IkReal> x7819=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x7817)))),-1);
if(!x7819.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7818.value)+(((1.5707963267949)*(x7819.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7820=IKsin(j4);
IkReal x7821=IKcos(j4);
IkReal x7822=(sj1*sj2);
IkReal x7823=(gconst143*r20);
IkReal x7824=((1.0)*x7821);
IkReal x7825=((1.0)*cj1*cj2);
IkReal x7826=((1.0)*x7820);
IkReal x7827=(gconst142*x7820);
IkReal x7828=(gconst143*x7821);
evalcond[0]=(((r21*x7827))+(((-1.0)*x7823*x7826))+(((-1.0)*r22*x7824)));
evalcond[1]=(cj0+((r11*x7827))+(((-1.0)*r12*x7824))+(((-1.0)*gconst143*r10*x7826)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7824))+((r01*x7827))+(((-1.0)*gconst143*r00*x7826)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7824))+(((-1.0)*r22*x7826))+((x7821*x7823)));
evalcond[4]=((((-1.0)*gconst142*r01*x7824))+(((-1.0)*r02*x7826))+((r00*x7828))+((cj0*x7822))+(((-1.0)*cj0*x7825)));
evalcond[5]=(((r10*x7828))+(((-1.0)*gconst142*r11*x7824))+((sj0*x7822))+(((-1.0)*sj0*x7825))+(((-1.0)*r12*x7826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7829=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7829;
j4eval[1]=IKsign(x7829);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7830=((1.0)*cj5);
IkReal x7831=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7830)));
j4eval[0]=x7831;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x7830))))));
j4eval[2]=IKsign(x7831);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7832=cj5*cj5;
IkReal x7833=r11*r11;
IkReal x7834=(r11*sj5);
IkReal x7835=(cj5*r10);
IkReal x7836=((r12*r12)+(((-1.0)*x7832*x7833))+((x7832*(r10*r10)))+(((-2.0)*x7834*x7835))+x7833);
j4eval[0]=x7836;
j4eval[1]=IKsign(x7836);
j4eval[2]=((IKabs(r12))+(IKabs((x7835+(((-1.0)*x7834))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7837=cj5*cj5;
IkReal x7838=r11*r11;
IkReal x7839=(cj5*r10);
IkReal x7840=(r11*sj5);
CheckValue<IkReal> x7841 = IKatan2WithCheck(IkReal(((((-1.0)*x7840))+x7839)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7841.valid){
continue;
}
CheckValue<IkReal> x7842=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x7837*x7838))+x7838+((x7837*(r10*r10)))+(((-2.0)*x7839*x7840)))),-1);
if(!x7842.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7841.value)+(((1.5707963267949)*(x7842.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7843=IKsin(j4);
IkReal x7844=IKcos(j4);
IkReal x7845=(cj5*r10);
IkReal x7846=(r01*sj5);
IkReal x7847=(cj5*r00);
IkReal x7848=(cj5*r20);
IkReal x7849=((1.0)*x7844);
IkReal x7850=((1.0)*x7843);
IkReal x7851=(sj5*x7843);
evalcond[0]=((((-1.0)*x7848*x7850))+(((-1.0)*r22*x7849))+((r21*x7851)));
evalcond[1]=((((-1.0)*x7847*x7850))+((x7843*x7846))+(((-1.0)*r02*x7849)));
evalcond[2]=((((-1.0)*r11*sj5*x7849))+((x7844*x7845))+(((-1.0)*r12*x7850)));
evalcond[3]=((1.0)+((r11*x7851))+(((-1.0)*r12*x7849))+(((-1.0)*x7845*x7850)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7844*x7848))+(((-1.0)*r21*sj5*x7849))+(((-1.0)*r22*x7850)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x7844*x7847))+(((-1.0)*x7846*x7849))+(((-1.0)*r02*x7850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7852=((1.0)*cj5);
CheckValue<IkReal> x7853 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7852)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7853.valid){
continue;
}
CheckValue<IkReal> x7854=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7852)))),-1);
if(!x7854.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7853.value)+(((1.5707963267949)*(x7854.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7855=IKsin(j4);
IkReal x7856=IKcos(j4);
IkReal x7857=(cj5*r10);
IkReal x7858=(r01*sj5);
IkReal x7859=(cj5*r00);
IkReal x7860=(cj5*r20);
IkReal x7861=((1.0)*x7856);
IkReal x7862=((1.0)*x7855);
IkReal x7863=(sj5*x7855);
evalcond[0]=(((r21*x7863))+(((-1.0)*x7860*x7862))+(((-1.0)*r22*x7861)));
evalcond[1]=((((-1.0)*x7859*x7862))+(((-1.0)*r02*x7861))+((x7855*x7858)));
evalcond[2]=(((x7856*x7857))+(((-1.0)*r11*sj5*x7861))+(((-1.0)*r12*x7862)));
evalcond[3]=((1.0)+((r11*x7863))+(((-1.0)*r12*x7861))+(((-1.0)*x7857*x7862)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7856*x7860))+(((-1.0)*r21*sj5*x7861))+(((-1.0)*r22*x7862)));
evalcond[5]=((((-1.0)*x7858*x7861))+((x7856*x7859))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x7862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7864=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7864.valid){
continue;
}
CheckValue<IkReal> x7865 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7864.value)))+(x7865.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7866=IKsin(j4);
IkReal x7867=IKcos(j4);
IkReal x7868=(cj5*r10);
IkReal x7869=(r01*sj5);
IkReal x7870=(cj5*r00);
IkReal x7871=(cj5*r20);
IkReal x7872=((1.0)*x7867);
IkReal x7873=((1.0)*x7866);
IkReal x7874=(sj5*x7866);
evalcond[0]=((((-1.0)*r22*x7872))+(((-1.0)*x7871*x7873))+((r21*x7874)));
evalcond[1]=(((x7866*x7869))+(((-1.0)*x7870*x7873))+(((-1.0)*r02*x7872)));
evalcond[2]=(((x7867*x7868))+(((-1.0)*r11*sj5*x7872))+(((-1.0)*r12*x7873)));
evalcond[3]=((1.0)+((r11*x7874))+(((-1.0)*x7868*x7873))+(((-1.0)*r12*x7872)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7873))+((cj1*sj2))+(((-1.0)*r21*sj5*x7872))+((x7867*x7871)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7869*x7872))+(((-1.0)*r02*x7873))+((x7867*x7870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7875=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7875;
j4eval[1]=IKsign(x7875);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7876=((1.0)*cj5);
IkReal x7877=((((-1.0)*r21*x7876))+(((-1.0)*r20*sj5)));
j4eval[0]=x7877;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x7876))))));
j4eval[2]=IKsign(x7877);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7878=cj5*cj5;
IkReal x7879=r11*r11;
IkReal x7880=(cj5*r10);
IkReal x7881=(r11*sj5);
IkReal x7882=((((2.0)*x7880*x7881))+((x7878*x7879))+(((-1.0)*x7878*(r10*r10)))+(((-1.0)*x7879))+(((-1.0)*(r12*r12))));
j4eval[0]=x7882;
j4eval[1]=((IKabs(((((-1.0)*x7881))+x7880)))+(IKabs(r12)));
j4eval[2]=IKsign(x7882);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7883=cj5*cj5;
IkReal x7884=r11*r11;
IkReal x7885=(cj5*r10);
IkReal x7886=(r11*sj5);
CheckValue<IkReal> x7887=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7884))+(((-1.0)*x7883*(r10*r10)))+((x7883*x7884))+(((-1.0)*(r12*r12)))+(((2.0)*x7885*x7886)))),-1);
if(!x7887.valid){
continue;
}
CheckValue<IkReal> x7888 = IKatan2WithCheck(IkReal(((((-1.0)*x7886))+x7885)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7888.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7887.value)))+(x7888.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7889=IKsin(j4);
IkReal x7890=IKcos(j4);
IkReal x7891=(cj5*r10);
IkReal x7892=(r01*sj5);
IkReal x7893=(cj5*r00);
IkReal x7894=(cj5*r20);
IkReal x7895=((1.0)*x7890);
IkReal x7896=((1.0)*x7889);
IkReal x7897=(sj5*x7889);
evalcond[0]=((((-1.0)*x7894*x7896))+((r21*x7897))+(((-1.0)*r22*x7895)));
evalcond[1]=((((-1.0)*x7893*x7896))+((x7889*x7892))+(((-1.0)*r02*x7895)));
evalcond[2]=((((-1.0)*r11*sj5*x7895))+(((-1.0)*r12*x7896))+((x7890*x7891)));
evalcond[3]=((-1.0)+(((-1.0)*x7891*x7896))+(((-1.0)*r12*x7895))+((r11*x7897)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7890*x7894))+(((-1.0)*r21*sj5*x7895))+(((-1.0)*r22*x7896)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x7890*x7893))+((cj1*cj2))+(((-1.0)*x7892*x7895))+(((-1.0)*r02*x7896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7898=((1.0)*cj5);
CheckValue<IkReal> x7899=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7898))+(((-1.0)*r20*sj5)))),-1);
if(!x7899.valid){
continue;
}
CheckValue<IkReal> x7900 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x7898)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7899.value)))+(x7900.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7901=IKsin(j4);
IkReal x7902=IKcos(j4);
IkReal x7903=(cj5*r10);
IkReal x7904=(r01*sj5);
IkReal x7905=(cj5*r00);
IkReal x7906=(cj5*r20);
IkReal x7907=((1.0)*x7902);
IkReal x7908=((1.0)*x7901);
IkReal x7909=(sj5*x7901);
evalcond[0]=(((r21*x7909))+(((-1.0)*r22*x7907))+(((-1.0)*x7906*x7908)));
evalcond[1]=((((-1.0)*x7905*x7908))+((x7901*x7904))+(((-1.0)*r02*x7907)));
evalcond[2]=((((-1.0)*r12*x7908))+(((-1.0)*r11*sj5*x7907))+((x7902*x7903)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x7907))+(((-1.0)*x7903*x7908))+((r11*x7909)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7908))+((x7902*x7906))+(((-1.0)*r21*sj5*x7907)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x7904*x7907))+((cj1*cj2))+((x7902*x7905))+(((-1.0)*r02*x7908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7910 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7910.valid){
continue;
}
CheckValue<IkReal> x7911=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7911.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7910.value)+(((1.5707963267949)*(x7911.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7912=IKsin(j4);
IkReal x7913=IKcos(j4);
IkReal x7914=(cj5*r10);
IkReal x7915=(r01*sj5);
IkReal x7916=(cj5*r00);
IkReal x7917=(cj5*r20);
IkReal x7918=((1.0)*x7913);
IkReal x7919=((1.0)*x7912);
IkReal x7920=(sj5*x7912);
evalcond[0]=((((-1.0)*r22*x7918))+(((-1.0)*x7917*x7919))+((r21*x7920)));
evalcond[1]=(((x7912*x7915))+(((-1.0)*r02*x7918))+(((-1.0)*x7916*x7919)));
evalcond[2]=(((x7913*x7914))+(((-1.0)*r11*sj5*x7918))+(((-1.0)*r12*x7919)));
evalcond[3]=((-1.0)+(((-1.0)*x7914*x7919))+(((-1.0)*r12*x7918))+((r11*x7920)));
evalcond[4]=(((x7913*x7917))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7919))+(((-1.0)*r21*sj5*x7918)));
evalcond[5]=((((-1.0)*x7915*x7918))+((x7913*x7916))+(((-1.0)*r02*x7919))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7921=((-1.0)*r00);
IkReal x7923 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7923)==0){
continue;
}
IkReal x7922=pow(x7923,-0.5);
CheckValue<IkReal> x7924 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7921),IKFAST_ATAN2_MAGTHRESH);
if(!x7924.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7924.value));
IkReal gconst145=(r01*x7922);
IkReal gconst146=(x7921*x7922);
CheckValue<IkReal> x7925 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7925.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7925.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7926=((-1.0)*r00);
IkReal x7927=x7922;
CheckValue<IkReal> x7929 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7926),IKFAST_ATAN2_MAGTHRESH);
if(!x7929.valid){
continue;
}
IkReal x7928=((-1.0)*(x7929.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x7928;
IkReal gconst144=x7928;
IkReal gconst145=(r01*x7927);
IkReal gconst146=(x7926*x7927);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7930=((1.0)*sj0);
IkReal x7931=((1.0)*gconst145);
CheckValue<IkReal> x7932 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7930))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*cj0*r01*x7931))+((gconst146*r10*sj0))+(((-1.0)*gconst145*r11*x7930)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7932.valid){
continue;
}
CheckValue<IkReal> x7933=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7931))+(((-1.0)*gconst146*r21)))),-1);
if(!x7933.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7932.value)+(((1.5707963267949)*(x7933.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7934=IKsin(j4);
IkReal x7935=IKcos(j4);
IkReal x7936=(gconst146*r10);
IkReal x7937=(sj1*sj2);
IkReal x7938=(gconst146*r20);
IkReal x7939=(gconst146*r00);
IkReal x7940=((1.0)*x7935);
IkReal x7941=((1.0)*x7934);
IkReal x7942=(gconst145*x7934);
IkReal x7943=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x7942))+(((-1.0)*x7938*x7941))+(((-1.0)*r22*x7940)));
evalcond[1]=(cj0+(((-1.0)*x7936*x7941))+((r11*x7942))+(((-1.0)*r12*x7940)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7939*x7941))+(((-1.0)*r02*x7940))+((r01*x7942)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7941))+((cj1*sj2))+(((-1.0)*gconst145*r21*x7940))+((x7935*x7938)));
evalcond[4]=(((cj0*x7937))+(((-1.0)*gconst145*r01*x7940))+(((-1.0)*cj0*x7943))+(((-1.0)*r02*x7941))+((x7935*x7939)));
evalcond[5]=(((sj0*x7937))+(((-1.0)*sj0*x7943))+(((-1.0)*r12*x7941))+((x7935*x7936))+(((-1.0)*gconst145*r11*x7940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7944=((1.0)*gconst146);
CheckValue<IkReal> x7945 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7944))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7945.valid){
continue;
}
CheckValue<IkReal> x7946=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7944))+(((-1.0)*gconst145*r10)))),-1);
if(!x7946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7945.value)+(((1.5707963267949)*(x7946.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7947=IKsin(j4);
IkReal x7948=IKcos(j4);
IkReal x7949=(gconst146*r10);
IkReal x7950=(sj1*sj2);
IkReal x7951=(gconst146*r20);
IkReal x7952=(gconst146*r00);
IkReal x7953=((1.0)*x7948);
IkReal x7954=((1.0)*x7947);
IkReal x7955=(gconst145*x7947);
IkReal x7956=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7953))+(((-1.0)*x7951*x7954))+((r21*x7955)));
evalcond[1]=(cj0+((r11*x7955))+(((-1.0)*x7949*x7954))+(((-1.0)*r12*x7953)));
evalcond[2]=(((r01*x7955))+(((-1.0)*sj0))+(((-1.0)*x7952*x7954))+(((-1.0)*r02*x7953)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7954))+((cj1*sj2))+(((-1.0)*gconst145*r21*x7953))+((x7948*x7951)));
evalcond[4]=(((cj0*x7950))+(((-1.0)*gconst145*r01*x7953))+(((-1.0)*cj0*x7956))+(((-1.0)*r02*x7954))+((x7948*x7952)));
evalcond[5]=((((-1.0)*gconst145*r11*x7953))+((x7948*x7949))+((sj0*x7950))+(((-1.0)*r12*x7954))+(((-1.0)*sj0*x7956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7957=((-1.0)*r01);
IkReal x7959 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7959)==0){
continue;
}
IkReal x7958=pow(x7959,-0.5);
CheckValue<IkReal> x7960 = IKatan2WithCheck(IkReal(x7957),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7960.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7960.value))));
IkReal gconst148=(x7957*x7958);
IkReal gconst149=((1.0)*r00*x7958);
CheckValue<IkReal> x7961 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7961.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7961.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x7962=((-1.0)*r01);
CheckValue<IkReal> x7965 = IKatan2WithCheck(IkReal(x7962),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7965.valid){
continue;
}
IkReal x7963=((1.0)*(x7965.value));
IkReal x7964=x7958;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7963)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7963)));
IkReal gconst148=(x7962*x7964);
IkReal gconst149=((1.0)*r00*x7964);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7966=((-1.0)*r01);
CheckValue<IkReal> x7969 = IKatan2WithCheck(IkReal(x7966),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7969.valid){
continue;
}
IkReal x7967=((1.0)*(x7969.value));
IkReal x7968=x7958;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7967)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7967)));
IkReal gconst148=(x7966*x7968);
IkReal gconst149=((1.0)*r00*x7968);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7970=((-1.0)*r01);
CheckValue<IkReal> x7973 = IKatan2WithCheck(IkReal(x7970),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7973.valid){
continue;
}
IkReal x7971=((1.0)*(x7973.value));
IkReal x7972=x7958;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7971)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7971)));
IkReal gconst148=(x7970*x7972);
IkReal gconst149=((1.0)*r00*x7972);
IkReal x7974=r02*r02;
IkReal x7975=(r12*sj0);
IkReal x7976=((1.0)*cj0);
IkReal x7977=x7958;
j4eval[0]=((IKabs((((r02*x7975*x7977))+((cj0*x7974*x7977))+(((-1.0)*x7976*x7977)))))+(IKabs(((((-1.0)*x7975))+(((-1.0)*r02*x7976))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7978=((1.0)*sj0);
IkReal x7979=((1.0)*gconst148);
CheckValue<IkReal> x7980=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r21))+(((-1.0)*r20*x7979)))),-1);
if(!x7980.valid){
continue;
}
CheckValue<IkReal> x7981 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7978)))),IkReal(((((-1.0)*cj0*r01*x7979))+((gconst149*r10*sj0))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x7978)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7981.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7980.value)))+(x7981.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7982=IKsin(j4);
IkReal x7983=IKcos(j4);
IkReal x7984=(gconst148*r11);
IkReal x7985=(sj1*sj2);
IkReal x7986=((1.0)*x7983);
IkReal x7987=(gconst149*x7983);
IkReal x7988=(gconst148*x7982);
IkReal x7989=((1.0)*cj1*cj2);
IkReal x7990=((1.0)*x7982);
evalcond[0]=((((-1.0)*r22*x7986))+(((-1.0)*gconst149*r20*x7990))+((r21*x7988)));
evalcond[1]=((((-1.0)*r12*x7986))+cj0+(((-1.0)*gconst149*r10*x7990))+((x7982*x7984)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7988))+(((-1.0)*r02*x7986))+(((-1.0)*gconst149*r00*x7990)));
evalcond[3]=(((cj2*sj1))+((r20*x7987))+((cj1*sj2))+(((-1.0)*gconst148*r21*x7986))+(((-1.0)*r22*x7990)));
evalcond[4]=((((-1.0)*gconst148*r01*x7986))+((r00*x7987))+((cj0*x7985))+(((-1.0)*r02*x7990))+(((-1.0)*cj0*x7989)));
evalcond[5]=((((-1.0)*r12*x7990))+(((-1.0)*x7984*x7986))+((sj0*x7985))+(((-1.0)*sj0*x7989))+((r10*x7987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7991=((1.0)*gconst149);
CheckValue<IkReal> x7992 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7991))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7992.valid){
continue;
}
CheckValue<IkReal> x7993=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7991))+(((-1.0)*gconst148*r10)))),-1);
if(!x7993.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7992.value)+(((1.5707963267949)*(x7993.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7994=IKsin(j4);
IkReal x7995=IKcos(j4);
IkReal x7996=(gconst148*r11);
IkReal x7997=(sj1*sj2);
IkReal x7998=((1.0)*x7995);
IkReal x7999=(gconst149*x7995);
IkReal x8000=(gconst148*x7994);
IkReal x8001=((1.0)*cj1*cj2);
IkReal x8002=((1.0)*x7994);
evalcond[0]=(((r21*x8000))+(((-1.0)*gconst149*r20*x8002))+(((-1.0)*r22*x7998)));
evalcond[1]=((((-1.0)*r12*x7998))+cj0+((x7994*x7996))+(((-1.0)*gconst149*r10*x8002)));
evalcond[2]=(((r01*x8000))+(((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8002))+(((-1.0)*r02*x7998)));
evalcond[3]=(((r20*x7999))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst148*r21*x7998))+(((-1.0)*r22*x8002)));
evalcond[4]=((((-1.0)*cj0*x8001))+(((-1.0)*gconst148*r01*x7998))+((r00*x7999))+((cj0*x7997))+(((-1.0)*r02*x8002)));
evalcond[5]=(((r10*x7999))+(((-1.0)*x7996*x7998))+((sj0*x7997))+(((-1.0)*r12*x8002))+(((-1.0)*sj0*x8001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8003=((1.0)*gconst149);
CheckValue<IkReal> x8004 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8003)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8004.valid){
continue;
}
CheckValue<IkReal> x8005=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8003))+(((-1.0)*gconst148*r00)))),-1);
if(!x8005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8004.value)+(((1.5707963267949)*(x8005.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8006=IKsin(j4);
IkReal x8007=IKcos(j4);
IkReal x8008=(gconst148*r11);
IkReal x8009=(sj1*sj2);
IkReal x8010=((1.0)*x8007);
IkReal x8011=(gconst149*x8007);
IkReal x8012=(gconst148*x8006);
IkReal x8013=((1.0)*cj1*cj2);
IkReal x8014=((1.0)*x8006);
evalcond[0]=((((-1.0)*r22*x8010))+(((-1.0)*gconst149*r20*x8014))+((r21*x8012)));
evalcond[1]=(cj0+(((-1.0)*gconst149*r10*x8014))+(((-1.0)*r12*x8010))+((x8006*x8008)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8010))+((r01*x8012))+(((-1.0)*gconst149*r00*x8014)));
evalcond[3]=((((-1.0)*r22*x8014))+((cj2*sj1))+(((-1.0)*gconst148*r21*x8010))+((cj1*sj2))+((r20*x8011)));
evalcond[4]=((((-1.0)*r02*x8014))+((cj0*x8009))+((r00*x8011))+(((-1.0)*cj0*x8013))+(((-1.0)*gconst148*r01*x8010)));
evalcond[5]=(((sj0*x8009))+(((-1.0)*x8008*x8010))+((r10*x8011))+(((-1.0)*sj0*x8013))+(((-1.0)*r12*x8014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8015=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8015;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8015);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8016=((1.0)*cj5);
IkReal x8017=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8016)));
j4eval[0]=x8017;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8016)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8017);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8018=cj5*cj5;
IkReal x8019=r01*r01;
IkReal x8020=(r01*sj5);
IkReal x8021=(cj5*r00);
IkReal x8022=((((-1.0)*x8018*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x8020*x8021))+((x8018*x8019))+(((-1.0)*x8019)));
j4eval[0]=x8022;
j4eval[1]=IKsign(x8022);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x8020))+x8021))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8023=cj5*cj5;
IkReal x8024=r01*r01;
IkReal x8025=(r01*sj5);
IkReal x8026=(cj5*r00);
CheckValue<IkReal> x8027=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8024))+(((-1.0)*(r02*r02)))+(((-1.0)*x8023*(r00*r00)))+(((2.0)*x8025*x8026))+((x8023*x8024)))),-1);
if(!x8027.valid){
continue;
}
CheckValue<IkReal> x8028 = IKatan2WithCheck(IkReal(((((-1.0)*x8025))+x8026)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8028.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8027.value)))+(x8028.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8029=IKsin(j4);
IkReal x8030=IKcos(j4);
IkReal x8031=(cj5*r10);
IkReal x8032=(r01*sj5);
IkReal x8033=(cj5*r00);
IkReal x8034=(cj5*r20);
IkReal x8035=((1.0)*x8030);
IkReal x8036=((1.0)*x8029);
IkReal x8037=(sj5*x8029);
evalcond[0]=((((-1.0)*x8034*x8036))+((r21*x8037))+(((-1.0)*r22*x8035)));
evalcond[1]=((((-1.0)*r12*x8035))+((r11*x8037))+(((-1.0)*x8031*x8036)));
evalcond[2]=((((-1.0)*r02*x8036))+(((-1.0)*x8032*x8035))+((x8030*x8033)));
evalcond[3]=((-1.0)+((x8029*x8032))+(((-1.0)*x8033*x8036))+(((-1.0)*r02*x8035)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8035))+(((-1.0)*r22*x8036))+((x8030*x8034)));
evalcond[5]=((((-1.0)*r12*x8036))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8035))+((x8030*x8031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8038=((1.0)*cj5);
CheckValue<IkReal> x8039=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8038))+(((-1.0)*r10*sj5)))),-1);
if(!x8039.valid){
continue;
}
CheckValue<IkReal> x8040 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8038)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8040.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8039.value)))+(x8040.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8041=IKsin(j4);
IkReal x8042=IKcos(j4);
IkReal x8043=(cj5*r10);
IkReal x8044=(r01*sj5);
IkReal x8045=(cj5*r00);
IkReal x8046=(cj5*r20);
IkReal x8047=((1.0)*x8042);
IkReal x8048=((1.0)*x8041);
IkReal x8049=(sj5*x8041);
evalcond[0]=(((r21*x8049))+(((-1.0)*r22*x8047))+(((-1.0)*x8046*x8048)));
evalcond[1]=((((-1.0)*x8043*x8048))+((r11*x8049))+(((-1.0)*r12*x8047)));
evalcond[2]=((((-1.0)*r02*x8048))+(((-1.0)*x8044*x8047))+((x8042*x8045)));
evalcond[3]=((-1.0)+(((-1.0)*x8045*x8048))+(((-1.0)*r02*x8047))+((x8041*x8044)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8047))+(((-1.0)*r22*x8048))+((x8042*x8046)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8047))+(((-1.0)*r12*x8048))+((x8042*x8043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8050=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8050.valid){
continue;
}
CheckValue<IkReal> x8051 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8051.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8050.value)))+(x8051.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8052=IKsin(j4);
IkReal x8053=IKcos(j4);
IkReal x8054=(cj5*r10);
IkReal x8055=(r01*sj5);
IkReal x8056=(cj5*r00);
IkReal x8057=(cj5*r20);
IkReal x8058=((1.0)*x8053);
IkReal x8059=((1.0)*x8052);
IkReal x8060=(sj5*x8052);
evalcond[0]=(((r21*x8060))+(((-1.0)*x8057*x8059))+(((-1.0)*r22*x8058)));
evalcond[1]=((((-1.0)*r12*x8058))+((r11*x8060))+(((-1.0)*x8054*x8059)));
evalcond[2]=((((-1.0)*x8055*x8058))+(((-1.0)*r02*x8059))+((x8053*x8056)));
evalcond[3]=((-1.0)+(((-1.0)*x8056*x8059))+(((-1.0)*r02*x8058))+((x8052*x8055)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8058))+(((-1.0)*r22*x8059))+((x8053*x8057)));
evalcond[5]=((((-1.0)*r12*x8059))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8058))+((x8053*x8054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8061=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8061;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8061);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8062=((1.0)*cj5);
IkReal x8063=((((-1.0)*r21*x8062))+(((-1.0)*r20*sj5)));
j4eval[0]=x8063;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x8062))+((r11*sj5))))));
j4eval[2]=IKsign(x8063);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8064=cj5*cj5;
IkReal x8065=r01*r01;
IkReal x8066=(cj5*r00);
IkReal x8067=(r01*sj5);
IkReal x8068=(((x8064*(r00*r00)))+(((-1.0)*x8064*x8065))+x8065+(r02*r02)+(((-2.0)*x8066*x8067)));
j4eval[0]=x8068;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x8067))+x8066))));
j4eval[2]=IKsign(x8068);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8069=cj5*cj5;
IkReal x8070=r01*r01;
IkReal x8071=(r01*sj5);
IkReal x8072=(cj5*r00);
CheckValue<IkReal> x8073=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8069*x8070))+((x8069*(r00*r00)))+x8070+(r02*r02)+(((-2.0)*x8071*x8072)))),-1);
if(!x8073.valid){
continue;
}
CheckValue<IkReal> x8074 = IKatan2WithCheck(IkReal(((((-1.0)*x8071))+x8072)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8074.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8073.value)))+(x8074.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8075=IKsin(j4);
IkReal x8076=IKcos(j4);
IkReal x8077=(cj5*r10);
IkReal x8078=(r01*sj5);
IkReal x8079=(cj5*r00);
IkReal x8080=(cj5*r20);
IkReal x8081=((1.0)*x8076);
IkReal x8082=((1.0)*x8075);
IkReal x8083=(sj5*x8075);
evalcond[0]=((((-1.0)*x8080*x8082))+((r21*x8083))+(((-1.0)*r22*x8081)));
evalcond[1]=((((-1.0)*x8077*x8082))+((r11*x8083))+(((-1.0)*r12*x8081)));
evalcond[2]=((((-1.0)*r02*x8082))+((x8076*x8079))+(((-1.0)*x8078*x8081)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8081))+((x8075*x8078))+(((-1.0)*x8079*x8082)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8081))+((cj1*sj2))+((x8076*x8080))+(((-1.0)*r22*x8082)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x8076*x8077))+(((-1.0)*r11*sj5*x8081))+((cj1*cj2))+(((-1.0)*r12*x8082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8084=((1.0)*cj5);
CheckValue<IkReal> x8085=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8084))+(((-1.0)*r20*sj5)))),-1);
if(!x8085.valid){
continue;
}
CheckValue<IkReal> x8086 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8084)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8086.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8085.value)))+(x8086.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8087=IKsin(j4);
IkReal x8088=IKcos(j4);
IkReal x8089=(cj5*r10);
IkReal x8090=(r01*sj5);
IkReal x8091=(cj5*r00);
IkReal x8092=(cj5*r20);
IkReal x8093=((1.0)*x8088);
IkReal x8094=((1.0)*x8087);
IkReal x8095=(sj5*x8087);
evalcond[0]=((((-1.0)*x8092*x8094))+(((-1.0)*r22*x8093))+((r21*x8095)));
evalcond[1]=(((r11*x8095))+(((-1.0)*x8089*x8094))+(((-1.0)*r12*x8093)));
evalcond[2]=((((-1.0)*r02*x8094))+((x8088*x8091))+(((-1.0)*x8090*x8093)));
evalcond[3]=((1.0)+((x8087*x8090))+(((-1.0)*r02*x8093))+(((-1.0)*x8091*x8094)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8093))+((cj1*sj2))+((x8088*x8092))+(((-1.0)*r22*x8094)));
evalcond[5]=((((-1.0)*r11*sj5*x8093))+(((-1.0)*sj1*sj2))+((x8088*x8089))+(((-1.0)*r12*x8094))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8096 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8096.valid){
continue;
}
CheckValue<IkReal> x8097=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8096.value)+(((1.5707963267949)*(x8097.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8098=IKsin(j4);
IkReal x8099=IKcos(j4);
IkReal x8100=(cj5*r10);
IkReal x8101=(r01*sj5);
IkReal x8102=(cj5*r00);
IkReal x8103=(cj5*r20);
IkReal x8104=((1.0)*x8099);
IkReal x8105=((1.0)*x8098);
IkReal x8106=(sj5*x8098);
evalcond[0]=((((-1.0)*x8103*x8105))+(((-1.0)*r22*x8104))+((r21*x8106)));
evalcond[1]=(((r11*x8106))+(((-1.0)*x8100*x8105))+(((-1.0)*r12*x8104)));
evalcond[2]=((((-1.0)*x8101*x8104))+(((-1.0)*r02*x8105))+((x8099*x8102)));
evalcond[3]=((1.0)+(((-1.0)*x8102*x8105))+((x8098*x8101))+(((-1.0)*r02*x8104)));
evalcond[4]=((((-1.0)*r21*sj5*x8104))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8105))+((x8099*x8103)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r11*sj5*x8104))+((x8099*x8100))+(((-1.0)*r12*x8105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8107=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8107);
rxp1_1=(px*r21);
rxp1_2=(r11*x8107);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8108=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8108);
rxp1_1=(px*r21);
rxp1_2=(r11*x8108);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8109=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8109);
rxp1_1=(px*r21);
rxp1_2=(r11*x8109);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8112=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8112.valid){
continue;
}
IkReal x8110=x8112.value;
IkReal x8111=(sj0*x8110);
cj4array[0]=((((-1.0)*sj1*sj2*x8111))+((cj1*cj2*x8111)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8113=IKsin(j4);
IkReal x8114=IKcos(j4);
IkReal x8115=(r21*sj5);
IkReal x8116=(cj5*r20);
IkReal x8117=((1.0)*x8113);
IkReal x8118=((1.0)*x8114);
evalcond[0]=((-1.0)*r02*x8113);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8118)));
evalcond[2]=((((-1.0)*x8116*x8117))+((x8113*x8115)));
evalcond[3]=(((r11*sj5*x8113))+(((-1.0)*cj5*r10*x8117)));
evalcond[4]=(((cj2*sj1))+((x8114*x8116))+(((-1.0)*x8115*x8118))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8121=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8121.valid){
continue;
}
IkReal x8119=x8121.value;
IkReal x8120=((1.0)*x8119);
cj4array[0]=((((-1.0)*cj1*sj2*x8120))+(((-1.0)*cj2*sj1*x8120)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8122=IKsin(j4);
IkReal x8123=IKcos(j4);
IkReal x8124=(r11*sj5);
IkReal x8125=((1.0)*sj0);
IkReal x8126=((1.0)*x8123);
IkReal x8127=((1.0)*cj5*x8122);
evalcond[0]=((-1.0)*r02*x8122);
evalcond[1]=((((-1.0)*x8125))+(((-1.0)*r02*x8126)));
evalcond[2]=((((-1.0)*r20*x8127))+((r21*sj5*x8122)));
evalcond[3]=(((x8122*x8124))+(((-1.0)*r10*x8127)));
evalcond[4]=(((cj5*r10*x8123))+(((-1.0)*x8124*x8126))+(((-1.0)*cj1*cj2*x8125))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8128=IKPowWithIntegerCheck(r02,-1);
if(!x8128.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8128.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8129=IKsin(j4);
IkReal x8130=IKcos(j4);
IkReal x8131=(cj5*x8130);
IkReal x8132=(sj5*x8129);
IkReal x8133=((1.0)*sj5*x8130);
IkReal x8134=((1.0)*cj5*x8129);
evalcond[0]=((-1.0)*r02*x8129);
evalcond[1]=(((r21*x8132))+(((-1.0)*r20*x8134)));
evalcond[2]=(((r11*x8132))+(((-1.0)*r10*x8134)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8131))+(((-1.0)*r21*x8133)));
evalcond[4]=((((-1.0)*r11*x8133))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+((r10*x8131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8135=((1.0)*sj0);
IkReal x8136=((1.0)*cj0);
CheckValue<IkReal> x8137 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8136))+(((-1.0)*r12*x8135)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x8136))+(((-1.0)*r11*sj5*x8135)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8137.valid){
continue;
}
CheckValue<IkReal> x8138=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8138.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8137.value)+(((1.5707963267949)*(x8138.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8139=IKsin(j4);
IkReal x8140=IKcos(j4);
IkReal x8141=(cj5*r10);
IkReal x8142=(sj1*sj2);
IkReal x8143=(r01*sj5);
IkReal x8144=(cj5*r00);
IkReal x8145=(cj5*r20);
IkReal x8146=((1.0)*x8140);
IkReal x8147=((1.0)*cj1*cj2);
IkReal x8148=((1.0)*x8139);
IkReal x8149=(sj5*x8139);
evalcond[0]=((((-1.0)*x8145*x8148))+(((-1.0)*r22*x8146))+((r21*x8149)));
evalcond[1]=(cj0+(((-1.0)*x8141*x8148))+((r11*x8149))+(((-1.0)*r12*x8146)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8144*x8148))+(((-1.0)*r02*x8146))+((x8139*x8143)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8140*x8145))+(((-1.0)*r22*x8148))+(((-1.0)*r21*sj5*x8146)));
evalcond[4]=((((-1.0)*cj0*x8147))+((x8140*x8144))+(((-1.0)*x8143*x8146))+((cj0*x8142))+(((-1.0)*r02*x8148)));
evalcond[5]=((((-1.0)*r11*sj5*x8146))+((sj0*x8142))+((x8140*x8141))+(((-1.0)*sj0*x8147))+(((-1.0)*r12*x8148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8150=((1.0)*cj5);
CheckValue<IkReal> x8151=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8150)))),-1);
if(!x8151.valid){
continue;
}
CheckValue<IkReal> x8152 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8150))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8151.value)))+(x8152.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8153=IKsin(j4);
IkReal x8154=IKcos(j4);
IkReal x8155=(cj5*r10);
IkReal x8156=(sj1*sj2);
IkReal x8157=(r01*sj5);
IkReal x8158=(cj5*r00);
IkReal x8159=(cj5*r20);
IkReal x8160=((1.0)*x8154);
IkReal x8161=((1.0)*cj1*cj2);
IkReal x8162=((1.0)*x8153);
IkReal x8163=(sj5*x8153);
evalcond[0]=((((-1.0)*x8159*x8162))+((r21*x8163))+(((-1.0)*r22*x8160)));
evalcond[1]=(((r11*x8163))+(((-1.0)*x8155*x8162))+cj0+(((-1.0)*r12*x8160)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8160))+((x8153*x8157))+(((-1.0)*x8158*x8162)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8160))+((cj1*sj2))+((x8154*x8159))+(((-1.0)*r22*x8162)));
evalcond[4]=((((-1.0)*r02*x8162))+(((-1.0)*x8157*x8160))+((cj0*x8156))+((x8154*x8158))+(((-1.0)*cj0*x8161)));
evalcond[5]=(((sj0*x8156))+(((-1.0)*r12*x8162))+(((-1.0)*r11*sj5*x8160))+((x8154*x8155))+(((-1.0)*sj0*x8161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8164=((1.0)*cj5);
CheckValue<IkReal> x8165=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8164))+(((-1.0)*r00*sj5)))),-1);
if(!x8165.valid){
continue;
}
CheckValue<IkReal> x8166 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8164)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8166.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8165.value)))+(x8166.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8167=IKsin(j4);
IkReal x8168=IKcos(j4);
IkReal x8169=(cj5*r10);
IkReal x8170=(sj1*sj2);
IkReal x8171=(r01*sj5);
IkReal x8172=(cj5*r00);
IkReal x8173=(cj5*r20);
IkReal x8174=((1.0)*x8168);
IkReal x8175=((1.0)*cj1*cj2);
IkReal x8176=((1.0)*x8167);
IkReal x8177=(sj5*x8167);
evalcond[0]=((((-1.0)*r22*x8174))+((r21*x8177))+(((-1.0)*x8173*x8176)));
evalcond[1]=((((-1.0)*r12*x8174))+cj0+(((-1.0)*x8169*x8176))+((r11*x8177)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8172*x8176))+((x8167*x8171))+(((-1.0)*r02*x8174)));
evalcond[3]=(((cj2*sj1))+((x8168*x8173))+((cj1*sj2))+(((-1.0)*r22*x8176))+(((-1.0)*r21*sj5*x8174)));
evalcond[4]=(((x8168*x8172))+(((-1.0)*x8171*x8174))+(((-1.0)*cj0*x8175))+((cj0*x8170))+(((-1.0)*r02*x8176)));
evalcond[5]=(((sj0*x8170))+(((-1.0)*sj0*x8175))+(((-1.0)*r12*x8176))+((x8168*x8169))+(((-1.0)*r11*sj5*x8174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8178=cj5*cj5;
IkReal x8179=r21*r21;
IkReal x8180=(cj2*sj1);
IkReal x8181=(cj1*sj2);
IkReal x8182=(r21*sj5);
IkReal x8183=((1.0)*cj5*r20);
CheckValue<IkReal> x8184 = IKatan2WithCheck(IkReal((((r22*x8181))+((r22*x8180)))),IkReal((((x8181*x8182))+(((-1.0)*x8181*x8183))+((x8180*x8182))+(((-1.0)*x8180*x8183)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8184.valid){
continue;
}
CheckValue<IkReal> x8185=IKPowWithIntegerCheck(IKsign((((x8178*(r20*r20)))+(r22*r22)+(((-1.0)*x8178*x8179))+x8179+(((-2.0)*cj5*r20*x8182)))),-1);
if(!x8185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8184.value)+(((1.5707963267949)*(x8185.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x8186=IKsin(j4);
IkReal x8187=IKcos(j4);
IkReal x8188=(r21*sj5);
IkReal x8189=(cj5*r20);
IkReal x8190=((1.0)*x8187);
IkReal x8191=((1.0)*x8186);
evalcond[0]=((((-1.0)*r22*x8190))+((x8186*x8188))+(((-1.0)*x8189*x8191)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*r22*x8191))+((cj1*sj2))+(((-1.0)*x8188*x8190))+((x8187*x8189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8192=(cj5*sj4);
IkReal x8193=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x8193))+(((-1.0)*r00*x8192)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x8192))+(((-1.0)*r11*x8193))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x8193))+(((-1.0)*r00*x8192))))+IKsqr((((r10*x8192))+(((-1.0)*r11*x8193))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x8193))+(((-1.0)*r00*x8192))), (((r10*x8192))+(((-1.0)*r11*x8193))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8194=IKcos(j0);
IkReal x8195=IKsin(j0);
IkReal x8196=(cj4*cj5);
IkReal x8197=((0.1)*sj5);
IkReal x8198=(cj5*r11);
IkReal x8199=(r11*sj5);
IkReal x8200=((1.0)*sj5);
IkReal x8201=((1.0)*sj4);
IkReal x8202=((1.0)*cj2);
IkReal x8203=(cj1*cj2);
IkReal x8204=(cj5*r01);
IkReal x8205=(sj1*sj2);
IkReal x8206=((1.0)*cj4);
IkReal x8207=((1.0)*cj1*sj2);
IkReal x8208=(sj1*x8194);
IkReal x8209=((0.3922)*x8195);
IkReal x8210=(cj1*x8194);
IkReal x8211=(cj1*x8195);
evalcond[0]=((((-1.0)*cj5*r10*x8201))+(((-1.0)*r12*x8206))+((sj4*x8199))+x8194);
evalcond[1]=((((-1.0)*x8195))+(((-1.0)*r02*x8206))+((r01*sj4*sj5))+(((-1.0)*cj5*r00*x8201)));
evalcond[2]=((((-1.0)*r00*x8200))+(((-1.0)*x8202*x8208))+(((-1.0)*x8194*x8207))+(((-1.0)*x8204)));
evalcond[3]=((((-1.0)*r10*x8200))+(((-1.0)*x8195*x8207))+(((-1.0)*x8198))+(((-1.0)*sj1*x8195*x8202)));
evalcond[4]=((((-1.0)*x8202*x8210))+((r00*x8196))+((x8194*x8205))+(((-1.0)*r02*x8201))+(((-1.0)*cj4*r01*x8200)));
evalcond[5]=((((-1.0)*x8202*x8211))+((r10*x8196))+((x8195*x8205))+(((-1.0)*r12*x8201))+(((-1.0)*x8199*x8206)));
evalcond[6]=((((-0.134)*x8195))+(((-1.0)*r00*x8197))+(((-1.0)*px))+(((0.3922)*x8194*x8203))+(((-0.3922)*x8194*x8205))+(((0.425)*x8210))+(((-0.1)*x8204)));
evalcond[7]=((((-0.1)*x8198))+(((-1.0)*x8205*x8209))+(((-1.0)*r10*x8197))+((x8203*x8209))+(((-1.0)*py))+(((0.134)*x8194))+(((0.425)*x8211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8212 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8212.valid){
continue;
}
CheckValue<IkReal> x8213=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x8213.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8212.value)+(((1.5707963267949)*(x8213.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x8214=IKcos(j0);
IkReal x8215=IKsin(j0);
IkReal x8216=(r00*sj5);
IkReal x8217=(cj5*r11);
IkReal x8218=(r10*sj5);
IkReal x8219=((1.0)*cj2);
IkReal x8220=(cj1*cj2);
IkReal x8221=(cj5*r01);
IkReal x8222=((0.425)*cj1);
IkReal x8223=((1.0)*cj1*sj2);
IkReal x8224=(sj1*x8214);
IkReal x8225=((0.3922)*x8215);
evalcond[0]=((((-1.0)*x8219*x8224))+(((-1.0)*x8221))+(((-1.0)*x8214*x8223))+(((-1.0)*x8216)));
evalcond[1]=((((-1.0)*sj1*x8215*x8219))+(((-1.0)*x8215*x8223))+(((-1.0)*x8218))+(((-1.0)*x8217)));
evalcond[2]=((((-0.1)*x8216))+(((-0.3922)*sj2*x8224))+(((-1.0)*px))+(((0.3922)*x8214*x8220))+(((-0.134)*x8215))+(((-0.1)*x8221))+((x8214*x8222)));
evalcond[3]=((((-1.0)*sj1*sj2*x8225))+(((-0.1)*x8218))+(((-0.1)*x8217))+(((0.134)*x8214))+(((-1.0)*py))+((x8220*x8225))+((x8215*x8222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8226=((1.0)*cj5);
IkReal x8227=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8226)));
j4eval[0]=x8227;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8226)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8227);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8228=((1.0)*cj5);
IkReal x8229=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8228)));
j4eval[0]=x8229;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x8228))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x8229);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8230=((1.0)*sj0);
IkReal x8231=((1.0)*cj0);
IkReal x8232=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8232;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x8230))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x8231)))))+(IKabs(((((-1.0)*r02*x8231))+(((-1.0)*r12*x8230))))));
j4eval[2]=IKsign(x8232);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8233=((-1.0)*r20);
IkReal x8235 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8235)==0){
continue;
}
IkReal x8234=pow(x8235,-0.5);
CheckValue<IkReal> x8236 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8233),IKFAST_ATAN2_MAGTHRESH);
if(!x8236.valid){
continue;
}
IkReal gconst132=((-1.0)*(x8236.value));
IkReal gconst133=(r21*x8234);
IkReal gconst134=(x8233*x8234);
CheckValue<IkReal> x8237 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8237.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8237.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8238=((-1.0)*r20);
IkReal x8239=x8234;
CheckValue<IkReal> x8241 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8238),IKFAST_ATAN2_MAGTHRESH);
if(!x8241.valid){
continue;
}
IkReal x8240=((-1.0)*(x8241.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8240;
IkReal gconst132=x8240;
IkReal gconst133=(r21*x8239);
IkReal gconst134=(x8238*x8239);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8242=((-1.0)*r20);
IkReal x8243=x8234;
CheckValue<IkReal> x8245 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8242),IKFAST_ATAN2_MAGTHRESH);
if(!x8245.valid){
continue;
}
IkReal x8244=((-1.0)*(x8245.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8244;
IkReal gconst132=x8244;
IkReal gconst133=(r21*x8243);
IkReal gconst134=(x8242*x8243);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8246=((-1.0)*r20);
IkReal x8247=x8234;
CheckValue<IkReal> x8249 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8246),IKFAST_ATAN2_MAGTHRESH);
if(!x8249.valid){
continue;
}
IkReal x8248=((-1.0)*(x8249.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8248;
IkReal gconst132=x8248;
IkReal gconst133=(r21*x8247);
IkReal gconst134=(x8246*x8247);
IkReal x8250=r22*r22;
CheckValue<IkReal> x8253=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8250))),-1);
if(!x8253.valid){
continue;
}
IkReal x8251=x8253.value;
IkReal x8252=((((2.0)*x8251*(r20*r20)*(r21*r21)))+((x8251*(r20*r20*r20*r20)))+((x8251*(r21*r21*r21*r21)))+x8250);
j4eval[0]=x8252;
j4eval[1]=IKsign(x8252);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8254=(gconst133*r21);
IkReal x8255=(cj1*sj2);
IkReal x8256=(gconst134*r20);
IkReal x8257=(cj2*sj1);
CheckValue<IkReal> x8258=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x8256*x8256)+(((-2.0)*x8254*x8256))+(x8254*x8254))),-1);
if(!x8258.valid){
continue;
}
CheckValue<IkReal> x8259 = IKatan2WithCheck(IkReal((((r22*x8255))+((r22*x8257)))),IkReal((((x8254*x8255))+((x8254*x8257))+(((-1.0)*x8256*x8257))+(((-1.0)*x8255*x8256)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8258.value)))+(x8259.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8260=IKsin(j4);
IkReal x8261=IKcos(j4);
IkReal x8262=(sj1*sj2);
IkReal x8263=(gconst133*r11);
IkReal x8264=(gconst133*r21);
IkReal x8265=(gconst133*r01);
IkReal x8266=((1.0)*x8261);
IkReal x8267=(gconst134*x8261);
IkReal x8268=((1.0)*x8260);
IkReal x8269=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8266))+((x8260*x8264))+(((-1.0)*gconst134*r20*x8268)));
evalcond[1]=((((-1.0)*r12*x8266))+cj0+((x8260*x8263))+(((-1.0)*gconst134*r10*x8268)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst134*r00*x8268))+(((-1.0)*r02*x8266))+((x8260*x8265)));
evalcond[3]=(((cj2*sj1))+((r20*x8267))+((cj1*sj2))+(((-1.0)*x8264*x8266))+(((-1.0)*r22*x8268)));
evalcond[4]=((((-1.0)*cj0*x8269))+((cj0*x8262))+(((-1.0)*r02*x8268))+(((-1.0)*x8265*x8266))+((r00*x8267)));
evalcond[5]=((((-1.0)*r12*x8268))+(((-1.0)*x8263*x8266))+(((-1.0)*sj0*x8269))+((sj0*x8262))+((r10*x8267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8270=((1.0)*gconst134);
CheckValue<IkReal> x8271 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8270))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8271.valid){
continue;
}
CheckValue<IkReal> x8272=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x8270)))),-1);
if(!x8272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8271.value)+(((1.5707963267949)*(x8272.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8273=IKsin(j4);
IkReal x8274=IKcos(j4);
IkReal x8275=(sj1*sj2);
IkReal x8276=(gconst133*r11);
IkReal x8277=(gconst133*r21);
IkReal x8278=(gconst133*r01);
IkReal x8279=((1.0)*x8274);
IkReal x8280=(gconst134*x8274);
IkReal x8281=((1.0)*x8273);
IkReal x8282=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x8281))+(((-1.0)*r22*x8279))+((x8273*x8277)));
evalcond[1]=(cj0+(((-1.0)*gconst134*r10*x8281))+(((-1.0)*r12*x8279))+((x8273*x8276)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8279))+((x8273*x8278))+(((-1.0)*gconst134*r00*x8281)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8280))+(((-1.0)*x8277*x8279))+(((-1.0)*r22*x8281)));
evalcond[4]=((((-1.0)*r02*x8281))+((r00*x8280))+((cj0*x8275))+(((-1.0)*cj0*x8282))+(((-1.0)*x8278*x8279)));
evalcond[5]=((((-1.0)*r12*x8281))+((r10*x8280))+(((-1.0)*x8276*x8279))+(((-1.0)*sj0*x8282))+((sj0*x8275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8283=((1.0)*gconst134);
CheckValue<IkReal> x8284 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8283))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8284.valid){
continue;
}
CheckValue<IkReal> x8285=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x8283)))),-1);
if(!x8285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8284.value)+(((1.5707963267949)*(x8285.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8286=IKsin(j4);
IkReal x8287=IKcos(j4);
IkReal x8288=(sj1*sj2);
IkReal x8289=(gconst133*r11);
IkReal x8290=(gconst133*r21);
IkReal x8291=(gconst133*r01);
IkReal x8292=((1.0)*x8287);
IkReal x8293=(gconst134*x8287);
IkReal x8294=((1.0)*x8286);
IkReal x8295=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x8294))+((x8286*x8290))+(((-1.0)*r22*x8292)));
evalcond[1]=((((-1.0)*r12*x8292))+cj0+((x8286*x8289))+(((-1.0)*gconst134*r10*x8294)));
evalcond[2]=((((-1.0)*sj0))+((x8286*x8291))+(((-1.0)*gconst134*r00*x8294))+(((-1.0)*r02*x8292)));
evalcond[3]=(((cj2*sj1))+((r20*x8293))+((cj1*sj2))+(((-1.0)*x8290*x8292))+(((-1.0)*r22*x8294)));
evalcond[4]=(((r00*x8293))+(((-1.0)*cj0*x8295))+(((-1.0)*x8291*x8292))+((cj0*x8288))+(((-1.0)*r02*x8294)));
evalcond[5]=((((-1.0)*r12*x8294))+((r10*x8293))+((sj0*x8288))+(((-1.0)*x8289*x8292))+(((-1.0)*sj0*x8295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8296=((-1.0)*r21);
IkReal x8298 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8298)==0){
continue;
}
IkReal x8297=pow(x8298,-0.5);
CheckValue<IkReal> x8299 = IKatan2WithCheck(IkReal(x8296),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8299.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x8299.value))));
IkReal gconst136=(x8296*x8297);
IkReal gconst137=((1.0)*r20*x8297);
CheckValue<IkReal> x8300 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8300.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8300.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8301=((-1.0)*r21);
CheckValue<IkReal> x8304 = IKatan2WithCheck(IkReal(x8301),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8304.valid){
continue;
}
IkReal x8302=((1.0)*(x8304.value));
IkReal x8303=x8297;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8302)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8302)));
IkReal gconst136=(x8301*x8303);
IkReal gconst137=((1.0)*r20*x8303);
IkReal x8305=r22*r22;
IkReal x8306=((1.0)*x8305);
CheckValue<IkReal> x8310=IKPowWithIntegerCheck(((-1.0)+x8305),-1);
if(!x8310.valid){
continue;
}
IkReal x8307=x8310.value;
if((((1.0)+(((-1.0)*x8306)))) < -0.00001)
continue;
IkReal x8308=IKsqrt(((1.0)+(((-1.0)*x8306))));
IkReal x8309=(cj0*x8307*x8308);
j4eval[0]=((IKabs((x8309+(((-1.0)*x8306*x8309)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8311=((-1.0)*r21);
CheckValue<IkReal> x8314 = IKatan2WithCheck(IkReal(x8311),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8314.valid){
continue;
}
IkReal x8312=((1.0)*(x8314.value));
IkReal x8313=x8297;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8312)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8312)));
IkReal gconst136=(x8311*x8313);
IkReal gconst137=((1.0)*r20*x8313);
IkReal x8315=r22*r22;
IkReal x8316=((1.0)*x8315);
CheckValue<IkReal> x8320=IKPowWithIntegerCheck(((-1.0)+x8315),-1);
if(!x8320.valid){
continue;
}
IkReal x8317=x8320.value;
if((((1.0)+(((-1.0)*x8316)))) < -0.00001)
continue;
IkReal x8318=IKsqrt(((1.0)+(((-1.0)*x8316))));
IkReal x8319=(sj0*x8317*x8318);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x8319+(((-1.0)*x8316*x8319))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8321=((-1.0)*r21);
CheckValue<IkReal> x8324 = IKatan2WithCheck(IkReal(x8321),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8324.valid){
continue;
}
IkReal x8322=((1.0)*(x8324.value));
IkReal x8323=x8297;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8322)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8322)));
IkReal gconst136=(x8321*x8323);
IkReal gconst137=((1.0)*r20*x8323);
IkReal x8325=r22*r22;
IkReal x8326=(r12*sj0);
IkReal x8327=(cj0*r02);
CheckValue<IkReal> x8331=IKPowWithIntegerCheck(((-1.0)+x8325),-1);
if(!x8331.valid){
continue;
}
IkReal x8328=x8331.value;
if((((1.0)+(((-1.0)*x8325)))) < -0.00001)
continue;
IkReal x8329=IKsqrt(((1.0)+(((-1.0)*x8325))));
IkReal x8330=(r22*x8328*x8329);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x8327))+(((-1.0)*x8326)))))+(IKabs((((x8326*x8330))+((x8327*x8330))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8332=((1.0)*sj0);
IkReal x8333=((1.0)*cj0);
CheckValue<IkReal> x8334=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x8334.valid){
continue;
}
CheckValue<IkReal> x8335 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8332))+(((-1.0)*r02*x8333)))),IkReal((((gconst137*r10*sj0))+(((-1.0)*gconst136*r01*x8333))+((cj0*gconst137*r00))+(((-1.0)*gconst136*r11*x8332)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8335.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8334.value)))+(x8335.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8336=IKsin(j4);
IkReal x8337=IKcos(j4);
IkReal x8338=(gconst136*r01);
IkReal x8339=(gconst137*r10);
IkReal x8340=(sj1*sj2);
IkReal x8341=(gconst137*r20);
IkReal x8342=(gconst136*r11);
IkReal x8343=(gconst136*r21);
IkReal x8344=(gconst137*r00);
IkReal x8345=((1.0)*x8337);
IkReal x8346=((1.0)*cj1*cj2);
IkReal x8347=((1.0)*x8336);
evalcond[0]=(((x8336*x8343))+(((-1.0)*x8341*x8347))+(((-1.0)*r22*x8345)));
evalcond[1]=(((x8336*x8342))+(((-1.0)*x8339*x8347))+cj0+(((-1.0)*r12*x8345)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8345))+((x8336*x8338))+(((-1.0)*x8344*x8347)));
evalcond[3]=(((cj2*sj1))+((x8337*x8341))+(((-1.0)*x8343*x8345))+((cj1*sj2))+(((-1.0)*r22*x8347)));
evalcond[4]=((((-1.0)*x8338*x8345))+((x8337*x8344))+(((-1.0)*r02*x8347))+((cj0*x8340))+(((-1.0)*cj0*x8346)));
evalcond[5]=(((sj0*x8340))+(((-1.0)*x8342*x8345))+(((-1.0)*r12*x8347))+((x8337*x8339))+(((-1.0)*sj0*x8346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8348=((1.0)*gconst137);
CheckValue<IkReal> x8349=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8348))+(((-1.0)*gconst136*r10)))),-1);
if(!x8349.valid){
continue;
}
CheckValue<IkReal> x8350 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst136*r21*sj0))+(((-1.0)*r20*sj0*x8348)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8350.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8349.value)))+(x8350.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8351=IKsin(j4);
IkReal x8352=IKcos(j4);
IkReal x8353=(gconst136*r01);
IkReal x8354=(gconst137*r10);
IkReal x8355=(sj1*sj2);
IkReal x8356=(gconst137*r20);
IkReal x8357=(gconst136*r11);
IkReal x8358=(gconst136*r21);
IkReal x8359=(gconst137*r00);
IkReal x8360=((1.0)*x8352);
IkReal x8361=((1.0)*cj1*cj2);
IkReal x8362=((1.0)*x8351);
evalcond[0]=(((x8351*x8358))+(((-1.0)*r22*x8360))+(((-1.0)*x8356*x8362)));
evalcond[1]=(((x8351*x8357))+cj0+(((-1.0)*r12*x8360))+(((-1.0)*x8354*x8362)));
evalcond[2]=((((-1.0)*sj0))+((x8351*x8353))+(((-1.0)*x8359*x8362))+(((-1.0)*r02*x8360)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8362))+(((-1.0)*x8358*x8360))+((x8352*x8356)));
evalcond[4]=(((cj0*x8355))+(((-1.0)*r02*x8362))+(((-1.0)*cj0*x8361))+(((-1.0)*x8353*x8360))+((x8352*x8359)));
evalcond[5]=((((-1.0)*x8357*x8360))+(((-1.0)*r12*x8362))+((sj0*x8355))+(((-1.0)*sj0*x8361))+((x8352*x8354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8363=((1.0)*gconst137);
CheckValue<IkReal> x8364 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8363))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8364.valid){
continue;
}
CheckValue<IkReal> x8365=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8363))+(((-1.0)*gconst136*r00)))),-1);
if(!x8365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8364.value)+(((1.5707963267949)*(x8365.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8366=IKsin(j4);
IkReal x8367=IKcos(j4);
IkReal x8368=(gconst136*r01);
IkReal x8369=(gconst137*r10);
IkReal x8370=(sj1*sj2);
IkReal x8371=(gconst137*r20);
IkReal x8372=(gconst136*r11);
IkReal x8373=(gconst136*r21);
IkReal x8374=(gconst137*r00);
IkReal x8375=((1.0)*x8367);
IkReal x8376=((1.0)*cj1*cj2);
IkReal x8377=((1.0)*x8366);
evalcond[0]=((((-1.0)*x8371*x8377))+(((-1.0)*r22*x8375))+((x8366*x8373)));
evalcond[1]=((((-1.0)*r12*x8375))+cj0+(((-1.0)*x8369*x8377))+((x8366*x8372)));
evalcond[2]=((((-1.0)*x8374*x8377))+(((-1.0)*sj0))+(((-1.0)*r02*x8375))+((x8366*x8368)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8377))+(((-1.0)*x8373*x8375))+((x8367*x8371)));
evalcond[4]=((((-1.0)*x8368*x8375))+((cj0*x8370))+(((-1.0)*r02*x8377))+(((-1.0)*cj0*x8376))+((x8367*x8374)));
evalcond[5]=((((-1.0)*r12*x8377))+((sj0*x8370))+((x8367*x8369))+(((-1.0)*x8372*x8375))+(((-1.0)*sj0*x8376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8378=((-1.0)*r10);
IkReal x8380 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8380)==0){
continue;
}
IkReal x8379=pow(x8380,-0.5);
CheckValue<IkReal> x8381 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8378),IKFAST_ATAN2_MAGTHRESH);
if(!x8381.valid){
continue;
}
IkReal gconst138=((-1.0)*(x8381.value));
IkReal gconst139=(r11*x8379);
IkReal gconst140=(x8378*x8379);
CheckValue<IkReal> x8382 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8382.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8382.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8383=((-1.0)*r10);
IkReal x8384=x8379;
CheckValue<IkReal> x8386 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8383),IKFAST_ATAN2_MAGTHRESH);
if(!x8386.valid){
continue;
}
IkReal x8385=((-1.0)*(x8386.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8385;
IkReal gconst138=x8385;
IkReal gconst139=(r11*x8384);
IkReal gconst140=(x8383*x8384);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8387=((1.0)*sj0);
IkReal x8388=((1.0)*gconst139);
CheckValue<IkReal> x8389 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8387)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*gconst139*r11*x8387))+(((-1.0)*cj0*r01*x8388))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8389.valid){
continue;
}
CheckValue<IkReal> x8390=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x8388)))),-1);
if(!x8390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8389.value)+(((1.5707963267949)*(x8390.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8391=IKsin(j4);
IkReal x8392=IKcos(j4);
IkReal x8393=(gconst140*r00);
IkReal x8394=(sj1*sj2);
IkReal x8395=(gconst139*r11);
IkReal x8396=(gconst139*r01);
IkReal x8397=(gconst139*r21);
IkReal x8398=((1.0)*x8392);
IkReal x8399=((1.0)*x8391);
IkReal x8400=((1.0)*cj1*cj2);
IkReal x8401=(gconst140*x8392);
evalcond[0]=(((x8391*x8397))+(((-1.0)*gconst140*r20*x8399))+(((-1.0)*r22*x8398)));
evalcond[1]=(cj0+(((-1.0)*gconst140*r10*x8399))+((x8391*x8395))+(((-1.0)*r12*x8398)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8393*x8399))+((x8391*x8396))+(((-1.0)*r02*x8398)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8399))+((r20*x8401))+(((-1.0)*x8397*x8398)));
evalcond[4]=((((-1.0)*cj0*x8400))+((x8392*x8393))+(((-1.0)*r02*x8399))+(((-1.0)*x8396*x8398))+((cj0*x8394)));
evalcond[5]=((((-1.0)*x8395*x8398))+(((-1.0)*sj0*x8400))+((sj0*x8394))+((r10*x8401))+(((-1.0)*r12*x8399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8402=((1.0)*gconst140);
CheckValue<IkReal> x8403=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8402))+(((-1.0)*gconst139*r00)))),-1);
if(!x8403.valid){
continue;
}
CheckValue<IkReal> x8404 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x8402)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8404.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8403.value)))+(x8404.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8405=IKsin(j4);
IkReal x8406=IKcos(j4);
IkReal x8407=(gconst140*r00);
IkReal x8408=(sj1*sj2);
IkReal x8409=(gconst139*r11);
IkReal x8410=(gconst139*r01);
IkReal x8411=(gconst139*r21);
IkReal x8412=((1.0)*x8406);
IkReal x8413=((1.0)*x8405);
IkReal x8414=((1.0)*cj1*cj2);
IkReal x8415=(gconst140*x8406);
evalcond[0]=(((x8405*x8411))+(((-1.0)*gconst140*r20*x8413))+(((-1.0)*r22*x8412)));
evalcond[1]=((((-1.0)*r12*x8412))+cj0+((x8405*x8409))+(((-1.0)*gconst140*r10*x8413)));
evalcond[2]=((((-1.0)*sj0))+((x8405*x8410))+(((-1.0)*r02*x8412))+(((-1.0)*x8407*x8413)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8415))+(((-1.0)*x8411*x8412))+(((-1.0)*r22*x8413)));
evalcond[4]=((((-1.0)*x8410*x8412))+((x8406*x8407))+(((-1.0)*cj0*x8414))+(((-1.0)*r02*x8413))+((cj0*x8408)));
evalcond[5]=((((-1.0)*r12*x8413))+((sj0*x8408))+(((-1.0)*x8409*x8412))+((r10*x8415))+(((-1.0)*sj0*x8414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8416=((-1.0)*r11);
IkReal x8418 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8418)==0){
continue;
}
IkReal x8417=pow(x8418,-0.5);
CheckValue<IkReal> x8419 = IKatan2WithCheck(IkReal(x8416),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8419.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8419.value))));
IkReal gconst142=(x8416*x8417);
IkReal gconst143=((1.0)*r10*x8417);
CheckValue<IkReal> x8420 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8420.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8420.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8421=((-1.0)*r11);
CheckValue<IkReal> x8424 = IKatan2WithCheck(IkReal(x8421),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8424.valid){
continue;
}
IkReal x8422=((1.0)*(x8424.value));
IkReal x8423=x8417;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8422)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8422)));
IkReal gconst142=(x8421*x8423);
IkReal gconst143=((1.0)*r10*x8423);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8425=((-1.0)*r11);
CheckValue<IkReal> x8428 = IKatan2WithCheck(IkReal(x8425),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8428.valid){
continue;
}
IkReal x8426=((1.0)*(x8428.value));
IkReal x8427=x8417;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8426)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8426)));
IkReal gconst142=(x8425*x8427);
IkReal gconst143=((1.0)*r10*x8427);
IkReal x8429=r12*r12;
IkReal x8430=((1.0)*sj0);
IkReal x8431=(cj0*r02);
IkReal x8432=x8417;
j4eval[0]=((IKabs(((((-1.0)*r12*x8430))+(((-1.0)*x8431)))))+(IKabs((((sj0*x8429*x8432))+(((-1.0)*x8430*x8432))+((r12*x8431*x8432))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8433=((-1.0)*r11);
CheckValue<IkReal> x8436 = IKatan2WithCheck(IkReal(x8433),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8436.valid){
continue;
}
IkReal x8434=((1.0)*(x8436.value));
IkReal x8435=x8417;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8434)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8434)));
IkReal gconst142=(x8433*x8435);
IkReal gconst143=((1.0)*r10*x8435);
IkReal x8437=r12*r12;
IkReal x8438=(cj1*r22*sj2);
IkReal x8439=(cj2*r22*sj1);
CheckValue<IkReal> x8443=IKPowWithIntegerCheck(((-1.0)+x8437),-1);
if(!x8443.valid){
continue;
}
IkReal x8440=x8443.value;
if((((1.0)+(((-1.0)*x8437)))) < -0.00001)
continue;
IkReal x8441=IKsqrt(((1.0)+(((-1.0)*x8437))));
IkReal x8442=((1.0)*r12*x8440*x8441);
j4eval[0]=((IKabs(((((-1.0)*x8438*x8442))+(((-1.0)*x8439*x8442)))))+(IKabs((x8439+x8438))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8444=(gconst142*r21);
IkReal x8445=(cj1*sj2);
IkReal x8446=(cj2*sj1);
IkReal x8447=(gconst143*r20);
CheckValue<IkReal> x8448 = IKatan2WithCheck(IkReal((((r22*x8445))+((r22*x8446)))),IkReal((((x8444*x8446))+((x8444*x8445))+(((-1.0)*x8445*x8447))+(((-1.0)*x8446*x8447)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8448.valid){
continue;
}
CheckValue<IkReal> x8449=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x8447*x8447)+(((-2.0)*x8444*x8447))+(x8444*x8444))),-1);
if(!x8449.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8448.value)+(((1.5707963267949)*(x8449.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8450=IKsin(j4);
IkReal x8451=IKcos(j4);
IkReal x8452=(sj1*sj2);
IkReal x8453=(gconst143*r20);
IkReal x8454=((1.0)*x8451);
IkReal x8455=((1.0)*cj1*cj2);
IkReal x8456=((1.0)*x8450);
IkReal x8457=(gconst142*x8450);
IkReal x8458=(gconst143*x8451);
evalcond[0]=(((r21*x8457))+(((-1.0)*x8453*x8456))+(((-1.0)*r22*x8454)));
evalcond[1]=(((r11*x8457))+cj0+(((-1.0)*gconst143*r10*x8456))+(((-1.0)*r12*x8454)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x8456))+(((-1.0)*r02*x8454))+((r01*x8457)));
evalcond[3]=(((cj2*sj1))+((x8451*x8453))+((cj1*sj2))+(((-1.0)*r22*x8456))+(((-1.0)*gconst142*r21*x8454)));
evalcond[4]=((((-1.0)*gconst142*r01*x8454))+(((-1.0)*cj0*x8455))+(((-1.0)*r02*x8456))+((cj0*x8452))+((r00*x8458)));
evalcond[5]=((((-1.0)*gconst142*r11*x8454))+(((-1.0)*sj0*x8455))+(((-1.0)*r12*x8456))+((sj0*x8452))+((r10*x8458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8459=((1.0)*sj0);
IkReal x8460=((1.0)*gconst142);
CheckValue<IkReal> x8461 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8459))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst142*r11*x8459))+((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x8460))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8461.valid){
continue;
}
CheckValue<IkReal> x8462=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst143*r21))+(((-1.0)*r20*x8460)))),-1);
if(!x8462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8461.value)+(((1.5707963267949)*(x8462.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8463=IKsin(j4);
IkReal x8464=IKcos(j4);
IkReal x8465=(sj1*sj2);
IkReal x8466=(gconst143*r20);
IkReal x8467=((1.0)*x8464);
IkReal x8468=((1.0)*cj1*cj2);
IkReal x8469=((1.0)*x8463);
IkReal x8470=(gconst142*x8463);
IkReal x8471=(gconst143*x8464);
evalcond[0]=(((r21*x8470))+(((-1.0)*r22*x8467))+(((-1.0)*x8466*x8469)));
evalcond[1]=(cj0+(((-1.0)*gconst143*r10*x8469))+((r11*x8470))+(((-1.0)*r12*x8467)));
evalcond[2]=((((-1.0)*sj0))+((r01*x8470))+(((-1.0)*r02*x8467))+(((-1.0)*gconst143*r00*x8469)));
evalcond[3]=(((cj2*sj1))+((x8464*x8466))+((cj1*sj2))+(((-1.0)*r22*x8469))+(((-1.0)*gconst142*r21*x8467)));
evalcond[4]=((((-1.0)*r02*x8469))+((r00*x8471))+(((-1.0)*gconst142*r01*x8467))+((cj0*x8465))+(((-1.0)*cj0*x8468)));
evalcond[5]=((((-1.0)*sj0*x8468))+((r10*x8471))+(((-1.0)*r12*x8469))+(((-1.0)*gconst142*r11*x8467))+((sj0*x8465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8472=((1.0)*gconst143);
CheckValue<IkReal> x8473=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x8472)))),-1);
if(!x8473.valid){
continue;
}
CheckValue<IkReal> x8474 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8472))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8473.value)))+(x8474.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8475=IKsin(j4);
IkReal x8476=IKcos(j4);
IkReal x8477=(sj1*sj2);
IkReal x8478=(gconst143*r20);
IkReal x8479=((1.0)*x8476);
IkReal x8480=((1.0)*cj1*cj2);
IkReal x8481=((1.0)*x8475);
IkReal x8482=(gconst142*x8475);
IkReal x8483=(gconst143*x8476);
evalcond[0]=((((-1.0)*x8478*x8481))+(((-1.0)*r22*x8479))+((r21*x8482)));
evalcond[1]=(cj0+(((-1.0)*gconst143*r10*x8481))+((r11*x8482))+(((-1.0)*r12*x8479)));
evalcond[2]=(((r01*x8482))+(((-1.0)*sj0))+(((-1.0)*r02*x8479))+(((-1.0)*gconst143*r00*x8481)));
evalcond[3]=(((x8476*x8478))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8481))+(((-1.0)*gconst142*r21*x8479)));
evalcond[4]=((((-1.0)*cj0*x8480))+(((-1.0)*r02*x8481))+(((-1.0)*gconst142*r01*x8479))+((cj0*x8477))+((r00*x8483)));
evalcond[5]=(((r10*x8483))+(((-1.0)*sj0*x8480))+(((-1.0)*r12*x8481))+(((-1.0)*gconst142*r11*x8479))+((sj0*x8477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8484=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8484;
j4eval[1]=IKsign(x8484);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8485=((1.0)*cj5);
IkReal x8486=((((-1.0)*r01*x8485))+(((-1.0)*r00*sj5)));
j4eval[0]=x8486;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x8485))+((r21*sj5))))));
j4eval[2]=IKsign(x8486);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8487=cj5*cj5;
IkReal x8488=r11*r11;
IkReal x8489=(r11*sj5);
IkReal x8490=(cj5*r10);
IkReal x8491=((r12*r12)+x8488+(((-1.0)*x8487*x8488))+(((-2.0)*x8489*x8490))+((x8487*(r10*r10))));
j4eval[0]=x8491;
j4eval[1]=IKsign(x8491);
j4eval[2]=((IKabs(r12))+(IKabs((x8490+(((-1.0)*x8489))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8492=cj5*cj5;
IkReal x8493=r11*r11;
IkReal x8494=(cj5*r10);
IkReal x8495=(r11*sj5);
CheckValue<IkReal> x8496 = IKatan2WithCheck(IkReal((x8494+(((-1.0)*x8495)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8496.valid){
continue;
}
CheckValue<IkReal> x8497=IKPowWithIntegerCheck(IKsign(((r12*r12)+x8493+(((-1.0)*x8492*x8493))+((x8492*(r10*r10)))+(((-2.0)*x8494*x8495)))),-1);
if(!x8497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8496.value)+(((1.5707963267949)*(x8497.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8498=IKsin(j4);
IkReal x8499=IKcos(j4);
IkReal x8500=(cj5*r10);
IkReal x8501=(r01*sj5);
IkReal x8502=(cj5*r00);
IkReal x8503=(cj5*r20);
IkReal x8504=((1.0)*x8499);
IkReal x8505=((1.0)*x8498);
IkReal x8506=(sj5*x8498);
evalcond[0]=((((-1.0)*x8503*x8505))+((r21*x8506))+(((-1.0)*r22*x8504)));
evalcond[1]=(((x8498*x8501))+(((-1.0)*r02*x8504))+(((-1.0)*x8502*x8505)));
evalcond[2]=(((x8499*x8500))+(((-1.0)*r12*x8505))+(((-1.0)*r11*sj5*x8504)));
evalcond[3]=((1.0)+((r11*x8506))+(((-1.0)*r12*x8504))+(((-1.0)*x8500*x8505)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8499*x8503))+(((-1.0)*r22*x8505))+(((-1.0)*r21*sj5*x8504)));
evalcond[5]=((((-1.0)*x8501*x8504))+((x8499*x8502))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8507=((1.0)*cj5);
CheckValue<IkReal> x8508=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8507)))),-1);
if(!x8508.valid){
continue;
}
CheckValue<IkReal> x8509 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8507)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8508.value)))+(x8509.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8510=IKsin(j4);
IkReal x8511=IKcos(j4);
IkReal x8512=(cj5*r10);
IkReal x8513=(r01*sj5);
IkReal x8514=(cj5*r00);
IkReal x8515=(cj5*r20);
IkReal x8516=((1.0)*x8511);
IkReal x8517=((1.0)*x8510);
IkReal x8518=(sj5*x8510);
evalcond[0]=((((-1.0)*x8515*x8517))+((r21*x8518))+(((-1.0)*r22*x8516)));
evalcond[1]=((((-1.0)*x8514*x8517))+((x8510*x8513))+(((-1.0)*r02*x8516)));
evalcond[2]=((((-1.0)*r12*x8517))+((x8511*x8512))+(((-1.0)*r11*sj5*x8516)));
evalcond[3]=((1.0)+(((-1.0)*x8512*x8517))+((r11*x8518))+(((-1.0)*r12*x8516)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8517))+((x8511*x8515))+(((-1.0)*r21*sj5*x8516)));
evalcond[5]=((((-1.0)*x8513*x8516))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8517))+((x8511*x8514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8519=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8519.valid){
continue;
}
CheckValue<IkReal> x8520 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8519.value)))+(x8520.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8521=IKsin(j4);
IkReal x8522=IKcos(j4);
IkReal x8523=(cj5*r10);
IkReal x8524=(r01*sj5);
IkReal x8525=(cj5*r00);
IkReal x8526=(cj5*r20);
IkReal x8527=((1.0)*x8522);
IkReal x8528=((1.0)*x8521);
IkReal x8529=(sj5*x8521);
evalcond[0]=(((r21*x8529))+(((-1.0)*x8526*x8528))+(((-1.0)*r22*x8527)));
evalcond[1]=(((x8521*x8524))+(((-1.0)*r02*x8527))+(((-1.0)*x8525*x8528)));
evalcond[2]=((((-1.0)*r11*sj5*x8527))+((x8522*x8523))+(((-1.0)*r12*x8528)));
evalcond[3]=((1.0)+(((-1.0)*x8523*x8528))+((r11*x8529))+(((-1.0)*r12*x8527)));
evalcond[4]=(((cj2*sj1))+((x8522*x8526))+(((-1.0)*r21*sj5*x8527))+((cj1*sj2))+(((-1.0)*r22*x8528)));
evalcond[5]=(((x8522*x8525))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8528))+(((-1.0)*x8524*x8527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8530=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8530;
j4eval[1]=IKsign(x8530);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8531=((1.0)*cj5);
IkReal x8532=((((-1.0)*r21*x8531))+(((-1.0)*r20*sj5)));
j4eval[0]=x8532;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x8531))+((r01*sj5))))));
j4eval[2]=IKsign(x8532);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8533=cj5*cj5;
IkReal x8534=r11*r11;
IkReal x8535=(cj5*r10);
IkReal x8536=(r11*sj5);
IkReal x8537=((((-1.0)*x8534))+((x8533*x8534))+(((-1.0)*(r12*r12)))+(((2.0)*x8535*x8536))+(((-1.0)*x8533*(r10*r10))));
j4eval[0]=x8537;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x8536))+x8535))));
j4eval[2]=IKsign(x8537);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8538=cj5*cj5;
IkReal x8539=r11*r11;
IkReal x8540=(cj5*r10);
IkReal x8541=(r11*sj5);
CheckValue<IkReal> x8542=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8539))+((x8538*x8539))+(((2.0)*x8540*x8541))+(((-1.0)*(r12*r12)))+(((-1.0)*x8538*(r10*r10))))),-1);
if(!x8542.valid){
continue;
}
CheckValue<IkReal> x8543 = IKatan2WithCheck(IkReal((x8540+(((-1.0)*x8541)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8542.value)))+(x8543.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8544=IKsin(j4);
IkReal x8545=IKcos(j4);
IkReal x8546=(cj5*r10);
IkReal x8547=(r01*sj5);
IkReal x8548=(cj5*r00);
IkReal x8549=(cj5*r20);
IkReal x8550=((1.0)*x8545);
IkReal x8551=((1.0)*x8544);
IkReal x8552=(sj5*x8544);
evalcond[0]=(((r21*x8552))+(((-1.0)*r22*x8550))+(((-1.0)*x8549*x8551)));
evalcond[1]=(((x8544*x8547))+(((-1.0)*x8548*x8551))+(((-1.0)*r02*x8550)));
evalcond[2]=((((-1.0)*r12*x8551))+(((-1.0)*r11*sj5*x8550))+((x8545*x8546)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8550))+(((-1.0)*x8546*x8551))+((r11*x8552)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8551))+(((-1.0)*r21*sj5*x8550))+((cj1*sj2))+((x8545*x8549)));
evalcond[5]=((((-1.0)*x8547*x8550))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x8545*x8548))+(((-1.0)*r02*x8551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8553=((1.0)*cj5);
CheckValue<IkReal> x8554 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x8553)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8554.valid){
continue;
}
CheckValue<IkReal> x8555=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8553))+(((-1.0)*r20*sj5)))),-1);
if(!x8555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8554.value)+(((1.5707963267949)*(x8555.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8556=IKsin(j4);
IkReal x8557=IKcos(j4);
IkReal x8558=(cj5*r10);
IkReal x8559=(r01*sj5);
IkReal x8560=(cj5*r00);
IkReal x8561=(cj5*r20);
IkReal x8562=((1.0)*x8557);
IkReal x8563=((1.0)*x8556);
IkReal x8564=(sj5*x8556);
evalcond[0]=((((-1.0)*r22*x8562))+(((-1.0)*x8561*x8563))+((r21*x8564)));
evalcond[1]=((((-1.0)*x8560*x8563))+(((-1.0)*r02*x8562))+((x8556*x8559)));
evalcond[2]=((((-1.0)*r12*x8563))+(((-1.0)*r11*sj5*x8562))+((x8557*x8558)));
evalcond[3]=((-1.0)+((r11*x8564))+(((-1.0)*r12*x8562))+(((-1.0)*x8558*x8563)));
evalcond[4]=(((x8557*x8561))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8563))+(((-1.0)*r21*sj5*x8562)));
evalcond[5]=(((x8557*x8560))+(((-1.0)*sj1*sj2))+(((-1.0)*x8559*x8562))+((cj1*cj2))+(((-1.0)*r02*x8563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8565 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8565.valid){
continue;
}
CheckValue<IkReal> x8566=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8565.value)+(((1.5707963267949)*(x8566.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8567=IKsin(j4);
IkReal x8568=IKcos(j4);
IkReal x8569=(cj5*r10);
IkReal x8570=(r01*sj5);
IkReal x8571=(cj5*r00);
IkReal x8572=(cj5*r20);
IkReal x8573=((1.0)*x8568);
IkReal x8574=((1.0)*x8567);
IkReal x8575=(sj5*x8567);
evalcond[0]=(((r21*x8575))+(((-1.0)*x8572*x8574))+(((-1.0)*r22*x8573)));
evalcond[1]=((((-1.0)*x8571*x8574))+(((-1.0)*r02*x8573))+((x8567*x8570)));
evalcond[2]=((((-1.0)*r11*sj5*x8573))+((x8568*x8569))+(((-1.0)*r12*x8574)));
evalcond[3]=((-1.0)+(((-1.0)*x8569*x8574))+((r11*x8575))+(((-1.0)*r12*x8573)));
evalcond[4]=((((-1.0)*r21*sj5*x8573))+((cj2*sj1))+((cj1*sj2))+((x8568*x8572))+(((-1.0)*r22*x8574)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x8574))+(((-1.0)*x8570*x8573))+((cj1*cj2))+((x8568*x8571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8576=((-1.0)*r00);
IkReal x8578 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8578)==0){
continue;
}
IkReal x8577=pow(x8578,-0.5);
CheckValue<IkReal> x8579 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8576),IKFAST_ATAN2_MAGTHRESH);
if(!x8579.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8579.value));
IkReal gconst145=(r01*x8577);
IkReal gconst146=(x8576*x8577);
CheckValue<IkReal> x8580 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8580.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8580.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8581=((-1.0)*r00);
IkReal x8582=x8577;
CheckValue<IkReal> x8584 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8581),IKFAST_ATAN2_MAGTHRESH);
if(!x8584.valid){
continue;
}
IkReal x8583=((-1.0)*(x8584.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8583;
IkReal gconst144=x8583;
IkReal gconst145=(r01*x8582);
IkReal gconst146=(x8581*x8582);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8585=((1.0)*sj0);
IkReal x8586=((1.0)*gconst145);
CheckValue<IkReal> x8587 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8585)))),IkReal(((((-1.0)*cj0*r01*x8586))+((cj0*gconst146*r00))+(((-1.0)*gconst145*r11*x8585))+((gconst146*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8587.valid){
continue;
}
CheckValue<IkReal> x8588=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8586))+(((-1.0)*gconst146*r21)))),-1);
if(!x8588.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8587.value)+(((1.5707963267949)*(x8588.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8589=IKsin(j4);
IkReal x8590=IKcos(j4);
IkReal x8591=(gconst146*r10);
IkReal x8592=(sj1*sj2);
IkReal x8593=(gconst146*r20);
IkReal x8594=(gconst146*r00);
IkReal x8595=((1.0)*x8590);
IkReal x8596=((1.0)*x8589);
IkReal x8597=(gconst145*x8589);
IkReal x8598=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8595))+(((-1.0)*x8593*x8596))+((r21*x8597)));
evalcond[1]=(cj0+(((-1.0)*r12*x8595))+(((-1.0)*x8591*x8596))+((r11*x8597)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8595))+((r01*x8597))+(((-1.0)*x8594*x8596)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8596))+(((-1.0)*gconst145*r21*x8595))+((cj1*sj2))+((x8590*x8593)));
evalcond[4]=((((-1.0)*gconst145*r01*x8595))+(((-1.0)*r02*x8596))+(((-1.0)*cj0*x8598))+((cj0*x8592))+((x8590*x8594)));
evalcond[5]=(((sj0*x8592))+(((-1.0)*sj0*x8598))+(((-1.0)*r12*x8596))+(((-1.0)*gconst145*r11*x8595))+((x8590*x8591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8599=((1.0)*gconst146);
CheckValue<IkReal> x8600=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8599))+(((-1.0)*gconst145*r10)))),-1);
if(!x8600.valid){
continue;
}
CheckValue<IkReal> x8601 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst145*r21*sj0))+(((-1.0)*r20*sj0*x8599)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8601.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8600.value)))+(x8601.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8602=IKsin(j4);
IkReal x8603=IKcos(j4);
IkReal x8604=(gconst146*r10);
IkReal x8605=(sj1*sj2);
IkReal x8606=(gconst146*r20);
IkReal x8607=(gconst146*r00);
IkReal x8608=((1.0)*x8603);
IkReal x8609=((1.0)*x8602);
IkReal x8610=(gconst145*x8602);
IkReal x8611=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8608))+((r21*x8610))+(((-1.0)*x8606*x8609)));
evalcond[1]=(cj0+(((-1.0)*r12*x8608))+((r11*x8610))+(((-1.0)*x8604*x8609)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8607*x8609))+(((-1.0)*r02*x8608))+((r01*x8610)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8609))+((x8603*x8606))+(((-1.0)*gconst145*r21*x8608)));
evalcond[4]=((((-1.0)*gconst145*r01*x8608))+(((-1.0)*r02*x8609))+((x8603*x8607))+(((-1.0)*cj0*x8611))+((cj0*x8605)));
evalcond[5]=((((-1.0)*gconst145*r11*x8608))+(((-1.0)*r12*x8609))+(((-1.0)*sj0*x8611))+((x8603*x8604))+((sj0*x8605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8612=((-1.0)*r01);
IkReal x8614 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8614)==0){
continue;
}
IkReal x8613=pow(x8614,-0.5);
CheckValue<IkReal> x8615 = IKatan2WithCheck(IkReal(x8612),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8615.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8615.value))));
IkReal gconst148=(x8612*x8613);
IkReal gconst149=((1.0)*r00*x8613);
CheckValue<IkReal> x8616 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8616.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8616.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8617=((-1.0)*r01);
CheckValue<IkReal> x8620 = IKatan2WithCheck(IkReal(x8617),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8620.valid){
continue;
}
IkReal x8618=((1.0)*(x8620.value));
IkReal x8619=x8613;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8618)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8618)));
IkReal gconst148=(x8617*x8619);
IkReal gconst149=((1.0)*r00*x8619);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8621=((-1.0)*r01);
CheckValue<IkReal> x8624 = IKatan2WithCheck(IkReal(x8621),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8624.valid){
continue;
}
IkReal x8622=((1.0)*(x8624.value));
IkReal x8623=x8613;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8622)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8622)));
IkReal gconst148=(x8621*x8623);
IkReal gconst149=((1.0)*r00*x8623);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8625=((-1.0)*r01);
CheckValue<IkReal> x8628 = IKatan2WithCheck(IkReal(x8625),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8628.valid){
continue;
}
IkReal x8626=((1.0)*(x8628.value));
IkReal x8627=x8613;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8626)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8626)));
IkReal gconst148=(x8625*x8627);
IkReal gconst149=((1.0)*r00*x8627);
IkReal x8629=r02*r02;
IkReal x8630=(r12*sj0);
IkReal x8631=((1.0)*cj0);
IkReal x8632=x8613;
j4eval[0]=((IKabs(((((-1.0)*x8630))+(((-1.0)*r02*x8631)))))+(IKabs((((cj0*x8629*x8632))+((r02*x8630*x8632))+(((-1.0)*x8631*x8632))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8633=((1.0)*sj0);
IkReal x8634=((1.0)*gconst148);
CheckValue<IkReal> x8635=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r21))+(((-1.0)*r20*x8634)))),-1);
if(!x8635.valid){
continue;
}
CheckValue<IkReal> x8636 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8633))+(((-1.0)*cj0*r02)))),IkReal((((gconst149*r10*sj0))+(((-1.0)*cj0*r01*x8634))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x8633)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8636.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8635.value)))+(x8636.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8637=IKsin(j4);
IkReal x8638=IKcos(j4);
IkReal x8639=(gconst148*r11);
IkReal x8640=(sj1*sj2);
IkReal x8641=((1.0)*x8638);
IkReal x8642=(gconst149*x8638);
IkReal x8643=(gconst148*x8637);
IkReal x8644=((1.0)*cj1*cj2);
IkReal x8645=((1.0)*x8637);
evalcond[0]=((((-1.0)*gconst149*r20*x8645))+(((-1.0)*r22*x8641))+((r21*x8643)));
evalcond[1]=(cj0+((x8637*x8639))+(((-1.0)*r12*x8641))+(((-1.0)*gconst149*r10*x8645)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8641))+((r01*x8643))+(((-1.0)*gconst149*r00*x8645)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8645))+((r20*x8642))+(((-1.0)*gconst148*r21*x8641)));
evalcond[4]=(((cj0*x8640))+(((-1.0)*cj0*x8644))+((r00*x8642))+(((-1.0)*r02*x8645))+(((-1.0)*gconst148*r01*x8641)));
evalcond[5]=((((-1.0)*x8639*x8641))+((r10*x8642))+(((-1.0)*sj0*x8644))+(((-1.0)*r12*x8645))+((sj0*x8640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8646=((1.0)*gconst149);
CheckValue<IkReal> x8647=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r10))+(((-1.0)*r11*x8646)))),-1);
if(!x8647.valid){
continue;
}
CheckValue<IkReal> x8648 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8646))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8648.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8647.value)))+(x8648.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8649=IKsin(j4);
IkReal x8650=IKcos(j4);
IkReal x8651=(gconst148*r11);
IkReal x8652=(sj1*sj2);
IkReal x8653=((1.0)*x8650);
IkReal x8654=(gconst149*x8650);
IkReal x8655=(gconst148*x8649);
IkReal x8656=((1.0)*cj1*cj2);
IkReal x8657=((1.0)*x8649);
evalcond[0]=(((r21*x8655))+(((-1.0)*gconst149*r20*x8657))+(((-1.0)*r22*x8653)));
evalcond[1]=((((-1.0)*gconst149*r10*x8657))+(((-1.0)*r12*x8653))+cj0+((x8649*x8651)));
evalcond[2]=(((r01*x8655))+(((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8657))+(((-1.0)*r02*x8653)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst148*r21*x8653))+(((-1.0)*r22*x8657))+((r20*x8654)));
evalcond[4]=(((r00*x8654))+(((-1.0)*gconst148*r01*x8653))+((cj0*x8652))+(((-1.0)*cj0*x8656))+(((-1.0)*r02*x8657)));
evalcond[5]=((((-1.0)*r12*x8657))+((r10*x8654))+(((-1.0)*sj0*x8656))+((sj0*x8652))+(((-1.0)*x8651*x8653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8658=((1.0)*gconst149);
CheckValue<IkReal> x8659 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8658)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8659.valid){
continue;
}
CheckValue<IkReal> x8660=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8658))+(((-1.0)*gconst148*r00)))),-1);
if(!x8660.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8659.value)+(((1.5707963267949)*(x8660.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8661=IKsin(j4);
IkReal x8662=IKcos(j4);
IkReal x8663=(gconst148*r11);
IkReal x8664=(sj1*sj2);
IkReal x8665=((1.0)*x8662);
IkReal x8666=(gconst149*x8662);
IkReal x8667=(gconst148*x8661);
IkReal x8668=((1.0)*cj1*cj2);
IkReal x8669=((1.0)*x8661);
evalcond[0]=((((-1.0)*r22*x8665))+(((-1.0)*gconst149*r20*x8669))+((r21*x8667)));
evalcond[1]=(cj0+(((-1.0)*r12*x8665))+((x8661*x8663))+(((-1.0)*gconst149*r10*x8669)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8665))+((r01*x8667))+(((-1.0)*gconst149*r00*x8669)));
evalcond[3]=(((cj2*sj1))+((r20*x8666))+((cj1*sj2))+(((-1.0)*r22*x8669))+(((-1.0)*gconst148*r21*x8665)));
evalcond[4]=(((cj0*x8664))+(((-1.0)*cj0*x8668))+(((-1.0)*r02*x8669))+((r00*x8666))+(((-1.0)*gconst148*r01*x8665)));
evalcond[5]=((((-1.0)*sj0*x8668))+((sj0*x8664))+(((-1.0)*r12*x8669))+((r10*x8666))+(((-1.0)*x8663*x8665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8670=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8670;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8670);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8671=((1.0)*cj5);
IkReal x8672=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8671)));
j4eval[0]=x8672;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8671)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8672);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8673=cj5*cj5;
IkReal x8674=r01*r01;
IkReal x8675=(r01*sj5);
IkReal x8676=(cj5*r00);
IkReal x8677=((((2.0)*x8675*x8676))+(((-1.0)*(r02*r02)))+((x8673*x8674))+(((-1.0)*x8674))+(((-1.0)*x8673*(r00*r00))));
j4eval[0]=x8677;
j4eval[1]=IKsign(x8677);
j4eval[2]=((IKabs((x8676+(((-1.0)*x8675)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8678=cj5*cj5;
IkReal x8679=r01*r01;
IkReal x8680=(r01*sj5);
IkReal x8681=(cj5*r00);
CheckValue<IkReal> x8682 = IKatan2WithCheck(IkReal((x8681+(((-1.0)*x8680)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8682.valid){
continue;
}
CheckValue<IkReal> x8683=IKPowWithIntegerCheck(IKsign(((((2.0)*x8680*x8681))+(((-1.0)*(r02*r02)))+(((-1.0)*x8678*(r00*r00)))+((x8678*x8679))+(((-1.0)*x8679)))),-1);
if(!x8683.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8682.value)+(((1.5707963267949)*(x8683.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8684=IKsin(j4);
IkReal x8685=IKcos(j4);
IkReal x8686=(cj5*r10);
IkReal x8687=(r01*sj5);
IkReal x8688=(cj5*r00);
IkReal x8689=(cj5*r20);
IkReal x8690=((1.0)*x8685);
IkReal x8691=((1.0)*x8684);
IkReal x8692=(sj5*x8684);
evalcond[0]=(((r21*x8692))+(((-1.0)*x8689*x8691))+(((-1.0)*r22*x8690)));
evalcond[1]=((((-1.0)*r12*x8690))+((r11*x8692))+(((-1.0)*x8686*x8691)));
evalcond[2]=((((-1.0)*x8687*x8690))+(((-1.0)*r02*x8691))+((x8685*x8688)));
evalcond[3]=((-1.0)+(((-1.0)*x8688*x8691))+(((-1.0)*r02*x8690))+((x8684*x8687)));
evalcond[4]=((((-1.0)*r21*sj5*x8690))+((cj2*sj1))+((cj1*sj2))+((x8685*x8689))+(((-1.0)*r22*x8691)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8691))+(((-1.0)*r11*sj5*x8690))+((x8685*x8686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8693=((1.0)*cj5);
CheckValue<IkReal> x8694 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8693)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8694.valid){
continue;
}
CheckValue<IkReal> x8695=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8693)))),-1);
if(!x8695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8694.value)+(((1.5707963267949)*(x8695.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8696=IKsin(j4);
IkReal x8697=IKcos(j4);
IkReal x8698=(cj5*r10);
IkReal x8699=(r01*sj5);
IkReal x8700=(cj5*r00);
IkReal x8701=(cj5*r20);
IkReal x8702=((1.0)*x8697);
IkReal x8703=((1.0)*x8696);
IkReal x8704=(sj5*x8696);
evalcond[0]=((((-1.0)*x8701*x8703))+((r21*x8704))+(((-1.0)*r22*x8702)));
evalcond[1]=(((r11*x8704))+(((-1.0)*x8698*x8703))+(((-1.0)*r12*x8702)));
evalcond[2]=((((-1.0)*x8699*x8702))+((x8697*x8700))+(((-1.0)*r02*x8703)));
evalcond[3]=((-1.0)+(((-1.0)*x8700*x8703))+((x8696*x8699))+(((-1.0)*r02*x8702)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8697*x8701))+(((-1.0)*r22*x8703))+(((-1.0)*r21*sj5*x8702)));
evalcond[5]=((((-1.0)*r11*sj5*x8702))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8697*x8698))+(((-1.0)*r12*x8703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8705=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8705.valid){
continue;
}
CheckValue<IkReal> x8706 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8705.value)))+(x8706.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8707=IKsin(j4);
IkReal x8708=IKcos(j4);
IkReal x8709=(cj5*r10);
IkReal x8710=(r01*sj5);
IkReal x8711=(cj5*r00);
IkReal x8712=(cj5*r20);
IkReal x8713=((1.0)*x8708);
IkReal x8714=((1.0)*x8707);
IkReal x8715=(sj5*x8707);
evalcond[0]=((((-1.0)*r22*x8713))+(((-1.0)*x8712*x8714))+((r21*x8715)));
evalcond[1]=((((-1.0)*x8709*x8714))+(((-1.0)*r12*x8713))+((r11*x8715)));
evalcond[2]=((((-1.0)*r02*x8714))+((x8708*x8711))+(((-1.0)*x8710*x8713)));
evalcond[3]=((-1.0)+((x8707*x8710))+(((-1.0)*r02*x8713))+(((-1.0)*x8711*x8714)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8714))+(((-1.0)*r21*sj5*x8713))+((x8708*x8712)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8714))+(((-1.0)*r11*sj5*x8713))+((x8708*x8709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8716=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8716;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8716);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8717=((1.0)*cj5);
IkReal x8718=((((-1.0)*r21*x8717))+(((-1.0)*r20*sj5)));
j4eval[0]=x8718;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x8717))))));
j4eval[2]=IKsign(x8718);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8719=cj5*cj5;
IkReal x8720=r01*r01;
IkReal x8721=(cj5*r00);
IkReal x8722=(r01*sj5);
IkReal x8723=((((-1.0)*x8719*x8720))+x8720+(((-2.0)*x8721*x8722))+((x8719*(r00*r00)))+(r02*r02));
j4eval[0]=x8723;
j4eval[1]=((IKabs(r02))+(IKabs((x8721+(((-1.0)*x8722))))));
j4eval[2]=IKsign(x8723);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8724=cj5*cj5;
IkReal x8725=r01*r01;
IkReal x8726=(r01*sj5);
IkReal x8727=(cj5*r00);
CheckValue<IkReal> x8728 = IKatan2WithCheck(IkReal((x8727+(((-1.0)*x8726)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8728.valid){
continue;
}
CheckValue<IkReal> x8729=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8724*x8725))+x8725+(((-2.0)*x8726*x8727))+(r02*r02)+((x8724*(r00*r00))))),-1);
if(!x8729.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8728.value)+(((1.5707963267949)*(x8729.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8730=IKsin(j4);
IkReal x8731=IKcos(j4);
IkReal x8732=(cj5*r10);
IkReal x8733=(r01*sj5);
IkReal x8734=(cj5*r00);
IkReal x8735=(cj5*r20);
IkReal x8736=((1.0)*x8731);
IkReal x8737=((1.0)*x8730);
IkReal x8738=(sj5*x8730);
evalcond[0]=(((r21*x8738))+(((-1.0)*x8735*x8737))+(((-1.0)*r22*x8736)));
evalcond[1]=(((r11*x8738))+(((-1.0)*x8732*x8737))+(((-1.0)*r12*x8736)));
evalcond[2]=(((x8731*x8734))+(((-1.0)*x8733*x8736))+(((-1.0)*r02*x8737)));
evalcond[3]=((1.0)+(((-1.0)*x8734*x8737))+(((-1.0)*r02*x8736))+((x8730*x8733)));
evalcond[4]=(((cj2*sj1))+((x8731*x8735))+((cj1*sj2))+(((-1.0)*r21*sj5*x8736))+(((-1.0)*r22*x8737)));
evalcond[5]=((((-1.0)*r11*sj5*x8736))+((x8731*x8732))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x8737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8739=((1.0)*cj5);
CheckValue<IkReal> x8740 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8739)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8740.valid){
continue;
}
CheckValue<IkReal> x8741=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8739))+(((-1.0)*r20*sj5)))),-1);
if(!x8741.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8740.value)+(((1.5707963267949)*(x8741.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8742=IKsin(j4);
IkReal x8743=IKcos(j4);
IkReal x8744=(cj5*r10);
IkReal x8745=(r01*sj5);
IkReal x8746=(cj5*r00);
IkReal x8747=(cj5*r20);
IkReal x8748=((1.0)*x8743);
IkReal x8749=((1.0)*x8742);
IkReal x8750=(sj5*x8742);
evalcond[0]=((((-1.0)*r22*x8748))+((r21*x8750))+(((-1.0)*x8747*x8749)));
evalcond[1]=((((-1.0)*r12*x8748))+((r11*x8750))+(((-1.0)*x8744*x8749)));
evalcond[2]=(((x8743*x8746))+(((-1.0)*x8745*x8748))+(((-1.0)*r02*x8749)));
evalcond[3]=((1.0)+((x8742*x8745))+(((-1.0)*x8746*x8749))+(((-1.0)*r02*x8748)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8748))+((cj1*sj2))+(((-1.0)*r22*x8749))+((x8743*x8747)));
evalcond[5]=((((-1.0)*r12*x8749))+(((-1.0)*sj1*sj2))+((x8743*x8744))+(((-1.0)*r11*sj5*x8748))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8751 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8751.valid){
continue;
}
CheckValue<IkReal> x8752=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8751.value)+(((1.5707963267949)*(x8752.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8753=IKsin(j4);
IkReal x8754=IKcos(j4);
IkReal x8755=(cj5*r10);
IkReal x8756=(r01*sj5);
IkReal x8757=(cj5*r00);
IkReal x8758=(cj5*r20);
IkReal x8759=((1.0)*x8754);
IkReal x8760=((1.0)*x8753);
IkReal x8761=(sj5*x8753);
evalcond[0]=((((-1.0)*r22*x8759))+((r21*x8761))+(((-1.0)*x8758*x8760)));
evalcond[1]=((((-1.0)*x8755*x8760))+(((-1.0)*r12*x8759))+((r11*x8761)));
evalcond[2]=((((-1.0)*r02*x8760))+(((-1.0)*x8756*x8759))+((x8754*x8757)));
evalcond[3]=((1.0)+(((-1.0)*x8757*x8760))+((x8753*x8756))+(((-1.0)*r02*x8759)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8760))+(((-1.0)*r21*sj5*x8759))+((x8754*x8758)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x8759))+(((-1.0)*r12*x8760))+((cj1*cj2))+((x8754*x8755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8762=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8762);
rxp1_1=(px*r21);
rxp1_2=(r11*x8762);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8763=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8763);
rxp1_1=(px*r21);
rxp1_2=(r11*x8763);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8764=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8764);
rxp1_1=(px*r21);
rxp1_2=(r11*x8764);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8767=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8767.valid){
continue;
}
IkReal x8765=x8767.value;
IkReal x8766=(sj0*x8765);
cj4array[0]=(((cj1*cj2*x8766))+(((-1.0)*sj1*sj2*x8766)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8768=IKsin(j4);
IkReal x8769=IKcos(j4);
IkReal x8770=(r21*sj5);
IkReal x8771=(cj5*r20);
IkReal x8772=((1.0)*x8768);
IkReal x8773=((1.0)*x8769);
evalcond[0]=((-1.0)*r02*x8768);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8773)));
evalcond[2]=(((x8768*x8770))+(((-1.0)*x8771*x8772)));
evalcond[3]=((((-1.0)*cj5*r10*x8772))+((r11*sj5*x8768)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8770*x8773))+((x8769*x8771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8776=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8776.valid){
continue;
}
IkReal x8774=x8776.value;
IkReal x8775=((1.0)*x8774);
cj4array[0]=((((-1.0)*cj2*sj1*x8775))+(((-1.0)*cj1*sj2*x8775)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8777=IKsin(j4);
IkReal x8778=IKcos(j4);
IkReal x8779=(r11*sj5);
IkReal x8780=((1.0)*sj0);
IkReal x8781=((1.0)*x8778);
IkReal x8782=((1.0)*cj5*x8777);
evalcond[0]=((-1.0)*r02*x8777);
evalcond[1]=((((-1.0)*x8780))+(((-1.0)*r02*x8781)));
evalcond[2]=((((-1.0)*r20*x8782))+((r21*sj5*x8777)));
evalcond[3]=(((x8777*x8779))+(((-1.0)*r10*x8782)));
evalcond[4]=((((-1.0)*cj1*cj2*x8780))+(((-1.0)*x8779*x8781))+((sj0*sj1*sj2))+((cj5*r10*x8778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8783=IKPowWithIntegerCheck(r02,-1);
if(!x8783.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8783.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8784=IKsin(j4);
IkReal x8785=IKcos(j4);
IkReal x8786=(cj5*x8785);
IkReal x8787=(sj5*x8784);
IkReal x8788=((1.0)*sj5*x8785);
IkReal x8789=((1.0)*cj5*x8784);
evalcond[0]=((-1.0)*r02*x8784);
evalcond[1]=(((r21*x8787))+(((-1.0)*r20*x8789)));
evalcond[2]=(((r11*x8787))+(((-1.0)*r10*x8789)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x8788))+((r20*x8786)));
evalcond[4]=(((r10*x8786))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+(((-1.0)*r11*x8788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8790=((1.0)*sj0);
IkReal x8791=((1.0)*cj0);
CheckValue<IkReal> x8792 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8790))+(((-1.0)*r02*x8791)))),IkReal(((((-1.0)*r01*sj5*x8791))+((cj0*cj5*r00))+(((-1.0)*r11*sj5*x8790))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8792.valid){
continue;
}
CheckValue<IkReal> x8793=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8793.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8792.value)+(((1.5707963267949)*(x8793.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8794=IKsin(j4);
IkReal x8795=IKcos(j4);
IkReal x8796=(cj5*r10);
IkReal x8797=(sj1*sj2);
IkReal x8798=(r01*sj5);
IkReal x8799=(cj5*r00);
IkReal x8800=(cj5*r20);
IkReal x8801=((1.0)*x8795);
IkReal x8802=((1.0)*cj1*cj2);
IkReal x8803=((1.0)*x8794);
IkReal x8804=(sj5*x8794);
evalcond[0]=(((r21*x8804))+(((-1.0)*r22*x8801))+(((-1.0)*x8800*x8803)));
evalcond[1]=((((-1.0)*r12*x8801))+cj0+((r11*x8804))+(((-1.0)*x8796*x8803)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8801))+((x8794*x8798))+(((-1.0)*x8799*x8803)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8803))+((cj1*sj2))+((x8795*x8800))+(((-1.0)*r21*sj5*x8801)));
evalcond[4]=(((x8795*x8799))+((cj0*x8797))+(((-1.0)*r02*x8803))+(((-1.0)*x8798*x8801))+(((-1.0)*cj0*x8802)));
evalcond[5]=(((x8795*x8796))+(((-1.0)*r12*x8803))+(((-1.0)*sj0*x8802))+((sj0*x8797))+(((-1.0)*r11*sj5*x8801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8805=((1.0)*cj5);
CheckValue<IkReal> x8806=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8805))+(((-1.0)*r10*sj5)))),-1);
if(!x8806.valid){
continue;
}
CheckValue<IkReal> x8807 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8805))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8807.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8806.value)))+(x8807.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8808=IKsin(j4);
IkReal x8809=IKcos(j4);
IkReal x8810=(cj5*r10);
IkReal x8811=(sj1*sj2);
IkReal x8812=(r01*sj5);
IkReal x8813=(cj5*r00);
IkReal x8814=(cj5*r20);
IkReal x8815=((1.0)*x8809);
IkReal x8816=((1.0)*cj1*cj2);
IkReal x8817=((1.0)*x8808);
IkReal x8818=(sj5*x8808);
evalcond[0]=(((r21*x8818))+(((-1.0)*r22*x8815))+(((-1.0)*x8814*x8817)));
evalcond[1]=((((-1.0)*r12*x8815))+cj0+((r11*x8818))+(((-1.0)*x8810*x8817)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8815))+((x8808*x8812))+(((-1.0)*x8813*x8817)));
evalcond[3]=((((-1.0)*r22*x8817))+((cj2*sj1))+((x8809*x8814))+((cj1*sj2))+(((-1.0)*r21*sj5*x8815)));
evalcond[4]=((((-1.0)*r02*x8817))+((x8809*x8813))+(((-1.0)*x8812*x8815))+(((-1.0)*cj0*x8816))+((cj0*x8811)));
evalcond[5]=((((-1.0)*r12*x8817))+(((-1.0)*sj0*x8816))+((x8809*x8810))+((sj0*x8811))+(((-1.0)*r11*sj5*x8815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8819=((1.0)*cj5);
CheckValue<IkReal> x8820=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8819)))),-1);
if(!x8820.valid){
continue;
}
CheckValue<IkReal> x8821 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8819))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8820.value)))+(x8821.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8822=IKsin(j4);
IkReal x8823=IKcos(j4);
IkReal x8824=(cj5*r10);
IkReal x8825=(sj1*sj2);
IkReal x8826=(r01*sj5);
IkReal x8827=(cj5*r00);
IkReal x8828=(cj5*r20);
IkReal x8829=((1.0)*x8823);
IkReal x8830=((1.0)*cj1*cj2);
IkReal x8831=((1.0)*x8822);
IkReal x8832=(sj5*x8822);
evalcond[0]=(((r21*x8832))+(((-1.0)*x8828*x8831))+(((-1.0)*r22*x8829)));
evalcond[1]=((((-1.0)*x8824*x8831))+(((-1.0)*r12*x8829))+cj0+((r11*x8832)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8829))+(((-1.0)*x8827*x8831))+((x8822*x8826)));
evalcond[3]=(((x8823*x8828))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8829))+(((-1.0)*r22*x8831)));
evalcond[4]=(((x8823*x8827))+(((-1.0)*x8826*x8829))+(((-1.0)*cj0*x8830))+(((-1.0)*r02*x8831))+((cj0*x8825)));
evalcond[5]=(((x8823*x8824))+(((-1.0)*r11*sj5*x8829))+((sj0*x8825))+(((-1.0)*sj0*x8830))+(((-1.0)*r12*x8831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8833=cj1*cj1;
IkReal x8834=cj2*cj2;
IkReal x8835=(r10*sj5);
IkReal x8836=(cj1*px);
IkReal x8837=(sj1*sj2);
IkReal x8838=(r00*sj5);
IkReal x8839=(cj1*cj2);
IkReal x8840=((98050.0)*py);
IkReal x8841=(cj5*r01);
IkReal x8842=((10625.0)*cj1);
IkReal x8843=(cj5*r11);
IkReal x8844=((9805.0)*x8843);
CheckValue<IkReal> x8845 = IKatan2WithCheck(IkReal(((((-3350.0)*x8838))+(((-3350.0)*x8841))+((x8842*x8843))+(((9805.0)*x8835*x8839))+(((-9805.0)*x8835*x8837))+((x8839*x8844))+((x8839*x8840))+(((-33500.0)*px))+(((106250.0)*cj1*py))+((x8835*x8842))+(((-1.0)*x8837*x8840))+(((-1.0)*x8837*x8844)))),IkReal(((((-9805.0)*x8837*x8838))+(((106250.0)*x8836))+((x8841*x8842))+(((-98050.0)*px*x8837))+(((33500.0)*py))+(((9805.0)*x8838*x8839))+((x8838*x8842))+(((9805.0)*x8839*x8841))+(((3350.0)*x8843))+(((3350.0)*x8835))+(((98050.0)*cj2*x8836))+(((-9805.0)*x8837*x8841)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8845.valid){
continue;
}
CheckValue<IkReal> x8846=IKPowWithIntegerCheck(IKsign(((42944.21)+(((6701.04)*x8833))+(((-83342.5)*cj1*x8837))+(((76910.42)*x8833*x8834))+(((-38455.21)*x8834))+(((-76910.42)*x8837*x8839))+(((83342.5)*cj2*x8833)))),-1);
if(!x8846.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8845.value)+(((1.5707963267949)*(x8846.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8847=IKcos(j0);
IkReal x8848=IKsin(j0);
IkReal x8849=((0.1)*sj5);
IkReal x8850=((0.425)*cj1);
IkReal x8851=((0.1)*cj5);
IkReal x8852=(sj1*sj2);
IkReal x8853=(cj1*cj2);
IkReal x8854=((0.3922)*x8848);
IkReal x8855=((0.3922)*x8847);
evalcond[0]=((((-1.0)*r01*x8851))+(((-0.134)*x8848))+(((-1.0)*x8852*x8855))+((x8847*x8850))+(((-1.0)*px))+(((-1.0)*r00*x8849))+((x8853*x8855)));
evalcond[1]=((((-1.0)*r10*x8849))+(((0.134)*x8847))+(((-1.0)*x8852*x8854))+(((-1.0)*r11*x8851))+(((-1.0)*py))+((x8848*x8850))+((x8853*x8854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8856=((1.0)*cj5);
IkReal x8857=((((-1.0)*r01*x8856))+(((-1.0)*r00*sj5)));
j4eval[0]=x8857;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8856))))));
j4eval[2]=IKsign(x8857);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8858=((1.0)*cj5);
IkReal x8859=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8858)));
j4eval[0]=x8859;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8858))))));
j4eval[2]=IKsign(x8859);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8860=((1.0)*sj0);
IkReal x8861=((1.0)*cj0);
IkReal x8862=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8862;
j4eval[1]=((IKabs(((((-1.0)*r12*x8860))+(((-1.0)*r02*x8861)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x8860))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x8861))))));
j4eval[2]=IKsign(x8862);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8863=((-1.0)*r20);
IkReal x8865 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8865)==0){
continue;
}
IkReal x8864=pow(x8865,-0.5);
CheckValue<IkReal> x8866 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8863),IKFAST_ATAN2_MAGTHRESH);
if(!x8866.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8866.value));
IkReal gconst1=(r21*x8864);
IkReal gconst2=(x8863*x8864);
CheckValue<IkReal> x8867 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8867.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8867.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8868=((-1.0)*r20);
IkReal x8869=x8864;
CheckValue<IkReal> x8871 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8868),IKFAST_ATAN2_MAGTHRESH);
if(!x8871.valid){
continue;
}
IkReal x8870=((-1.0)*(x8871.value));
sj5=gconst1;
cj5=gconst2;
j5=x8870;
IkReal gconst0=x8870;
IkReal gconst1=(r21*x8869);
IkReal gconst2=(x8868*x8869);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8872=((-1.0)*r20);
IkReal x8873=x8864;
CheckValue<IkReal> x8875 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8872),IKFAST_ATAN2_MAGTHRESH);
if(!x8875.valid){
continue;
}
IkReal x8874=((-1.0)*(x8875.value));
sj5=gconst1;
cj5=gconst2;
j5=x8874;
IkReal gconst0=x8874;
IkReal gconst1=(r21*x8873);
IkReal gconst2=(x8872*x8873);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8876=((-1.0)*r20);
IkReal x8877=x8864;
CheckValue<IkReal> x8879 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8876),IKFAST_ATAN2_MAGTHRESH);
if(!x8879.valid){
continue;
}
IkReal x8878=((-1.0)*(x8879.value));
sj5=gconst1;
cj5=gconst2;
j5=x8878;
IkReal gconst0=x8878;
IkReal gconst1=(r21*x8877);
IkReal gconst2=(x8876*x8877);
IkReal x8880=r22*r22;
CheckValue<IkReal> x8884=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8880))),-1);
if(!x8884.valid){
continue;
}
IkReal x8881=x8884.value;
IkReal x8882=(sj3*x8881);
IkReal x8883=(((sj3*x8880))+((x8882*(r21*r21*r21*r21)))+((x8882*(r20*r20*r20*r20)))+(((2.0)*x8882*(r20*r20)*(r21*r21))));
j4eval[0]=x8883;
j4eval[1]=IKsign(x8883);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8885=((-1.0)*r20);
IkReal x8886=x8864;
CheckValue<IkReal> x8888 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8885),IKFAST_ATAN2_MAGTHRESH);
if(!x8888.valid){
continue;
}
IkReal x8887=((-1.0)*(x8888.value));
sj5=gconst1;
cj5=gconst2;
j5=x8887;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8887;
IkReal gconst1=(r21*x8886);
IkReal gconst2=(x8885*x8886);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8889=((-1.0)*r20);
IkReal x8890=x8864;
CheckValue<IkReal> x8892 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8889),IKFAST_ATAN2_MAGTHRESH);
if(!x8892.valid){
continue;
}
IkReal x8891=((-1.0)*(x8892.value));
sj5=gconst1;
cj5=gconst2;
j5=x8891;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8891;
IkReal gconst1=(r21*x8890);
IkReal gconst2=(x8889*x8890);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8893=((-1.0)*r20);
IkReal x8894=x8864;
CheckValue<IkReal> x8896 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8893),IKFAST_ATAN2_MAGTHRESH);
if(!x8896.valid){
continue;
}
IkReal x8895=((-1.0)*(x8896.value));
sj5=gconst1;
cj5=gconst2;
j5=x8895;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8895;
IkReal gconst1=(r21*x8894);
IkReal gconst2=(x8893*x8894);
IkReal x8897=((1.0)*(r22*r22));
CheckValue<IkReal> x8901=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8897))),-1);
if(!x8901.valid){
continue;
}
IkReal x8898=x8901.value;
IkReal x8899=((1.0)*x8898);
IkReal x8900=((((-2.0)*x8898*(r20*r20)*(r21*r21)))+(((-1.0)*x8899*(r21*r21*r21*r21)))+(((-1.0)*x8899*(r20*r20*r20*r20)))+(((-1.0)*x8897)));
j4eval[0]=x8900;
j4eval[1]=IKsign(x8900);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8902=((-1.0)*r20);
IkReal x8903=x8864;
CheckValue<IkReal> x8905 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8902),IKFAST_ATAN2_MAGTHRESH);
if(!x8905.valid){
continue;
}
IkReal x8904=((-1.0)*(x8905.value));
sj5=gconst1;
cj5=gconst2;
j5=x8904;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8904;
IkReal gconst1=(r21*x8903);
IkReal gconst2=(x8902*x8903);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8906=((-1.0)*r20);
IkReal x8907=x8864;
CheckValue<IkReal> x8909 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8906),IKFAST_ATAN2_MAGTHRESH);
if(!x8909.valid){
continue;
}
IkReal x8908=((-1.0)*(x8909.value));
sj5=gconst1;
cj5=gconst2;
j5=x8908;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8908;
IkReal gconst1=(r21*x8907);
IkReal gconst2=(x8906*x8907);
IkReal x8910=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8914=IKPowWithIntegerCheck(x8910,-1);
if(!x8914.valid){
continue;
}
IkReal x8911=x8914.value;
IkReal x8912=((1.0)*x8911);
IkReal x8913=((((-2.0)*r10*r11*r20*r21*x8911))+(((-1.0)*x8912*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x8912*(r10*r10)*(r20*r20))));
j4eval[0]=x8913;
j4eval[1]=r12;
j4eval[2]=x8910;
j4eval[3]=IKsign(x8913);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8915=((-1.0)*r20);
IkReal x8916=x8864;
CheckValue<IkReal> x8918 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8915),IKFAST_ATAN2_MAGTHRESH);
if(!x8918.valid){
continue;
}
IkReal x8917=((-1.0)*(x8918.value));
sj5=gconst1;
cj5=gconst2;
j5=x8917;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8917;
IkReal gconst1=(r21*x8916);
IkReal gconst2=(x8915*x8916);
IkReal x8919=r22*r22;
IkReal x8920=(cj1*r12*sj2);
IkReal x8921=(cj2*r12*sj1);
CheckValue<IkReal> x8925=IKPowWithIntegerCheck(((-1.0)+x8919),-1);
if(!x8925.valid){
continue;
}
IkReal x8922=x8925.value;
if((((1.0)+(((-1.0)*x8919)))) < -0.00001)
continue;
IkReal x8923=IKsqrt(((1.0)+(((-1.0)*x8919))));
IkReal x8924=(r22*x8922*x8923);
j4eval[0]=((IKabs((((x8921*x8924))+((x8920*x8924)))))+(IKabs(((((-1.0)*x8921))+(((-1.0)*x8920))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8926=(cj1*sj2);
IkReal x8927=(cj2*sj1);
IkReal x8928=((1.0)*r12);
IkReal x8929=(gconst1*r11);
IkReal x8930=((1.0)*gconst2*r10);
CheckValue<IkReal> x8931=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8931.valid){
continue;
}
CheckValue<IkReal> x8932 = IKatan2WithCheck(IkReal(((((-1.0)*x8926*x8930))+(((-1.0)*x8927*x8930))+((x8927*x8929))+((x8926*x8929)))),IkReal(((((-1.0)*x8927*x8928))+(((-1.0)*x8926*x8928)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8932.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8931.value)))+(x8932.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8933=IKcos(j4);
IkReal x8934=IKsin(j4);
IkReal x8935=((1.0)*x8933);
IkReal x8936=(gconst1*x8933);
IkReal x8937=(gconst1*x8934);
IkReal x8938=((1.0)*gconst2*x8934);
evalcond[0]=(((r12*x8934))+(((-1.0)*gconst2*r10*x8935))+((r11*x8936)));
evalcond[1]=((((-1.0)*r20*x8938))+(((-1.0)*r22*x8935))+((r21*x8937)));
evalcond[2]=((((-1.0)*r00*x8938))+((r01*x8937))+(((-1.0)*r02*x8935)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8935))+(((-1.0)*r10*x8938))+((r11*x8937)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8935))+((r21*x8936))+((r22*x8934)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x8935))+((r01*x8936))+((r02*x8934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8939=(gconst2*r10);
IkReal x8940=(gconst1*r11);
CheckValue<IkReal> x8941=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8939*x8939)))+(((-1.0)*(x8940*x8940)))+(((-1.0)*(r12*r12)))+(((2.0)*x8939*x8940)))),-1);
if(!x8941.valid){
continue;
}
CheckValue<IkReal> x8942 = IKatan2WithCheck(IkReal((x8940+(((-1.0)*x8939)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8941.value)))+(x8942.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8943=IKcos(j4);
IkReal x8944=IKsin(j4);
IkReal x8945=((1.0)*x8943);
IkReal x8946=(gconst1*x8943);
IkReal x8947=(gconst1*x8944);
IkReal x8948=((1.0)*gconst2*x8944);
evalcond[0]=(((r11*x8946))+(((-1.0)*gconst2*r10*x8945))+((r12*x8944)));
evalcond[1]=((((-1.0)*r22*x8945))+((r21*x8947))+(((-1.0)*r20*x8948)));
evalcond[2]=((((-1.0)*r00*x8948))+((r01*x8947))+(((-1.0)*r02*x8945)));
evalcond[3]=((1.0)+((r11*x8947))+(((-1.0)*r12*x8945))+(((-1.0)*r10*x8948)));
evalcond[4]=(((cj2*sj1))+((r22*x8944))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8945))+((r21*x8946)));
evalcond[5]=(((r02*x8944))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x8946))+(((-1.0)*gconst2*r00*x8945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8949=((1.0)*gconst2);
CheckValue<IkReal> x8950=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8949))+(((-1.0)*gconst1*r00)))),-1);
if(!x8950.valid){
continue;
}
CheckValue<IkReal> x8951 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x8949)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8950.value)))+(x8951.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8952=IKcos(j4);
IkReal x8953=IKsin(j4);
IkReal x8954=((1.0)*x8952);
IkReal x8955=(gconst1*x8952);
IkReal x8956=(gconst1*x8953);
IkReal x8957=((1.0)*gconst2*x8953);
evalcond[0]=((((-1.0)*gconst2*r10*x8954))+((r12*x8953))+((r11*x8955)));
evalcond[1]=((((-1.0)*r22*x8954))+(((-1.0)*r20*x8957))+((r21*x8956)));
evalcond[2]=((((-1.0)*r00*x8957))+((r01*x8956))+(((-1.0)*r02*x8954)));
evalcond[3]=((1.0)+(((-1.0)*r10*x8957))+(((-1.0)*r12*x8954))+((r11*x8956)));
evalcond[4]=(((r22*x8953))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8954))+((r21*x8955)));
evalcond[5]=(((r02*x8953))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x8955))+(((-1.0)*gconst2*r00*x8954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8958=((-1.0)*r20);
IkReal x8959=x8864;
CheckValue<IkReal> x8961 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8958),IKFAST_ATAN2_MAGTHRESH);
if(!x8961.valid){
continue;
}
IkReal x8960=((-1.0)*(x8961.value));
sj5=gconst1;
cj5=gconst2;
j5=x8960;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8960;
IkReal gconst1=(r21*x8959);
IkReal gconst2=(x8958*x8959);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8962=((-1.0)*r20);
IkReal x8963=x8864;
CheckValue<IkReal> x8965 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8962),IKFAST_ATAN2_MAGTHRESH);
if(!x8965.valid){
continue;
}
IkReal x8964=((-1.0)*(x8965.value));
sj5=gconst1;
cj5=gconst2;
j5=x8964;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8964;
IkReal gconst1=(r21*x8963);
IkReal gconst2=(x8962*x8963);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8966=((-1.0)*r20);
IkReal x8967=x8864;
CheckValue<IkReal> x8969 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8966),IKFAST_ATAN2_MAGTHRESH);
if(!x8969.valid){
continue;
}
IkReal x8968=((-1.0)*(x8969.value));
sj5=gconst1;
cj5=gconst2;
j5=x8968;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8968;
IkReal gconst1=(r21*x8967);
IkReal gconst2=(x8966*x8967);
IkReal x8970=r22*r22;
IkReal x8971=(cj1*r12*sj2);
IkReal x8972=(cj2*r12*sj1);
CheckValue<IkReal> x8976=IKPowWithIntegerCheck(((-1.0)+x8970),-1);
if(!x8976.valid){
continue;
}
IkReal x8973=x8976.value;
if((((1.0)+(((-1.0)*x8970)))) < -0.00001)
continue;
IkReal x8974=IKsqrt(((1.0)+(((-1.0)*x8970))));
IkReal x8975=(r22*x8973*x8974);
j4eval[0]=((IKabs((((x8972*x8975))+((x8971*x8975)))))+(IKabs(((((-1.0)*x8971))+(((-1.0)*x8972))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8977=(cj1*sj2);
IkReal x8978=(cj2*sj1);
IkReal x8979=((1.0)*r12);
IkReal x8980=(gconst1*r11);
IkReal x8981=((1.0)*gconst2*r10);
CheckValue<IkReal> x8982 = IKatan2WithCheck(IkReal((((x8977*x8980))+(((-1.0)*x8977*x8981))+((x8978*x8980))+(((-1.0)*x8978*x8981)))),IkReal(((((-1.0)*x8978*x8979))+(((-1.0)*x8977*x8979)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8982.valid){
continue;
}
CheckValue<IkReal> x8983=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8982.value)+(((1.5707963267949)*(x8983.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8984=IKcos(j4);
IkReal x8985=IKsin(j4);
IkReal x8986=((1.0)*x8984);
IkReal x8987=(gconst1*x8984);
IkReal x8988=(gconst1*x8985);
IkReal x8989=((1.0)*gconst2*x8985);
evalcond[0]=((((-1.0)*gconst2*r10*x8986))+((r11*x8987))+((r12*x8985)));
evalcond[1]=((((-1.0)*r20*x8989))+((r21*x8988))+(((-1.0)*r22*x8986)));
evalcond[2]=(((r01*x8988))+(((-1.0)*r02*x8986))+(((-1.0)*r00*x8989)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8986))+((r11*x8988))+(((-1.0)*r10*x8989)));
evalcond[4]=((((-1.0)*gconst2*r20*x8986))+((cj2*sj1))+((r22*x8985))+((cj1*sj2))+((r21*x8987)));
evalcond[5]=(((r01*x8987))+((r02*x8985))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r00*x8986))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8990=(gconst1*r11);
IkReal x8991=(gconst2*r10);
CheckValue<IkReal> x8992 = IKatan2WithCheck(IkReal((x8990+(((-1.0)*x8991)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8992.valid){
continue;
}
CheckValue<IkReal> x8993=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x8990*x8990)+(((-2.0)*x8990*x8991))+(x8991*x8991))),-1);
if(!x8993.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8992.value)+(((1.5707963267949)*(x8993.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8994=IKcos(j4);
IkReal x8995=IKsin(j4);
IkReal x8996=((1.0)*x8994);
IkReal x8997=(gconst1*x8994);
IkReal x8998=(gconst1*x8995);
IkReal x8999=((1.0)*gconst2*x8995);
evalcond[0]=(((r11*x8997))+((r12*x8995))+(((-1.0)*gconst2*r10*x8996)));
evalcond[1]=(((r21*x8998))+(((-1.0)*r22*x8996))+(((-1.0)*r20*x8999)));
evalcond[2]=(((r01*x8998))+(((-1.0)*r02*x8996))+(((-1.0)*r00*x8999)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8996))+((r11*x8998))+(((-1.0)*r10*x8999)));
evalcond[4]=(((cj2*sj1))+((r21*x8997))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8996))+((r22*x8995)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x8997))+(((-1.0)*gconst2*r00*x8996))+((cj1*cj2))+((r02*x8995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9000 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9000.valid){
continue;
}
CheckValue<IkReal> x9001=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9000.value)+(((1.5707963267949)*(x9001.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9002=IKcos(j4);
IkReal x9003=IKsin(j4);
IkReal x9004=((1.0)*x9002);
IkReal x9005=(gconst1*x9002);
IkReal x9006=(gconst1*x9003);
IkReal x9007=((1.0)*gconst2*x9003);
evalcond[0]=((((-1.0)*gconst2*r10*x9004))+((r11*x9005))+((r12*x9003)));
evalcond[1]=((((-1.0)*r22*x9004))+((r21*x9006))+(((-1.0)*r20*x9007)));
evalcond[2]=((((-1.0)*r02*x9004))+(((-1.0)*r00*x9007))+((r01*x9006)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9004))+(((-1.0)*r10*x9007))+((r11*x9006)));
evalcond[4]=(((cj2*sj1))+((r21*x9005))+((r22*x9003))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9004)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x9003))+(((-1.0)*gconst2*r00*x9004))+((cj1*cj2))+((r01*x9005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9008=((-1.0)*r20);
IkReal x9009=x8864;
CheckValue<IkReal> x9011 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9008),IKFAST_ATAN2_MAGTHRESH);
if(!x9011.valid){
continue;
}
IkReal x9010=((-1.0)*(x9011.value));
sj5=gconst1;
cj5=gconst2;
j5=x9010;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9010;
IkReal gconst1=(r21*x9009);
IkReal gconst2=(x9008*x9009);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9012=((-1.0)*r20);
IkReal x9013=x8864;
CheckValue<IkReal> x9015 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9012),IKFAST_ATAN2_MAGTHRESH);
if(!x9015.valid){
continue;
}
IkReal x9014=((-1.0)*(x9015.value));
sj5=gconst1;
cj5=gconst2;
j5=x9014;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9014;
IkReal gconst1=(r21*x9013);
IkReal gconst2=(x9012*x9013);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9016=((-1.0)*r20);
IkReal x9017=x8864;
CheckValue<IkReal> x9019 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9016),IKFAST_ATAN2_MAGTHRESH);
if(!x9019.valid){
continue;
}
IkReal x9018=((-1.0)*(x9019.value));
sj5=gconst1;
cj5=gconst2;
j5=x9018;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9018;
IkReal gconst1=(r21*x9017);
IkReal gconst2=(x9016*x9017);
IkReal x9020=r22*r22;
IkReal x9021=((1.0)*r02);
IkReal x9022=(cj1*sj2);
IkReal x9023=(cj2*sj1);
CheckValue<IkReal> x9027=IKPowWithIntegerCheck(((-1.0)+x9020),-1);
if(!x9027.valid){
continue;
}
IkReal x9024=x9027.value;
if((((1.0)+(((-1.0)*x9020)))) < -0.00001)
continue;
IkReal x9025=IKsqrt(((1.0)+(((-1.0)*x9020))));
IkReal x9026=(r02*r22*x9024*x9025);
j4eval[0]=((IKabs((((x9022*x9026))+((x9023*x9026)))))+(IKabs(((((-1.0)*x9021*x9023))+(((-1.0)*x9021*x9022))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9028=(cj1*sj2);
IkReal x9029=(gconst1*r01);
IkReal x9030=((1.0)*r02);
IkReal x9031=(cj2*sj1);
IkReal x9032=((1.0)*gconst2*r00);
CheckValue<IkReal> x9033 = IKatan2WithCheck(IkReal(((((-1.0)*x9031*x9032))+((x9028*x9029))+(((-1.0)*x9028*x9032))+((x9029*x9031)))),IkReal(((((-1.0)*x9030*x9031))+(((-1.0)*x9028*x9030)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9033.valid){
continue;
}
CheckValue<IkReal> x9034=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9034.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9033.value)+(((1.5707963267949)*(x9034.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9035=IKcos(j4);
IkReal x9036=IKsin(j4);
IkReal x9037=((1.0)*x9035);
IkReal x9038=(gconst1*x9035);
IkReal x9039=(gconst1*x9036);
IkReal x9040=((1.0)*gconst2*x9036);
evalcond[0]=(((r01*x9038))+((r02*x9036))+(((-1.0)*gconst2*r00*x9037)));
evalcond[1]=(((r21*x9039))+(((-1.0)*r22*x9037))+(((-1.0)*r20*x9040)));
evalcond[2]=((((-1.0)*r12*x9037))+(((-1.0)*r10*x9040))+((r11*x9039)));
evalcond[3]=((-1.0)+((r01*x9039))+(((-1.0)*r00*x9040))+(((-1.0)*r02*x9037)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9037))+((cj1*sj2))+((r22*x9036))+((r21*x9038)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9037))+((r11*x9038))+((r12*x9036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9041=(gconst1*r01);
IkReal x9042=(gconst2*r00);
CheckValue<IkReal> x9043 = IKatan2WithCheck(IkReal(((((-1.0)*x9042))+x9041)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9043.valid){
continue;
}
CheckValue<IkReal> x9044=IKPowWithIntegerCheck(IKsign(((x9042*x9042)+(r02*r02)+(x9041*x9041)+(((-2.0)*x9041*x9042)))),-1);
if(!x9044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9043.value)+(((1.5707963267949)*(x9044.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9045=IKcos(j4);
IkReal x9046=IKsin(j4);
IkReal x9047=((1.0)*x9045);
IkReal x9048=(gconst1*x9045);
IkReal x9049=(gconst1*x9046);
IkReal x9050=((1.0)*gconst2*x9046);
evalcond[0]=(((r01*x9048))+(((-1.0)*gconst2*r00*x9047))+((r02*x9046)));
evalcond[1]=((((-1.0)*r22*x9047))+(((-1.0)*r20*x9050))+((r21*x9049)));
evalcond[2]=((((-1.0)*r10*x9050))+(((-1.0)*r12*x9047))+((r11*x9049)));
evalcond[3]=((-1.0)+((r01*x9049))+(((-1.0)*r00*x9050))+(((-1.0)*r02*x9047)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9046))+((r21*x9048))+(((-1.0)*gconst2*r20*x9047)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x9046))+((r11*x9048))+(((-1.0)*gconst2*r10*x9047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9051=((1.0)*gconst2);
CheckValue<IkReal> x9052 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9051)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9052.valid){
continue;
}
CheckValue<IkReal> x9053=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9051)))),-1);
if(!x9053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9052.value)+(((1.5707963267949)*(x9053.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9054=IKcos(j4);
IkReal x9055=IKsin(j4);
IkReal x9056=((1.0)*x9054);
IkReal x9057=(gconst1*x9054);
IkReal x9058=(gconst1*x9055);
IkReal x9059=((1.0)*gconst2*x9055);
evalcond[0]=(((r01*x9057))+(((-1.0)*gconst2*r00*x9056))+((r02*x9055)));
evalcond[1]=((((-1.0)*r22*x9056))+(((-1.0)*r20*x9059))+((r21*x9058)));
evalcond[2]=((((-1.0)*r12*x9056))+(((-1.0)*r10*x9059))+((r11*x9058)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9056))+(((-1.0)*r00*x9059))+((r01*x9058)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9055))+(((-1.0)*gconst2*r20*x9056))+((r21*x9057)));
evalcond[5]=((((-1.0)*gconst2*r10*x9056))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x9055))+((r11*x9057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9060=((-1.0)*r20);
IkReal x9061=x8864;
CheckValue<IkReal> x9063 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9060),IKFAST_ATAN2_MAGTHRESH);
if(!x9063.valid){
continue;
}
IkReal x9062=((-1.0)*(x9063.value));
sj5=gconst1;
cj5=gconst2;
j5=x9062;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9062;
IkReal gconst1=(r21*x9061);
IkReal gconst2=(x9060*x9061);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9064=((-1.0)*r20);
IkReal x9065=x8864;
CheckValue<IkReal> x9067 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9064),IKFAST_ATAN2_MAGTHRESH);
if(!x9067.valid){
continue;
}
IkReal x9066=((-1.0)*(x9067.value));
sj5=gconst1;
cj5=gconst2;
j5=x9066;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9066;
IkReal gconst1=(r21*x9065);
IkReal gconst2=(x9064*x9065);
IkReal x9068=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9072=IKPowWithIntegerCheck(x9068,-1);
if(!x9072.valid){
continue;
}
IkReal x9069=x9072.value;
IkReal x9070=((1.0)*x9069);
IkReal x9071=((((-1.0)*x9070*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x9070*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x9069)));
j4eval[0]=x9071;
j4eval[1]=IKsign(x9071);
j4eval[2]=r02;
j4eval[3]=x9068;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9073=((-1.0)*r20);
IkReal x9074=x8864;
CheckValue<IkReal> x9076 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9073),IKFAST_ATAN2_MAGTHRESH);
if(!x9076.valid){
continue;
}
IkReal x9075=((-1.0)*(x9076.value));
sj5=gconst1;
cj5=gconst2;
j5=x9075;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9075;
IkReal gconst1=(r21*x9074);
IkReal gconst2=(x9073*x9074);
IkReal x9077=r22*r22;
IkReal x9078=((1.0)*r02);
IkReal x9079=(cj1*sj2);
IkReal x9080=(cj2*sj1);
CheckValue<IkReal> x9084=IKPowWithIntegerCheck(((-1.0)+x9077),-1);
if(!x9084.valid){
continue;
}
IkReal x9081=x9084.value;
if((((1.0)+(((-1.0)*x9077)))) < -0.00001)
continue;
IkReal x9082=IKsqrt(((1.0)+(((-1.0)*x9077))));
IkReal x9083=(r02*r22*x9081*x9082);
j4eval[0]=((IKabs((((x9080*x9083))+((x9079*x9083)))))+(IKabs(((((-1.0)*x9078*x9079))+(((-1.0)*x9078*x9080))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9085=(cj1*sj2);
IkReal x9086=(gconst1*r01);
IkReal x9087=((1.0)*r02);
IkReal x9088=(cj2*sj1);
IkReal x9089=((1.0)*gconst2*r00);
CheckValue<IkReal> x9090 = IKatan2WithCheck(IkReal((((x9085*x9086))+((x9086*x9088))+(((-1.0)*x9085*x9089))+(((-1.0)*x9088*x9089)))),IkReal(((((-1.0)*x9085*x9087))+(((-1.0)*x9087*x9088)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9090.valid){
continue;
}
CheckValue<IkReal> x9091=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9091.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9090.value)+(((1.5707963267949)*(x9091.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9092=IKcos(j4);
IkReal x9093=IKsin(j4);
IkReal x9094=((1.0)*x9092);
IkReal x9095=(gconst1*x9092);
IkReal x9096=(gconst1*x9093);
IkReal x9097=((1.0)*gconst2*x9093);
evalcond[0]=((((-1.0)*gconst2*r00*x9094))+((r01*x9095))+((r02*x9093)));
evalcond[1]=((((-1.0)*r20*x9097))+((r21*x9096))+(((-1.0)*r22*x9094)));
evalcond[2]=(((r11*x9096))+(((-1.0)*r10*x9097))+(((-1.0)*r12*x9094)));
evalcond[3]=((1.0)+(((-1.0)*r00*x9097))+((r01*x9096))+(((-1.0)*r02*x9094)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9094))+((cj1*sj2))+((r21*x9095))+((r22*x9093)));
evalcond[5]=(((r11*x9095))+(((-1.0)*sj1*sj2))+((r12*x9093))+(((-1.0)*gconst2*r10*x9094))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9098=(gconst1*r01);
IkReal x9099=(gconst2*r00);
CheckValue<IkReal> x9100 = IKatan2WithCheck(IkReal((x9098+(((-1.0)*x9099)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9100.valid){
continue;
}
CheckValue<IkReal> x9101=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9098*x9098)))+(((-1.0)*(x9099*x9099)))+(((-1.0)*(r02*r02)))+(((2.0)*x9098*x9099)))),-1);
if(!x9101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9100.value)+(((1.5707963267949)*(x9101.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9102=IKcos(j4);
IkReal x9103=IKsin(j4);
IkReal x9104=((1.0)*x9102);
IkReal x9105=(gconst1*x9102);
IkReal x9106=(gconst1*x9103);
IkReal x9107=((1.0)*gconst2*x9103);
evalcond[0]=(((r02*x9103))+(((-1.0)*gconst2*r00*x9104))+((r01*x9105)));
evalcond[1]=((((-1.0)*r22*x9104))+((r21*x9106))+(((-1.0)*r20*x9107)));
evalcond[2]=((((-1.0)*r10*x9107))+(((-1.0)*r12*x9104))+((r11*x9106)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9104))+(((-1.0)*r00*x9107))+((r01*x9106)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9103))+((r21*x9105))+(((-1.0)*gconst2*r20*x9104)));
evalcond[5]=((((-1.0)*gconst2*r10*x9104))+(((-1.0)*sj1*sj2))+((r12*x9103))+((r11*x9105))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9108 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9108.valid){
continue;
}
CheckValue<IkReal> x9109=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9108.value)+(((1.5707963267949)*(x9109.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9110=IKcos(j4);
IkReal x9111=IKsin(j4);
IkReal x9112=((1.0)*x9110);
IkReal x9113=(gconst1*x9110);
IkReal x9114=(gconst1*x9111);
IkReal x9115=((1.0)*gconst2*x9111);
evalcond[0]=((((-1.0)*gconst2*r00*x9112))+((r01*x9113))+((r02*x9111)));
evalcond[1]=(((r21*x9114))+(((-1.0)*r22*x9112))+(((-1.0)*r20*x9115)));
evalcond[2]=((((-1.0)*r10*x9115))+((r11*x9114))+(((-1.0)*r12*x9112)));
evalcond[3]=((1.0)+((r01*x9114))+(((-1.0)*r02*x9112))+(((-1.0)*r00*x9115)));
evalcond[4]=(((r21*x9113))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9112))+((r22*x9111)));
evalcond[5]=(((r12*x9111))+(((-1.0)*sj1*sj2))+((r11*x9113))+(((-1.0)*gconst2*r10*x9112))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9116=((-1.0)*r20);
IkReal x9117=((-1.0)*px);
CheckValue<IkReal> x9119 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9116),IKFAST_ATAN2_MAGTHRESH);
if(!x9119.valid){
continue;
}
IkReal x9118=((-1.0)*(x9119.value));
sj5=gconst1;
cj5=gconst2;
j5=x9118;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9117);
rxp1_1=(px*r21);
rxp1_2=(r11*x9117);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9118;
IkReal gconst1=r21;
IkReal gconst2=x9116;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9120=((-1.0)*r20);
IkReal x9121=((-1.0)*px);
CheckValue<IkReal> x9123 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9120),IKFAST_ATAN2_MAGTHRESH);
if(!x9123.valid){
continue;
}
IkReal x9122=((-1.0)*(x9123.value));
sj5=gconst1;
cj5=gconst2;
j5=x9122;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9121);
rxp1_1=(px*r21);
rxp1_2=(r11*x9121);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9122;
IkReal gconst1=r21;
IkReal gconst2=x9120;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9124=((-1.0)*r20);
IkReal x9125=((-1.0)*px);
CheckValue<IkReal> x9127 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9124),IKFAST_ATAN2_MAGTHRESH);
if(!x9127.valid){
continue;
}
IkReal x9126=((-1.0)*(x9127.value));
sj5=gconst1;
cj5=gconst2;
j5=x9126;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9125);
rxp1_1=(px*r21);
rxp1_2=(r11*x9125);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9126;
IkReal gconst1=r21;
IkReal gconst2=x9124;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9130=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9130.valid){
continue;
}
IkReal x9128=x9130.value;
IkReal x9129=(sj0*x9128);
cj4array[0]=(((cj1*cj2*x9129))+(((-1.0)*sj1*sj2*x9129)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9131=IKsin(j4);
IkReal x9132=IKcos(j4);
IkReal x9133=((1.0)*gconst2);
IkReal x9134=(gconst1*r21);
evalcond[0]=(r02*x9131);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9132)));
evalcond[2]=(((x9131*x9134))+(((-1.0)*r20*x9131*x9133)));
evalcond[3]=((((-1.0)*r10*x9131*x9133))+((gconst1*r11*x9131)));
evalcond[4]=(((cj2*sj1))+((x9132*x9134))+(((-1.0)*r20*x9132*x9133))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9137=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9137.valid){
continue;
}
IkReal x9135=x9137.value;
IkReal x9136=((1.0)*x9135);
cj4array[0]=((((-1.0)*cj2*sj1*x9136))+(((-1.0)*cj1*sj2*x9136)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9138=IKsin(j4);
IkReal x9139=IKcos(j4);
IkReal x9140=((1.0)*sj0);
IkReal x9141=(gconst1*x9138);
IkReal x9142=((1.0)*x9139);
IkReal x9143=((1.0)*gconst2*x9138);
evalcond[0]=(r02*x9138);
evalcond[1]=((((-1.0)*x9140))+(((-1.0)*r02*x9142)));
evalcond[2]=((((-1.0)*r20*x9143))+((r21*x9141)));
evalcond[3]=((((-1.0)*r10*x9143))+((r11*x9141)));
evalcond[4]=((((-1.0)*gconst2*r10*x9142))+(((-1.0)*cj1*cj2*x9140))+((sj0*sj1*sj2))+((gconst1*r11*x9139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9144=IKPowWithIntegerCheck(r02,-1);
if(!x9144.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9144.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9145=IKsin(j4);
IkReal x9146=IKcos(j4);
IkReal x9147=(gconst1*r21);
IkReal x9148=(gconst1*r11);
IkReal x9149=((1.0)*gconst2*r10);
IkReal x9150=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9145);
evalcond[1]=((((-1.0)*x9145*x9150))+((x9145*x9147)));
evalcond[2]=(((x9145*x9148))+(((-1.0)*x9145*x9149)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9146*x9150))+((x9146*x9147)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+(((-1.0)*x9146*x9149))+((sj0*sj1*sj2))+((x9146*x9148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9151=(cj2*sj1);
IkReal x9152=(cj1*sj2);
IkReal x9153=(gconst1*r21);
IkReal x9154=((1.0)*gconst2*r20);
CheckValue<IkReal> x9155=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst2*r20*x9153))+(((-1.0)*gconst2*r20*x9154))+(((-1.0)*(x9153*x9153)))+(((-1.0)*(r22*r22))))),-1);
if(!x9155.valid){
continue;
}
CheckValue<IkReal> x9156 = IKatan2WithCheck(IkReal((((r22*x9151))+((r22*x9152)))),IkReal(((((-1.0)*x9152*x9154))+((x9152*x9153))+(((-1.0)*x9151*x9154))+((x9151*x9153)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9156.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9155.value)))+(x9156.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9157=IKsin(j4);
IkReal x9158=IKcos(j4);
IkReal x9159=(sj1*sj2);
IkReal x9160=(gconst2*r10);
IkReal x9161=(gconst2*r00);
IkReal x9162=(gconst2*r20);
IkReal x9163=((1.0)*x9158);
IkReal x9164=(gconst1*x9158);
IkReal x9165=((1.0)*cj1*cj2);
IkReal x9166=(gconst1*x9157);
IkReal x9167=((1.0)*x9157);
evalcond[0]=((((-1.0)*r22*x9163))+(((-1.0)*x9162*x9167))+((r21*x9166)));
evalcond[1]=(cj0+(((-1.0)*r12*x9163))+(((-1.0)*x9160*x9167))+((r11*x9166)));
evalcond[2]=(((r01*x9166))+(((-1.0)*sj0))+(((-1.0)*x9161*x9167))+(((-1.0)*r02*x9163)));
evalcond[3]=(((cj2*sj1))+((r22*x9157))+((cj1*sj2))+(((-1.0)*x9162*x9163))+((r21*x9164)));
evalcond[4]=(((r01*x9164))+((cj0*x9159))+((r02*x9157))+(((-1.0)*x9161*x9163))+(((-1.0)*cj0*x9165)));
evalcond[5]=((((-1.0)*x9160*x9163))+((sj0*x9159))+(((-1.0)*sj0*x9165))+((r11*x9164))+((r12*x9157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9168=((1.0)*gconst2);
CheckValue<IkReal> x9169 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9168))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9169.valid){
continue;
}
CheckValue<IkReal> x9170=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9168))+(((-1.0)*gconst1*r10)))),-1);
if(!x9170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9169.value)+(((1.5707963267949)*(x9170.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9171=IKsin(j4);
IkReal x9172=IKcos(j4);
IkReal x9173=(sj1*sj2);
IkReal x9174=(gconst2*r10);
IkReal x9175=(gconst2*r00);
IkReal x9176=(gconst2*r20);
IkReal x9177=((1.0)*x9172);
IkReal x9178=(gconst1*x9172);
IkReal x9179=((1.0)*cj1*cj2);
IkReal x9180=(gconst1*x9171);
IkReal x9181=((1.0)*x9171);
evalcond[0]=((((-1.0)*r22*x9177))+(((-1.0)*x9176*x9181))+((r21*x9180)));
evalcond[1]=((((-1.0)*x9174*x9181))+((r11*x9180))+cj0+(((-1.0)*r12*x9177)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x9175*x9181))+(((-1.0)*r02*x9177))+((r01*x9180)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x9178))+(((-1.0)*x9176*x9177))+((r22*x9171)));
evalcond[4]=(((r02*x9171))+(((-1.0)*cj0*x9179))+((r01*x9178))+((cj0*x9173))+(((-1.0)*x9175*x9177)));
evalcond[5]=(((sj0*x9173))+((r12*x9171))+((r11*x9178))+(((-1.0)*sj0*x9179))+(((-1.0)*x9174*x9177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9182=((1.0)*gconst2);
CheckValue<IkReal> x9183 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x9182)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9183.valid){
continue;
}
CheckValue<IkReal> x9184=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9182)))),-1);
if(!x9184.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9183.value)+(((1.5707963267949)*(x9184.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9185=IKsin(j4);
IkReal x9186=IKcos(j4);
IkReal x9187=(sj1*sj2);
IkReal x9188=(gconst2*r10);
IkReal x9189=(gconst2*r00);
IkReal x9190=(gconst2*r20);
IkReal x9191=((1.0)*x9186);
IkReal x9192=(gconst1*x9186);
IkReal x9193=((1.0)*cj1*cj2);
IkReal x9194=(gconst1*x9185);
IkReal x9195=((1.0)*x9185);
evalcond[0]=((((-1.0)*r22*x9191))+((r21*x9194))+(((-1.0)*x9190*x9195)));
evalcond[1]=(cj0+(((-1.0)*x9188*x9195))+(((-1.0)*r12*x9191))+((r11*x9194)));
evalcond[2]=((((-1.0)*sj0))+((r01*x9194))+(((-1.0)*x9189*x9195))+(((-1.0)*r02*x9191)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x9192))+(((-1.0)*x9190*x9191))+((r22*x9185)));
evalcond[4]=(((r01*x9192))+((r02*x9185))+(((-1.0)*x9189*x9191))+(((-1.0)*cj0*x9193))+((cj0*x9187)));
evalcond[5]=(((r12*x9185))+(((-1.0)*x9188*x9191))+(((-1.0)*sj0*x9193))+((sj0*x9187))+((r11*x9192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9196=((-1.0)*r20);
IkReal x9197=x8864;
CheckValue<IkReal> x9199 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9196),IKFAST_ATAN2_MAGTHRESH);
if(!x9199.valid){
continue;
}
IkReal x9198=((-1.0)*(x9199.value));
sj5=gconst1;
cj5=gconst2;
j5=x9198;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9198;
IkReal gconst1=(r21*x9197);
IkReal gconst2=(x9196*x9197);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9200=((-1.0)*r20);
IkReal x9201=x8864;
CheckValue<IkReal> x9203 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9200),IKFAST_ATAN2_MAGTHRESH);
if(!x9203.valid){
continue;
}
IkReal x9202=((-1.0)*(x9203.value));
sj5=gconst1;
cj5=gconst2;
j5=x9202;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9202;
IkReal gconst1=(r21*x9201);
IkReal gconst2=(x9200*x9201);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9204=((-1.0)*r20);
IkReal x9205=x8864;
CheckValue<IkReal> x9207 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9204),IKFAST_ATAN2_MAGTHRESH);
if(!x9207.valid){
continue;
}
IkReal x9206=((-1.0)*(x9207.value));
sj5=gconst1;
cj5=gconst2;
j5=x9206;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9206;
IkReal gconst1=(r21*x9205);
IkReal gconst2=(x9204*x9205);
IkReal x9208=r22*r22;
CheckValue<IkReal> x9211=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x9208))),-1);
if(!x9211.valid){
continue;
}
IkReal x9209=x9211.value;
IkReal x9210=(((x9209*(r21*r21*r21*r21)))+((x9209*(r20*r20*r20*r20)))+x9208+(((2.0)*x9209*(r20*r20)*(r21*r21))));
j4eval[0]=x9210;
j4eval[1]=IKsign(x9210);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9212=((-1.0)*r20);
IkReal x9213=x8864;
CheckValue<IkReal> x9215 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9212),IKFAST_ATAN2_MAGTHRESH);
if(!x9215.valid){
continue;
}
IkReal x9214=((-1.0)*(x9215.value));
sj5=gconst1;
cj5=gconst2;
j5=x9214;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9214;
IkReal gconst1=(r21*x9213);
IkReal gconst2=(x9212*x9213);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9216=((-1.0)*r20);
IkReal x9217=x8864;
CheckValue<IkReal> x9219 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9216),IKFAST_ATAN2_MAGTHRESH);
if(!x9219.valid){
continue;
}
IkReal x9218=((-1.0)*(x9219.value));
sj5=gconst1;
cj5=gconst2;
j5=x9218;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9218;
IkReal gconst1=(r21*x9217);
IkReal gconst2=(x9216*x9217);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9220=((-1.0)*r20);
IkReal x9221=x8864;
CheckValue<IkReal> x9223 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9220),IKFAST_ATAN2_MAGTHRESH);
if(!x9223.valid){
continue;
}
IkReal x9222=((-1.0)*(x9223.value));
sj5=gconst1;
cj5=gconst2;
j5=x9222;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9222;
IkReal gconst1=(r21*x9221);
IkReal gconst2=(x9220*x9221);
IkReal x9224=r22*r22;
IkReal x9225=(cj1*r12*sj2);
IkReal x9226=(cj2*r12*sj1);
CheckValue<IkReal> x9230=IKPowWithIntegerCheck(((-1.0)+x9224),-1);
if(!x9230.valid){
continue;
}
IkReal x9227=x9230.value;
if((((1.0)+(((-1.0)*x9224)))) < -0.00001)
continue;
IkReal x9228=IKsqrt(((1.0)+(((-1.0)*x9224))));
IkReal x9229=((1.0)*r22*x9227*x9228);
j4eval[0]=((IKabs((x9226+x9225)))+(IKabs(((((-1.0)*x9225*x9229))+(((-1.0)*x9226*x9229))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9231=((1.0)*gconst1);
IkReal x9232=(cj2*sj1);
IkReal x9233=(gconst2*r10);
IkReal x9234=(cj1*sj2);
CheckValue<IkReal> x9235=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9231)))),-1);
if(!x9235.valid){
continue;
}
CheckValue<IkReal> x9236 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x9231*x9232))+(((-1.0)*r11*x9231*x9234))+((x9233*x9234))+((x9232*x9233)))),IkReal((((r12*x9232))+((r12*x9234)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9235.value)))+(x9236.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9237=IKsin(j4);
IkReal x9238=IKcos(j4);
IkReal x9239=((1.0)*x9238);
IkReal x9240=(gconst2*x9238);
IkReal x9241=(gconst1*x9237);
IkReal x9242=((1.0)*x9237);
evalcond[0]=(((r21*x9241))+(((-1.0)*gconst2*r20*x9242))+(((-1.0)*r22*x9239)));
evalcond[1]=(((r01*x9241))+(((-1.0)*r02*x9239))+(((-1.0)*gconst2*r00*x9242)));
evalcond[2]=((((-1.0)*r12*x9242))+((r10*x9240))+(((-1.0)*gconst1*r11*x9239)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9239))+(((-1.0)*gconst2*r10*x9242))+((r11*x9241)));
evalcond[4]=((((-1.0)*r22*x9242))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9239))+((r20*x9240)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x9240))+(((-1.0)*gconst1*r01*x9239))+(((-1.0)*r02*x9242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9243=(gconst1*r11);
IkReal x9244=(gconst2*r10);
CheckValue<IkReal> x9245=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9244*x9244)+(x9243*x9243)+(((-2.0)*x9243*x9244)))),-1);
if(!x9245.valid){
continue;
}
CheckValue<IkReal> x9246 = IKatan2WithCheck(IkReal((x9244+(((-1.0)*x9243)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9246.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9245.value)))+(x9246.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9247=IKsin(j4);
IkReal x9248=IKcos(j4);
IkReal x9249=((1.0)*x9248);
IkReal x9250=(gconst2*x9248);
IkReal x9251=(gconst1*x9247);
IkReal x9252=((1.0)*x9247);
evalcond[0]=((((-1.0)*r22*x9249))+((r21*x9251))+(((-1.0)*gconst2*r20*x9252)));
evalcond[1]=(((r01*x9251))+(((-1.0)*r02*x9249))+(((-1.0)*gconst2*r00*x9252)));
evalcond[2]=((((-1.0)*gconst1*r11*x9249))+(((-1.0)*r12*x9252))+((r10*x9250)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9252))+(((-1.0)*r12*x9249))+((r11*x9251)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9252))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9249))+((r20*x9250)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9249))+((r00*x9250))+(((-1.0)*r02*x9252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9253=((1.0)*gconst2);
CheckValue<IkReal> x9254=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9253)))),-1);
if(!x9254.valid){
continue;
}
CheckValue<IkReal> x9255 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9253))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9254.value)))+(x9255.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9256=IKsin(j4);
IkReal x9257=IKcos(j4);
IkReal x9258=((1.0)*x9257);
IkReal x9259=(gconst2*x9257);
IkReal x9260=(gconst1*x9256);
IkReal x9261=((1.0)*x9256);
evalcond[0]=((((-1.0)*gconst2*r20*x9261))+(((-1.0)*r22*x9258))+((r21*x9260)));
evalcond[1]=((((-1.0)*gconst2*r00*x9261))+((r01*x9260))+(((-1.0)*r02*x9258)));
evalcond[2]=(((r10*x9259))+(((-1.0)*r12*x9261))+(((-1.0)*gconst1*r11*x9258)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9258))+(((-1.0)*gconst2*r10*x9261))+((r11*x9260)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9261))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9258))+((r20*x9259)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9261))+((r00*x9259))+(((-1.0)*gconst1*r01*x9258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9262=((-1.0)*r20);
IkReal x9263=x8864;
CheckValue<IkReal> x9265 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9262),IKFAST_ATAN2_MAGTHRESH);
if(!x9265.valid){
continue;
}
IkReal x9264=((-1.0)*(x9265.value));
sj5=gconst1;
cj5=gconst2;
j5=x9264;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9264;
IkReal gconst1=(r21*x9263);
IkReal gconst2=(x9262*x9263);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9266=((-1.0)*r20);
IkReal x9267=x8864;
CheckValue<IkReal> x9269 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9266),IKFAST_ATAN2_MAGTHRESH);
if(!x9269.valid){
continue;
}
IkReal x9268=((-1.0)*(x9269.value));
sj5=gconst1;
cj5=gconst2;
j5=x9268;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9268;
IkReal gconst1=(r21*x9267);
IkReal gconst2=(x9266*x9267);
IkReal x9270=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9274=IKPowWithIntegerCheck(x9270,-1);
if(!x9274.valid){
continue;
}
IkReal x9271=x9274.value;
IkReal x9272=((1.0)*x9271);
IkReal x9273=((((-1.0)*x9272*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x9271))+(((-1.0)*(r12*r12)))+(((-1.0)*x9272*(r11*r11)*(r21*r21))));
j4eval[0]=x9273;
j4eval[1]=r12;
j4eval[2]=x9270;
j4eval[3]=IKsign(x9273);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9275=((-1.0)*r20);
IkReal x9276=x8864;
CheckValue<IkReal> x9278 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9275),IKFAST_ATAN2_MAGTHRESH);
if(!x9278.valid){
continue;
}
IkReal x9277=((-1.0)*(x9278.value));
sj5=gconst1;
cj5=gconst2;
j5=x9277;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9277;
IkReal gconst1=(r21*x9276);
IkReal gconst2=(x9275*x9276);
IkReal x9279=r22*r22;
IkReal x9280=(cj1*r12*sj2);
IkReal x9281=(cj2*r12*sj1);
CheckValue<IkReal> x9285=IKPowWithIntegerCheck(((-1.0)+x9279),-1);
if(!x9285.valid){
continue;
}
IkReal x9282=x9285.value;
if((((1.0)+(((-1.0)*x9279)))) < -0.00001)
continue;
IkReal x9283=IKsqrt(((1.0)+(((-1.0)*x9279))));
IkReal x9284=((1.0)*r22*x9282*x9283);
j4eval[0]=((IKabs((x9281+x9280)))+(IKabs(((((-1.0)*x9281*x9284))+(((-1.0)*x9280*x9284))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9286=((1.0)*gconst1);
IkReal x9287=(cj2*sj1);
IkReal x9288=(gconst2*r10);
IkReal x9289=(cj1*sj2);
CheckValue<IkReal> x9290=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9286)))),-1);
if(!x9290.valid){
continue;
}
CheckValue<IkReal> x9291 = IKatan2WithCheck(IkReal((((x9287*x9288))+((x9288*x9289))+(((-1.0)*r11*x9286*x9289))+(((-1.0)*r11*x9286*x9287)))),IkReal((((r12*x9289))+((r12*x9287)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9290.value)))+(x9291.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9292=IKsin(j4);
IkReal x9293=IKcos(j4);
IkReal x9294=((1.0)*x9293);
IkReal x9295=(gconst2*x9293);
IkReal x9296=(gconst1*x9292);
IkReal x9297=((1.0)*x9292);
evalcond[0]=((((-1.0)*gconst2*r20*x9297))+(((-1.0)*r22*x9294))+((r21*x9296)));
evalcond[1]=((((-1.0)*gconst2*r00*x9297))+((r01*x9296))+(((-1.0)*r02*x9294)));
evalcond[2]=((((-1.0)*gconst1*r11*x9294))+((r10*x9295))+(((-1.0)*r12*x9297)));
evalcond[3]=((-1.0)+((r11*x9296))+(((-1.0)*gconst2*r10*x9297))+(((-1.0)*r12*x9294)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9294))+((cj1*sj2))+(((-1.0)*r22*x9297))+((r20*x9295)));
evalcond[5]=(((r00*x9295))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst1*r01*x9294))+(((-1.0)*r02*x9297))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9298=(gconst1*r11);
IkReal x9299=(gconst2*r10);
CheckValue<IkReal> x9300=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9298*x9298)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9299*x9299)))+(((2.0)*x9298*x9299)))),-1);
if(!x9300.valid){
continue;
}
CheckValue<IkReal> x9301 = IKatan2WithCheck(IkReal((x9299+(((-1.0)*x9298)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9300.value)))+(x9301.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9302=IKsin(j4);
IkReal x9303=IKcos(j4);
IkReal x9304=((1.0)*x9303);
IkReal x9305=(gconst2*x9303);
IkReal x9306=(gconst1*x9302);
IkReal x9307=((1.0)*x9302);
evalcond[0]=(((r21*x9306))+(((-1.0)*r22*x9304))+(((-1.0)*gconst2*r20*x9307)));
evalcond[1]=((((-1.0)*gconst2*r00*x9307))+((r01*x9306))+(((-1.0)*r02*x9304)));
evalcond[2]=((((-1.0)*gconst1*r11*x9304))+((r10*x9305))+(((-1.0)*r12*x9307)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9307))+((r11*x9306))+(((-1.0)*r12*x9304)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9304))+((cj1*sj2))+((r20*x9305))+(((-1.0)*r22*x9307)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst1*r01*x9304))+(((-1.0)*r02*x9307))+((r00*x9305))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9308 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9308.valid){
continue;
}
CheckValue<IkReal> x9309=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9308.value)+(((1.5707963267949)*(x9309.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9310=IKsin(j4);
IkReal x9311=IKcos(j4);
IkReal x9312=((1.0)*x9311);
IkReal x9313=(gconst2*x9311);
IkReal x9314=(gconst1*x9310);
IkReal x9315=((1.0)*x9310);
evalcond[0]=(((r21*x9314))+(((-1.0)*r22*x9312))+(((-1.0)*gconst2*r20*x9315)));
evalcond[1]=((((-1.0)*gconst2*r00*x9315))+((r01*x9314))+(((-1.0)*r02*x9312)));
evalcond[2]=((((-1.0)*gconst1*r11*x9312))+((r10*x9313))+(((-1.0)*r12*x9315)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9315))+((r11*x9314))+(((-1.0)*r12*x9312)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9312))+((cj1*sj2))+((r20*x9313))+(((-1.0)*r22*x9315)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst1*r01*x9312))+(((-1.0)*r02*x9315))+((r00*x9313))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9316=((-1.0)*r20);
IkReal x9317=x8864;
CheckValue<IkReal> x9319 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9316),IKFAST_ATAN2_MAGTHRESH);
if(!x9319.valid){
continue;
}
IkReal x9318=((-1.0)*(x9319.value));
sj5=gconst1;
cj5=gconst2;
j5=x9318;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9318;
IkReal gconst1=(r21*x9317);
IkReal gconst2=(x9316*x9317);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9320=((-1.0)*r20);
IkReal x9321=x8864;
CheckValue<IkReal> x9323 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9320),IKFAST_ATAN2_MAGTHRESH);
if(!x9323.valid){
continue;
}
IkReal x9322=((-1.0)*(x9323.value));
sj5=gconst1;
cj5=gconst2;
j5=x9322;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9322;
IkReal gconst1=(r21*x9321);
IkReal gconst2=(x9320*x9321);
IkReal x9324=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9328=IKPowWithIntegerCheck(x9324,-1);
if(!x9328.valid){
continue;
}
IkReal x9325=x9328.value;
IkReal x9326=((1.0)*x9325);
IkReal x9327=((((-2.0)*r00*r01*r20*r21*x9325))+(((-1.0)*x9326*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x9326*(r01*r01)*(r21*r21))));
j4eval[0]=x9327;
j4eval[1]=IKsign(x9327);
j4eval[2]=r02;
j4eval[3]=x9324;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9329=((-1.0)*r20);
IkReal x9330=x8864;
CheckValue<IkReal> x9332 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9329),IKFAST_ATAN2_MAGTHRESH);
if(!x9332.valid){
continue;
}
IkReal x9331=((-1.0)*(x9332.value));
sj5=gconst1;
cj5=gconst2;
j5=x9331;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9331;
IkReal gconst1=(r21*x9330);
IkReal gconst2=(x9329*x9330);
IkReal x9333=r22*r22;
IkReal x9334=(cj1*r02*sj2);
IkReal x9335=(cj2*r02*sj1);
CheckValue<IkReal> x9339=IKPowWithIntegerCheck(((-1.0)+x9333),-1);
if(!x9339.valid){
continue;
}
IkReal x9336=x9339.value;
if((((1.0)+(((-1.0)*x9333)))) < -0.00001)
continue;
IkReal x9337=IKsqrt(((1.0)+(((-1.0)*x9333))));
IkReal x9338=((1.0)*r22*x9336*x9337);
j4eval[0]=((IKabs((x9335+x9334)))+(IKabs(((((-1.0)*x9334*x9338))+(((-1.0)*x9335*x9338))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9340=(cj2*sj1);
IkReal x9341=(cj1*sj2);
IkReal x9342=(gconst2*r00);
IkReal x9343=((1.0)*gconst1*r01);
CheckValue<IkReal> x9344 = IKatan2WithCheck(IkReal(((((-1.0)*x9340*x9343))+((x9341*x9342))+((x9340*x9342))+(((-1.0)*x9341*x9343)))),IkReal((((r02*x9341))+((r02*x9340)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9344.valid){
continue;
}
CheckValue<IkReal> x9345=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9344.value)+(((1.5707963267949)*(x9345.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9346=IKsin(j4);
IkReal x9347=IKcos(j4);
IkReal x9348=(gconst1*r11);
IkReal x9349=(gconst1*r21);
IkReal x9350=(gconst1*r01);
IkReal x9351=((1.0)*x9347);
IkReal x9352=(gconst2*x9347);
IkReal x9353=((1.0)*x9346);
evalcond[0]=(((x9346*x9349))+(((-1.0)*r22*x9351))+(((-1.0)*gconst2*r20*x9353)));
evalcond[1]=(((x9346*x9348))+(((-1.0)*r12*x9351))+(((-1.0)*gconst2*r10*x9353)));
evalcond[2]=((((-1.0)*r02*x9353))+((r00*x9352))+(((-1.0)*x9350*x9351)));
evalcond[3]=((-1.0)+((x9346*x9350))+(((-1.0)*r02*x9351))+(((-1.0)*gconst2*r00*x9353)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9353))+((cj1*sj2))+((r20*x9352))+(((-1.0)*x9349*x9351)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9353))+((r10*x9352))+(((-1.0)*x9348*x9351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9354=(gconst2*r00);
IkReal x9355=(gconst1*r01);
CheckValue<IkReal> x9356=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x9354*x9354)))+(((-1.0)*(x9355*x9355)))+(((2.0)*x9354*x9355)))),-1);
if(!x9356.valid){
continue;
}
CheckValue<IkReal> x9357 = IKatan2WithCheck(IkReal((x9354+(((-1.0)*x9355)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9356.value)))+(x9357.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9358=IKsin(j4);
IkReal x9359=IKcos(j4);
IkReal x9360=(gconst1*r11);
IkReal x9361=(gconst1*r21);
IkReal x9362=(gconst1*r01);
IkReal x9363=((1.0)*x9359);
IkReal x9364=(gconst2*x9359);
IkReal x9365=((1.0)*x9358);
evalcond[0]=(((x9358*x9361))+(((-1.0)*r22*x9363))+(((-1.0)*gconst2*r20*x9365)));
evalcond[1]=((((-1.0)*gconst2*r10*x9365))+((x9358*x9360))+(((-1.0)*r12*x9363)));
evalcond[2]=((((-1.0)*x9362*x9363))+(((-1.0)*r02*x9365))+((r00*x9364)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9363))+((x9358*x9362))+(((-1.0)*gconst2*r00*x9365)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9365))+(((-1.0)*x9361*x9363))+((r20*x9364)));
evalcond[5]=((((-1.0)*x9360*x9363))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9365))+((r10*x9364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9366=((1.0)*gconst2);
CheckValue<IkReal> x9367=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9366)))),-1);
if(!x9367.valid){
continue;
}
CheckValue<IkReal> x9368 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9366))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9368.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9367.value)))+(x9368.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9369=IKsin(j4);
IkReal x9370=IKcos(j4);
IkReal x9371=(gconst1*r11);
IkReal x9372=(gconst1*r21);
IkReal x9373=(gconst1*r01);
IkReal x9374=((1.0)*x9370);
IkReal x9375=(gconst2*x9370);
IkReal x9376=((1.0)*x9369);
evalcond[0]=(((x9369*x9372))+(((-1.0)*r22*x9374))+(((-1.0)*gconst2*r20*x9376)));
evalcond[1]=((((-1.0)*gconst2*r10*x9376))+((x9369*x9371))+(((-1.0)*r12*x9374)));
evalcond[2]=((((-1.0)*x9373*x9374))+(((-1.0)*r02*x9376))+((r00*x9375)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9374))+(((-1.0)*gconst2*r00*x9376))+((x9369*x9373)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9372*x9374))+(((-1.0)*r22*x9376))+((r20*x9375)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9371*x9374))+(((-1.0)*r12*x9376))+((r10*x9375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9377=((-1.0)*r20);
IkReal x9378=x8864;
CheckValue<IkReal> x9380 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9377),IKFAST_ATAN2_MAGTHRESH);
if(!x9380.valid){
continue;
}
IkReal x9379=((-1.0)*(x9380.value));
sj5=gconst1;
cj5=gconst2;
j5=x9379;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9379;
IkReal gconst1=(r21*x9378);
IkReal gconst2=(x9377*x9378);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9381=((-1.0)*r20);
IkReal x9382=x8864;
CheckValue<IkReal> x9384 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9381),IKFAST_ATAN2_MAGTHRESH);
if(!x9384.valid){
continue;
}
IkReal x9383=((-1.0)*(x9384.value));
sj5=gconst1;
cj5=gconst2;
j5=x9383;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9383;
IkReal gconst1=(r21*x9382);
IkReal gconst2=(x9381*x9382);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9385=((-1.0)*r20);
IkReal x9386=x8864;
CheckValue<IkReal> x9388 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9385),IKFAST_ATAN2_MAGTHRESH);
if(!x9388.valid){
continue;
}
IkReal x9387=((-1.0)*(x9388.value));
sj5=gconst1;
cj5=gconst2;
j5=x9387;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9387;
IkReal gconst1=(r21*x9386);
IkReal gconst2=(x9385*x9386);
IkReal x9389=r22*r22;
IkReal x9390=(cj1*r02*sj2);
IkReal x9391=(cj2*r02*sj1);
CheckValue<IkReal> x9395=IKPowWithIntegerCheck(((-1.0)+x9389),-1);
if(!x9395.valid){
continue;
}
IkReal x9392=x9395.value;
if((((1.0)+(((-1.0)*x9389)))) < -0.00001)
continue;
IkReal x9393=IKsqrt(((1.0)+(((-1.0)*x9389))));
IkReal x9394=((1.0)*r22*x9392*x9393);
j4eval[0]=((IKabs((x9391+x9390)))+(IKabs(((((-1.0)*x9391*x9394))+(((-1.0)*x9390*x9394))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9396=(cj2*sj1);
IkReal x9397=(cj1*sj2);
IkReal x9398=(gconst2*r00);
IkReal x9399=((1.0)*gconst1*r01);
CheckValue<IkReal> x9400 = IKatan2WithCheck(IkReal((((x9396*x9398))+(((-1.0)*x9397*x9399))+(((-1.0)*x9396*x9399))+((x9397*x9398)))),IkReal((((r02*x9397))+((r02*x9396)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9400.valid){
continue;
}
CheckValue<IkReal> x9401=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9401.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9400.value)+(((1.5707963267949)*(x9401.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9402=IKsin(j4);
IkReal x9403=IKcos(j4);
IkReal x9404=(gconst1*r11);
IkReal x9405=(gconst1*r21);
IkReal x9406=(gconst1*r01);
IkReal x9407=((1.0)*x9403);
IkReal x9408=(gconst2*x9403);
IkReal x9409=((1.0)*x9402);
evalcond[0]=((((-1.0)*r22*x9407))+((x9402*x9405))+(((-1.0)*gconst2*r20*x9409)));
evalcond[1]=((((-1.0)*gconst2*r10*x9409))+(((-1.0)*r12*x9407))+((x9402*x9404)));
evalcond[2]=((((-1.0)*x9406*x9407))+(((-1.0)*r02*x9409))+((r00*x9408)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9407))+((x9402*x9406))+(((-1.0)*gconst2*r00*x9409)));
evalcond[4]=((((-1.0)*r22*x9409))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9405*x9407))+((r20*x9408)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x9404*x9407))+(((-1.0)*r12*x9409))+((r10*x9408))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9410=(gconst1*r01);
IkReal x9411=(gconst2*r00);
CheckValue<IkReal> x9412 = IKatan2WithCheck(IkReal((x9411+(((-1.0)*x9410)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9412.valid){
continue;
}
CheckValue<IkReal> x9413=IKPowWithIntegerCheck(IKsign(((x9411*x9411)+(((-2.0)*x9410*x9411))+(r02*r02)+(x9410*x9410))),-1);
if(!x9413.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9412.value)+(((1.5707963267949)*(x9413.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9414=IKsin(j4);
IkReal x9415=IKcos(j4);
IkReal x9416=(gconst1*r11);
IkReal x9417=(gconst1*r21);
IkReal x9418=(gconst1*r01);
IkReal x9419=((1.0)*x9415);
IkReal x9420=(gconst2*x9415);
IkReal x9421=((1.0)*x9414);
evalcond[0]=(((x9414*x9417))+(((-1.0)*r22*x9419))+(((-1.0)*gconst2*r20*x9421)));
evalcond[1]=((((-1.0)*r12*x9419))+(((-1.0)*gconst2*r10*x9421))+((x9414*x9416)));
evalcond[2]=(((r00*x9420))+(((-1.0)*x9418*x9419))+(((-1.0)*r02*x9421)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9419))+((x9414*x9418))+(((-1.0)*gconst2*r00*x9421)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x9420))+(((-1.0)*x9417*x9419))+(((-1.0)*r22*x9421)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x9421))+(((-1.0)*x9416*x9419))+((cj1*cj2))+((r10*x9420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9422 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9422.valid){
continue;
}
CheckValue<IkReal> x9423=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9422.value)+(((1.5707963267949)*(x9423.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9424=IKsin(j4);
IkReal x9425=IKcos(j4);
IkReal x9426=(gconst1*r11);
IkReal x9427=(gconst1*r21);
IkReal x9428=(gconst1*r01);
IkReal x9429=((1.0)*x9425);
IkReal x9430=(gconst2*x9425);
IkReal x9431=((1.0)*x9424);
evalcond[0]=(((x9424*x9427))+(((-1.0)*r22*x9429))+(((-1.0)*gconst2*r20*x9431)));
evalcond[1]=((((-1.0)*gconst2*r10*x9431))+((x9424*x9426))+(((-1.0)*r12*x9429)));
evalcond[2]=((((-1.0)*x9428*x9429))+(((-1.0)*r02*x9431))+((r00*x9430)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r00*x9431))+((x9424*x9428))+(((-1.0)*r02*x9429)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x9430))+(((-1.0)*r22*x9431))+(((-1.0)*x9427*x9429)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x9426*x9429))+(((-1.0)*r12*x9431))+((cj1*cj2))+((r10*x9430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9432=((-1.0)*r20);
IkReal x9433=((-1.0)*px);
CheckValue<IkReal> x9435 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9432),IKFAST_ATAN2_MAGTHRESH);
if(!x9435.valid){
continue;
}
IkReal x9434=((-1.0)*(x9435.value));
sj5=gconst1;
cj5=gconst2;
j5=x9434;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9433);
rxp1_1=(px*r21);
rxp1_2=(r11*x9433);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9434;
IkReal gconst1=r21;
IkReal gconst2=x9432;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9436=((-1.0)*r20);
IkReal x9437=((-1.0)*px);
CheckValue<IkReal> x9439 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9436),IKFAST_ATAN2_MAGTHRESH);
if(!x9439.valid){
continue;
}
IkReal x9438=((-1.0)*(x9439.value));
sj5=gconst1;
cj5=gconst2;
j5=x9438;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9437);
rxp1_1=(px*r21);
rxp1_2=(r11*x9437);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9438;
IkReal gconst1=r21;
IkReal gconst2=x9436;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9440=((-1.0)*r20);
IkReal x9441=((-1.0)*px);
CheckValue<IkReal> x9443 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9440),IKFAST_ATAN2_MAGTHRESH);
if(!x9443.valid){
continue;
}
IkReal x9442=((-1.0)*(x9443.value));
sj5=gconst1;
cj5=gconst2;
j5=x9442;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9441);
rxp1_1=(px*r21);
rxp1_2=(r11*x9441);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9442;
IkReal gconst1=r21;
IkReal gconst2=x9440;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9446=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9446.valid){
continue;
}
IkReal x9444=x9446.value;
IkReal x9445=(sj0*x9444);
cj4array[0]=(((cj1*cj2*x9445))+(((-1.0)*sj1*sj2*x9445)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9447=IKsin(j4);
IkReal x9448=IKcos(j4);
IkReal x9449=(gconst1*x9447);
IkReal x9450=((1.0)*x9448);
IkReal x9451=((1.0)*gconst2*x9447);
evalcond[0]=((-1.0)*r02*x9447);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9450)));
evalcond[2]=(((r21*x9449))+(((-1.0)*r20*x9451)));
evalcond[3]=((((-1.0)*r10*x9451))+((r11*x9449)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9450))+((gconst2*r20*x9448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9454=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9454.valid){
continue;
}
IkReal x9452=x9454.value;
IkReal x9453=((1.0)*x9452);
cj4array[0]=((((-1.0)*cj2*sj1*x9453))+(((-1.0)*cj1*sj2*x9453)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9455=IKsin(j4);
IkReal x9456=IKcos(j4);
IkReal x9457=(gconst2*r10);
IkReal x9458=((1.0)*sj0);
IkReal x9459=(gconst1*r11);
IkReal x9460=((1.0)*x9455);
IkReal x9461=((1.0)*x9456);
evalcond[0]=((-1.0)*r02*x9455);
evalcond[1]=((((-1.0)*x9458))+(((-1.0)*r02*x9461)));
evalcond[2]=((((-1.0)*gconst2*r20*x9460))+((gconst1*r21*x9455)));
evalcond[3]=((((-1.0)*x9457*x9460))+((x9455*x9459)));
evalcond[4]=((((-1.0)*x9459*x9461))+(((-1.0)*cj1*cj2*x9458))+((sj0*sj1*sj2))+((x9456*x9457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9462=IKPowWithIntegerCheck(r02,-1);
if(!x9462.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9462.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9463=IKsin(j4);
IkReal x9464=IKcos(j4);
IkReal x9465=(gconst2*r10);
IkReal x9466=(gconst1*r11);
IkReal x9467=(gconst1*r21);
IkReal x9468=(gconst2*r20);
IkReal x9469=((1.0)*x9463);
IkReal x9470=((1.0)*x9464);
evalcond[0]=((-1.0)*r02*x9463);
evalcond[1]=(((x9463*x9467))+(((-1.0)*x9468*x9469)));
evalcond[2]=(((x9463*x9466))+(((-1.0)*x9465*x9469)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9467*x9470))+((x9464*x9468)));
evalcond[4]=((((-1.0)*x9466*x9470))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+((x9464*x9465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9471=(cj2*sj1);
IkReal x9472=(cj1*sj2);
IkReal x9473=(gconst1*r21);
IkReal x9474=((1.0)*gconst2*r20);
CheckValue<IkReal> x9475 = IKatan2WithCheck(IkReal((((r22*x9471))+((r22*x9472)))),IkReal(((((-1.0)*x9471*x9474))+(((-1.0)*x9472*x9474))+((x9472*x9473))+((x9471*x9473)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9475.valid){
continue;
}
CheckValue<IkReal> x9476=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*gconst2*r20*x9473))+(((gconst2*gconst2)*(r20*r20)))+(x9473*x9473))),-1);
if(!x9476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9475.value)+(((1.5707963267949)*(x9476.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9477=IKsin(j4);
IkReal x9478=IKcos(j4);
IkReal x9479=(gconst1*r11);
IkReal x9480=(sj1*sj2);
IkReal x9481=(gconst1*r21);
IkReal x9482=(gconst1*r01);
IkReal x9483=((1.0)*x9478);
IkReal x9484=(gconst2*x9478);
IkReal x9485=((1.0)*cj1*cj2);
IkReal x9486=((1.0)*x9477);
evalcond[0]=(((x9477*x9481))+(((-1.0)*r22*x9483))+(((-1.0)*gconst2*r20*x9486)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x9486))+((x9477*x9479))+(((-1.0)*r12*x9483)));
evalcond[2]=(((x9477*x9482))+(((-1.0)*sj0))+(((-1.0)*gconst2*r00*x9486))+(((-1.0)*r02*x9483)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9481*x9483))+((r20*x9484))+(((-1.0)*r22*x9486)));
evalcond[4]=((((-1.0)*cj0*x9485))+((r00*x9484))+(((-1.0)*r02*x9486))+(((-1.0)*x9482*x9483))+((cj0*x9480)));
evalcond[5]=(((sj0*x9480))+(((-1.0)*sj0*x9485))+(((-1.0)*x9479*x9483))+((r10*x9484))+(((-1.0)*r12*x9486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9487=((1.0)*gconst2);
CheckValue<IkReal> x9488=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9487)))),-1);
if(!x9488.valid){
continue;
}
CheckValue<IkReal> x9489 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9487))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9489.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9488.value)))+(x9489.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9490=IKsin(j4);
IkReal x9491=IKcos(j4);
IkReal x9492=(gconst1*r11);
IkReal x9493=(sj1*sj2);
IkReal x9494=(gconst1*r21);
IkReal x9495=(gconst1*r01);
IkReal x9496=((1.0)*x9491);
IkReal x9497=(gconst2*x9491);
IkReal x9498=((1.0)*cj1*cj2);
IkReal x9499=((1.0)*x9490);
evalcond[0]=((((-1.0)*gconst2*r20*x9499))+(((-1.0)*r22*x9496))+((x9490*x9494)));
evalcond[1]=(cj0+((x9490*x9492))+(((-1.0)*gconst2*r10*x9499))+(((-1.0)*r12*x9496)));
evalcond[2]=((((-1.0)*r02*x9496))+(((-1.0)*sj0))+((x9490*x9495))+(((-1.0)*gconst2*r00*x9499)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x9499))+((cj1*sj2))+(((-1.0)*x9494*x9496))+((r20*x9497)));
evalcond[4]=((((-1.0)*r02*x9499))+((cj0*x9493))+(((-1.0)*x9495*x9496))+((r00*x9497))+(((-1.0)*cj0*x9498)));
evalcond[5]=(((r10*x9497))+(((-1.0)*x9492*x9496))+(((-1.0)*r12*x9499))+(((-1.0)*sj0*x9498))+((sj0*x9493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9500=((1.0)*gconst2);
CheckValue<IkReal> x9501 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x9500)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9501.valid){
continue;
}
CheckValue<IkReal> x9502=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9500)))),-1);
if(!x9502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9501.value)+(((1.5707963267949)*(x9502.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9503=IKsin(j4);
IkReal x9504=IKcos(j4);
IkReal x9505=(gconst1*r11);
IkReal x9506=(sj1*sj2);
IkReal x9507=(gconst1*r21);
IkReal x9508=(gconst1*r01);
IkReal x9509=((1.0)*x9504);
IkReal x9510=(gconst2*x9504);
IkReal x9511=((1.0)*cj1*cj2);
IkReal x9512=((1.0)*x9503);
evalcond[0]=((((-1.0)*gconst2*r20*x9512))+(((-1.0)*r22*x9509))+((x9503*x9507)));
evalcond[1]=(cj0+(((-1.0)*r12*x9509))+((x9503*x9505))+(((-1.0)*gconst2*r10*x9512)));
evalcond[2]=((((-1.0)*sj0))+((x9503*x9508))+(((-1.0)*r02*x9509))+(((-1.0)*gconst2*r00*x9512)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9507*x9509))+(((-1.0)*r22*x9512))+((r20*x9510)));
evalcond[4]=((((-1.0)*r02*x9512))+((r00*x9510))+((cj0*x9506))+(((-1.0)*x9508*x9509))+(((-1.0)*cj0*x9511)));
evalcond[5]=((((-1.0)*x9505*x9509))+((sj0*x9506))+(((-1.0)*r12*x9512))+((r10*x9510))+(((-1.0)*sj0*x9511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9513=((-1.0)*r20);
IkReal x9514=x8864;
CheckValue<IkReal> x9516 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9513),IKFAST_ATAN2_MAGTHRESH);
if(!x9516.valid){
continue;
}
IkReal x9515=((-1.0)*(x9516.value));
sj5=gconst1;
cj5=gconst2;
j5=x9515;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9515;
IkReal gconst1=(r21*x9514);
IkReal gconst2=(x9513*x9514);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9517=((-1.0)*r20);
IkReal x9518=x8864;
CheckValue<IkReal> x9520 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9517),IKFAST_ATAN2_MAGTHRESH);
if(!x9520.valid){
continue;
}
IkReal x9519=((-1.0)*(x9520.value));
sj5=gconst1;
cj5=gconst2;
j5=x9519;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9519;
IkReal gconst1=(r21*x9518);
IkReal gconst2=(x9517*x9518);
CheckValue<IkReal> x9528=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9528.valid){
continue;
}
IkReal x9521=x9528.value;
IkReal x9522=(sj3*x9521);
IkReal x9523=(r11*x9522);
IkReal x9524=(r00*x9522);
IkReal x9525=(r01*x9522);
IkReal x9526=(r10*x9522);
IkReal x9527=(r20*r21*x9522);
j4eval[0]=IKsign((((r01*x9523*(r21*r21)))+((r02*r12*sj3))+((r10*r20*r21*x9525))+((r10*x9524*(r20*r20)))+((r00*r20*r21*x9523))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9529=gconst2*gconst2;
IkReal x9530=gconst1*gconst1;
IkReal x9531=((1.0)*cj3);
IkReal x9532=((1.0)*sj3);
IkReal x9533=(r11*sj3);
IkReal x9534=(r10*sj3);
IkReal x9535=(gconst1*gconst2*r00);
IkReal x9536=(gconst1*gconst2*r01);
IkReal x9537=(r00*x9529);
IkReal x9538=(r01*x9530);
CheckValue<IkReal> x9539=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x9531))+(((-1.0)*r11*x9531*x9538))+((cj3*r10*x9536))+(((-1.0)*r10*x9531*x9537))+((cj3*r11*x9535)))),-1);
if(!x9539.valid){
continue;
}
CheckValue<IkReal> x9540 = IKatan2WithCheck(IkReal((((gconst1*r02*x9534))+((gconst2*r02*x9533)))),IkReal(((((-1.0)*r11*x9532*x9537))+(((-1.0)*r10*x9532*x9535))+((x9533*x9536))+((x9534*x9538)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9539.value)))+(x9540.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9541=IKsin(j4);
IkReal x9542=IKcos(j4);
IkReal x9543=(sj1*sj2);
IkReal x9544=(gconst1*sj3);
IkReal x9545=(cj3*gconst1);
IkReal x9546=(cj3*gconst2);
IkReal x9547=((1.0)*cj2);
IkReal x9548=(cj1*sj2);
IkReal x9549=(gconst2*sj3);
IkReal x9550=(cj1*x9547);
IkReal x9551=((1.0)*x9542);
IkReal x9552=((1.0)*x9541);
IkReal x9553=(gconst1*x9541);
IkReal x9554=(cj3*x9541);
IkReal x9555=(x9542*x9549);
evalcond[0]=((((-1.0)*r22*x9551))+((r21*x9553))+(((-1.0)*gconst2*r20*x9552)));
evalcond[1]=((((-1.0)*r02*x9551))+(((-1.0)*gconst2*r00*x9552))+((r01*x9553)));
evalcond[2]=((1.0)+((r11*x9553))+(((-1.0)*gconst2*r10*x9552))+(((-1.0)*r12*x9551)));
evalcond[3]=(((r11*x9549))+((r12*x9554))+((r11*x9542*x9545))+((r10*x9544))+(((-1.0)*r10*x9546*x9551)));
evalcond[4]=((((-1.0)*r12*sj3*x9552))+((r11*x9546))+((r10*x9545))+((r10*x9555))+(((-1.0)*r11*x9544*x9551)));
evalcond[5]=(((cj2*sj1))+((r21*x9542*x9545))+((r20*x9544))+((r21*x9549))+x9548+((r22*x9554))+(((-1.0)*r20*x9546*x9551)));
evalcond[6]=(((r02*x9554))+((r01*x9542*x9545))+(((-1.0)*r00*x9546*x9551))+((r01*x9549))+x9543+((r00*x9544))+(((-1.0)*x9550)));
evalcond[7]=((((-1.0)*r21*x9544*x9551))+((r20*x9555))+((r20*x9545))+(((-1.0)*r22*sj3*x9552))+((r21*x9546))+x9543+(((-1.0)*x9550)));
evalcond[8]=((((-1.0)*r02*sj3*x9552))+(((-1.0)*r01*x9544*x9551))+((r01*x9546))+((r00*x9545))+((r00*x9555))+(((-1.0)*x9548))+(((-1.0)*sj1*x9547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9556=gconst2*gconst2;
IkReal x9557=gconst1*gconst1;
IkReal x9558=(gconst2*r11);
IkReal x9559=(cj3*r02);
IkReal x9560=(gconst1*r01);
IkReal x9561=(cj3*r10);
IkReal x9562=(r10*sj3);
IkReal x9563=((1.0)*gconst1*r00);
IkReal x9564=(r01*x9557);
IkReal x9565=(r00*x9556);
CheckValue<IkReal> x9566 = IKatan2WithCheck(IkReal((((gconst1*r10*x9559))+((x9558*x9559)))),IkReal(((((-1.0)*cj3*r11*x9565))+((x9561*x9564))+(((-1.0)*gconst2*x9561*x9563))+((cj3*x9558*x9560)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9566.valid){
continue;
}
CheckValue<IkReal> x9567=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*sj3*x9558*x9563))+(((-1.0)*gconst2*x9560*x9562))+((x9562*x9565))+((r11*sj3*x9564)))),-1);
if(!x9567.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9566.value)+(((1.5707963267949)*(x9567.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9568=IKsin(j4);
IkReal x9569=IKcos(j4);
IkReal x9570=(sj1*sj2);
IkReal x9571=(gconst1*sj3);
IkReal x9572=(cj3*gconst1);
IkReal x9573=(cj3*gconst2);
IkReal x9574=((1.0)*cj2);
IkReal x9575=(cj1*sj2);
IkReal x9576=(gconst2*sj3);
IkReal x9577=(cj1*x9574);
IkReal x9578=((1.0)*x9569);
IkReal x9579=((1.0)*x9568);
IkReal x9580=(gconst1*x9568);
IkReal x9581=(cj3*x9568);
IkReal x9582=(x9569*x9576);
evalcond[0]=((((-1.0)*gconst2*r20*x9579))+(((-1.0)*r22*x9578))+((r21*x9580)));
evalcond[1]=((((-1.0)*r02*x9578))+((r01*x9580))+(((-1.0)*gconst2*r00*x9579)));
evalcond[2]=((1.0)+((r11*x9580))+(((-1.0)*r12*x9578))+(((-1.0)*gconst2*r10*x9579)));
evalcond[3]=((((-1.0)*r10*x9573*x9578))+((r11*x9569*x9572))+((r11*x9576))+((r12*x9581))+((r10*x9571)));
evalcond[4]=((((-1.0)*r11*x9571*x9578))+((r10*x9582))+((r11*x9573))+(((-1.0)*r12*sj3*x9579))+((r10*x9572)));
evalcond[5]=(((cj2*sj1))+((r21*x9576))+((r22*x9581))+(((-1.0)*r20*x9573*x9578))+x9575+((r21*x9569*x9572))+((r20*x9571)));
evalcond[6]=((((-1.0)*r00*x9573*x9578))+((r00*x9571))+((r01*x9569*x9572))+(((-1.0)*x9577))+((r01*x9576))+x9570+((r02*x9581)));
evalcond[7]=(((r20*x9582))+((r21*x9573))+(((-1.0)*x9577))+(((-1.0)*r22*sj3*x9579))+x9570+((r20*x9572))+(((-1.0)*r21*x9571*x9578)));
evalcond[8]=((((-1.0)*r02*sj3*x9579))+((r00*x9582))+(((-1.0)*x9575))+((r00*x9572))+(((-1.0)*r01*x9571*x9578))+((r01*x9573))+(((-1.0)*sj1*x9574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9583=((1.0)*gconst2);
CheckValue<IkReal> x9584 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9583))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9584.valid){
continue;
}
CheckValue<IkReal> x9585=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9583)))),-1);
if(!x9585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9584.value)+(((1.5707963267949)*(x9585.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9586=IKsin(j4);
IkReal x9587=IKcos(j4);
IkReal x9588=(sj1*sj2);
IkReal x9589=(gconst1*sj3);
IkReal x9590=(cj3*gconst1);
IkReal x9591=(cj3*gconst2);
IkReal x9592=((1.0)*cj2);
IkReal x9593=(cj1*sj2);
IkReal x9594=(gconst2*sj3);
IkReal x9595=(cj1*x9592);
IkReal x9596=((1.0)*x9587);
IkReal x9597=((1.0)*x9586);
IkReal x9598=(gconst1*x9586);
IkReal x9599=(cj3*x9586);
IkReal x9600=(x9587*x9594);
evalcond[0]=((((-1.0)*r22*x9596))+((r21*x9598))+(((-1.0)*gconst2*r20*x9597)));
evalcond[1]=(((r01*x9598))+(((-1.0)*gconst2*r00*x9597))+(((-1.0)*r02*x9596)));
evalcond[2]=((1.0)+((r11*x9598))+(((-1.0)*gconst2*r10*x9597))+(((-1.0)*r12*x9596)));
evalcond[3]=(((r11*x9594))+((r10*x9589))+(((-1.0)*r10*x9591*x9596))+((r12*x9599))+((r11*x9587*x9590)));
evalcond[4]=(((r11*x9591))+((r10*x9600))+(((-1.0)*r12*sj3*x9597))+((r10*x9590))+(((-1.0)*r11*x9589*x9596)));
evalcond[5]=(((cj2*sj1))+((r20*x9589))+((r22*x9599))+((r21*x9587*x9590))+x9593+((r21*x9594))+(((-1.0)*r20*x9591*x9596)));
evalcond[6]=(((r01*x9594))+((r00*x9589))+(((-1.0)*x9595))+x9588+(((-1.0)*r00*x9591*x9596))+((r02*x9599))+((r01*x9587*x9590)));
evalcond[7]=(((r20*x9590))+(((-1.0)*r21*x9589*x9596))+(((-1.0)*r22*sj3*x9597))+((r20*x9600))+(((-1.0)*x9595))+x9588+((r21*x9591)));
evalcond[8]=((((-1.0)*sj1*x9592))+(((-1.0)*r01*x9589*x9596))+((r01*x9591))+((r00*x9600))+((r00*x9590))+(((-1.0)*r02*sj3*x9597))+(((-1.0)*x9593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9601=((-1.0)*r20);
IkReal x9602=x8864;
CheckValue<IkReal> x9604 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9601),IKFAST_ATAN2_MAGTHRESH);
if(!x9604.valid){
continue;
}
IkReal x9603=((-1.0)*(x9604.value));
sj5=gconst1;
cj5=gconst2;
j5=x9603;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9603;
IkReal gconst1=(r21*x9602);
IkReal gconst2=(x9601*x9602);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9605=((-1.0)*r20);
IkReal x9606=x8864;
CheckValue<IkReal> x9608 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9605),IKFAST_ATAN2_MAGTHRESH);
if(!x9608.valid){
continue;
}
IkReal x9607=((-1.0)*(x9608.value));
sj5=gconst1;
cj5=gconst2;
j5=x9607;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9607;
IkReal gconst1=(r21*x9606);
IkReal gconst2=(x9605*x9606);
CheckValue<IkReal> x9616=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9616.valid){
continue;
}
IkReal x9609=x9616.value;
IkReal x9610=(sj3*x9609);
IkReal x9611=(r11*x9610);
IkReal x9612=(r00*x9610);
IkReal x9613=(r01*x9610);
IkReal x9614=(r10*x9610);
IkReal x9615=(r20*r21*x9610);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x9613))+((r10*x9612*(r20*r20)))+((r00*r20*r21*x9611))+((r01*x9611*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9617=gconst2*gconst2;
IkReal x9618=gconst1*gconst1;
IkReal x9619=((1.0)*cj3);
IkReal x9620=((1.0)*sj3);
IkReal x9621=(r11*sj3);
IkReal x9622=(r10*sj3);
IkReal x9623=(gconst1*gconst2*r00);
IkReal x9624=(gconst1*gconst2*r01);
IkReal x9625=(r00*x9617);
IkReal x9626=(r01*x9618);
CheckValue<IkReal> x9627 = IKatan2WithCheck(IkReal((((gconst2*r02*x9621))+((gconst1*r02*x9622)))),IkReal(((((-1.0)*r11*x9620*x9625))+(((-1.0)*r10*x9620*x9623))+((x9622*x9626))+((x9621*x9624)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9627.valid){
continue;
}
CheckValue<IkReal> x9628=IKPowWithIntegerCheck(IKsign((((cj3*r11*x9623))+((cj3*r10*x9624))+(((-1.0)*r10*x9619*x9625))+(((-1.0)*r11*x9619*x9626))+(((-1.0)*r02*r12*x9619)))),-1);
if(!x9628.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9627.value)+(((1.5707963267949)*(x9628.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9629=IKsin(j4);
IkReal x9630=IKcos(j4);
IkReal x9631=(cj2*sj1);
IkReal x9632=(cj1*sj2);
IkReal x9633=(gconst1*sj3);
IkReal x9634=(cj3*gconst1);
IkReal x9635=(sj1*sj2);
IkReal x9636=(cj3*gconst2);
IkReal x9637=(cj1*cj2);
IkReal x9638=(gconst2*sj3);
IkReal x9639=((1.0)*x9630);
IkReal x9640=((1.0)*x9629);
IkReal x9641=(gconst1*x9629);
IkReal x9642=(cj3*x9629);
IkReal x9643=(x9631+x9632);
IkReal x9644=(x9630*x9638);
evalcond[0]=((((-1.0)*gconst2*r20*x9640))+(((-1.0)*r22*x9639))+((r21*x9641)));
evalcond[1]=((((-1.0)*r02*x9639))+(((-1.0)*gconst2*r00*x9640))+((r01*x9641)));
evalcond[2]=((-1.0)+((r11*x9641))+(((-1.0)*r12*x9639))+(((-1.0)*gconst2*r10*x9640)));
evalcond[3]=(((r10*x9633))+((r11*x9630*x9634))+((r11*x9638))+(((-1.0)*r10*x9636*x9639))+((r12*x9642)));
evalcond[4]=((((-1.0)*r11*x9633*x9639))+((r10*x9634))+((r10*x9644))+(((-1.0)*r12*sj3*x9640))+((r11*x9636)));
evalcond[5]=(((r22*x9642))+((r20*x9633))+((r21*x9630*x9634))+((r21*x9638))+x9643+(((-1.0)*r20*x9636*x9639)));
evalcond[6]=(((r00*x9633))+((r01*x9638))+((r02*x9642))+(((-1.0)*x9635))+x9637+((r01*x9630*x9634))+(((-1.0)*r00*x9636*x9639)));
evalcond[7]=(((r00*x9634))+((r01*x9636))+(((-1.0)*r01*x9633*x9639))+((r00*x9644))+x9643+(((-1.0)*r02*sj3*x9640)));
evalcond[8]=((((-1.0)*r22*sj3*x9640))+((r20*x9634))+(((-1.0)*x9637))+((r21*x9636))+x9635+(((-1.0)*r21*x9633*x9639))+((r20*x9644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9645=gconst2*gconst2;
IkReal x9646=gconst1*gconst1;
IkReal x9647=(gconst2*r11);
IkReal x9648=(cj3*r02);
IkReal x9649=(gconst1*r01);
IkReal x9650=(cj3*r10);
IkReal x9651=(r10*sj3);
IkReal x9652=((1.0)*gconst1*r00);
IkReal x9653=(r01*x9646);
IkReal x9654=(r00*x9645);
CheckValue<IkReal> x9655=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*sj3*x9647*x9652))+((r11*sj3*x9653))+(((-1.0)*gconst2*x9649*x9651))+((x9651*x9654)))),-1);
if(!x9655.valid){
continue;
}
CheckValue<IkReal> x9656 = IKatan2WithCheck(IkReal((((x9647*x9648))+((gconst1*r10*x9648)))),IkReal((((cj3*x9647*x9649))+(((-1.0)*gconst2*x9650*x9652))+((x9650*x9653))+(((-1.0)*cj3*r11*x9654)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9656.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9655.value)))+(x9656.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9657=IKsin(j4);
IkReal x9658=IKcos(j4);
IkReal x9659=(cj2*sj1);
IkReal x9660=(cj1*sj2);
IkReal x9661=(gconst1*sj3);
IkReal x9662=(cj3*gconst1);
IkReal x9663=(sj1*sj2);
IkReal x9664=(cj3*gconst2);
IkReal x9665=(cj1*cj2);
IkReal x9666=(gconst2*sj3);
IkReal x9667=((1.0)*x9658);
IkReal x9668=((1.0)*x9657);
IkReal x9669=(gconst1*x9657);
IkReal x9670=(cj3*x9657);
IkReal x9671=(x9660+x9659);
IkReal x9672=(x9658*x9666);
evalcond[0]=((((-1.0)*gconst2*r20*x9668))+((r21*x9669))+(((-1.0)*r22*x9667)));
evalcond[1]=(((r01*x9669))+(((-1.0)*gconst2*r00*x9668))+(((-1.0)*r02*x9667)));
evalcond[2]=((-1.0)+((r11*x9669))+(((-1.0)*r12*x9667))+(((-1.0)*gconst2*r10*x9668)));
evalcond[3]=((((-1.0)*r10*x9664*x9667))+((r12*x9670))+((r11*x9666))+((r11*x9658*x9662))+((r10*x9661)));
evalcond[4]=(((r11*x9664))+(((-1.0)*r11*x9661*x9667))+((r10*x9672))+((r10*x9662))+(((-1.0)*r12*sj3*x9668)));
evalcond[5]=(((r21*x9666))+((r20*x9661))+x9671+((r21*x9658*x9662))+(((-1.0)*r20*x9664*x9667))+((r22*x9670)));
evalcond[6]=(((r01*x9658*x9662))+((r00*x9661))+x9665+((r01*x9666))+(((-1.0)*x9663))+((r02*x9670))+(((-1.0)*r00*x9664*x9667)));
evalcond[7]=((((-1.0)*r02*sj3*x9668))+((r00*x9672))+((r00*x9662))+x9671+((r01*x9664))+(((-1.0)*r01*x9661*x9667)));
evalcond[8]=(((r21*x9664))+((r20*x9662))+((r20*x9672))+x9663+(((-1.0)*x9665))+(((-1.0)*r22*sj3*x9668))+(((-1.0)*r21*x9661*x9667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9673 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9673.valid){
continue;
}
CheckValue<IkReal> x9674=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9674.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9673.value)+(((1.5707963267949)*(x9674.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9675=IKsin(j4);
IkReal x9676=IKcos(j4);
IkReal x9677=(cj2*sj1);
IkReal x9678=(cj1*sj2);
IkReal x9679=(gconst1*sj3);
IkReal x9680=(cj3*gconst1);
IkReal x9681=(sj1*sj2);
IkReal x9682=(cj3*gconst2);
IkReal x9683=(cj1*cj2);
IkReal x9684=(gconst2*sj3);
IkReal x9685=((1.0)*x9676);
IkReal x9686=((1.0)*x9675);
IkReal x9687=(gconst1*x9675);
IkReal x9688=(cj3*x9675);
IkReal x9689=(x9677+x9678);
IkReal x9690=(x9676*x9684);
evalcond[0]=(((r21*x9687))+(((-1.0)*r22*x9685))+(((-1.0)*gconst2*r20*x9686)));
evalcond[1]=((((-1.0)*r02*x9685))+(((-1.0)*gconst2*r00*x9686))+((r01*x9687)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9686))+(((-1.0)*r12*x9685))+((r11*x9687)));
evalcond[3]=((((-1.0)*r10*x9682*x9685))+((r11*x9676*x9680))+((r10*x9679))+((r12*x9688))+((r11*x9684)));
evalcond[4]=((((-1.0)*r11*x9679*x9685))+((r10*x9690))+((r11*x9682))+((r10*x9680))+(((-1.0)*r12*sj3*x9686)));
evalcond[5]=(((r21*x9676*x9680))+((r22*x9688))+((r20*x9679))+(((-1.0)*r20*x9682*x9685))+((r21*x9684))+x9689);
evalcond[6]=(((r01*x9676*x9680))+(((-1.0)*x9681))+((r02*x9688))+((r00*x9679))+x9683+((r01*x9684))+(((-1.0)*r00*x9682*x9685)));
evalcond[7]=((((-1.0)*r01*x9679*x9685))+(((-1.0)*r02*sj3*x9686))+x9689+((r01*x9682))+((r00*x9690))+((r00*x9680)));
evalcond[8]=((((-1.0)*r21*x9679*x9685))+(((-1.0)*x9683))+(((-1.0)*r22*sj3*x9686))+((r21*x9682))+x9681+((r20*x9680))+((r20*x9690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9691=((-1.0)*r20);
IkReal x9692=x8864;
CheckValue<IkReal> x9694 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9691),IKFAST_ATAN2_MAGTHRESH);
if(!x9694.valid){
continue;
}
IkReal x9693=((-1.0)*(x9694.value));
sj5=gconst1;
cj5=gconst2;
j5=x9693;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9693;
IkReal gconst1=(r21*x9692);
IkReal gconst2=(x9691*x9692);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9695=((-1.0)*r20);
IkReal x9696=x8864;
CheckValue<IkReal> x9698 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9695),IKFAST_ATAN2_MAGTHRESH);
if(!x9698.valid){
continue;
}
IkReal x9697=((-1.0)*(x9698.value));
sj5=gconst1;
cj5=gconst2;
j5=x9697;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9697;
IkReal gconst1=(r21*x9696);
IkReal gconst2=(x9695*x9696);
CheckValue<IkReal> x9706=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9706.valid){
continue;
}
IkReal x9699=x9706.value;
IkReal x9700=(sj3*x9699);
IkReal x9701=(r11*x9700);
IkReal x9702=(r00*x9700);
IkReal x9703=(r01*x9700);
IkReal x9704=(r10*x9700);
IkReal x9705=(r20*r21*x9700);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x9703))+((r10*x9702*(r20*r20)))+((r00*r20*r21*x9701))+((r01*x9701*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9707=gconst1*gconst1;
IkReal x9708=gconst2*gconst2;
IkReal x9709=((1.0)*cj3);
IkReal x9710=(gconst2*r10);
IkReal x9711=(r01*sj3);
IkReal x9712=(gconst1*r00*sj3);
IkReal x9713=(gconst1*gconst2*r11);
IkReal x9714=(r10*x9708);
IkReal x9715=(r11*x9707);
CheckValue<IkReal> x9716=IKPowWithIntegerCheck(IKsign((((cj3*gconst1*r01*x9710))+(((-1.0)*r00*x9709*x9714))+(((-1.0)*r02*r12*x9709))+(((-1.0)*r01*x9709*x9715))+((cj3*r00*x9713)))),-1);
if(!x9716.valid){
continue;
}
CheckValue<IkReal> x9717 = IKatan2WithCheck(IkReal((((r12*x9712))+((gconst2*r12*x9711)))),IkReal((((x9711*x9713))+((r00*sj3*x9715))+(((-1.0)*x9710*x9712))+(((-1.0)*x9711*x9714)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9717.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9716.value)))+(x9717.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9718=IKsin(j4);
IkReal x9719=IKcos(j4);
IkReal x9720=(sj1*sj2);
IkReal x9721=(gconst1*sj3);
IkReal x9722=(cj3*gconst1);
IkReal x9723=(cj3*gconst2);
IkReal x9724=((1.0)*cj2);
IkReal x9725=(cj1*sj2);
IkReal x9726=(gconst2*sj3);
IkReal x9727=(cj1*x9724);
IkReal x9728=((1.0)*x9719);
IkReal x9729=((1.0)*x9718);
IkReal x9730=(gconst1*x9718);
IkReal x9731=(cj3*x9718);
IkReal x9732=(x9719*x9726);
evalcond[0]=((((-1.0)*gconst2*r20*x9729))+(((-1.0)*r22*x9728))+((r21*x9730)));
evalcond[1]=(((r11*x9730))+(((-1.0)*r12*x9728))+(((-1.0)*gconst2*r10*x9729)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x9728))+(((-1.0)*gconst2*r00*x9729))+((r01*x9730)));
evalcond[3]=(((r01*x9726))+((r01*x9719*x9722))+((r02*x9731))+(((-1.0)*r00*x9723*x9728))+((r00*x9721)));
evalcond[4]=(((r01*x9723))+(((-1.0)*r02*sj3*x9729))+(((-1.0)*r01*x9721*x9728))+((r00*x9722))+((r00*x9732)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r20*x9723*x9728))+x9725+((r20*x9721))+((r21*x9726))+((r21*x9719*x9722))+((r22*x9731)));
evalcond[6]=(((r11*x9726))+((r12*x9731))+((r11*x9719*x9722))+x9720+(((-1.0)*r10*x9723*x9728))+(((-1.0)*x9727))+((r10*x9721)));
evalcond[7]=(((r20*x9732))+x9720+((r20*x9722))+(((-1.0)*x9727))+(((-1.0)*r22*sj3*x9729))+(((-1.0)*r21*x9721*x9728))+((r21*x9723)));
evalcond[8]=(((r11*x9723))+(((-1.0)*r12*sj3*x9729))+(((-1.0)*r11*x9721*x9728))+(((-1.0)*sj1*x9724))+((r10*x9722))+(((-1.0)*x9725))+((r10*x9732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9733=gconst2*gconst2;
IkReal x9734=gconst1*gconst1;
IkReal x9735=(gconst1*r00);
IkReal x9736=(r11*sj3);
IkReal x9737=((1.0)*gconst2);
IkReal x9738=(cj3*r12);
IkReal x9739=(cj3*r11);
IkReal x9740=(gconst2*r01);
IkReal x9741=(cj3*r10);
IkReal x9742=(r10*sj3);
CheckValue<IkReal> x9743 = IKatan2WithCheck(IkReal((((x9735*x9738))+((x9738*x9740)))),IkReal((((r00*x9734*x9739))+(((-1.0)*r01*x9733*x9741))+((gconst1*x9739*x9740))+(((-1.0)*x9735*x9737*x9741)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9743.valid){
continue;
}
CheckValue<IkReal> x9744=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst1*r01*x9737*x9742))+(((-1.0)*x9735*x9736*x9737))+((r00*x9733*x9742))+((r01*x9734*x9736)))),-1);
if(!x9744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9743.value)+(((1.5707963267949)*(x9744.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9745=IKsin(j4);
IkReal x9746=IKcos(j4);
IkReal x9747=(sj1*sj2);
IkReal x9748=(gconst1*sj3);
IkReal x9749=(cj3*gconst1);
IkReal x9750=(cj3*gconst2);
IkReal x9751=((1.0)*cj2);
IkReal x9752=(cj1*sj2);
IkReal x9753=(gconst2*sj3);
IkReal x9754=(cj1*x9751);
IkReal x9755=((1.0)*x9746);
IkReal x9756=((1.0)*x9745);
IkReal x9757=(gconst1*x9745);
IkReal x9758=(cj3*x9745);
IkReal x9759=(x9746*x9753);
evalcond[0]=(((r21*x9757))+(((-1.0)*r22*x9755))+(((-1.0)*gconst2*r20*x9756)));
evalcond[1]=(((r11*x9757))+(((-1.0)*gconst2*r10*x9756))+(((-1.0)*r12*x9755)));
evalcond[2]=((-1.0)+((r01*x9757))+(((-1.0)*r02*x9755))+(((-1.0)*gconst2*r00*x9756)));
evalcond[3]=(((r01*x9753))+((r01*x9746*x9749))+(((-1.0)*r00*x9750*x9755))+((r02*x9758))+((r00*x9748)));
evalcond[4]=(((r01*x9750))+((r00*x9759))+(((-1.0)*r01*x9748*x9755))+((r00*x9749))+(((-1.0)*r02*sj3*x9756)));
evalcond[5]=(((cj2*sj1))+((r21*x9746*x9749))+(((-1.0)*r20*x9750*x9755))+((r22*x9758))+((r21*x9753))+x9752+((r20*x9748)));
evalcond[6]=(((r11*x9753))+((r11*x9746*x9749))+((r10*x9748))+(((-1.0)*r10*x9750*x9755))+x9747+((r12*x9758))+(((-1.0)*x9754)));
evalcond[7]=((((-1.0)*r21*x9748*x9755))+((r21*x9750))+x9747+((r20*x9749))+(((-1.0)*r22*sj3*x9756))+((r20*x9759))+(((-1.0)*x9754)));
evalcond[8]=(((r10*x9759))+((r11*x9750))+(((-1.0)*x9752))+(((-1.0)*r11*x9748*x9755))+((r10*x9749))+(((-1.0)*r12*sj3*x9756))+(((-1.0)*sj1*x9751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9760=((1.0)*gconst2);
CheckValue<IkReal> x9761=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9760)))),-1);
if(!x9761.valid){
continue;
}
CheckValue<IkReal> x9762 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9760)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9762.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9761.value)))+(x9762.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9763=IKsin(j4);
IkReal x9764=IKcos(j4);
IkReal x9765=(sj1*sj2);
IkReal x9766=(gconst1*sj3);
IkReal x9767=(cj3*gconst1);
IkReal x9768=(cj3*gconst2);
IkReal x9769=((1.0)*cj2);
IkReal x9770=(cj1*sj2);
IkReal x9771=(gconst2*sj3);
IkReal x9772=(cj1*x9769);
IkReal x9773=((1.0)*x9764);
IkReal x9774=((1.0)*x9763);
IkReal x9775=(gconst1*x9763);
IkReal x9776=(cj3*x9763);
IkReal x9777=(x9764*x9771);
evalcond[0]=((((-1.0)*r22*x9773))+(((-1.0)*gconst2*r20*x9774))+((r21*x9775)));
evalcond[1]=((((-1.0)*gconst2*r10*x9774))+(((-1.0)*r12*x9773))+((r11*x9775)));
evalcond[2]=((-1.0)+((r01*x9775))+(((-1.0)*gconst2*r00*x9774))+(((-1.0)*r02*x9773)));
evalcond[3]=(((r00*x9766))+((r01*x9771))+((r01*x9764*x9767))+((r02*x9776))+(((-1.0)*r00*x9768*x9773)));
evalcond[4]=(((r00*x9767))+((r00*x9777))+((r01*x9768))+(((-1.0)*r01*x9766*x9773))+(((-1.0)*r02*sj3*x9774)));
evalcond[5]=(((cj2*sj1))+((r22*x9776))+(((-1.0)*r20*x9768*x9773))+x9770+((r21*x9764*x9767))+((r21*x9771))+((r20*x9766)));
evalcond[6]=(((r12*x9776))+((r10*x9766))+x9765+((r11*x9764*x9767))+(((-1.0)*r10*x9768*x9773))+(((-1.0)*x9772))+((r11*x9771)));
evalcond[7]=((((-1.0)*r21*x9766*x9773))+x9765+((r21*x9768))+((r20*x9777))+((r20*x9767))+(((-1.0)*x9772))+(((-1.0)*r22*sj3*x9774)));
evalcond[8]=(((r10*x9767))+((r10*x9777))+(((-1.0)*x9770))+(((-1.0)*r12*sj3*x9774))+(((-1.0)*sj1*x9769))+((r11*x9768))+(((-1.0)*r11*x9766*x9773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9778=((-1.0)*r20);
IkReal x9779=x8864;
CheckValue<IkReal> x9781 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9778),IKFAST_ATAN2_MAGTHRESH);
if(!x9781.valid){
continue;
}
IkReal x9780=((-1.0)*(x9781.value));
sj5=gconst1;
cj5=gconst2;
j5=x9780;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9780;
IkReal gconst1=(r21*x9779);
IkReal gconst2=(x9778*x9779);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9782=((-1.0)*r20);
IkReal x9783=x8864;
CheckValue<IkReal> x9785 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9782),IKFAST_ATAN2_MAGTHRESH);
if(!x9785.valid){
continue;
}
IkReal x9784=((-1.0)*(x9785.value));
sj5=gconst1;
cj5=gconst2;
j5=x9784;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9784;
IkReal gconst1=(r21*x9783);
IkReal gconst2=(x9782*x9783);
CheckValue<IkReal> x9793=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9793.valid){
continue;
}
IkReal x9786=x9793.value;
IkReal x9787=(sj3*x9786);
IkReal x9788=(r11*x9787);
IkReal x9789=(r00*x9787);
IkReal x9790=(r01*x9787);
IkReal x9791=(r10*x9787);
IkReal x9792=(r20*r21*x9787);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x9789*(r20*r20)))+((r10*r20*r21*x9790))+((r01*x9788*(r21*r21)))+((r00*r20*r21*x9788))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9794=gconst1*gconst1;
IkReal x9795=gconst2*gconst2;
IkReal x9796=((1.0)*cj3);
IkReal x9797=(gconst2*r10);
IkReal x9798=(r01*sj3);
IkReal x9799=(gconst1*r00*sj3);
IkReal x9800=(gconst1*gconst2*r11);
IkReal x9801=(r10*x9795);
IkReal x9802=(r11*x9794);
CheckValue<IkReal> x9803=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9796*x9801))+(((-1.0)*r01*x9796*x9802))+(((-1.0)*r02*r12*x9796))+((cj3*gconst1*r01*x9797))+((cj3*r00*x9800)))),-1);
if(!x9803.valid){
continue;
}
CheckValue<IkReal> x9804 = IKatan2WithCheck(IkReal((((r12*x9799))+((gconst2*r12*x9798)))),IkReal((((x9798*x9800))+(((-1.0)*x9797*x9799))+(((-1.0)*x9798*x9801))+((r00*sj3*x9802)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9803.value)))+(x9804.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9805=IKsin(j4);
IkReal x9806=IKcos(j4);
IkReal x9807=(cj2*sj1);
IkReal x9808=(cj1*sj2);
IkReal x9809=(gconst1*sj3);
IkReal x9810=(cj3*gconst1);
IkReal x9811=(sj1*sj2);
IkReal x9812=(cj3*gconst2);
IkReal x9813=(cj1*cj2);
IkReal x9814=(gconst2*sj3);
IkReal x9815=((1.0)*x9806);
IkReal x9816=((1.0)*x9805);
IkReal x9817=(gconst1*x9805);
IkReal x9818=(cj3*x9805);
IkReal x9819=(x9808+x9807);
IkReal x9820=(x9806*x9814);
evalcond[0]=(((r21*x9817))+(((-1.0)*r22*x9815))+(((-1.0)*gconst2*r20*x9816)));
evalcond[1]=((((-1.0)*gconst2*r10*x9816))+((r11*x9817))+(((-1.0)*r12*x9815)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x9816))+(((-1.0)*r02*x9815))+((r01*x9817)));
evalcond[3]=((((-1.0)*r00*x9812*x9815))+((r00*x9809))+((r01*x9806*x9810))+((r02*x9818))+((r01*x9814)));
evalcond[4]=(((r00*x9820))+(((-1.0)*r01*x9809*x9815))+(((-1.0)*r02*sj3*x9816))+((r00*x9810))+((r01*x9812)));
evalcond[5]=(((r21*x9814))+((r21*x9806*x9810))+((r22*x9818))+((r20*x9809))+x9819+(((-1.0)*r20*x9812*x9815)));
evalcond[6]=(((r10*x9809))+(((-1.0)*x9811))+((r12*x9818))+((r11*x9814))+((r11*x9806*x9810))+(((-1.0)*r10*x9812*x9815))+x9813);
evalcond[7]=(((r11*x9812))+(((-1.0)*r12*sj3*x9816))+x9819+((r10*x9820))+(((-1.0)*r11*x9809*x9815))+((r10*x9810)));
evalcond[8]=(((r20*x9820))+((r21*x9812))+(((-1.0)*x9813))+(((-1.0)*r22*sj3*x9816))+(((-1.0)*r21*x9809*x9815))+x9811+((r20*x9810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9821=gconst2*gconst2;
IkReal x9822=gconst1*gconst1;
IkReal x9823=(gconst1*r00);
IkReal x9824=(r11*sj3);
IkReal x9825=((1.0)*gconst2);
IkReal x9826=(cj3*r12);
IkReal x9827=(cj3*r11);
IkReal x9828=(gconst2*r01);
IkReal x9829=(cj3*r10);
IkReal x9830=(r10*sj3);
CheckValue<IkReal> x9831 = IKatan2WithCheck(IkReal((((x9826*x9828))+((x9823*x9826)))),IkReal(((((-1.0)*r01*x9821*x9829))+((gconst1*x9827*x9828))+(((-1.0)*x9823*x9825*x9829))+((r00*x9822*x9827)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9831.valid){
continue;
}
CheckValue<IkReal> x9832=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r01*x9822*x9824))+(((-1.0)*gconst1*r01*x9825*x9830))+(((-1.0)*x9823*x9824*x9825))+((r00*x9821*x9830)))),-1);
if(!x9832.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9831.value)+(((1.5707963267949)*(x9832.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9833=IKsin(j4);
IkReal x9834=IKcos(j4);
IkReal x9835=(cj2*sj1);
IkReal x9836=(cj1*sj2);
IkReal x9837=(gconst1*sj3);
IkReal x9838=(cj3*gconst1);
IkReal x9839=(sj1*sj2);
IkReal x9840=(cj3*gconst2);
IkReal x9841=(cj1*cj2);
IkReal x9842=(gconst2*sj3);
IkReal x9843=((1.0)*x9834);
IkReal x9844=((1.0)*x9833);
IkReal x9845=(gconst1*x9833);
IkReal x9846=(cj3*x9833);
IkReal x9847=(x9836+x9835);
IkReal x9848=(x9834*x9842);
evalcond[0]=((((-1.0)*gconst2*r20*x9844))+(((-1.0)*r22*x9843))+((r21*x9845)));
evalcond[1]=(((r11*x9845))+(((-1.0)*r12*x9843))+(((-1.0)*gconst2*r10*x9844)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x9844))+(((-1.0)*r02*x9843))+((r01*x9845)));
evalcond[3]=(((r00*x9837))+((r02*x9846))+((r01*x9842))+(((-1.0)*r00*x9840*x9843))+((r01*x9834*x9838)));
evalcond[4]=(((r00*x9838))+(((-1.0)*r02*sj3*x9844))+(((-1.0)*r01*x9837*x9843))+((r01*x9840))+((r00*x9848)));
evalcond[5]=((((-1.0)*r20*x9840*x9843))+((r20*x9837))+((r21*x9834*x9838))+x9847+((r22*x9846))+((r21*x9842)));
evalcond[6]=(((r11*x9842))+((r10*x9837))+((r11*x9834*x9838))+(((-1.0)*x9839))+(((-1.0)*r10*x9840*x9843))+((r12*x9846))+x9841);
evalcond[7]=(((r11*x9840))+(((-1.0)*r12*sj3*x9844))+((r10*x9848))+((r10*x9838))+(((-1.0)*r11*x9837*x9843))+x9847);
evalcond[8]=((((-1.0)*x9841))+(((-1.0)*r21*x9837*x9843))+((r20*x9848))+(((-1.0)*r22*sj3*x9844))+((r20*x9838))+x9839+((r21*x9840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9849 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9849.valid){
continue;
}
CheckValue<IkReal> x9850=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9850.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9849.value)+(((1.5707963267949)*(x9850.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9851=IKsin(j4);
IkReal x9852=IKcos(j4);
IkReal x9853=(cj2*sj1);
IkReal x9854=(cj1*sj2);
IkReal x9855=(gconst1*sj3);
IkReal x9856=(cj3*gconst1);
IkReal x9857=(sj1*sj2);
IkReal x9858=(cj3*gconst2);
IkReal x9859=(cj1*cj2);
IkReal x9860=(gconst2*sj3);
IkReal x9861=((1.0)*x9852);
IkReal x9862=((1.0)*x9851);
IkReal x9863=(gconst1*x9851);
IkReal x9864=(cj3*x9851);
IkReal x9865=(x9853+x9854);
IkReal x9866=(x9852*x9860);
evalcond[0]=((((-1.0)*r22*x9861))+((r21*x9863))+(((-1.0)*gconst2*r20*x9862)));
evalcond[1]=((((-1.0)*r12*x9861))+((r11*x9863))+(((-1.0)*gconst2*r10*x9862)));
evalcond[2]=((1.0)+((r01*x9863))+(((-1.0)*gconst2*r00*x9862))+(((-1.0)*r02*x9861)));
evalcond[3]=(((r01*x9860))+((r02*x9864))+((r00*x9855))+(((-1.0)*r00*x9858*x9861))+((r01*x9852*x9856)));
evalcond[4]=(((r00*x9866))+((r00*x9856))+((r01*x9858))+(((-1.0)*r01*x9855*x9861))+(((-1.0)*r02*sj3*x9862)));
evalcond[5]=(((r22*x9864))+((r20*x9855))+(((-1.0)*r20*x9858*x9861))+((r21*x9860))+((r21*x9852*x9856))+x9865);
evalcond[6]=(((r10*x9855))+(((-1.0)*x9857))+((r11*x9860))+((r12*x9864))+((r11*x9852*x9856))+x9859+(((-1.0)*r10*x9858*x9861)));
evalcond[7]=(((r10*x9856))+((r11*x9858))+(((-1.0)*r11*x9855*x9861))+((r10*x9866))+(((-1.0)*r12*sj3*x9862))+x9865);
evalcond[8]=(((r21*x9858))+(((-1.0)*x9859))+(((-1.0)*r21*x9855*x9861))+((r20*x9856))+((r20*x9866))+x9857+(((-1.0)*r22*sj3*x9862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9867=((-1.0)*r20);
IkReal x9868=((-1.0)*px);
CheckValue<IkReal> x9870 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9867),IKFAST_ATAN2_MAGTHRESH);
if(!x9870.valid){
continue;
}
IkReal x9869=((-1.0)*(x9870.value));
sj5=gconst1;
cj5=gconst2;
j5=x9869;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9868);
rxp1_1=(px*r21);
rxp1_2=(r11*x9868);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9869;
IkReal gconst1=r21;
IkReal gconst2=x9867;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9871=((-1.0)*r20);
IkReal x9872=((-1.0)*px);
CheckValue<IkReal> x9874 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9871),IKFAST_ATAN2_MAGTHRESH);
if(!x9874.valid){
continue;
}
IkReal x9873=((-1.0)*(x9874.value));
sj5=gconst1;
cj5=gconst2;
j5=x9873;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9872);
rxp1_1=(px*r21);
rxp1_2=(r11*x9872);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9873;
IkReal gconst1=r21;
IkReal gconst2=x9871;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=(((cj3*(r21*r21)))+cj3+(((-1.0)*cj3*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9875=((-1.0)*r20);
IkReal x9876=((-1.0)*px);
CheckValue<IkReal> x9878 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9875),IKFAST_ATAN2_MAGTHRESH);
if(!x9878.valid){
continue;
}
IkReal x9877=((-1.0)*(x9878.value));
sj5=gconst1;
cj5=gconst2;
j5=x9877;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9876);
rxp1_1=(px*r21);
rxp1_2=(r11*x9876);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9877;
IkReal gconst1=r21;
IkReal gconst2=x9875;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9879=((-1.0)*r20);
IkReal x9880=((-1.0)*px);
CheckValue<IkReal> x9882 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9879),IKFAST_ATAN2_MAGTHRESH);
if(!x9882.valid){
continue;
}
IkReal x9881=((-1.0)*(x9882.value));
sj5=gconst1;
cj5=gconst2;
j5=x9881;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9880);
rxp1_1=(px*r21);
rxp1_2=(r11*x9880);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9881;
IkReal gconst1=r21;
IkReal gconst2=x9879;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9883=((-1.0)*r20);
IkReal x9884=((-1.0)*px);
CheckValue<IkReal> x9886 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9883),IKFAST_ATAN2_MAGTHRESH);
if(!x9886.valid){
continue;
}
IkReal x9885=((-1.0)*(x9886.value));
sj5=gconst1;
cj5=gconst2;
j5=x9885;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9884);
rxp1_1=(px*r21);
rxp1_2=(r11*x9884);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9885;
IkReal gconst1=r21;
IkReal gconst2=x9883;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9887=((-1.0)*r20);
IkReal x9888=((-1.0)*px);
CheckValue<IkReal> x9890 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9887),IKFAST_ATAN2_MAGTHRESH);
if(!x9890.valid){
continue;
}
IkReal x9889=((-1.0)*(x9890.value));
sj5=gconst1;
cj5=gconst2;
j5=x9889;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9888);
rxp1_1=(px*r21);
rxp1_2=(r11*x9888);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9889;
IkReal gconst1=r21;
IkReal gconst2=x9887;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9893=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9893.valid){
continue;
}
IkReal x9891=x9893.value;
IkReal x9892=(sj0*x9891);
cj4array[0]=(((cj1*sj2*x9892))+((cj2*sj1*x9892)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9894=IKsin(j4);
IkReal x9895=IKcos(j4);
IkReal x9896=(gconst1*x9894);
IkReal x9897=((1.0)*x9895);
IkReal x9898=((1.0)*gconst2*x9894);
evalcond[0]=((-1.0)*r02*x9894);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9897)));
evalcond[2]=((((-1.0)*r20*x9898))+((r21*x9896)));
evalcond[3]=(((r11*x9896))+(((-1.0)*r10*x9898)));
evalcond[4]=((((-1.0)*gconst1*r21*x9897))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst2*r20*x9895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9900=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9900.valid){
continue;
}
IkReal x9899=x9900.value;
cj4array[0]=((((-1.0)*sj1*sj2*x9899))+((cj1*cj2*x9899)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9901=IKsin(j4);
IkReal x9902=IKcos(j4);
IkReal x9903=(gconst2*r10);
IkReal x9904=((1.0)*sj0);
IkReal x9905=((1.0)*x9901);
IkReal x9906=(gconst1*x9901);
IkReal x9907=((1.0)*x9902);
evalcond[0]=((-1.0)*r02*x9901);
evalcond[1]=((((-1.0)*x9904))+(((-1.0)*r02*x9907)));
evalcond[2]=((((-1.0)*gconst2*r20*x9905))+((r21*x9906)));
evalcond[3]=(((r11*x9906))+(((-1.0)*x9903*x9905)));
evalcond[4]=(((x9902*x9903))+(((-1.0)*cj2*sj1*x9904))+(((-1.0)*cj1*sj2*x9904))+(((-1.0)*gconst1*r11*x9907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9908=IKPowWithIntegerCheck(r02,-1);
if(!x9908.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9908.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9909=IKsin(j4);
IkReal x9910=IKcos(j4);
IkReal x9911=(gconst2*r10);
IkReal x9912=((1.0)*sj0);
IkReal x9913=(gconst1*r11);
IkReal x9914=(gconst1*r21);
IkReal x9915=(gconst2*r20);
IkReal x9916=((1.0)*x9909);
IkReal x9917=((1.0)*x9910);
evalcond[0]=((-1.0)*r02*x9909);
evalcond[1]=((((-1.0)*x9915*x9916))+((x9909*x9914)));
evalcond[2]=(((x9909*x9913))+(((-1.0)*x9911*x9916)));
evalcond[3]=(((x9910*x9915))+(((-1.0)*x9914*x9917))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj2*sj1*x9912))+(((-1.0)*cj1*sj2*x9912))+((x9910*x9911))+(((-1.0)*x9913*x9917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9918=((-1.0)*r20);
IkReal x9919=((-1.0)*px);
CheckValue<IkReal> x9921 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9918),IKFAST_ATAN2_MAGTHRESH);
if(!x9921.valid){
continue;
}
IkReal x9920=((-1.0)*(x9921.value));
sj5=gconst1;
cj5=gconst2;
j5=x9920;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9919);
rxp1_1=(px*r21);
rxp1_2=(r11*x9919);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9920;
IkReal gconst1=r21;
IkReal gconst2=x9918;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9922=((-1.0)*r20);
IkReal x9923=((-1.0)*px);
CheckValue<IkReal> x9925 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9922),IKFAST_ATAN2_MAGTHRESH);
if(!x9925.valid){
continue;
}
IkReal x9924=((-1.0)*(x9925.value));
sj5=gconst1;
cj5=gconst2;
j5=x9924;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9923);
rxp1_1=(px*r21);
rxp1_2=(r11*x9923);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9924;
IkReal gconst1=r21;
IkReal gconst2=x9922;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9926=((-1.0)*r20);
IkReal x9927=((-1.0)*px);
CheckValue<IkReal> x9929 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9926),IKFAST_ATAN2_MAGTHRESH);
if(!x9929.valid){
continue;
}
IkReal x9928=((-1.0)*(x9929.value));
sj5=gconst1;
cj5=gconst2;
j5=x9928;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9927);
rxp1_1=(px*r21);
rxp1_2=(r11*x9927);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9928;
IkReal gconst1=r21;
IkReal gconst2=x9926;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9932=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9932.valid){
continue;
}
IkReal x9930=x9932.value;
IkReal x9931=(sj0*x9930);
cj4array[0]=(((cj1*sj2*x9931))+((cj2*sj1*x9931)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9933=IKsin(j4);
IkReal x9934=IKcos(j4);
IkReal x9935=((1.0)*gconst2);
IkReal x9936=(gconst1*r21);
evalcond[0]=(r02*x9933);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9934)));
evalcond[2]=((((-1.0)*r20*x9933*x9935))+((x9933*x9936)));
evalcond[3]=(((gconst1*r11*x9933))+(((-1.0)*r10*x9933*x9935)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x9934*x9935))+((x9934*x9936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9938=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9938.valid){
continue;
}
IkReal x9937=x9938.value;
cj4array[0]=(((cj1*cj2*x9937))+(((-1.0)*sj1*sj2*x9937)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9939=IKsin(j4);
IkReal x9940=IKcos(j4);
IkReal x9941=((1.0)*sj0);
IkReal x9942=(gconst1*x9939);
IkReal x9943=((1.0)*x9940);
IkReal x9944=((1.0)*gconst2*x9939);
evalcond[0]=(r02*x9939);
evalcond[1]=((((-1.0)*x9941))+(((-1.0)*r02*x9943)));
evalcond[2]=((((-1.0)*r20*x9944))+((r21*x9942)));
evalcond[3]=((((-1.0)*r10*x9944))+((r11*x9942)));
evalcond[4]=((((-1.0)*gconst2*r10*x9943))+(((-1.0)*cj2*sj1*x9941))+(((-1.0)*cj1*sj2*x9941))+((gconst1*r11*x9940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9945=IKPowWithIntegerCheck(r02,-1);
if(!x9945.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9945.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9946=IKsin(j4);
IkReal x9947=IKcos(j4);
IkReal x9948=(gconst1*r21);
IkReal x9949=((1.0)*sj0);
IkReal x9950=(gconst1*r11);
IkReal x9951=((1.0)*gconst2*r10);
IkReal x9952=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9946);
evalcond[1]=((((-1.0)*x9946*x9952))+((x9946*x9948)));
evalcond[2]=((((-1.0)*x9946*x9951))+((x9946*x9950)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x9947*x9948))+(((-1.0)*x9947*x9952)));
evalcond[4]=((((-1.0)*cj2*sj1*x9949))+(((-1.0)*cj1*sj2*x9949))+((x9947*x9950))+(((-1.0)*x9947*x9951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9954=IKPowWithIntegerCheck(r02,-1);
if(!x9954.valid){
continue;
}
IkReal x9953=x9954.value;
CheckValue<IkReal> x9955=IKPowWithIntegerCheck(cj3,-1);
if(!x9955.valid){
continue;
}
if( IKabs((x9953*(x9955.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x9953)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x9953*(x9955.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x9953))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x9953*(x9955.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x9953));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9956=IKsin(j4);
IkReal x9957=IKcos(j4);
IkReal x9958=(gconst2*r10);
IkReal x9959=(gconst1*r11);
IkReal x9960=(sj1*sj2);
IkReal x9961=(gconst2*r20);
IkReal x9962=(cj2*sj1);
IkReal x9963=((1.0)*sj0);
IkReal x9964=(gconst1*r20);
IkReal x9965=(gconst2*r11);
IkReal x9966=(gconst1*r21);
IkReal x9967=((1.0)*cj0);
IkReal x9968=(gconst1*r10);
IkReal x9969=(cj1*sj2);
IkReal x9970=(gconst2*r21);
IkReal x9971=(sj3*x9957);
IkReal x9972=((1.0)*cj1*cj2);
IkReal x9973=(cj3*x9957);
IkReal x9974=(r02*x9956);
IkReal x9975=((1.0)*x9956);
evalcond[0]=((((-1.0)*r02*x9957))+(((-1.0)*x9963)));
evalcond[1]=((((-1.0)*x9961*x9975))+((x9956*x9966)));
evalcond[2]=(cj0+(((-1.0)*x9958*x9975))+((x9956*x9959)));
evalcond[3]=(((cj3*x9974))+((cj0*x9960))+(((-1.0)*cj1*cj2*x9967)));
evalcond[4]=((((-1.0)*x9962*x9967))+(((-1.0)*x9967*x9969))+(((-1.0)*sj3*x9974)));
evalcond[5]=((((-1.0)*x9961*x9973))+((sj3*x9970))+((x9966*x9973))+x9962+x9969+((sj3*x9964)));
evalcond[6]=(((x9961*x9971))+((cj3*x9970))+(((-1.0)*x9966*x9971))+x9960+(((-1.0)*x9972))+((cj3*x9964)));
evalcond[7]=(((sj0*x9960))+(((-1.0)*x9958*x9973))+(((-1.0)*cj1*cj2*x9963))+((x9959*x9973))+((sj3*x9968))+((sj3*x9965)));
evalcond[8]=((((-1.0)*x9959*x9971))+(((-1.0)*x9962*x9963))+(((-1.0)*x9963*x9969))+((x9958*x9971))+((cj3*x9965))+((cj3*x9968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9976=((1.0)*sj3);
IkReal x9977=((1.0)*gconst2);
CheckValue<IkReal> x9978=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*r10*x9977))),-1);
if(!x9978.valid){
continue;
}
CheckValue<IkReal> x9979=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*r20*x9977))),-1);
if(!x9979.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x9978.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9979.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x9976))+(((-1.0)*gconst2*r21*x9976)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x9978.value)))+IKsqr(((x9979.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x9976))+(((-1.0)*gconst2*r21*x9976))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x9978.value)), ((x9979.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x9976))+(((-1.0)*gconst2*r21*x9976))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9980=IKsin(j4);
IkReal x9981=IKcos(j4);
IkReal x9982=(gconst2*r10);
IkReal x9983=(gconst1*r11);
IkReal x9984=(sj1*sj2);
IkReal x9985=(gconst2*r20);
IkReal x9986=(cj2*sj1);
IkReal x9987=((1.0)*sj0);
IkReal x9988=(gconst1*r20);
IkReal x9989=(gconst2*r11);
IkReal x9990=(gconst1*r21);
IkReal x9991=((1.0)*cj0);
IkReal x9992=(gconst1*r10);
IkReal x9993=(cj1*sj2);
IkReal x9994=(gconst2*r21);
IkReal x9995=(sj3*x9981);
IkReal x9996=((1.0)*cj1*cj2);
IkReal x9997=(cj3*x9981);
IkReal x9998=(r02*x9980);
IkReal x9999=((1.0)*x9980);
evalcond[0]=((((-1.0)*r02*x9981))+(((-1.0)*x9987)));
evalcond[1]=(((x9980*x9990))+(((-1.0)*x9985*x9999)));
evalcond[2]=(cj0+(((-1.0)*x9982*x9999))+((x9980*x9983)));
evalcond[3]=(((cj3*x9998))+((cj0*x9984))+(((-1.0)*cj1*cj2*x9991)));
evalcond[4]=((((-1.0)*x9991*x9993))+(((-1.0)*sj3*x9998))+(((-1.0)*x9986*x9991)));
evalcond[5]=((((-1.0)*x9985*x9997))+((x9990*x9997))+((sj3*x9988))+((sj3*x9994))+x9986+x9993);
evalcond[6]=(((cj3*x9988))+((cj3*x9994))+((x9985*x9995))+(((-1.0)*x9990*x9995))+x9984+(((-1.0)*x9996)));
evalcond[7]=((((-1.0)*x9982*x9997))+((x9983*x9997))+((sj0*x9984))+((sj3*x9989))+((sj3*x9992))+(((-1.0)*cj1*cj2*x9987)));
evalcond[8]=(((cj3*x9989))+((cj3*x9992))+(((-1.0)*x9983*x9995))+((x9982*x9995))+(((-1.0)*x9986*x9987))+(((-1.0)*x9987*x9993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10000=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x10000.valid){
continue;
}
CheckValue<IkReal> x10001=IKPowWithIntegerCheck(r02,-1);
if(!x10001.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10000.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x10001.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10000.value)))+IKsqr(((-1.0)*sj0*(x10001.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10000.value)), ((-1.0)*sj0*(x10001.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10002=IKsin(j4);
IkReal x10003=IKcos(j4);
IkReal x10004=(gconst2*r10);
IkReal x10005=(gconst1*r11);
IkReal x10006=(sj1*sj2);
IkReal x10007=(gconst2*r20);
IkReal x10008=(cj2*sj1);
IkReal x10009=((1.0)*sj0);
IkReal x10010=(gconst1*r20);
IkReal x10011=(gconst2*r11);
IkReal x10012=(gconst1*r21);
IkReal x10013=((1.0)*cj0);
IkReal x10014=(gconst1*r10);
IkReal x10015=(cj1*sj2);
IkReal x10016=(gconst2*r21);
IkReal x10017=(sj3*x10003);
IkReal x10018=((1.0)*cj1*cj2);
IkReal x10019=(cj3*x10003);
IkReal x10020=(r02*x10002);
IkReal x10021=((1.0)*x10002);
evalcond[0]=((((-1.0)*r02*x10003))+(((-1.0)*x10009)));
evalcond[1]=((((-1.0)*x10007*x10021))+((x10002*x10012)));
evalcond[2]=(cj0+(((-1.0)*x10004*x10021))+((x10002*x10005)));
evalcond[3]=(((cj0*x10006))+(((-1.0)*cj1*cj2*x10013))+((cj3*x10020)));
evalcond[4]=((((-1.0)*x10013*x10015))+(((-1.0)*sj3*x10020))+(((-1.0)*x10008*x10013)));
evalcond[5]=(((x10012*x10019))+(((-1.0)*x10007*x10019))+x10015+x10008+((sj3*x10016))+((sj3*x10010)));
evalcond[6]=(((x10007*x10017))+((cj3*x10010))+((cj3*x10016))+(((-1.0)*x10012*x10017))+x10006+(((-1.0)*x10018)));
evalcond[7]=((((-1.0)*x10004*x10019))+(((-1.0)*cj1*cj2*x10009))+((x10005*x10019))+((sj3*x10011))+((sj3*x10014))+((sj0*x10006)));
evalcond[8]=((((-1.0)*x10008*x10009))+(((-1.0)*x10009*x10015))+((x10004*x10017))+((cj3*x10011))+((cj3*x10014))+(((-1.0)*x10005*x10017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10022=gconst1*gconst1;
IkReal x10023=r21*r21;
IkReal x10024=gconst2*gconst2;
IkReal x10025=r20*r20;
IkReal x10026=(gconst2*r20);
IkReal x10027=(cj1*cj2);
IkReal x10028=(sj1*sj2);
IkReal x10029=(gconst1*r21);
IkReal x10030=(cj3*gconst2);
IkReal x10031=(cj3*r20);
CheckValue<IkReal> x10032=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x10022*x10023))+(((-2.0)*sj3*x10026*x10029))+((sj3*x10024*x10025)))),-1);
if(!x10032.valid){
continue;
}
CheckValue<IkReal> x10033 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x10027))+((gconst1*r22*x10031))+((r21*r22*x10030))+((r22*x10028)))),IkReal(((((-1.0)*x10027*x10029))+(((-1.0)*x10026*x10028))+(((-1.0)*r21*x10024*x10031))+((x10026*x10027))+((x10028*x10029))+((gconst1*x10023*x10030))+(((-1.0)*gconst1*x10025*x10030))+((r21*x10022*x10031)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10033.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10032.value)))+(x10033.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10034=IKsin(j4);
IkReal x10035=IKcos(j4);
IkReal x10036=(cj3*gconst1);
IkReal x10037=(gconst1*r01);
IkReal x10038=(gconst1*r11);
IkReal x10039=(sj1*sj2);
IkReal x10040=(cj3*gconst2);
IkReal x10041=(gconst1*sj3);
IkReal x10042=(gconst2*sj3);
IkReal x10043=((1.0)*sj0);
IkReal x10044=(cj1*sj2);
IkReal x10045=((1.0)*x10035);
IkReal x10046=((1.0)*x10034);
IkReal x10047=((1.0)*cj1*cj2);
IkReal x10048=(cj3*x10034);
IkReal x10049=((1.0)*cj2*sj1);
IkReal x10050=(x10035*x10042);
evalcond[0]=(((gconst1*r21*x10034))+(((-1.0)*r22*x10045))+(((-1.0)*gconst2*r20*x10046)));
evalcond[1]=((((-1.0)*gconst2*r10*x10046))+((x10034*x10038))+(((-1.0)*r12*x10045))+cj0);
evalcond[2]=((((-1.0)*r02*x10045))+((x10034*x10037))+(((-1.0)*gconst2*r00*x10046))+(((-1.0)*x10043)));
evalcond[3]=(((cj2*sj1))+((r21*x10042))+x10044+((r20*x10041))+(((-1.0)*r20*x10040*x10045))+((r22*x10048))+((r21*x10035*x10036)));
evalcond[4]=((((-1.0)*r21*x10041*x10045))+((r20*x10050))+((r21*x10040))+(((-1.0)*r22*sj3*x10046))+((r20*x10036))+x10039+(((-1.0)*x10047)));
evalcond[5]=(((cj0*x10039))+(((-1.0)*cj0*x10047))+(((-1.0)*r00*x10040*x10045))+((r00*x10041))+((r01*x10042))+((r01*x10035*x10036))+((r02*x10048)));
evalcond[6]=(((r10*x10041))+((sj0*x10039))+(((-1.0)*cj1*cj2*x10043))+((r12*x10048))+((r11*x10042))+((r11*x10035*x10036))+(((-1.0)*r10*x10040*x10045)));
evalcond[7]=((((-1.0)*r02*sj3*x10046))+(((-1.0)*cj0*x10049))+((r00*x10050))+((r01*x10040))+(((-1.0)*sj3*x10037*x10045))+((r00*x10036))+(((-1.0)*cj0*x10044)));
evalcond[8]=(((r10*x10050))+(((-1.0)*sj3*x10038*x10045))+((r10*x10036))+(((-1.0)*cj2*sj1*x10043))+(((-1.0)*r12*sj3*x10046))+(((-1.0)*x10043*x10044))+((r11*x10040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10051=((1.0)*gconst2);
CheckValue<IkReal> x10052 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x10051))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10052.valid){
continue;
}
CheckValue<IkReal> x10053=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x10051)))),-1);
if(!x10053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10052.value)+(((1.5707963267949)*(x10053.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10054=IKsin(j4);
IkReal x10055=IKcos(j4);
IkReal x10056=(cj3*gconst1);
IkReal x10057=(gconst1*r01);
IkReal x10058=(gconst1*r11);
IkReal x10059=(sj1*sj2);
IkReal x10060=(cj3*gconst2);
IkReal x10061=(gconst1*sj3);
IkReal x10062=(gconst2*sj3);
IkReal x10063=((1.0)*sj0);
IkReal x10064=(cj1*sj2);
IkReal x10065=((1.0)*x10055);
IkReal x10066=((1.0)*x10054);
IkReal x10067=((1.0)*cj1*cj2);
IkReal x10068=(cj3*x10054);
IkReal x10069=((1.0)*cj2*sj1);
IkReal x10070=(x10055*x10062);
evalcond[0]=(((gconst1*r21*x10054))+(((-1.0)*r22*x10065))+(((-1.0)*gconst2*r20*x10066)));
evalcond[1]=(cj0+((x10054*x10058))+(((-1.0)*gconst2*r10*x10066))+(((-1.0)*r12*x10065)));
evalcond[2]=((((-1.0)*x10063))+((x10054*x10057))+(((-1.0)*gconst2*r00*x10066))+(((-1.0)*r02*x10065)));
evalcond[3]=(((cj2*sj1))+((r20*x10061))+((r21*x10055*x10056))+((r22*x10068))+x10064+((r21*x10062))+(((-1.0)*r20*x10060*x10065)));
evalcond[4]=((((-1.0)*r22*sj3*x10066))+((r20*x10056))+(((-1.0)*r21*x10061*x10065))+((r20*x10070))+(((-1.0)*x10067))+x10059+((r21*x10060)));
evalcond[5]=((((-1.0)*cj0*x10067))+((r00*x10061))+((r01*x10062))+(((-1.0)*r00*x10060*x10065))+((r01*x10055*x10056))+((r02*x10068))+((cj0*x10059)));
evalcond[6]=(((r10*x10061))+(((-1.0)*r10*x10060*x10065))+((r12*x10068))+(((-1.0)*cj1*cj2*x10063))+((sj0*x10059))+((r11*x10055*x10056))+((r11*x10062)));
evalcond[7]=((((-1.0)*cj0*x10069))+((r00*x10070))+((r00*x10056))+((r01*x10060))+(((-1.0)*sj3*x10057*x10065))+(((-1.0)*cj0*x10064))+(((-1.0)*r02*sj3*x10066)));
evalcond[8]=(((r10*x10070))+((r10*x10056))+(((-1.0)*r12*sj3*x10066))+(((-1.0)*sj3*x10058*x10065))+(((-1.0)*cj2*sj1*x10063))+((r11*x10060))+(((-1.0)*x10063*x10064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10071=((1.0)*gconst2);
CheckValue<IkReal> x10072=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x10071)))),-1);
if(!x10072.valid){
continue;
}
CheckValue<IkReal> x10073 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x10071)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10072.value)))+(x10073.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10074=IKsin(j4);
IkReal x10075=IKcos(j4);
IkReal x10076=(cj3*gconst1);
IkReal x10077=(gconst1*r01);
IkReal x10078=(gconst1*r11);
IkReal x10079=(sj1*sj2);
IkReal x10080=(cj3*gconst2);
IkReal x10081=(gconst1*sj3);
IkReal x10082=(gconst2*sj3);
IkReal x10083=((1.0)*sj0);
IkReal x10084=(cj1*sj2);
IkReal x10085=((1.0)*x10075);
IkReal x10086=((1.0)*x10074);
IkReal x10087=((1.0)*cj1*cj2);
IkReal x10088=(cj3*x10074);
IkReal x10089=((1.0)*cj2*sj1);
IkReal x10090=(x10075*x10082);
evalcond[0]=((((-1.0)*gconst2*r20*x10086))+((gconst1*r21*x10074))+(((-1.0)*r22*x10085)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x10086))+((x10074*x10078))+(((-1.0)*r12*x10085)));
evalcond[2]=((((-1.0)*x10083))+(((-1.0)*r02*x10085))+(((-1.0)*gconst2*r00*x10086))+((x10074*x10077)));
evalcond[3]=(((cj2*sj1))+((r20*x10081))+x10084+((r21*x10082))+((r21*x10075*x10076))+((r22*x10088))+(((-1.0)*r20*x10080*x10085)));
evalcond[4]=(((r20*x10076))+(((-1.0)*r21*x10081*x10085))+(((-1.0)*x10087))+x10079+((r21*x10080))+((r20*x10090))+(((-1.0)*r22*sj3*x10086)));
evalcond[5]=((((-1.0)*r00*x10080*x10085))+((r00*x10081))+((r01*x10082))+((r01*x10075*x10076))+((r02*x10088))+((cj0*x10079))+(((-1.0)*cj0*x10087)));
evalcond[6]=((((-1.0)*r10*x10080*x10085))+(((-1.0)*cj1*cj2*x10083))+((r11*x10075*x10076))+((sj0*x10079))+((r12*x10088))+((r10*x10081))+((r11*x10082)));
evalcond[7]=(((r01*x10080))+((r00*x10076))+(((-1.0)*cj0*x10084))+(((-1.0)*r02*sj3*x10086))+(((-1.0)*sj3*x10077*x10085))+((r00*x10090))+(((-1.0)*cj0*x10089)));
evalcond[8]=(((r10*x10076))+(((-1.0)*r12*sj3*x10086))+(((-1.0)*sj3*x10078*x10085))+(((-1.0)*cj2*sj1*x10083))+((r10*x10090))+(((-1.0)*x10083*x10084))+((r11*x10080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10091=((-1.0)*r21);
IkReal x10093 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x10093)==0){
continue;
}
IkReal x10092=pow(x10093,-0.5);
CheckValue<IkReal> x10094 = IKatan2WithCheck(IkReal(x10091),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10094.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x10094.value))));
IkReal gconst4=(x10091*x10092);
IkReal gconst5=((1.0)*r20*x10092);
CheckValue<IkReal> x10095 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10095.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10095.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10096=((-1.0)*r21);
CheckValue<IkReal> x10099 = IKatan2WithCheck(IkReal(x10096),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10099.valid){
continue;
}
IkReal x10097=((1.0)*(x10099.value));
IkReal x10098=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10097)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10097)));
IkReal gconst4=(x10096*x10098);
IkReal gconst5=((1.0)*r20*x10098);
IkReal x10100=r22*r22;
IkReal x10101=((1.0)*x10100);
CheckValue<IkReal> x10105=IKPowWithIntegerCheck(((-1.0)+x10100),-1);
if(!x10105.valid){
continue;
}
IkReal x10102=x10105.value;
if((((1.0)+(((-1.0)*x10101)))) < -0.00001)
continue;
IkReal x10103=IKsqrt(((1.0)+(((-1.0)*x10101))));
IkReal x10104=(cj0*x10102*x10103);
j4eval[0]=((IKabs(((((-1.0)*x10101*x10104))+x10104)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10106=((-1.0)*r21);
CheckValue<IkReal> x10109 = IKatan2WithCheck(IkReal(x10106),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10109.valid){
continue;
}
IkReal x10107=((1.0)*(x10109.value));
IkReal x10108=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10107)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10107)));
IkReal gconst4=(x10106*x10108);
IkReal gconst5=((1.0)*r20*x10108);
IkReal x10110=r22*r22;
IkReal x10111=((1.0)*x10110);
CheckValue<IkReal> x10115=IKPowWithIntegerCheck(((-1.0)+x10110),-1);
if(!x10115.valid){
continue;
}
IkReal x10112=x10115.value;
if((((1.0)+(((-1.0)*x10111)))) < -0.00001)
continue;
IkReal x10113=IKsqrt(((1.0)+(((-1.0)*x10111))));
IkReal x10114=(sj0*x10112*x10113);
j4eval[0]=((IKabs((x10114+(((-1.0)*x10111*x10114)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10116=((-1.0)*r21);
CheckValue<IkReal> x10119 = IKatan2WithCheck(IkReal(x10116),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10119.valid){
continue;
}
IkReal x10117=((1.0)*(x10119.value));
IkReal x10118=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10117)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10117)));
IkReal gconst4=(x10116*x10118);
IkReal gconst5=((1.0)*r20*x10118);
IkReal x10120=r22*r22;
IkReal x10121=(r12*sj0);
IkReal x10122=(cj0*r02);
CheckValue<IkReal> x10126=IKPowWithIntegerCheck(((-1.0)+x10120),-1);
if(!x10126.valid){
continue;
}
IkReal x10123=x10126.value;
if((((1.0)+(((-1.0)*x10120)))) < -0.00001)
continue;
IkReal x10124=IKsqrt(((1.0)+(((-1.0)*x10120))));
IkReal x10125=(r22*x10123*x10124);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x10122))+(((-1.0)*x10121)))))+(IKabs((((x10122*x10125))+((x10121*x10125))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10127=((-1.0)*r21);
CheckValue<IkReal> x10130 = IKatan2WithCheck(IkReal(x10127),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10130.valid){
continue;
}
IkReal x10128=((1.0)*(x10130.value));
IkReal x10129=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10128)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10128)));
IkReal gconst4=(x10127*x10129);
IkReal gconst5=((1.0)*r20*x10129);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10131=((-1.0)*r21);
CheckValue<IkReal> x10134 = IKatan2WithCheck(IkReal(x10131),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10134.valid){
continue;
}
IkReal x10132=((1.0)*(x10134.value));
IkReal x10133=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10132)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10132)));
IkReal gconst4=(x10131*x10133);
IkReal gconst5=((1.0)*r20*x10133);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10135=((-1.0)*r21);
CheckValue<IkReal> x10138 = IKatan2WithCheck(IkReal(x10135),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10138.valid){
continue;
}
IkReal x10136=((1.0)*(x10138.value));
IkReal x10137=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10136)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10136)));
IkReal gconst4=(x10135*x10137);
IkReal gconst5=((1.0)*r20*x10137);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10139=((-1.0)*r21);
CheckValue<IkReal> x10142 = IKatan2WithCheck(IkReal(x10139),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10142.valid){
continue;
}
IkReal x10140=((1.0)*(x10142.value));
IkReal x10141=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10140)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10140)));
IkReal gconst4=(x10139*x10141);
IkReal gconst5=((1.0)*r20*x10141);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10143=((-1.0)*r21);
CheckValue<IkReal> x10146 = IKatan2WithCheck(IkReal(x10143),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10146.valid){
continue;
}
IkReal x10144=((1.0)*(x10146.value));
IkReal x10145=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10144)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10144)));
IkReal gconst4=(x10143*x10145);
IkReal gconst5=((1.0)*r20*x10145);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10147=((-1.0)*r21);
CheckValue<IkReal> x10150 = IKatan2WithCheck(IkReal(x10147),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10150.valid){
continue;
}
IkReal x10148=((1.0)*(x10150.value));
IkReal x10149=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10148)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10148)));
IkReal gconst4=(x10147*x10149);
IkReal gconst5=((1.0)*r20*x10149);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10151=(gconst5*r10);
IkReal x10152=(gconst4*r11);
CheckValue<IkReal> x10153=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10151*x10152))+(x10152*x10152)+(x10151*x10151))),-1);
if(!x10153.valid){
continue;
}
CheckValue<IkReal> x10154 = IKatan2WithCheck(IkReal((x10151+(((-1.0)*x10152)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10153.value)))+(x10154.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10155=IKsin(j4);
IkReal x10156=IKcos(j4);
IkReal x10157=(gconst4*r11);
IkReal x10158=((1.0)*cj1);
IkReal x10159=(gconst5*r10);
IkReal x10160=(gconst4*r01);
IkReal x10161=(gconst5*r00);
IkReal x10162=(gconst4*r21);
IkReal x10163=(gconst5*r20);
IkReal x10164=((1.0)*x10156);
IkReal x10165=((1.0)*x10155);
evalcond[0]=((((-1.0)*r22*x10164))+((x10155*x10162))+(((-1.0)*x10163*x10165)));
evalcond[1]=((((-1.0)*x10161*x10165))+((x10155*x10160))+(((-1.0)*r02*x10164)));
evalcond[2]=((((-1.0)*r12*x10165))+((x10156*x10159))+(((-1.0)*x10157*x10164)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10164))+(((-1.0)*x10159*x10165))+((x10155*x10157)));
evalcond[4]=((((-1.0)*cj2*x10158))+(((-1.0)*r22*x10165))+(((-1.0)*x10162*x10164))+((sj1*sj2))+((x10156*x10163)));
evalcond[5]=((((-1.0)*x10160*x10164))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10158))+(((-1.0)*r02*x10165))+((x10156*x10161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10166=((1.0)*gconst5);
CheckValue<IkReal> x10167=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10166)))),-1);
if(!x10167.valid){
continue;
}
CheckValue<IkReal> x10168 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10166))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10167.value)))+(x10168.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10169=IKsin(j4);
IkReal x10170=IKcos(j4);
IkReal x10171=(gconst4*r11);
IkReal x10172=((1.0)*cj1);
IkReal x10173=(gconst5*r10);
IkReal x10174=(gconst4*r01);
IkReal x10175=(gconst5*r00);
IkReal x10176=(gconst4*r21);
IkReal x10177=(gconst5*r20);
IkReal x10178=((1.0)*x10170);
IkReal x10179=((1.0)*x10169);
evalcond[0]=((((-1.0)*r22*x10178))+(((-1.0)*x10177*x10179))+((x10169*x10176)));
evalcond[1]=((((-1.0)*x10175*x10179))+((x10169*x10174))+(((-1.0)*r02*x10178)));
evalcond[2]=(((x10170*x10173))+(((-1.0)*r12*x10179))+(((-1.0)*x10171*x10178)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10178))+(((-1.0)*x10173*x10179))+((x10169*x10171)));
evalcond[4]=((((-1.0)*x10176*x10178))+(((-1.0)*r22*x10179))+((x10170*x10177))+(((-1.0)*cj2*x10172))+((sj1*sj2)));
evalcond[5]=((((-1.0)*x10174*x10178))+((x10170*x10175))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10172))+(((-1.0)*r02*x10179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10180 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10180.valid){
continue;
}
CheckValue<IkReal> x10181=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10180.value)+(((1.5707963267949)*(x10181.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10182=IKsin(j4);
IkReal x10183=IKcos(j4);
IkReal x10184=(gconst4*r11);
IkReal x10185=((1.0)*cj1);
IkReal x10186=(gconst5*r10);
IkReal x10187=(gconst4*r01);
IkReal x10188=(gconst5*r00);
IkReal x10189=(gconst4*r21);
IkReal x10190=(gconst5*r20);
IkReal x10191=((1.0)*x10183);
IkReal x10192=((1.0)*x10182);
evalcond[0]=(((x10182*x10189))+(((-1.0)*x10190*x10192))+(((-1.0)*r22*x10191)));
evalcond[1]=((((-1.0)*r02*x10191))+((x10182*x10187))+(((-1.0)*x10188*x10192)));
evalcond[2]=((((-1.0)*x10184*x10191))+(((-1.0)*r12*x10192))+((x10183*x10186)));
evalcond[3]=((1.0)+(((-1.0)*x10186*x10192))+(((-1.0)*r12*x10191))+((x10182*x10184)));
evalcond[4]=((((-1.0)*cj2*x10185))+((sj1*sj2))+((x10183*x10190))+(((-1.0)*x10189*x10191))+(((-1.0)*r22*x10192)));
evalcond[5]=((((-1.0)*r02*x10192))+(((-1.0)*x10187*x10191))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10185))+((x10183*x10188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10193=((-1.0)*r21);
CheckValue<IkReal> x10196 = IKatan2WithCheck(IkReal(x10193),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10196.valid){
continue;
}
IkReal x10194=((1.0)*(x10196.value));
IkReal x10195=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10194)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10194)));
IkReal gconst4=(x10193*x10195);
IkReal gconst5=((1.0)*r20*x10195);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10197=((-1.0)*r21);
CheckValue<IkReal> x10200 = IKatan2WithCheck(IkReal(x10197),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10200.valid){
continue;
}
IkReal x10198=((1.0)*(x10200.value));
IkReal x10199=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10198)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10198)));
IkReal gconst4=(x10197*x10199);
IkReal gconst5=((1.0)*r20*x10199);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10201=((-1.0)*r21);
CheckValue<IkReal> x10204 = IKatan2WithCheck(IkReal(x10201),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10204.valid){
continue;
}
IkReal x10202=((1.0)*(x10204.value));
IkReal x10203=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10202)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10202)));
IkReal gconst4=(x10201*x10203);
IkReal gconst5=((1.0)*r20*x10203);
IkReal x10205=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10209=IKPowWithIntegerCheck(x10205,-1);
if(!x10209.valid){
continue;
}
IkReal x10206=x10209.value;
IkReal x10207=((1.0)*x10206);
IkReal x10208=((((-1.0)*x10207*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x10206))+(((-1.0)*(r12*r12)))+(((-1.0)*x10207*(r10*r10)*(r20*r20))));
j4eval[0]=x10208;
j4eval[1]=r12;
j4eval[2]=x10205;
j4eval[3]=IKsign(x10208);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10210=(gconst5*r10);
IkReal x10211=(gconst4*r11);
CheckValue<IkReal> x10212=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10211*x10211)))+(((2.0)*x10210*x10211))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10210*x10210))))),-1);
if(!x10212.valid){
continue;
}
CheckValue<IkReal> x10213 = IKatan2WithCheck(IkReal((x10211+(((-1.0)*x10210)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10212.value)))+(x10213.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10214=IKcos(j4);
IkReal x10215=IKsin(j4);
IkReal x10216=(gconst4*r11);
IkReal x10217=(gconst5*r10);
IkReal x10218=((1.0)*cj1);
IkReal x10219=(gconst5*r00);
IkReal x10220=(gconst5*r20);
IkReal x10221=((1.0)*x10214);
IkReal x10222=(gconst4*x10214);
IkReal x10223=((1.0)*x10215);
IkReal x10224=(gconst4*x10215);
evalcond[0]=(((x10214*x10216))+((r12*x10215))+(((-1.0)*x10217*x10221)));
evalcond[1]=((((-1.0)*x10220*x10223))+((r21*x10224))+(((-1.0)*r22*x10221)));
evalcond[2]=((((-1.0)*r02*x10221))+(((-1.0)*x10219*x10223))+((r01*x10224)));
evalcond[3]=((1.0)+((x10215*x10216))+(((-1.0)*x10217*x10223))+(((-1.0)*r12*x10221)));
evalcond[4]=((((-1.0)*x10220*x10221))+((sj1*sj2))+(((-1.0)*cj2*x10218))+((r21*x10222))+((r22*x10215)));
evalcond[5]=((((-1.0)*sj2*x10218))+(((-1.0)*cj2*sj1))+(((-1.0)*x10219*x10221))+((r02*x10215))+((r01*x10222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10225=((1.0)*gconst5);
CheckValue<IkReal> x10226=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10225)))),-1);
if(!x10226.valid){
continue;
}
CheckValue<IkReal> x10227 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10225))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10226.value)))+(x10227.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10228=IKcos(j4);
IkReal x10229=IKsin(j4);
IkReal x10230=(gconst4*r11);
IkReal x10231=(gconst5*r10);
IkReal x10232=((1.0)*cj1);
IkReal x10233=(gconst5*r00);
IkReal x10234=(gconst5*r20);
IkReal x10235=((1.0)*x10228);
IkReal x10236=(gconst4*x10228);
IkReal x10237=((1.0)*x10229);
IkReal x10238=(gconst4*x10229);
evalcond[0]=(((r12*x10229))+((x10228*x10230))+(((-1.0)*x10231*x10235)));
evalcond[1]=((((-1.0)*x10234*x10237))+((r21*x10238))+(((-1.0)*r22*x10235)));
evalcond[2]=((((-1.0)*x10233*x10237))+((r01*x10238))+(((-1.0)*r02*x10235)));
evalcond[3]=((1.0)+((x10229*x10230))+(((-1.0)*r12*x10235))+(((-1.0)*x10231*x10237)));
evalcond[4]=((((-1.0)*x10234*x10235))+((r22*x10229))+((sj1*sj2))+((r21*x10236))+(((-1.0)*cj2*x10232)));
evalcond[5]=((((-1.0)*x10233*x10235))+((r02*x10229))+(((-1.0)*cj2*sj1))+((r01*x10236))+(((-1.0)*sj2*x10232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10239 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10239.valid){
continue;
}
CheckValue<IkReal> x10240=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10240.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10239.value)+(((1.5707963267949)*(x10240.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10241=IKcos(j4);
IkReal x10242=IKsin(j4);
IkReal x10243=(gconst4*r11);
IkReal x10244=(gconst5*r10);
IkReal x10245=((1.0)*cj1);
IkReal x10246=(gconst5*r00);
IkReal x10247=(gconst5*r20);
IkReal x10248=((1.0)*x10241);
IkReal x10249=(gconst4*x10241);
IkReal x10250=((1.0)*x10242);
IkReal x10251=(gconst4*x10242);
evalcond[0]=(((x10241*x10243))+(((-1.0)*x10244*x10248))+((r12*x10242)));
evalcond[1]=((((-1.0)*x10247*x10250))+(((-1.0)*r22*x10248))+((r21*x10251)));
evalcond[2]=((((-1.0)*x10246*x10250))+(((-1.0)*r02*x10248))+((r01*x10251)));
evalcond[3]=((1.0)+((x10242*x10243))+(((-1.0)*r12*x10248))+(((-1.0)*x10244*x10250)));
evalcond[4]=((((-1.0)*x10247*x10248))+((r22*x10242))+(((-1.0)*cj2*x10245))+((sj1*sj2))+((r21*x10249)));
evalcond[5]=(((r02*x10242))+(((-1.0)*cj2*sj1))+(((-1.0)*x10246*x10248))+(((-1.0)*sj2*x10245))+((r01*x10249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10252=((-1.0)*r21);
CheckValue<IkReal> x10255 = IKatan2WithCheck(IkReal(x10252),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10255.valid){
continue;
}
IkReal x10253=((1.0)*(x10255.value));
IkReal x10254=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10253)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10253)));
IkReal gconst4=(x10252*x10254);
IkReal gconst5=((1.0)*r20*x10254);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10256=((-1.0)*r21);
CheckValue<IkReal> x10259 = IKatan2WithCheck(IkReal(x10256),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10259.valid){
continue;
}
IkReal x10257=((1.0)*(x10259.value));
IkReal x10258=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10257)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10257)));
IkReal gconst4=(x10256*x10258);
IkReal gconst5=((1.0)*r20*x10258);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10260=((-1.0)*r21);
CheckValue<IkReal> x10263 = IKatan2WithCheck(IkReal(x10260),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10263.valid){
continue;
}
IkReal x10261=((1.0)*(x10263.value));
IkReal x10262=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10261)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10261)));
IkReal gconst4=(x10260*x10262);
IkReal gconst5=((1.0)*r20*x10262);
IkReal x10264=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10268=IKPowWithIntegerCheck(x10264,-1);
if(!x10268.valid){
continue;
}
IkReal x10265=x10268.value;
IkReal x10266=((1.0)*x10265);
IkReal x10267=((((-1.0)*x10266*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10265))+(((-1.0)*x10266*(r10*r10)*(r20*r20))));
j4eval[0]=x10267;
j4eval[1]=r12;
j4eval[2]=x10264;
j4eval[3]=IKsign(x10267);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10269=(gconst5*r10);
IkReal x10270=(gconst4*r11);
CheckValue<IkReal> x10271 = IKatan2WithCheck(IkReal(((((-1.0)*x10269))+x10270)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10271.valid){
continue;
}
CheckValue<IkReal> x10272=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10269*x10269)))+(((2.0)*x10269*x10270))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10270*x10270))))),-1);
if(!x10272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10271.value)+(((1.5707963267949)*(x10272.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10273=IKcos(j4);
IkReal x10274=IKsin(j4);
IkReal x10275=(gconst4*r11);
IkReal x10276=(gconst5*r10);
IkReal x10277=(gconst5*r00);
IkReal x10278=(gconst5*r20);
IkReal x10279=((1.0)*x10273);
IkReal x10280=(gconst4*x10273);
IkReal x10281=((1.0)*x10274);
IkReal x10282=(gconst4*x10274);
evalcond[0]=(((r12*x10274))+((x10273*x10275))+(((-1.0)*x10276*x10279)));
evalcond[1]=((((-1.0)*x10278*x10281))+(((-1.0)*r22*x10279))+((r21*x10282)));
evalcond[2]=(((r01*x10282))+(((-1.0)*x10277*x10281))+(((-1.0)*r02*x10279)));
evalcond[3]=((1.0)+(((-1.0)*x10276*x10281))+((x10274*x10275))+(((-1.0)*r12*x10279)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10278*x10279))+((r21*x10280))+((r22*x10274)));
evalcond[5]=(((r01*x10280))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10277*x10279))+((r02*x10274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10283=((1.0)*gconst5);
CheckValue<IkReal> x10284=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10283)))),-1);
if(!x10284.valid){
continue;
}
CheckValue<IkReal> x10285 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10283)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10284.value)))+(x10285.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10286=IKcos(j4);
IkReal x10287=IKsin(j4);
IkReal x10288=(gconst4*r11);
IkReal x10289=(gconst5*r10);
IkReal x10290=(gconst5*r00);
IkReal x10291=(gconst5*r20);
IkReal x10292=((1.0)*x10286);
IkReal x10293=(gconst4*x10286);
IkReal x10294=((1.0)*x10287);
IkReal x10295=(gconst4*x10287);
evalcond[0]=(((r12*x10287))+(((-1.0)*x10289*x10292))+((x10286*x10288)));
evalcond[1]=((((-1.0)*x10291*x10294))+((r21*x10295))+(((-1.0)*r22*x10292)));
evalcond[2]=((((-1.0)*r02*x10292))+(((-1.0)*x10290*x10294))+((r01*x10295)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10292))+((x10287*x10288))+(((-1.0)*x10289*x10294)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10291*x10292))+((r22*x10287))+((r21*x10293)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10290*x10292))+((r02*x10287))+((r01*x10293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10296 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10296.valid){
continue;
}
CheckValue<IkReal> x10297=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10297.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10296.value)+(((1.5707963267949)*(x10297.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10298=IKcos(j4);
IkReal x10299=IKsin(j4);
IkReal x10300=(gconst4*r11);
IkReal x10301=(gconst5*r10);
IkReal x10302=(gconst5*r00);
IkReal x10303=(gconst5*r20);
IkReal x10304=((1.0)*x10298);
IkReal x10305=(gconst4*x10298);
IkReal x10306=((1.0)*x10299);
IkReal x10307=(gconst4*x10299);
evalcond[0]=((((-1.0)*x10301*x10304))+((r12*x10299))+((x10298*x10300)));
evalcond[1]=((((-1.0)*r22*x10304))+((r21*x10307))+(((-1.0)*x10303*x10306)));
evalcond[2]=((((-1.0)*r02*x10304))+(((-1.0)*x10302*x10306))+((r01*x10307)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10304))+(((-1.0)*x10301*x10306))+((x10299*x10300)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x10305))+((r22*x10299))+(((-1.0)*x10303*x10304)));
evalcond[5]=((((-1.0)*x10302*x10304))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x10305))+((r02*x10299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10308=((-1.0)*r21);
CheckValue<IkReal> x10311 = IKatan2WithCheck(IkReal(x10308),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10311.valid){
continue;
}
IkReal x10309=((1.0)*(x10311.value));
IkReal x10310=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10309)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10309)));
IkReal gconst4=(x10308*x10310);
IkReal gconst5=((1.0)*r20*x10310);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10312=((-1.0)*r21);
CheckValue<IkReal> x10315 = IKatan2WithCheck(IkReal(x10312),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10315.valid){
continue;
}
IkReal x10313=((1.0)*(x10315.value));
IkReal x10314=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10313)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10313)));
IkReal gconst4=(x10312*x10314);
IkReal gconst5=((1.0)*r20*x10314);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10316=((-1.0)*r21);
CheckValue<IkReal> x10319 = IKatan2WithCheck(IkReal(x10316),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10319.valid){
continue;
}
IkReal x10317=((1.0)*(x10319.value));
IkReal x10318=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10317)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10317)));
IkReal gconst4=(x10316*x10318);
IkReal gconst5=((1.0)*r20*x10318);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10320=(gconst5*r10);
IkReal x10321=(gconst4*r11);
CheckValue<IkReal> x10322=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10320*x10321))+(x10321*x10321)+(x10320*x10320))),-1);
if(!x10322.valid){
continue;
}
CheckValue<IkReal> x10323 = IKatan2WithCheck(IkReal(((((-1.0)*x10321))+x10320)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10322.value)))+(x10323.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10324=IKsin(j4);
IkReal x10325=IKcos(j4);
IkReal x10326=(gconst4*r11);
IkReal x10327=(gconst5*r10);
IkReal x10328=(gconst4*r01);
IkReal x10329=(gconst5*r00);
IkReal x10330=(gconst4*r21);
IkReal x10331=(gconst5*r20);
IkReal x10332=((1.0)*x10325);
IkReal x10333=((1.0)*x10324);
evalcond[0]=(((x10324*x10330))+(((-1.0)*r22*x10332))+(((-1.0)*x10331*x10333)));
evalcond[1]=(((x10324*x10328))+(((-1.0)*x10329*x10333))+(((-1.0)*r02*x10332)));
evalcond[2]=(((x10325*x10327))+(((-1.0)*r12*x10333))+(((-1.0)*x10326*x10332)));
evalcond[3]=((1.0)+((x10324*x10326))+(((-1.0)*r12*x10332))+(((-1.0)*x10327*x10333)));
evalcond[4]=(((cj2*sj1))+((x10325*x10331))+((cj1*sj2))+(((-1.0)*r22*x10333))+(((-1.0)*x10330*x10332)));
evalcond[5]=((((-1.0)*x10328*x10332))+((x10325*x10329))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x10333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10334=((1.0)*gconst5);
CheckValue<IkReal> x10335=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10334)))),-1);
if(!x10335.valid){
continue;
}
CheckValue<IkReal> x10336 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10334)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10336.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10335.value)))+(x10336.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10337=IKsin(j4);
IkReal x10338=IKcos(j4);
IkReal x10339=(gconst4*r11);
IkReal x10340=(gconst5*r10);
IkReal x10341=(gconst4*r01);
IkReal x10342=(gconst5*r00);
IkReal x10343=(gconst4*r21);
IkReal x10344=(gconst5*r20);
IkReal x10345=((1.0)*x10338);
IkReal x10346=((1.0)*x10337);
evalcond[0]=((((-1.0)*x10344*x10346))+(((-1.0)*r22*x10345))+((x10337*x10343)));
evalcond[1]=((((-1.0)*x10342*x10346))+(((-1.0)*r02*x10345))+((x10337*x10341)));
evalcond[2]=((((-1.0)*x10339*x10345))+(((-1.0)*r12*x10346))+((x10338*x10340)));
evalcond[3]=((1.0)+(((-1.0)*x10340*x10346))+(((-1.0)*r12*x10345))+((x10337*x10339)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10343*x10345))+((cj1*sj2))+((x10338*x10344))+(((-1.0)*r22*x10346)));
evalcond[5]=((((-1.0)*x10341*x10345))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10338*x10342))+(((-1.0)*r02*x10346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10347 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10347.valid){
continue;
}
CheckValue<IkReal> x10348=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10347.value)+(((1.5707963267949)*(x10348.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10349=IKsin(j4);
IkReal x10350=IKcos(j4);
IkReal x10351=(gconst4*r11);
IkReal x10352=(gconst5*r10);
IkReal x10353=(gconst4*r01);
IkReal x10354=(gconst5*r00);
IkReal x10355=(gconst4*r21);
IkReal x10356=(gconst5*r20);
IkReal x10357=((1.0)*x10350);
IkReal x10358=((1.0)*x10349);
evalcond[0]=((((-1.0)*x10356*x10358))+(((-1.0)*r22*x10357))+((x10349*x10355)));
evalcond[1]=(((x10349*x10353))+(((-1.0)*x10354*x10358))+(((-1.0)*r02*x10357)));
evalcond[2]=(((x10350*x10352))+(((-1.0)*x10351*x10357))+(((-1.0)*r12*x10358)));
evalcond[3]=((1.0)+(((-1.0)*x10352*x10358))+((x10349*x10351))+(((-1.0)*r12*x10357)));
evalcond[4]=(((cj2*sj1))+((x10350*x10356))+((cj1*sj2))+(((-1.0)*r22*x10358))+(((-1.0)*x10355*x10357)));
evalcond[5]=(((x10350*x10354))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10353*x10357))+(((-1.0)*r02*x10358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst5*r10))+(((2.0)*gconst4*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10359=gconst4*gconst4;
IkReal x10360=gconst5*gconst5;
IkReal x10361=(r10*r21);
IkReal x10362=((1.0)*cj3);
IkReal x10363=(r11*r21);
IkReal x10364=(r11*r20);
IkReal x10365=(r22*sj3);
IkReal x10366=(gconst4*r10);
IkReal x10367=((1.0)*sj3);
IkReal x10368=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10369 = IKatan2WithCheck(IkReal((((x10365*x10366))+((gconst5*r11*x10365)))),IkReal(((((-1.0)*x10360*x10364*x10367))+((gconst4*gconst5*sj3*x10363))+((sj3*x10359*x10361))+(((-1.0)*gconst5*r20*x10366*x10367)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10369.valid){
continue;
}
CheckValue<IkReal> x10370=IKPowWithIntegerCheck(IKsign((((x10361*x10368))+(((-1.0)*r10*r20*x10360*x10362))+((x10364*x10368))+(((-1.0)*r12*r22*x10362))+(((-1.0)*x10359*x10362*x10363)))),-1);
if(!x10370.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10369.value)+(((1.5707963267949)*(x10370.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10371=IKsin(j4);
IkReal x10372=IKcos(j4);
IkReal x10373=(sj1*sj2);
IkReal x10374=(gconst5*sj3);
IkReal x10375=(cj3*gconst5);
IkReal x10376=(gconst4*r11);
IkReal x10377=((1.0)*cj1);
IkReal x10378=(gconst4*r01);
IkReal x10379=(cj2*sj1);
IkReal x10380=(gconst4*r21);
IkReal x10381=(gconst4*sj3);
IkReal x10382=(cj3*gconst4);
IkReal x10383=(cj2*x10377);
IkReal x10384=((1.0)*x10372);
IkReal x10385=((1.0)*x10371);
IkReal x10386=(cj3*x10371);
IkReal x10387=(cj3*x10372);
evalcond[0]=(((x10371*x10380))+(((-1.0)*gconst5*r20*x10385))+(((-1.0)*r22*x10384)));
evalcond[1]=((((-1.0)*r02*x10384))+((x10371*x10378))+(((-1.0)*gconst5*r00*x10385)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10385))+(((-1.0)*r12*x10384))+((x10371*x10376)));
evalcond[3]=(((r12*x10386))+((x10376*x10387))+((r10*x10381))+(((-1.0)*r10*x10375*x10384))+((r11*x10374)));
evalcond[4]=(((r10*x10372*x10374))+(((-1.0)*sj3*x10376*x10384))+((r10*x10382))+(((-1.0)*r12*sj3*x10385))+((r11*x10375)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*r20*x10375*x10384))+((r22*x10386))+((x10380*x10387))+x10379+((r20*x10381))+((r21*x10374)));
evalcond[6]=(((r01*x10374))+(((-1.0)*x10383))+(((-1.0)*r00*x10375*x10384))+((r02*x10386))+x10373+((x10378*x10387))+((r00*x10381)));
evalcond[7]=((((-1.0)*x10383))+(((-1.0)*r22*sj3*x10385))+((r20*x10372*x10374))+x10373+(((-1.0)*sj3*x10380*x10384))+((r20*x10382))+((r21*x10375)));
evalcond[8]=(((r01*x10375))+(((-1.0)*sj3*x10378*x10384))+(((-1.0)*x10379))+(((-1.0)*r02*sj3*x10385))+((r00*x10382))+((r00*x10372*x10374))+(((-1.0)*sj2*x10377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10388=((1.0)*gconst5);
CheckValue<IkReal> x10389 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10388))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10389.valid){
continue;
}
CheckValue<IkReal> x10390=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10388)))),-1);
if(!x10390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10389.value)+(((1.5707963267949)*(x10390.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10391=IKsin(j4);
IkReal x10392=IKcos(j4);
IkReal x10393=(sj1*sj2);
IkReal x10394=(gconst5*sj3);
IkReal x10395=(cj3*gconst5);
IkReal x10396=(gconst4*r11);
IkReal x10397=((1.0)*cj1);
IkReal x10398=(gconst4*r01);
IkReal x10399=(cj2*sj1);
IkReal x10400=(gconst4*r21);
IkReal x10401=(gconst4*sj3);
IkReal x10402=(cj3*gconst4);
IkReal x10403=(cj2*x10397);
IkReal x10404=((1.0)*x10392);
IkReal x10405=((1.0)*x10391);
IkReal x10406=(cj3*x10391);
IkReal x10407=(cj3*x10392);
evalcond[0]=(((x10391*x10400))+(((-1.0)*gconst5*r20*x10405))+(((-1.0)*r22*x10404)));
evalcond[1]=(((x10391*x10398))+(((-1.0)*r02*x10404))+(((-1.0)*gconst5*r00*x10405)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10405))+(((-1.0)*r12*x10404))+((x10391*x10396)));
evalcond[3]=(((r11*x10394))+((x10396*x10407))+((r12*x10406))+(((-1.0)*r10*x10395*x10404))+((r10*x10401)));
evalcond[4]=(((r11*x10395))+(((-1.0)*sj3*x10396*x10404))+((r10*x10392*x10394))+(((-1.0)*r12*sj3*x10405))+((r10*x10402)));
evalcond[5]=(((r22*x10406))+((x10400*x10407))+((r21*x10394))+((cj1*sj2))+(((-1.0)*r20*x10395*x10404))+x10399+((r20*x10401)));
evalcond[6]=(((r01*x10394))+(((-1.0)*r00*x10395*x10404))+((r00*x10401))+((x10398*x10407))+((r02*x10406))+(((-1.0)*x10403))+x10393);
evalcond[7]=((((-1.0)*r22*sj3*x10405))+((r21*x10395))+(((-1.0)*x10403))+x10393+((r20*x10402))+((r20*x10392*x10394))+(((-1.0)*sj3*x10400*x10404)));
evalcond[8]=(((r01*x10395))+((r00*x10392*x10394))+((r00*x10402))+(((-1.0)*x10399))+(((-1.0)*sj2*x10397))+(((-1.0)*sj3*x10398*x10404))+(((-1.0)*r02*sj3*x10405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10408 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10408.valid){
continue;
}
CheckValue<IkReal> x10409=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10408.value)+(((1.5707963267949)*(x10409.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10410=IKsin(j4);
IkReal x10411=IKcos(j4);
IkReal x10412=(sj1*sj2);
IkReal x10413=(gconst5*sj3);
IkReal x10414=(cj3*gconst5);
IkReal x10415=(gconst4*r11);
IkReal x10416=((1.0)*cj1);
IkReal x10417=(gconst4*r01);
IkReal x10418=(cj2*sj1);
IkReal x10419=(gconst4*r21);
IkReal x10420=(gconst4*sj3);
IkReal x10421=(cj3*gconst4);
IkReal x10422=(cj2*x10416);
IkReal x10423=((1.0)*x10411);
IkReal x10424=((1.0)*x10410);
IkReal x10425=(cj3*x10410);
IkReal x10426=(cj3*x10411);
evalcond[0]=(((x10410*x10419))+(((-1.0)*gconst5*r20*x10424))+(((-1.0)*r22*x10423)));
evalcond[1]=((((-1.0)*gconst5*r00*x10424))+((x10410*x10417))+(((-1.0)*r02*x10423)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10424))+((x10410*x10415))+(((-1.0)*r12*x10423)));
evalcond[3]=((((-1.0)*r10*x10414*x10423))+((x10415*x10426))+((r12*x10425))+((r11*x10413))+((r10*x10420)));
evalcond[4]=(((r10*x10411*x10413))+(((-1.0)*r12*sj3*x10424))+(((-1.0)*sj3*x10415*x10423))+((r11*x10414))+((r10*x10421)));
evalcond[5]=(((r21*x10413))+(((-1.0)*r20*x10414*x10423))+((cj1*sj2))+((r22*x10425))+((x10419*x10426))+x10418+((r20*x10420)));
evalcond[6]=(((r00*x10420))+((x10417*x10426))+((r01*x10413))+((r02*x10425))+(((-1.0)*x10422))+x10412+(((-1.0)*r00*x10414*x10423)));
evalcond[7]=(((r21*x10414))+((r20*x10411*x10413))+(((-1.0)*x10422))+(((-1.0)*sj3*x10419*x10423))+x10412+((r20*x10421))+(((-1.0)*r22*sj3*x10424)));
evalcond[8]=(((r00*x10421))+((r00*x10411*x10413))+(((-1.0)*sj3*x10417*x10423))+((r01*x10414))+(((-1.0)*sj2*x10416))+(((-1.0)*x10418))+(((-1.0)*r02*sj3*x10424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10427=((-1.0)*r21);
CheckValue<IkReal> x10430 = IKatan2WithCheck(IkReal(x10427),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10430.valid){
continue;
}
IkReal x10428=((1.0)*(x10430.value));
IkReal x10429=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10428)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10428)));
IkReal gconst4=(x10427*x10429);
IkReal gconst5=((1.0)*r20*x10429);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10431=((-1.0)*r21);
CheckValue<IkReal> x10434 = IKatan2WithCheck(IkReal(x10431),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10434.valid){
continue;
}
IkReal x10432=((1.0)*(x10434.value));
IkReal x10433=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10432)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10432)));
IkReal gconst4=(x10431*x10433);
IkReal gconst5=((1.0)*r20*x10433);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10435=((-1.0)*r21);
CheckValue<IkReal> x10438 = IKatan2WithCheck(IkReal(x10435),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10438.valid){
continue;
}
IkReal x10436=((1.0)*(x10438.value));
IkReal x10437=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10436)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10436)));
IkReal gconst4=(x10435*x10437);
IkReal gconst5=((1.0)*r20*x10437);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10439=((-1.0)*r21);
CheckValue<IkReal> x10442 = IKatan2WithCheck(IkReal(x10439),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10442.valid){
continue;
}
IkReal x10440=((1.0)*(x10442.value));
IkReal x10441=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10440)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10440)));
IkReal gconst4=(x10439*x10441);
IkReal gconst5=((1.0)*r20*x10441);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10443=((-1.0)*r21);
CheckValue<IkReal> x10446 = IKatan2WithCheck(IkReal(x10443),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10446.valid){
continue;
}
IkReal x10444=((1.0)*(x10446.value));
IkReal x10445=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10444)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10444)));
IkReal gconst4=(x10443*x10445);
IkReal gconst5=((1.0)*r20*x10445);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10447=((-1.0)*r21);
CheckValue<IkReal> x10450 = IKatan2WithCheck(IkReal(x10447),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10450.valid){
continue;
}
IkReal x10448=((1.0)*(x10450.value));
IkReal x10449=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10448)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10448)));
IkReal gconst4=(x10447*x10449);
IkReal gconst5=((1.0)*r20*x10449);
IkReal x10451=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10455=IKPowWithIntegerCheck(x10451,-1);
if(!x10455.valid){
continue;
}
IkReal x10452=x10455.value;
IkReal x10453=((1.0)*x10452);
IkReal x10454=((((-2.0)*r10*r11*r20*r21*x10452))+(((-1.0)*x10453*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10453*(r11*r11)*(r21*r21))));
j4eval[0]=x10454;
j4eval[1]=r12;
j4eval[2]=x10451;
j4eval[3]=IKsign(x10454);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10456=(gconst5*r10);
IkReal x10457=(gconst4*r11);
CheckValue<IkReal> x10458 = IKatan2WithCheck(IkReal(((((-1.0)*x10457))+x10456)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10458.valid){
continue;
}
CheckValue<IkReal> x10459=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10457*x10457)))+(((-1.0)*(x10456*x10456)))+(((-1.0)*(r12*r12)))+(((2.0)*x10456*x10457)))),-1);
if(!x10459.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10458.value)+(((1.5707963267949)*(x10459.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10460=IKsin(j4);
IkReal x10461=IKcos(j4);
IkReal x10462=(gconst4*r11);
IkReal x10463=(gconst5*r10);
IkReal x10464=(gconst4*r01);
IkReal x10465=(gconst5*r00);
IkReal x10466=(gconst4*r21);
IkReal x10467=(gconst5*r20);
IkReal x10468=((1.0)*x10461);
IkReal x10469=((1.0)*x10460);
evalcond[0]=((((-1.0)*x10467*x10469))+((x10460*x10466))+(((-1.0)*r22*x10468)));
evalcond[1]=((((-1.0)*r02*x10468))+(((-1.0)*x10465*x10469))+((x10460*x10464)));
evalcond[2]=(((x10461*x10463))+(((-1.0)*x10462*x10468))+(((-1.0)*r12*x10469)));
evalcond[3]=((-1.0)+((x10460*x10462))+(((-1.0)*x10463*x10469))+(((-1.0)*r12*x10468)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x10469))+((cj1*sj2))+((x10461*x10465))+(((-1.0)*x10464*x10468)));
evalcond[5]=((((-1.0)*x10466*x10468))+((x10461*x10467))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10470=((1.0)*gconst5);
CheckValue<IkReal> x10471=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10470))+(((-1.0)*gconst4*r20)))),-1);
if(!x10471.valid){
continue;
}
CheckValue<IkReal> x10472 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10470))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10472.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10471.value)))+(x10472.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10473=IKsin(j4);
IkReal x10474=IKcos(j4);
IkReal x10475=(gconst4*r11);
IkReal x10476=(gconst5*r10);
IkReal x10477=(gconst4*r01);
IkReal x10478=(gconst5*r00);
IkReal x10479=(gconst4*r21);
IkReal x10480=(gconst5*r20);
IkReal x10481=((1.0)*x10474);
IkReal x10482=((1.0)*x10473);
evalcond[0]=((((-1.0)*r22*x10481))+(((-1.0)*x10480*x10482))+((x10473*x10479)));
evalcond[1]=((((-1.0)*x10478*x10482))+((x10473*x10477))+(((-1.0)*r02*x10481)));
evalcond[2]=(((x10474*x10476))+(((-1.0)*r12*x10482))+(((-1.0)*x10475*x10481)));
evalcond[3]=((-1.0)+(((-1.0)*x10476*x10482))+((x10473*x10475))+(((-1.0)*r12*x10481)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10477*x10481))+((cj1*sj2))+((x10474*x10478))+(((-1.0)*r02*x10482)));
evalcond[5]=(((x10474*x10480))+(((-1.0)*r22*x10482))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10479*x10481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10483=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10483.valid){
continue;
}
CheckValue<IkReal> x10484 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10484.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10483.value)))+(x10484.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10485=IKsin(j4);
IkReal x10486=IKcos(j4);
IkReal x10487=(gconst4*r11);
IkReal x10488=(gconst5*r10);
IkReal x10489=(gconst4*r01);
IkReal x10490=(gconst5*r00);
IkReal x10491=(gconst4*r21);
IkReal x10492=(gconst5*r20);
IkReal x10493=((1.0)*x10486);
IkReal x10494=((1.0)*x10485);
evalcond[0]=((((-1.0)*r22*x10493))+(((-1.0)*x10492*x10494))+((x10485*x10491)));
evalcond[1]=((((-1.0)*x10490*x10494))+((x10485*x10489))+(((-1.0)*r02*x10493)));
evalcond[2]=((((-1.0)*r12*x10494))+((x10486*x10488))+(((-1.0)*x10487*x10493)));
evalcond[3]=((-1.0)+(((-1.0)*x10488*x10494))+(((-1.0)*r12*x10493))+((x10485*x10487)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10489*x10493))+((cj1*sj2))+((x10486*x10490))+(((-1.0)*r02*x10494)));
evalcond[5]=((((-1.0)*r22*x10494))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10491*x10493))+((x10486*x10492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10495=((-1.0)*r21);
CheckValue<IkReal> x10498 = IKatan2WithCheck(IkReal(x10495),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10498.valid){
continue;
}
IkReal x10496=((1.0)*(x10498.value));
IkReal x10497=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10496)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10496)));
IkReal gconst4=(x10495*x10497);
IkReal gconst5=((1.0)*r20*x10497);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10499=((-1.0)*r21);
CheckValue<IkReal> x10502 = IKatan2WithCheck(IkReal(x10499),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10502.valid){
continue;
}
IkReal x10500=((1.0)*(x10502.value));
IkReal x10501=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10500)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10500)));
IkReal gconst4=(x10499*x10501);
IkReal gconst5=((1.0)*r20*x10501);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10503=((-1.0)*r21);
CheckValue<IkReal> x10506 = IKatan2WithCheck(IkReal(x10503),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10506.valid){
continue;
}
IkReal x10504=((1.0)*(x10506.value));
IkReal x10505=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10504)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10504)));
IkReal gconst4=(x10503*x10505);
IkReal gconst5=((1.0)*r20*x10505);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10507=(gconst5*r10);
IkReal x10508=(gconst4*r11);
CheckValue<IkReal> x10509=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10507*x10507)+(x10508*x10508)+(((-2.0)*x10507*x10508)))),-1);
if(!x10509.valid){
continue;
}
CheckValue<IkReal> x10510 = IKatan2WithCheck(IkReal((x10508+(((-1.0)*x10507)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10510.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10509.value)))+(x10510.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10511=IKcos(j4);
IkReal x10512=IKsin(j4);
IkReal x10513=(gconst4*r11);
IkReal x10514=(gconst5*r10);
IkReal x10515=(gconst5*r00);
IkReal x10516=(gconst5*r20);
IkReal x10517=((1.0)*x10511);
IkReal x10518=(gconst4*x10511);
IkReal x10519=((1.0)*x10512);
IkReal x10520=(gconst4*x10512);
evalcond[0]=(((r12*x10512))+((x10511*x10513))+(((-1.0)*x10514*x10517)));
evalcond[1]=((((-1.0)*r22*x10517))+((r21*x10520))+(((-1.0)*x10516*x10519)));
evalcond[2]=((((-1.0)*r02*x10517))+(((-1.0)*x10515*x10519))+((r01*x10520)));
evalcond[3]=((-1.0)+((x10512*x10513))+(((-1.0)*x10514*x10519))+(((-1.0)*r12*x10517)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x10518))+(((-1.0)*x10515*x10517))+((r02*x10512)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10516*x10517))+((r21*x10518))+((r22*x10512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10521=((1.0)*gconst5);
CheckValue<IkReal> x10522=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10521))+(((-1.0)*gconst4*r20)))),-1);
if(!x10522.valid){
continue;
}
CheckValue<IkReal> x10523 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10521)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10522.value)))+(x10523.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10524=IKcos(j4);
IkReal x10525=IKsin(j4);
IkReal x10526=(gconst4*r11);
IkReal x10527=(gconst5*r10);
IkReal x10528=(gconst5*r00);
IkReal x10529=(gconst5*r20);
IkReal x10530=((1.0)*x10524);
IkReal x10531=(gconst4*x10524);
IkReal x10532=((1.0)*x10525);
IkReal x10533=(gconst4*x10525);
evalcond[0]=(((x10524*x10526))+((r12*x10525))+(((-1.0)*x10527*x10530)));
evalcond[1]=((((-1.0)*r22*x10530))+((r21*x10533))+(((-1.0)*x10529*x10532)));
evalcond[2]=((((-1.0)*r02*x10530))+((r01*x10533))+(((-1.0)*x10528*x10532)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10530))+((x10525*x10526))+(((-1.0)*x10527*x10532)));
evalcond[4]=(((cj2*sj1))+((r02*x10525))+((cj1*sj2))+((r01*x10531))+(((-1.0)*x10528*x10530)));
evalcond[5]=(((r22*x10525))+((r21*x10531))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10529*x10530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10534=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10534.valid){
continue;
}
CheckValue<IkReal> x10535 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10535.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10534.value)))+(x10535.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10536=IKcos(j4);
IkReal x10537=IKsin(j4);
IkReal x10538=(gconst4*r11);
IkReal x10539=(gconst5*r10);
IkReal x10540=(gconst5*r00);
IkReal x10541=(gconst5*r20);
IkReal x10542=((1.0)*x10536);
IkReal x10543=(gconst4*x10536);
IkReal x10544=((1.0)*x10537);
IkReal x10545=(gconst4*x10537);
evalcond[0]=(((x10536*x10538))+(((-1.0)*x10539*x10542))+((r12*x10537)));
evalcond[1]=((((-1.0)*x10541*x10544))+(((-1.0)*r22*x10542))+((r21*x10545)));
evalcond[2]=((((-1.0)*r02*x10542))+((r01*x10545))+(((-1.0)*x10540*x10544)));
evalcond[3]=((-1.0)+((x10537*x10538))+(((-1.0)*x10539*x10544))+(((-1.0)*r12*x10542)));
evalcond[4]=(((cj2*sj1))+((r02*x10537))+((cj1*sj2))+((r01*x10543))+(((-1.0)*x10540*x10542)));
evalcond[5]=(((r22*x10537))+(((-1.0)*x10541*x10542))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10546=((-1.0)*r21);
CheckValue<IkReal> x10549 = IKatan2WithCheck(IkReal(x10546),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10549.valid){
continue;
}
IkReal x10547=((1.0)*(x10549.value));
IkReal x10548=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10547)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10547)));
IkReal gconst4=(x10546*x10548);
IkReal gconst5=((1.0)*r20*x10548);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10550=((-1.0)*r21);
CheckValue<IkReal> x10553 = IKatan2WithCheck(IkReal(x10550),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10553.valid){
continue;
}
IkReal x10551=((1.0)*(x10553.value));
IkReal x10552=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10551)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10551)));
IkReal gconst4=(x10550*x10552);
IkReal gconst5=((1.0)*r20*x10552);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10554=((-1.0)*r21);
CheckValue<IkReal> x10557 = IKatan2WithCheck(IkReal(x10554),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10557.valid){
continue;
}
IkReal x10555=((1.0)*(x10557.value));
IkReal x10556=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10555)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10555)));
IkReal gconst4=(x10554*x10556);
IkReal gconst5=((1.0)*r20*x10556);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10558=(gconst5*r10);
IkReal x10559=(gconst4*r11);
CheckValue<IkReal> x10560 = IKatan2WithCheck(IkReal(((((-1.0)*x10558))+x10559)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10560.valid){
continue;
}
CheckValue<IkReal> x10561=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10558*x10559))+(r12*r12)+(x10558*x10558)+(x10559*x10559))),-1);
if(!x10561.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10560.value)+(((1.5707963267949)*(x10561.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10562=IKcos(j4);
IkReal x10563=IKsin(j4);
IkReal x10564=(gconst5*r10);
IkReal x10565=(gconst5*r00);
IkReal x10566=(gconst5*r20);
IkReal x10567=((1.0)*x10562);
IkReal x10568=(gconst4*x10563);
IkReal x10569=(gconst4*x10562);
IkReal x10570=((1.0)*x10563);
evalcond[0]=((((-1.0)*x10564*x10567))+((r12*x10563))+((r11*x10569)));
evalcond[1]=((((-1.0)*r22*x10567))+((r21*x10568))+(((-1.0)*x10566*x10570)));
evalcond[2]=(((r01*x10568))+(((-1.0)*r02*x10567))+(((-1.0)*x10565*x10570)));
evalcond[3]=((-1.0)+(((-1.0)*x10564*x10570))+(((-1.0)*r12*x10567))+((r11*x10568)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x10569))+((r22*x10563))+(((-1.0)*x10566*x10567)));
evalcond[5]=(((r01*x10569))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r02*x10563))+(((-1.0)*x10565*x10567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10571=((1.0)*gconst5);
CheckValue<IkReal> x10572 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10571))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10572.valid){
continue;
}
CheckValue<IkReal> x10573=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r20))+(((-1.0)*r21*x10571)))),-1);
if(!x10573.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10572.value)+(((1.5707963267949)*(x10573.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10574=IKcos(j4);
IkReal x10575=IKsin(j4);
IkReal x10576=(gconst5*r10);
IkReal x10577=(gconst5*r00);
IkReal x10578=(gconst5*r20);
IkReal x10579=((1.0)*x10574);
IkReal x10580=(gconst4*x10575);
IkReal x10581=(gconst4*x10574);
IkReal x10582=((1.0)*x10575);
evalcond[0]=(((r11*x10581))+(((-1.0)*x10576*x10579))+((r12*x10575)));
evalcond[1]=((((-1.0)*x10578*x10582))+(((-1.0)*r22*x10579))+((r21*x10580)));
evalcond[2]=((((-1.0)*x10577*x10582))+(((-1.0)*r02*x10579))+((r01*x10580)));
evalcond[3]=((-1.0)+((r11*x10580))+(((-1.0)*r12*x10579))+(((-1.0)*x10576*x10582)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x10581))+((r22*x10575))+(((-1.0)*x10578*x10579)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x10577*x10579))+((r02*x10575))+((cj1*cj2))+((r01*x10581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10583=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10583.valid){
continue;
}
CheckValue<IkReal> x10584 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10583.value)))+(x10584.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10585=IKcos(j4);
IkReal x10586=IKsin(j4);
IkReal x10587=(gconst5*r10);
IkReal x10588=(gconst5*r00);
IkReal x10589=(gconst5*r20);
IkReal x10590=((1.0)*x10585);
IkReal x10591=(gconst4*x10586);
IkReal x10592=(gconst4*x10585);
IkReal x10593=((1.0)*x10586);
evalcond[0]=(((r12*x10586))+(((-1.0)*x10587*x10590))+((r11*x10592)));
evalcond[1]=(((r21*x10591))+(((-1.0)*r22*x10590))+(((-1.0)*x10589*x10593)));
evalcond[2]=((((-1.0)*r02*x10590))+((r01*x10591))+(((-1.0)*x10588*x10593)));
evalcond[3]=((-1.0)+(((-1.0)*x10587*x10593))+(((-1.0)*r12*x10590))+((r11*x10591)));
evalcond[4]=(((r21*x10592))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10589*x10590))+((r22*x10586)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x10592))+(((-1.0)*x10588*x10590))+((r02*x10586))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10594=((-1.0)*r21);
CheckValue<IkReal> x10597 = IKatan2WithCheck(IkReal(x10594),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10597.valid){
continue;
}
IkReal x10595=((1.0)*(x10597.value));
IkReal x10596=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10595)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10595)));
IkReal gconst4=(x10594*x10596);
IkReal gconst5=((1.0)*r20*x10596);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10598=((-1.0)*r21);
CheckValue<IkReal> x10601 = IKatan2WithCheck(IkReal(x10598),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10601.valid){
continue;
}
IkReal x10599=((1.0)*(x10601.value));
IkReal x10600=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10599)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10599)));
IkReal gconst4=(x10598*x10600);
IkReal gconst5=((1.0)*r20*x10600);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10602=((-1.0)*r21);
CheckValue<IkReal> x10605 = IKatan2WithCheck(IkReal(x10602),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10605.valid){
continue;
}
IkReal x10603=((1.0)*(x10605.value));
IkReal x10604=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10603)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10603)));
IkReal gconst4=(x10602*x10604);
IkReal gconst5=((1.0)*r20*x10604);
IkReal x10606=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10610=IKPowWithIntegerCheck(x10606,-1);
if(!x10610.valid){
continue;
}
IkReal x10607=x10610.value;
IkReal x10608=((1.0)*x10607);
IkReal x10609=((((-1.0)*x10608*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x10607))+(((-1.0)*x10608*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12))));
j4eval[0]=x10609;
j4eval[1]=r12;
j4eval[2]=x10606;
j4eval[3]=IKsign(x10609);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10611=(gconst5*r10);
IkReal x10612=(gconst4*r11);
CheckValue<IkReal> x10613=IKPowWithIntegerCheck(IKsign(((((2.0)*x10611*x10612))+(((-1.0)*(x10612*x10612)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10611*x10611))))),-1);
if(!x10613.valid){
continue;
}
CheckValue<IkReal> x10614 = IKatan2WithCheck(IkReal(((((-1.0)*x10612))+x10611)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10613.value)))+(x10614.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10615=IKsin(j4);
IkReal x10616=IKcos(j4);
IkReal x10617=(gconst4*r11);
IkReal x10618=(gconst5*r10);
IkReal x10619=(gconst5*r00);
IkReal x10620=(gconst5*r20);
IkReal x10621=((1.0)*x10616);
IkReal x10622=(gconst4*x10615);
IkReal x10623=((1.0)*x10615);
evalcond[0]=(((r21*x10622))+(((-1.0)*r22*x10621))+(((-1.0)*x10620*x10623)));
evalcond[1]=((((-1.0)*r02*x10621))+((r01*x10622))+(((-1.0)*x10619*x10623)));
evalcond[2]=((((-1.0)*x10617*x10621))+((x10616*x10618))+(((-1.0)*r12*x10623)));
evalcond[3]=((-1.0)+(((-1.0)*x10618*x10623))+(((-1.0)*r12*x10621))+((x10615*x10617)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10616*x10620))+(((-1.0)*r22*x10623))+(((-1.0)*gconst4*r21*x10621)));
evalcond[5]=((((-1.0)*r02*x10623))+((x10616*x10619))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst4*r01*x10621))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10624=((1.0)*gconst5);
CheckValue<IkReal> x10625 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10624))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10625.valid){
continue;
}
CheckValue<IkReal> x10626=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10624))+(((-1.0)*gconst4*r20)))),-1);
if(!x10626.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10625.value)+(((1.5707963267949)*(x10626.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10627=IKsin(j4);
IkReal x10628=IKcos(j4);
IkReal x10629=(gconst4*r11);
IkReal x10630=(gconst5*r10);
IkReal x10631=(gconst5*r00);
IkReal x10632=(gconst5*r20);
IkReal x10633=((1.0)*x10628);
IkReal x10634=(gconst4*x10627);
IkReal x10635=((1.0)*x10627);
evalcond[0]=((((-1.0)*x10632*x10635))+(((-1.0)*r22*x10633))+((r21*x10634)));
evalcond[1]=((((-1.0)*r02*x10633))+((r01*x10634))+(((-1.0)*x10631*x10635)));
evalcond[2]=(((x10628*x10630))+(((-1.0)*r12*x10635))+(((-1.0)*x10629*x10633)));
evalcond[3]=((-1.0)+((x10627*x10629))+(((-1.0)*r12*x10633))+(((-1.0)*x10630*x10635)));
evalcond[4]=(((cj2*sj1))+((x10628*x10632))+((cj1*sj2))+(((-1.0)*gconst4*r21*x10633))+(((-1.0)*r22*x10635)));
evalcond[5]=((((-1.0)*r02*x10635))+((x10628*x10631))+(((-1.0)*gconst4*r01*x10633))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10636=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10636.valid){
continue;
}
CheckValue<IkReal> x10637 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10636.value)))+(x10637.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10638=IKsin(j4);
IkReal x10639=IKcos(j4);
IkReal x10640=(gconst4*r11);
IkReal x10641=(gconst5*r10);
IkReal x10642=(gconst5*r00);
IkReal x10643=(gconst5*r20);
IkReal x10644=((1.0)*x10639);
IkReal x10645=(gconst4*x10638);
IkReal x10646=((1.0)*x10638);
evalcond[0]=(((r21*x10645))+(((-1.0)*r22*x10644))+(((-1.0)*x10643*x10646)));
evalcond[1]=((((-1.0)*r02*x10644))+((r01*x10645))+(((-1.0)*x10642*x10646)));
evalcond[2]=((((-1.0)*x10640*x10644))+((x10639*x10641))+(((-1.0)*r12*x10646)));
evalcond[3]=((-1.0)+(((-1.0)*x10641*x10646))+((x10638*x10640))+(((-1.0)*r12*x10644)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10639*x10643))+(((-1.0)*r22*x10646))+(((-1.0)*gconst4*r21*x10644)));
evalcond[5]=((((-1.0)*r02*x10646))+(((-1.0)*sj1*sj2))+((x10639*x10642))+(((-1.0)*gconst4*r01*x10644))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10647=((-1.0)*r21);
IkReal x10648=((-1.0)*px);
CheckValue<IkReal> x10650 = IKatan2WithCheck(IkReal(x10647),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10650.valid){
continue;
}
IkReal x10649=((1.0)*(x10650.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10649)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10648);
rxp1_1=(px*r21);
rxp1_2=(r11*x10648);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10649)));
IkReal gconst4=x10647;
IkReal gconst5=((1.0)*r20);
IkReal x10651=((1.0)*cj3);
IkReal x10652=(r10*r20);
IkReal x10653=(r11*r21);
j4eval[0]=((((-1.0)*x10652))+(((-1.0)*x10653)));
j4eval[1]=((((-1.0)*x10651*x10653))+(((-1.0)*x10651*x10652)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10654=((-1.0)*r21);
IkReal x10655=((-1.0)*px);
CheckValue<IkReal> x10657 = IKatan2WithCheck(IkReal(x10654),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10657.valid){
continue;
}
IkReal x10656=((1.0)*(x10657.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10656)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10655);
rxp1_1=(px*r21);
rxp1_2=(r11*x10655);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10656)));
IkReal gconst4=x10654;
IkReal gconst5=((1.0)*r20);
IkReal x10658=((1.0)*r11*r21);
IkReal x10659=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10658))+(((-1.0)*x10659)));
j4eval[1]=(((sj3*x10658))+((sj3*x10659)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10660=((-1.0)*r21);
IkReal x10661=((-1.0)*px);
CheckValue<IkReal> x10663 = IKatan2WithCheck(IkReal(x10660),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10663.valid){
continue;
}
IkReal x10662=((1.0)*(x10663.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10662)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10661);
rxp1_1=(px*r21);
rxp1_2=(r11*x10661);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10662)));
IkReal gconst4=x10660;
IkReal gconst5=((1.0)*r20);
IkReal x10664=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r20*x10664))+(((-1.0)*r11*r21*x10664)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10665=((1.0)*r10);
CheckValue<IkReal> x10666=IKPowWithIntegerCheck(cj3,-1);
if(!x10666.valid){
continue;
}
CheckValue<IkReal> x10667=IKPowWithIntegerCheck(r02,-1);
if(!x10667.valid){
continue;
}
CheckValue<IkReal> x10668=IKPowWithIntegerCheck((((cj3*gconst4*r11))+(((-1.0)*cj3*gconst5*x10665))),-1);
if(!x10668.valid){
continue;
}
if( IKabs(((x10666.value)*(x10667.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10668.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10665)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10666.value)*(x10667.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x10668.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10665))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10666.value)*(x10667.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x10668.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10665))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10669=IKsin(j4);
IkReal x10670=IKcos(j4);
IkReal x10671=(cj2*sj1);
IkReal x10672=(cj1*sj2);
IkReal x10673=(gconst5*sj3);
IkReal x10674=(gconst4*r11);
IkReal x10675=(sj1*sj2);
IkReal x10676=((1.0)*gconst5);
IkReal x10677=(cj1*cj2);
IkReal x10678=(gconst4*r21);
IkReal x10679=(cj3*gconst4);
IkReal x10680=(gconst4*sj3);
IkReal x10681=(cj3*gconst5);
IkReal x10682=(r20*x10670);
IkReal x10683=(r10*x10670);
IkReal x10684=(cj3*x10670);
IkReal x10685=(r02*x10669);
IkReal x10686=(x10671+x10672);
IkReal x10687=((1.0)*sj3*x10670);
evalcond[0]=((-1.0)*r02*x10670);
evalcond[1]=(((x10669*x10678))+(((-1.0)*r20*x10669*x10676)));
evalcond[2]=(((cj3*x10685))+(((-1.0)*x10675))+x10677);
evalcond[3]=((((-1.0)*sj3*x10685))+x10686);
evalcond[4]=((-1.0)+((x10669*x10674))+(((-1.0)*r10*x10669*x10676)));
evalcond[5]=(((x10674*x10684))+((r11*x10673))+(((-1.0)*cj3*x10676*x10683))+((r10*x10680)));
evalcond[6]=(((x10673*x10683))+((r10*x10679))+((r11*x10681))+(((-1.0)*x10674*x10687)));
evalcond[7]=(((r20*x10680))+(((-1.0)*cj3*x10676*x10682))+((x10678*x10684))+((r21*x10673))+x10686);
evalcond[8]=(((x10673*x10682))+(((-1.0)*x10678*x10687))+(((-1.0)*x10677))+((r20*x10679))+((r21*x10681))+x10675);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10688=((1.0)*gconst5);
IkReal x10689=(gconst4*r11);
CheckValue<IkReal> x10690=IKPowWithIntegerCheck(((((-1.0)*r10*x10688))+x10689),-1);
if(!x10690.valid){
continue;
}
CheckValue<IkReal> x10691=IKPowWithIntegerCheck(((((-1.0)*sj3*x10689))+((gconst5*r10*sj3))),-1);
if(!x10691.valid){
continue;
}
if( IKabs(x10690.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10691.value)*(((((-1.0)*cj3*r11*x10688))+(((-1.0)*cj3*gconst4*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10690.value)+IKsqr(((x10691.value)*(((((-1.0)*cj3*r11*x10688))+(((-1.0)*cj3*gconst4*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10690.value, ((x10691.value)*(((((-1.0)*cj3*r11*x10688))+(((-1.0)*cj3*gconst4*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10692=IKsin(j4);
IkReal x10693=IKcos(j4);
IkReal x10694=(cj2*sj1);
IkReal x10695=(cj1*sj2);
IkReal x10696=(gconst5*sj3);
IkReal x10697=(gconst4*r11);
IkReal x10698=(sj1*sj2);
IkReal x10699=((1.0)*gconst5);
IkReal x10700=(cj1*cj2);
IkReal x10701=(gconst4*r21);
IkReal x10702=(cj3*gconst4);
IkReal x10703=(gconst4*sj3);
IkReal x10704=(cj3*gconst5);
IkReal x10705=(r20*x10693);
IkReal x10706=(r10*x10693);
IkReal x10707=(cj3*x10693);
IkReal x10708=(r02*x10692);
IkReal x10709=(x10695+x10694);
IkReal x10710=((1.0)*sj3*x10693);
evalcond[0]=((-1.0)*r02*x10693);
evalcond[1]=((((-1.0)*r20*x10692*x10699))+((x10692*x10701)));
evalcond[2]=(((cj3*x10708))+(((-1.0)*x10698))+x10700);
evalcond[3]=(x10709+(((-1.0)*sj3*x10708)));
evalcond[4]=((-1.0)+((x10692*x10697))+(((-1.0)*r10*x10692*x10699)));
evalcond[5]=(((r11*x10696))+((r10*x10703))+((x10697*x10707))+(((-1.0)*cj3*x10699*x10706)));
evalcond[6]=(((r11*x10704))+((x10696*x10706))+((r10*x10702))+(((-1.0)*x10697*x10710)));
evalcond[7]=(((r21*x10696))+((x10701*x10707))+(((-1.0)*cj3*x10699*x10705))+x10709+((r20*x10703)));
evalcond[8]=((((-1.0)*x10700))+((x10696*x10705))+((r21*x10704))+((r20*x10702))+x10698+(((-1.0)*x10701*x10710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10711=((1.0)*sj3);
IkReal x10712=(gconst4*r11);
IkReal x10713=((1.0)*gconst5*r10);
CheckValue<IkReal> x10714=IKPowWithIntegerCheck(((((-1.0)*x10713))+x10712),-1);
if(!x10714.valid){
continue;
}
CheckValue<IkReal> x10715=IKPowWithIntegerCheck((((cj3*x10712))+(((-1.0)*cj3*x10713))),-1);
if(!x10715.valid){
continue;
}
if( IKabs(x10714.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10715.value)*(((((-1.0)*gconst5*r11*x10711))+(((-1.0)*gconst4*r10*x10711)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10714.value)+IKsqr(((x10715.value)*(((((-1.0)*gconst5*r11*x10711))+(((-1.0)*gconst4*r10*x10711))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10714.value, ((x10715.value)*(((((-1.0)*gconst5*r11*x10711))+(((-1.0)*gconst4*r10*x10711))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10716=IKsin(j4);
IkReal x10717=IKcos(j4);
IkReal x10718=(cj2*sj1);
IkReal x10719=(cj1*sj2);
IkReal x10720=(gconst5*sj3);
IkReal x10721=(gconst4*r11);
IkReal x10722=(sj1*sj2);
IkReal x10723=((1.0)*gconst5);
IkReal x10724=(cj1*cj2);
IkReal x10725=(gconst4*r21);
IkReal x10726=(cj3*gconst4);
IkReal x10727=(gconst4*sj3);
IkReal x10728=(cj3*gconst5);
IkReal x10729=(r20*x10717);
IkReal x10730=(r10*x10717);
IkReal x10731=(cj3*x10717);
IkReal x10732=(r02*x10716);
IkReal x10733=(x10718+x10719);
IkReal x10734=((1.0)*sj3*x10717);
evalcond[0]=((-1.0)*r02*x10717);
evalcond[1]=(((x10716*x10725))+(((-1.0)*r20*x10716*x10723)));
evalcond[2]=((((-1.0)*x10722))+x10724+((cj3*x10732)));
evalcond[3]=((((-1.0)*sj3*x10732))+x10733);
evalcond[4]=((-1.0)+(((-1.0)*r10*x10716*x10723))+((x10716*x10721)));
evalcond[5]=(((r10*x10727))+(((-1.0)*cj3*x10723*x10730))+((x10721*x10731))+((r11*x10720)));
evalcond[6]=(((r10*x10726))+(((-1.0)*x10721*x10734))+((x10720*x10730))+((r11*x10728)));
evalcond[7]=(((r21*x10720))+((x10725*x10731))+((r20*x10727))+x10733+(((-1.0)*cj3*x10723*x10729)));
evalcond[8]=((((-1.0)*x10725*x10734))+((r21*x10728))+((x10720*x10729))+(((-1.0)*x10724))+((r20*x10726))+x10722);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10735=gconst4*gconst4;
IkReal x10736=gconst5*gconst5;
IkReal x10737=(r10*r21);
IkReal x10738=((1.0)*cj3);
IkReal x10739=(r11*r21);
IkReal x10740=(r11*r20);
IkReal x10741=(r22*sj3);
IkReal x10742=(gconst4*r10);
IkReal x10743=((1.0)*sj3);
IkReal x10744=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10745=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10735*x10738*x10739))+((x10737*x10744))+(((-1.0)*r10*r20*x10736*x10738))+(((-1.0)*r12*r22*x10738))+((x10740*x10744)))),-1);
if(!x10745.valid){
continue;
}
CheckValue<IkReal> x10746 = IKatan2WithCheck(IkReal((((gconst5*r11*x10741))+((x10741*x10742)))),IkReal(((((-1.0)*gconst5*r20*x10742*x10743))+((gconst4*gconst5*sj3*x10739))+(((-1.0)*x10736*x10740*x10743))+((sj3*x10735*x10737)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10746.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10745.value)))+(x10746.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10747=IKsin(j4);
IkReal x10748=IKcos(j4);
IkReal x10749=(cj2*sj1);
IkReal x10750=(cj1*sj2);
IkReal x10751=(gconst5*sj3);
IkReal x10752=(gconst4*r11);
IkReal x10753=(sj1*sj2);
IkReal x10754=(gconst5*r10);
IkReal x10755=(cj1*cj2);
IkReal x10756=(gconst4*r01);
IkReal x10757=(gconst4*r21);
IkReal x10758=(gconst5*r00);
IkReal x10759=(gconst4*sj3);
IkReal x10760=(cj3*gconst5);
IkReal x10761=(cj3*gconst4);
IkReal x10762=((1.0)*x10748);
IkReal x10763=((1.0)*x10747);
IkReal x10764=(cj3*x10747);
IkReal x10765=(cj3*x10748);
IkReal x10766=(x10749+x10750);
evalcond[0]=((((-1.0)*gconst5*r20*x10763))+((x10747*x10757))+(((-1.0)*r22*x10762)));
evalcond[1]=(((x10747*x10756))+(((-1.0)*r02*x10762))+(((-1.0)*x10758*x10763)));
evalcond[2]=((-1.0)+(((-1.0)*x10754*x10763))+((x10747*x10752))+(((-1.0)*r12*x10762)));
evalcond[3]=(((r12*x10764))+((r10*x10759))+(((-1.0)*cj3*x10754*x10762))+((r11*x10751))+((x10752*x10765)));
evalcond[4]=(((r10*x10748*x10751))+((r11*x10760))+(((-1.0)*sj3*x10752*x10762))+(((-1.0)*r12*sj3*x10763))+((r10*x10761)));
evalcond[5]=((((-1.0)*r20*x10760*x10762))+((r20*x10759))+((x10757*x10765))+((r22*x10764))+x10766+((r21*x10751)));
evalcond[6]=((((-1.0)*cj3*x10758*x10762))+((x10756*x10765))+x10755+((r02*x10764))+((r01*x10751))+((r00*x10759))+(((-1.0)*x10753)));
evalcond[7]=(((r01*x10760))+(((-1.0)*r02*sj3*x10763))+((r00*x10761))+x10766+(((-1.0)*sj3*x10756*x10762))+((r00*x10748*x10751)));
evalcond[8]=((((-1.0)*sj3*x10757*x10762))+((r20*x10761))+((r20*x10748*x10751))+((r21*x10760))+(((-1.0)*r22*sj3*x10763))+x10753+(((-1.0)*x10755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10767=((1.0)*gconst5);
CheckValue<IkReal> x10768 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10767)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10768.valid){
continue;
}
CheckValue<IkReal> x10769=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10767))+(((-1.0)*gconst4*r20)))),-1);
if(!x10769.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10768.value)+(((1.5707963267949)*(x10769.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10770=IKsin(j4);
IkReal x10771=IKcos(j4);
IkReal x10772=(cj2*sj1);
IkReal x10773=(cj1*sj2);
IkReal x10774=(gconst5*sj3);
IkReal x10775=(gconst4*r11);
IkReal x10776=(sj1*sj2);
IkReal x10777=(gconst5*r10);
IkReal x10778=(cj1*cj2);
IkReal x10779=(gconst4*r01);
IkReal x10780=(gconst4*r21);
IkReal x10781=(gconst5*r00);
IkReal x10782=(gconst4*sj3);
IkReal x10783=(cj3*gconst5);
IkReal x10784=(cj3*gconst4);
IkReal x10785=((1.0)*x10771);
IkReal x10786=((1.0)*x10770);
IkReal x10787=(cj3*x10770);
IkReal x10788=(cj3*x10771);
IkReal x10789=(x10772+x10773);
evalcond[0]=(((x10770*x10780))+(((-1.0)*gconst5*r20*x10786))+(((-1.0)*r22*x10785)));
evalcond[1]=(((x10770*x10779))+(((-1.0)*r02*x10785))+(((-1.0)*x10781*x10786)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10785))+((x10770*x10775))+(((-1.0)*x10777*x10786)));
evalcond[3]=(((r11*x10774))+(((-1.0)*cj3*x10777*x10785))+((x10775*x10788))+((r12*x10787))+((r10*x10782)));
evalcond[4]=(((r11*x10783))+(((-1.0)*sj3*x10775*x10785))+(((-1.0)*r12*sj3*x10786))+((r10*x10771*x10774))+((r10*x10784)));
evalcond[5]=(((r22*x10787))+(((-1.0)*r20*x10783*x10785))+((r20*x10782))+((x10780*x10788))+((r21*x10774))+x10789);
evalcond[6]=(((x10779*x10788))+(((-1.0)*x10776))+((r02*x10787))+((r01*x10774))+((r00*x10782))+x10778+(((-1.0)*cj3*x10781*x10785)));
evalcond[7]=((((-1.0)*sj3*x10779*x10785))+(((-1.0)*r02*sj3*x10786))+((r01*x10783))+((r00*x10784))+((r00*x10771*x10774))+x10789);
evalcond[8]=(((r21*x10783))+(((-1.0)*sj3*x10780*x10785))+(((-1.0)*x10778))+(((-1.0)*r22*sj3*x10786))+((r20*x10784))+((r20*x10771*x10774))+x10776);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10790=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10790.valid){
continue;
}
CheckValue<IkReal> x10791 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10791.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10790.value)))+(x10791.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10792=IKsin(j4);
IkReal x10793=IKcos(j4);
IkReal x10794=(cj2*sj1);
IkReal x10795=(cj1*sj2);
IkReal x10796=(gconst5*sj3);
IkReal x10797=(gconst4*r11);
IkReal x10798=(sj1*sj2);
IkReal x10799=(gconst5*r10);
IkReal x10800=(cj1*cj2);
IkReal x10801=(gconst4*r01);
IkReal x10802=(gconst4*r21);
IkReal x10803=(gconst5*r00);
IkReal x10804=(gconst4*sj3);
IkReal x10805=(cj3*gconst5);
IkReal x10806=(cj3*gconst4);
IkReal x10807=((1.0)*x10793);
IkReal x10808=((1.0)*x10792);
IkReal x10809=(cj3*x10792);
IkReal x10810=(cj3*x10793);
IkReal x10811=(x10794+x10795);
evalcond[0]=(((x10792*x10802))+(((-1.0)*r22*x10807))+(((-1.0)*gconst5*r20*x10808)));
evalcond[1]=(((x10792*x10801))+(((-1.0)*x10803*x10808))+(((-1.0)*r02*x10807)));
evalcond[2]=((-1.0)+(((-1.0)*x10799*x10808))+((x10792*x10797))+(((-1.0)*r12*x10807)));
evalcond[3]=(((r10*x10804))+((x10797*x10810))+((r12*x10809))+((r11*x10796))+(((-1.0)*cj3*x10799*x10807)));
evalcond[4]=((((-1.0)*sj3*x10797*x10807))+((r10*x10793*x10796))+((r10*x10806))+(((-1.0)*r12*sj3*x10808))+((r11*x10805)));
evalcond[5]=(((r20*x10804))+((r21*x10796))+((r22*x10809))+((x10802*x10810))+(((-1.0)*r20*x10805*x10807))+x10811);
evalcond[6]=(((r00*x10804))+((r02*x10809))+(((-1.0)*x10798))+(((-1.0)*cj3*x10803*x10807))+((r01*x10796))+((x10801*x10810))+x10800);
evalcond[7]=((((-1.0)*r02*sj3*x10808))+(((-1.0)*sj3*x10801*x10807))+((r01*x10805))+((r00*x10806))+((r00*x10793*x10796))+x10811);
evalcond[8]=(((r20*x10806))+((r20*x10793*x10796))+(((-1.0)*sj3*x10802*x10807))+((r21*x10805))+(((-1.0)*x10800))+x10798+(((-1.0)*r22*sj3*x10808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10812=((-1.0)*r21);
CheckValue<IkReal> x10815 = IKatan2WithCheck(IkReal(x10812),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10815.valid){
continue;
}
IkReal x10813=((1.0)*(x10815.value));
IkReal x10814=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10813)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10813)));
IkReal gconst4=(x10812*x10814);
IkReal gconst5=((1.0)*r20*x10814);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10816=((-1.0)*r21);
CheckValue<IkReal> x10819 = IKatan2WithCheck(IkReal(x10816),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10819.valid){
continue;
}
IkReal x10817=((1.0)*(x10819.value));
IkReal x10818=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10817)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10817)));
IkReal gconst4=(x10816*x10818);
IkReal gconst5=((1.0)*r20*x10818);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10820=((-1.0)*r21);
CheckValue<IkReal> x10823 = IKatan2WithCheck(IkReal(x10820),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10823.valid){
continue;
}
IkReal x10821=((1.0)*(x10823.value));
IkReal x10822=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10821)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10821)));
IkReal gconst4=(x10820*x10822);
IkReal gconst5=((1.0)*r20*x10822);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10824=((-1.0)*r21);
CheckValue<IkReal> x10827 = IKatan2WithCheck(IkReal(x10824),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10827.valid){
continue;
}
IkReal x10825=((1.0)*(x10827.value));
IkReal x10826=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10825)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10825)));
IkReal gconst4=(x10824*x10826);
IkReal gconst5=((1.0)*r20*x10826);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10828=((-1.0)*r21);
CheckValue<IkReal> x10831 = IKatan2WithCheck(IkReal(x10828),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10831.valid){
continue;
}
IkReal x10829=((1.0)*(x10831.value));
IkReal x10830=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10829)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10829)));
IkReal gconst4=(x10828*x10830);
IkReal gconst5=((1.0)*r20*x10830);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10832=((-1.0)*r21);
CheckValue<IkReal> x10835 = IKatan2WithCheck(IkReal(x10832),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10835.valid){
continue;
}
IkReal x10833=((1.0)*(x10835.value));
IkReal x10834=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10833)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10833)));
IkReal gconst4=(x10832*x10834);
IkReal gconst5=((1.0)*r20*x10834);
IkReal x10836=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10840=IKPowWithIntegerCheck(x10836,-1);
if(!x10840.valid){
continue;
}
IkReal x10837=x10840.value;
IkReal x10838=((1.0)*x10837);
IkReal x10839=((((-2.0)*r00*r01*r20*r21*x10837))+(((-1.0)*(r02*r02)))+(((-1.0)*x10838*(r01*r01)*(r21*r21)))+(((-1.0)*x10838*(r00*r00)*(r20*r20))));
j4eval[0]=x10839;
j4eval[1]=r02;
j4eval[2]=x10836;
j4eval[3]=IKsign(x10839);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10841=(gconst5*r00);
IkReal x10842=(gconst4*r01);
CheckValue<IkReal> x10843 = IKatan2WithCheck(IkReal(((((-1.0)*x10842))+x10841)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10843.valid){
continue;
}
CheckValue<IkReal> x10844=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10842*x10842)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x10841*x10841)))+(((2.0)*x10841*x10842)))),-1);
if(!x10844.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10843.value)+(((1.5707963267949)*(x10844.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10845=IKsin(j4);
IkReal x10846=IKcos(j4);
IkReal x10847=(gconst4*r11);
IkReal x10848=((1.0)*cj1);
IkReal x10849=(gconst5*r10);
IkReal x10850=(gconst4*r01);
IkReal x10851=(gconst5*r00);
IkReal x10852=(gconst4*r21);
IkReal x10853=(gconst5*r20);
IkReal x10854=((1.0)*x10846);
IkReal x10855=((1.0)*x10845);
evalcond[0]=(((x10845*x10852))+(((-1.0)*x10853*x10855))+(((-1.0)*r22*x10854)));
evalcond[1]=((((-1.0)*x10849*x10855))+(((-1.0)*r12*x10854))+((x10845*x10847)));
evalcond[2]=(((x10846*x10851))+(((-1.0)*r02*x10855))+(((-1.0)*x10850*x10854)));
evalcond[3]=((-1.0)+((x10845*x10850))+(((-1.0)*r02*x10854))+(((-1.0)*x10851*x10855)));
evalcond[4]=((((-1.0)*cj2*x10848))+(((-1.0)*x10852*x10854))+((x10846*x10853))+((sj1*sj2))+(((-1.0)*r22*x10855)));
evalcond[5]=((((-1.0)*r12*x10855))+(((-1.0)*sj2*x10848))+(((-1.0)*cj2*sj1))+((x10846*x10849))+(((-1.0)*x10847*x10854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10856=((1.0)*gconst5);
CheckValue<IkReal> x10857 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10856))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10857.valid){
continue;
}
CheckValue<IkReal> x10858=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r10))+(((-1.0)*r11*x10856)))),-1);
if(!x10858.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10857.value)+(((1.5707963267949)*(x10858.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10859=IKsin(j4);
IkReal x10860=IKcos(j4);
IkReal x10861=(gconst4*r11);
IkReal x10862=((1.0)*cj1);
IkReal x10863=(gconst5*r10);
IkReal x10864=(gconst4*r01);
IkReal x10865=(gconst5*r00);
IkReal x10866=(gconst4*r21);
IkReal x10867=(gconst5*r20);
IkReal x10868=((1.0)*x10860);
IkReal x10869=((1.0)*x10859);
evalcond[0]=((((-1.0)*r22*x10868))+((x10859*x10866))+(((-1.0)*x10867*x10869)));
evalcond[1]=((((-1.0)*r12*x10868))+((x10859*x10861))+(((-1.0)*x10863*x10869)));
evalcond[2]=(((x10860*x10865))+(((-1.0)*x10864*x10868))+(((-1.0)*r02*x10869)));
evalcond[3]=((-1.0)+((x10859*x10864))+(((-1.0)*x10865*x10869))+(((-1.0)*r02*x10868)));
evalcond[4]=((((-1.0)*r22*x10869))+(((-1.0)*x10866*x10868))+((x10860*x10867))+((sj1*sj2))+(((-1.0)*cj2*x10862)));
evalcond[5]=((((-1.0)*r12*x10869))+((x10860*x10863))+(((-1.0)*cj2*sj1))+(((-1.0)*x10861*x10868))+(((-1.0)*sj2*x10862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10870 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10870.valid){
continue;
}
CheckValue<IkReal> x10871=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10871.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10870.value)+(((1.5707963267949)*(x10871.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10872=IKsin(j4);
IkReal x10873=IKcos(j4);
IkReal x10874=(gconst4*r11);
IkReal x10875=((1.0)*cj1);
IkReal x10876=(gconst5*r10);
IkReal x10877=(gconst4*r01);
IkReal x10878=(gconst5*r00);
IkReal x10879=(gconst4*r21);
IkReal x10880=(gconst5*r20);
IkReal x10881=((1.0)*x10873);
IkReal x10882=((1.0)*x10872);
evalcond[0]=((((-1.0)*x10880*x10882))+(((-1.0)*r22*x10881))+((x10872*x10879)));
evalcond[1]=((((-1.0)*x10876*x10882))+(((-1.0)*r12*x10881))+((x10872*x10874)));
evalcond[2]=((((-1.0)*r02*x10882))+(((-1.0)*x10877*x10881))+((x10873*x10878)));
evalcond[3]=((-1.0)+(((-1.0)*x10878*x10882))+(((-1.0)*r02*x10881))+((x10872*x10877)));
evalcond[4]=(((x10873*x10880))+((sj1*sj2))+(((-1.0)*x10879*x10881))+(((-1.0)*r22*x10882))+(((-1.0)*cj2*x10875)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*x10874*x10881))+(((-1.0)*sj2*x10875))+(((-1.0)*r12*x10882))+((x10873*x10876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10883=((-1.0)*r21);
CheckValue<IkReal> x10886 = IKatan2WithCheck(IkReal(x10883),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10886.valid){
continue;
}
IkReal x10884=((1.0)*(x10886.value));
IkReal x10885=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10884)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10884)));
IkReal gconst4=(x10883*x10885);
IkReal gconst5=((1.0)*r20*x10885);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10887=((-1.0)*r21);
CheckValue<IkReal> x10890 = IKatan2WithCheck(IkReal(x10887),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10890.valid){
continue;
}
IkReal x10888=((1.0)*(x10890.value));
IkReal x10889=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10888)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10888)));
IkReal gconst4=(x10887*x10889);
IkReal gconst5=((1.0)*r20*x10889);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10891=((-1.0)*r21);
CheckValue<IkReal> x10894 = IKatan2WithCheck(IkReal(x10891),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10894.valid){
continue;
}
IkReal x10892=((1.0)*(x10894.value));
IkReal x10893=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10892)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10892)));
IkReal gconst4=(x10891*x10893);
IkReal gconst5=((1.0)*r20*x10893);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10895=(gconst4*r01);
IkReal x10896=(gconst5*r00);
CheckValue<IkReal> x10897=IKPowWithIntegerCheck(IKsign(((x10896*x10896)+(((-2.0)*x10895*x10896))+(r02*r02)+(x10895*x10895))),-1);
if(!x10897.valid){
continue;
}
CheckValue<IkReal> x10898 = IKatan2WithCheck(IkReal(((((-1.0)*x10896))+x10895)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10898.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10897.value)))+(x10898.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10899=IKcos(j4);
IkReal x10900=IKsin(j4);
IkReal x10901=(gconst4*r11);
IkReal x10902=(gconst5*r10);
IkReal x10903=((1.0)*cj1);
IkReal x10904=(gconst5*r00);
IkReal x10905=(gconst5*r20);
IkReal x10906=((1.0)*x10899);
IkReal x10907=(gconst4*x10899);
IkReal x10908=((1.0)*x10900);
IkReal x10909=(gconst4*x10900);
evalcond[0]=(((r01*x10907))+(((-1.0)*x10904*x10906))+((r02*x10900)));
evalcond[1]=((((-1.0)*r22*x10906))+((r21*x10909))+(((-1.0)*x10905*x10908)));
evalcond[2]=(((x10900*x10901))+(((-1.0)*x10902*x10908))+(((-1.0)*r12*x10906)));
evalcond[3]=((-1.0)+((r01*x10909))+(((-1.0)*x10904*x10908))+(((-1.0)*r02*x10906)));
evalcond[4]=(((r22*x10900))+((sj1*sj2))+(((-1.0)*cj2*x10903))+((r21*x10907))+(((-1.0)*x10905*x10906)));
evalcond[5]=(((r12*x10900))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10903))+(((-1.0)*x10902*x10906))+((x10899*x10901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10910=((1.0)*gconst5);
CheckValue<IkReal> x10911=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10910))+(((-1.0)*gconst4*r10)))),-1);
if(!x10911.valid){
continue;
}
CheckValue<IkReal> x10912 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10910))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10911.value)))+(x10912.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10913=IKcos(j4);
IkReal x10914=IKsin(j4);
IkReal x10915=(gconst4*r11);
IkReal x10916=(gconst5*r10);
IkReal x10917=((1.0)*cj1);
IkReal x10918=(gconst5*r00);
IkReal x10919=(gconst5*r20);
IkReal x10920=((1.0)*x10913);
IkReal x10921=(gconst4*x10913);
IkReal x10922=((1.0)*x10914);
IkReal x10923=(gconst4*x10914);
evalcond[0]=(((r02*x10914))+(((-1.0)*x10918*x10920))+((r01*x10921)));
evalcond[1]=((((-1.0)*r22*x10920))+(((-1.0)*x10919*x10922))+((r21*x10923)));
evalcond[2]=((((-1.0)*r12*x10920))+((x10914*x10915))+(((-1.0)*x10916*x10922)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10920))+(((-1.0)*x10918*x10922))+((r01*x10923)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x10919*x10920))+((r21*x10921))+((r22*x10914))+(((-1.0)*cj2*x10917)));
evalcond[5]=((((-1.0)*sj2*x10917))+((x10913*x10915))+(((-1.0)*cj2*sj1))+((r12*x10914))+(((-1.0)*x10916*x10920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10924 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10924.valid){
continue;
}
CheckValue<IkReal> x10925=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10925.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10924.value)+(((1.5707963267949)*(x10925.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10926=IKcos(j4);
IkReal x10927=IKsin(j4);
IkReal x10928=(gconst4*r11);
IkReal x10929=(gconst5*r10);
IkReal x10930=((1.0)*cj1);
IkReal x10931=(gconst5*r00);
IkReal x10932=(gconst5*r20);
IkReal x10933=((1.0)*x10926);
IkReal x10934=(gconst4*x10926);
IkReal x10935=((1.0)*x10927);
IkReal x10936=(gconst4*x10927);
evalcond[0]=((((-1.0)*x10931*x10933))+((r02*x10927))+((r01*x10934)));
evalcond[1]=((((-1.0)*r22*x10933))+((r21*x10936))+(((-1.0)*x10932*x10935)));
evalcond[2]=((((-1.0)*x10929*x10935))+(((-1.0)*r12*x10933))+((x10927*x10928)));
evalcond[3]=((-1.0)+(((-1.0)*x10931*x10935))+(((-1.0)*r02*x10933))+((r01*x10936)));
evalcond[4]=(((sj1*sj2))+((r21*x10934))+(((-1.0)*cj2*x10930))+((r22*x10927))+(((-1.0)*x10932*x10933)));
evalcond[5]=((((-1.0)*x10929*x10933))+((x10926*x10928))+(((-1.0)*cj2*sj1))+((r12*x10927))+(((-1.0)*sj2*x10930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10937=((-1.0)*r21);
CheckValue<IkReal> x10940 = IKatan2WithCheck(IkReal(x10937),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10940.valid){
continue;
}
IkReal x10938=((1.0)*(x10940.value));
IkReal x10939=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10938)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10938)));
IkReal gconst4=(x10937*x10939);
IkReal gconst5=((1.0)*r20*x10939);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10941=((-1.0)*r21);
CheckValue<IkReal> x10944 = IKatan2WithCheck(IkReal(x10941),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10944.valid){
continue;
}
IkReal x10942=((1.0)*(x10944.value));
IkReal x10943=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10942)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10942)));
IkReal gconst4=(x10941*x10943);
IkReal gconst5=((1.0)*r20*x10943);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10945=((-1.0)*r21);
CheckValue<IkReal> x10948 = IKatan2WithCheck(IkReal(x10945),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10948.valid){
continue;
}
IkReal x10946=((1.0)*(x10948.value));
IkReal x10947=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10946)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10946)));
IkReal gconst4=(x10945*x10947);
IkReal gconst5=((1.0)*r20*x10947);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10949=(gconst4*r01);
IkReal x10950=(gconst5*r00);
CheckValue<IkReal> x10951=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10949*x10950))+(x10950*x10950)+(r02*r02)+(x10949*x10949))),-1);
if(!x10951.valid){
continue;
}
CheckValue<IkReal> x10952 = IKatan2WithCheck(IkReal(((((-1.0)*x10950))+x10949)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10952.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10951.value)))+(x10952.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10953=IKcos(j4);
IkReal x10954=IKsin(j4);
IkReal x10955=(gconst4*r11);
IkReal x10956=(gconst5*r10);
IkReal x10957=(gconst5*r00);
IkReal x10958=(gconst5*r20);
IkReal x10959=((1.0)*x10953);
IkReal x10960=(gconst4*x10953);
IkReal x10961=((1.0)*x10954);
IkReal x10962=(gconst4*x10954);
evalcond[0]=(((r02*x10954))+((r01*x10960))+(((-1.0)*x10957*x10959)));
evalcond[1]=((((-1.0)*r22*x10959))+(((-1.0)*x10958*x10961))+((r21*x10962)));
evalcond[2]=(((x10954*x10955))+(((-1.0)*r12*x10959))+(((-1.0)*x10956*x10961)));
evalcond[3]=((-1.0)+((r01*x10962))+(((-1.0)*x10957*x10961))+(((-1.0)*r02*x10959)));
evalcond[4]=(((cj2*sj1))+((r22*x10954))+((cj1*sj2))+((r21*x10960))+(((-1.0)*x10958*x10959)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x10953*x10955))+((r12*x10954))+(((-1.0)*x10956*x10959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10963=((1.0)*gconst5);
CheckValue<IkReal> x10964 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10963))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10964.valid){
continue;
}
CheckValue<IkReal> x10965=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10963))+(((-1.0)*gconst4*r10)))),-1);
if(!x10965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10964.value)+(((1.5707963267949)*(x10965.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10966=IKcos(j4);
IkReal x10967=IKsin(j4);
IkReal x10968=(gconst4*r11);
IkReal x10969=(gconst5*r10);
IkReal x10970=(gconst5*r00);
IkReal x10971=(gconst5*r20);
IkReal x10972=((1.0)*x10966);
IkReal x10973=(gconst4*x10966);
IkReal x10974=((1.0)*x10967);
IkReal x10975=(gconst4*x10967);
evalcond[0]=(((r02*x10967))+(((-1.0)*x10970*x10972))+((r01*x10973)));
evalcond[1]=((((-1.0)*x10971*x10974))+(((-1.0)*r22*x10972))+((r21*x10975)));
evalcond[2]=(((x10967*x10968))+(((-1.0)*x10969*x10974))+(((-1.0)*r12*x10972)));
evalcond[3]=((-1.0)+(((-1.0)*x10970*x10974))+((r01*x10975))+(((-1.0)*r02*x10972)));
evalcond[4]=((((-1.0)*x10971*x10972))+((cj2*sj1))+((cj1*sj2))+((r22*x10967))+((r21*x10973)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x10966*x10968))+((r12*x10967))+(((-1.0)*x10969*x10972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10976 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10976.valid){
continue;
}
CheckValue<IkReal> x10977=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10976.value)+(((1.5707963267949)*(x10977.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10978=IKcos(j4);
IkReal x10979=IKsin(j4);
IkReal x10980=(gconst4*r11);
IkReal x10981=(gconst5*r10);
IkReal x10982=(gconst5*r00);
IkReal x10983=(gconst5*r20);
IkReal x10984=((1.0)*x10978);
IkReal x10985=(gconst4*x10978);
IkReal x10986=((1.0)*x10979);
IkReal x10987=(gconst4*x10979);
evalcond[0]=(((r02*x10979))+((r01*x10985))+(((-1.0)*x10982*x10984)));
evalcond[1]=((((-1.0)*x10983*x10986))+((r21*x10987))+(((-1.0)*r22*x10984)));
evalcond[2]=(((x10979*x10980))+(((-1.0)*r12*x10984))+(((-1.0)*x10981*x10986)));
evalcond[3]=((-1.0)+((r01*x10987))+(((-1.0)*x10982*x10986))+(((-1.0)*r02*x10984)));
evalcond[4]=((((-1.0)*x10983*x10984))+((cj2*sj1))+((r21*x10985))+((cj1*sj2))+((r22*x10979)));
evalcond[5]=(((x10978*x10980))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10981*x10984))+((r12*x10979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10988=((-1.0)*r21);
CheckValue<IkReal> x10991 = IKatan2WithCheck(IkReal(x10988),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10991.valid){
continue;
}
IkReal x10989=((1.0)*(x10991.value));
IkReal x10990=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10989)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10989)));
IkReal gconst4=(x10988*x10990);
IkReal gconst5=((1.0)*r20*x10990);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10992=((-1.0)*r21);
CheckValue<IkReal> x10995 = IKatan2WithCheck(IkReal(x10992),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10995.valid){
continue;
}
IkReal x10993=((1.0)*(x10995.value));
IkReal x10994=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10993)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10993)));
IkReal gconst4=(x10992*x10994);
IkReal gconst5=((1.0)*r20*x10994);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10996=((-1.0)*r21);
CheckValue<IkReal> x10999 = IKatan2WithCheck(IkReal(x10996),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10999.valid){
continue;
}
IkReal x10997=((1.0)*(x10999.value));
IkReal x10998=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10997)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10997)));
IkReal gconst4=(x10996*x10998);
IkReal gconst5=((1.0)*r20*x10998);
IkReal x11000=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11004=IKPowWithIntegerCheck(x11000,-1);
if(!x11004.valid){
continue;
}
IkReal x11001=x11004.value;
IkReal x11002=((1.0)*x11001);
IkReal x11003=((((-2.0)*r00*r01*r20*r21*x11001))+(((-1.0)*x11002*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x11002*(r01*r01)*(r21*r21))));
j4eval[0]=x11003;
j4eval[1]=r02;
j4eval[2]=x11000;
j4eval[3]=IKsign(x11003);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11005=(gconst5*r00);
IkReal x11006=(gconst4*r01);
CheckValue<IkReal> x11007=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11005*x11005)))+(((-1.0)*(x11006*x11006)))+(((2.0)*x11005*x11006))+(((-1.0)*(r02*r02))))),-1);
if(!x11007.valid){
continue;
}
CheckValue<IkReal> x11008 = IKatan2WithCheck(IkReal((x11005+(((-1.0)*x11006)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11008.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11007.value)))+(x11008.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11009=IKsin(j4);
IkReal x11010=IKcos(j4);
IkReal x11011=(gconst4*r11);
IkReal x11012=(gconst5*r10);
IkReal x11013=(gconst4*r01);
IkReal x11014=(gconst5*r00);
IkReal x11015=(gconst4*r21);
IkReal x11016=(gconst5*r20);
IkReal x11017=((1.0)*x11010);
IkReal x11018=((1.0)*x11009);
evalcond[0]=((((-1.0)*r22*x11017))+((x11009*x11015))+(((-1.0)*x11016*x11018)));
evalcond[1]=((((-1.0)*x11012*x11018))+(((-1.0)*r12*x11017))+((x11009*x11011)));
evalcond[2]=((((-1.0)*x11013*x11017))+(((-1.0)*r02*x11018))+((x11010*x11014)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11017))+(((-1.0)*x11014*x11018))+((x11009*x11013)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11018))+((cj1*sj2))+(((-1.0)*x11015*x11017))+((x11010*x11016)));
evalcond[5]=((((-1.0)*x11011*x11017))+((x11010*x11012))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x11018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11019=((1.0)*gconst5);
CheckValue<IkReal> x11020 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x11019)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11020.valid){
continue;
}
CheckValue<IkReal> x11021=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11019))+(((-1.0)*gconst4*r10)))),-1);
if(!x11021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11020.value)+(((1.5707963267949)*(x11021.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11022=IKsin(j4);
IkReal x11023=IKcos(j4);
IkReal x11024=(gconst4*r11);
IkReal x11025=(gconst5*r10);
IkReal x11026=(gconst4*r01);
IkReal x11027=(gconst5*r00);
IkReal x11028=(gconst4*r21);
IkReal x11029=(gconst5*r20);
IkReal x11030=((1.0)*x11023);
IkReal x11031=((1.0)*x11022);
evalcond[0]=(((x11022*x11028))+(((-1.0)*x11029*x11031))+(((-1.0)*r22*x11030)));
evalcond[1]=(((x11022*x11024))+(((-1.0)*r12*x11030))+(((-1.0)*x11025*x11031)));
evalcond[2]=((((-1.0)*r02*x11031))+(((-1.0)*x11026*x11030))+((x11023*x11027)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11030))+((x11022*x11026))+(((-1.0)*x11027*x11031)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11028*x11030))+((cj1*sj2))+(((-1.0)*r22*x11031))+((x11023*x11029)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x11031))+(((-1.0)*x11024*x11030))+((x11023*x11025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11032 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11032.valid){
continue;
}
CheckValue<IkReal> x11033=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11033.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11032.value)+(((1.5707963267949)*(x11033.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11034=IKsin(j4);
IkReal x11035=IKcos(j4);
IkReal x11036=(gconst4*r11);
IkReal x11037=(gconst5*r10);
IkReal x11038=(gconst4*r01);
IkReal x11039=(gconst5*r00);
IkReal x11040=(gconst4*r21);
IkReal x11041=(gconst5*r20);
IkReal x11042=((1.0)*x11035);
IkReal x11043=((1.0)*x11034);
evalcond[0]=(((x11034*x11040))+(((-1.0)*r22*x11042))+(((-1.0)*x11041*x11043)));
evalcond[1]=((((-1.0)*x11037*x11043))+(((-1.0)*r12*x11042))+((x11034*x11036)));
evalcond[2]=(((x11035*x11039))+(((-1.0)*r02*x11043))+(((-1.0)*x11038*x11042)));
evalcond[3]=((-1.0)+((x11034*x11038))+(((-1.0)*r02*x11042))+(((-1.0)*x11039*x11043)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11043))+((cj1*sj2))+((x11035*x11041))+(((-1.0)*x11040*x11042)));
evalcond[5]=(((x11035*x11037))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11036*x11042))+(((-1.0)*r12*x11043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11044=gconst4*gconst4;
IkReal x11045=gconst5*gconst5;
IkReal x11046=(r01*r20);
IkReal x11047=(gconst4*sj3);
IkReal x11048=(r01*r21);
IkReal x11049=((1.0)*cj3);
IkReal x11050=(r00*r21);
IkReal x11051=(r00*r20);
IkReal x11052=(cj3*gconst4*gconst5);
IkReal x11053=((1.0)*x11045);
CheckValue<IkReal> x11054 = IKatan2WithCheck(IkReal((((r00*r22*x11047))+((gconst5*r01*r22*sj3)))),IkReal((((gconst5*x11047*x11048))+(((-1.0)*sj3*x11046*x11053))+(((-1.0)*gconst5*x11047*x11051))+((sj3*x11044*x11050)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11054.valid){
continue;
}
CheckValue<IkReal> x11055=IKPowWithIntegerCheck(IKsign((((x11046*x11052))+(((-1.0)*r02*r22*x11049))+((x11050*x11052))+(((-1.0)*x11045*x11049*x11051))+(((-1.0)*x11044*x11048*x11049)))),-1);
if(!x11055.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11054.value)+(((1.5707963267949)*(x11055.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11056=IKsin(j4);
IkReal x11057=IKcos(j4);
IkReal x11058=(sj1*sj2);
IkReal x11059=(gconst5*sj3);
IkReal x11060=(gconst4*r11);
IkReal x11061=(gconst5*r10);
IkReal x11062=((1.0)*cj1);
IkReal x11063=(gconst4*r01);
IkReal x11064=(cj2*sj1);
IkReal x11065=(gconst5*r00);
IkReal x11066=(gconst4*sj3);
IkReal x11067=(cj3*gconst5);
IkReal x11068=(cj3*gconst4);
IkReal x11069=(gconst4*r21);
IkReal x11070=(cj2*x11062);
IkReal x11071=((1.0)*x11057);
IkReal x11072=((1.0)*x11056);
IkReal x11073=(cj3*x11056);
IkReal x11074=(cj3*x11057);
evalcond[0]=(((x11056*x11069))+(((-1.0)*gconst5*r20*x11072))+(((-1.0)*r22*x11071)));
evalcond[1]=((((-1.0)*x11061*x11072))+((x11056*x11060))+(((-1.0)*r12*x11071)));
evalcond[2]=((-1.0)+(((-1.0)*x11065*x11072))+(((-1.0)*r02*x11071))+((x11056*x11063)));
evalcond[3]=((((-1.0)*cj3*x11065*x11071))+((r02*x11073))+((r01*x11059))+((x11063*x11074))+((r00*x11066)));
evalcond[4]=((((-1.0)*sj3*x11063*x11071))+((r00*x11057*x11059))+((r01*x11067))+((r00*x11068))+(((-1.0)*r02*sj3*x11072)));
evalcond[5]=(((r20*x11066))+((cj1*sj2))+x11064+((r21*x11057*x11068))+(((-1.0)*r20*x11067*x11071))+((r21*x11059))+((r22*x11073)));
evalcond[6]=((((-1.0)*cj3*x11061*x11071))+((r12*x11073))+((x11060*x11074))+((r10*x11066))+x11058+(((-1.0)*x11070))+((r11*x11059)));
evalcond[7]=(((r20*x11068))+(((-1.0)*r21*x11066*x11071))+x11058+(((-1.0)*r22*sj3*x11072))+((r21*x11067))+(((-1.0)*x11070))+((r20*x11057*x11059)));
evalcond[8]=((((-1.0)*r12*sj3*x11072))+((r10*x11068))+((r10*x11057*x11059))+(((-1.0)*sj2*x11062))+(((-1.0)*sj3*x11060*x11071))+((r11*x11067))+(((-1.0)*x11064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11075=((1.0)*gconst5);
CheckValue<IkReal> x11076=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11075))+(((-1.0)*gconst4*r10)))),-1);
if(!x11076.valid){
continue;
}
CheckValue<IkReal> x11077 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11075))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11076.value)))+(x11077.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11078=IKsin(j4);
IkReal x11079=IKcos(j4);
IkReal x11080=(sj1*sj2);
IkReal x11081=(gconst5*sj3);
IkReal x11082=(gconst4*r11);
IkReal x11083=(gconst5*r10);
IkReal x11084=((1.0)*cj1);
IkReal x11085=(gconst4*r01);
IkReal x11086=(cj2*sj1);
IkReal x11087=(gconst5*r00);
IkReal x11088=(gconst4*sj3);
IkReal x11089=(cj3*gconst5);
IkReal x11090=(cj3*gconst4);
IkReal x11091=(gconst4*r21);
IkReal x11092=(cj2*x11084);
IkReal x11093=((1.0)*x11079);
IkReal x11094=((1.0)*x11078);
IkReal x11095=(cj3*x11078);
IkReal x11096=(cj3*x11079);
evalcond[0]=(((x11078*x11091))+(((-1.0)*r22*x11093))+(((-1.0)*gconst5*r20*x11094)));
evalcond[1]=((((-1.0)*r12*x11093))+(((-1.0)*x11083*x11094))+((x11078*x11082)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x11093))+((x11078*x11085))+(((-1.0)*x11087*x11094)));
evalcond[3]=(((r02*x11095))+((r01*x11081))+((r00*x11088))+((x11085*x11096))+(((-1.0)*cj3*x11087*x11093)));
evalcond[4]=((((-1.0)*r02*sj3*x11094))+((r01*x11089))+((r00*x11090))+((r00*x11079*x11081))+(((-1.0)*sj3*x11085*x11093)));
evalcond[5]=(((r21*x11081))+((cj1*sj2))+x11086+((r21*x11079*x11090))+((r22*x11095))+((r20*x11088))+(((-1.0)*r20*x11089*x11093)));
evalcond[6]=((((-1.0)*x11092))+((r12*x11095))+x11080+((x11082*x11096))+((r10*x11088))+((r11*x11081))+(((-1.0)*cj3*x11083*x11093)));
evalcond[7]=(((r21*x11089))+(((-1.0)*x11092))+((r20*x11090))+x11080+((r20*x11079*x11081))+(((-1.0)*r22*sj3*x11094))+(((-1.0)*r21*x11088*x11093)));
evalcond[8]=((((-1.0)*sj2*x11084))+(((-1.0)*x11086))+(((-1.0)*r12*sj3*x11094))+((r10*x11079*x11081))+((r11*x11089))+((r10*x11090))+(((-1.0)*sj3*x11082*x11093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11097 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11097.valid){
continue;
}
CheckValue<IkReal> x11098=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11097.value)+(((1.5707963267949)*(x11098.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11099=IKsin(j4);
IkReal x11100=IKcos(j4);
IkReal x11101=(sj1*sj2);
IkReal x11102=(gconst5*sj3);
IkReal x11103=(gconst4*r11);
IkReal x11104=(gconst5*r10);
IkReal x11105=((1.0)*cj1);
IkReal x11106=(gconst4*r01);
IkReal x11107=(cj2*sj1);
IkReal x11108=(gconst5*r00);
IkReal x11109=(gconst4*sj3);
IkReal x11110=(cj3*gconst5);
IkReal x11111=(cj3*gconst4);
IkReal x11112=(gconst4*r21);
IkReal x11113=(cj2*x11105);
IkReal x11114=((1.0)*x11100);
IkReal x11115=((1.0)*x11099);
IkReal x11116=(cj3*x11099);
IkReal x11117=(cj3*x11100);
evalcond[0]=((((-1.0)*gconst5*r20*x11115))+(((-1.0)*r22*x11114))+((x11099*x11112)));
evalcond[1]=((((-1.0)*x11104*x11115))+(((-1.0)*r12*x11114))+((x11099*x11103)));
evalcond[2]=((-1.0)+(((-1.0)*x11108*x11115))+(((-1.0)*r02*x11114))+((x11099*x11106)));
evalcond[3]=(((x11106*x11117))+((r02*x11116))+(((-1.0)*cj3*x11108*x11114))+((r00*x11109))+((r01*x11102)));
evalcond[4]=((((-1.0)*r02*sj3*x11115))+(((-1.0)*sj3*x11106*x11114))+((r00*x11100*x11102))+((r00*x11111))+((r01*x11110)));
evalcond[5]=(((cj1*sj2))+x11107+(((-1.0)*r20*x11110*x11114))+((r21*x11102))+((r21*x11100*x11111))+((r20*x11109))+((r22*x11116)));
evalcond[6]=(((x11103*x11117))+((r10*x11109))+x11101+(((-1.0)*cj3*x11104*x11114))+((r11*x11102))+(((-1.0)*x11113))+((r12*x11116)));
evalcond[7]=(((r20*x11100*x11102))+x11101+((r21*x11110))+(((-1.0)*r22*sj3*x11115))+(((-1.0)*r21*x11109*x11114))+((r20*x11111))+(((-1.0)*x11113)));
evalcond[8]=((((-1.0)*x11107))+(((-1.0)*r12*sj3*x11115))+(((-1.0)*sj3*x11103*x11114))+((r10*x11111))+((r10*x11100*x11102))+(((-1.0)*sj2*x11105))+((r11*x11110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11118=((-1.0)*r21);
CheckValue<IkReal> x11121 = IKatan2WithCheck(IkReal(x11118),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11121.valid){
continue;
}
IkReal x11119=((1.0)*(x11121.value));
IkReal x11120=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11119)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11119)));
IkReal gconst4=(x11118*x11120);
IkReal gconst5=((1.0)*r20*x11120);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11122=((-1.0)*r21);
CheckValue<IkReal> x11125 = IKatan2WithCheck(IkReal(x11122),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11125.valid){
continue;
}
IkReal x11123=((1.0)*(x11125.value));
IkReal x11124=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11123)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11123)));
IkReal gconst4=(x11122*x11124);
IkReal gconst5=((1.0)*r20*x11124);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11126=((-1.0)*r21);
CheckValue<IkReal> x11129 = IKatan2WithCheck(IkReal(x11126),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11129.valid){
continue;
}
IkReal x11127=((1.0)*(x11129.value));
IkReal x11128=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11127)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11127)));
IkReal gconst4=(x11126*x11128);
IkReal gconst5=((1.0)*r20*x11128);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11130=((-1.0)*r21);
CheckValue<IkReal> x11133 = IKatan2WithCheck(IkReal(x11130),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11133.valid){
continue;
}
IkReal x11131=((1.0)*(x11133.value));
IkReal x11132=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11131)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11131)));
IkReal gconst4=(x11130*x11132);
IkReal gconst5=((1.0)*r20*x11132);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11134=((-1.0)*r21);
CheckValue<IkReal> x11137 = IKatan2WithCheck(IkReal(x11134),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11137.valid){
continue;
}
IkReal x11135=((1.0)*(x11137.value));
IkReal x11136=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11135)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11135)));
IkReal gconst4=(x11134*x11136);
IkReal gconst5=((1.0)*r20*x11136);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11138=((-1.0)*r21);
CheckValue<IkReal> x11141 = IKatan2WithCheck(IkReal(x11138),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11141.valid){
continue;
}
IkReal x11139=((1.0)*(x11141.value));
IkReal x11140=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11139)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11139)));
IkReal gconst4=(x11138*x11140);
IkReal gconst5=((1.0)*r20*x11140);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11142=(gconst5*r00);
IkReal x11143=(gconst4*r01);
CheckValue<IkReal> x11144=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11142*x11143))+(x11142*x11142)+(x11143*x11143)+(r02*r02))),-1);
if(!x11144.valid){
continue;
}
CheckValue<IkReal> x11145 = IKatan2WithCheck(IkReal(((((-1.0)*x11143))+x11142)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11145.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11144.value)))+(x11145.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11146=IKsin(j4);
IkReal x11147=IKcos(j4);
IkReal x11148=(gconst4*r11);
IkReal x11149=(gconst5*r10);
IkReal x11150=(gconst4*r01);
IkReal x11151=(gconst5*r00);
IkReal x11152=(gconst4*r21);
IkReal x11153=(gconst5*r20);
IkReal x11154=((1.0)*x11147);
IkReal x11155=((1.0)*x11146);
evalcond[0]=(((x11146*x11152))+(((-1.0)*r22*x11154))+(((-1.0)*x11153*x11155)));
evalcond[1]=(((x11146*x11148))+(((-1.0)*x11149*x11155))+(((-1.0)*r12*x11154)));
evalcond[2]=(((x11147*x11151))+(((-1.0)*x11150*x11154))+(((-1.0)*r02*x11155)));
evalcond[3]=((1.0)+((x11146*x11150))+(((-1.0)*x11151*x11155))+(((-1.0)*r02*x11154)));
evalcond[4]=(((x11147*x11149))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11148*x11154))+(((-1.0)*r12*x11155)));
evalcond[5]=(((x11147*x11153))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11155))+(((-1.0)*x11152*x11154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11156=((1.0)*gconst5);
CheckValue<IkReal> x11157 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11156)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11157.valid){
continue;
}
CheckValue<IkReal> x11158=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11156))+(((-1.0)*gconst4*r20)))),-1);
if(!x11158.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11157.value)+(((1.5707963267949)*(x11158.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11159=IKsin(j4);
IkReal x11160=IKcos(j4);
IkReal x11161=(gconst4*r11);
IkReal x11162=(gconst5*r10);
IkReal x11163=(gconst4*r01);
IkReal x11164=(gconst5*r00);
IkReal x11165=(gconst4*r21);
IkReal x11166=(gconst5*r20);
IkReal x11167=((1.0)*x11160);
IkReal x11168=((1.0)*x11159);
evalcond[0]=((((-1.0)*r22*x11167))+((x11159*x11165))+(((-1.0)*x11166*x11168)));
evalcond[1]=((((-1.0)*r12*x11167))+((x11159*x11161))+(((-1.0)*x11162*x11168)));
evalcond[2]=((((-1.0)*x11163*x11167))+((x11160*x11164))+(((-1.0)*r02*x11168)));
evalcond[3]=((1.0)+((x11159*x11163))+(((-1.0)*x11164*x11168))+(((-1.0)*r02*x11167)));
evalcond[4]=(((cj2*sj1))+((x11160*x11162))+(((-1.0)*x11161*x11167))+((cj1*sj2))+(((-1.0)*r12*x11168)));
evalcond[5]=(((x11160*x11166))+(((-1.0)*r22*x11168))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11165*x11167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11169=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11169.valid){
continue;
}
CheckValue<IkReal> x11170 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11169.value)))+(x11170.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11171=IKsin(j4);
IkReal x11172=IKcos(j4);
IkReal x11173=(gconst4*r11);
IkReal x11174=(gconst5*r10);
IkReal x11175=(gconst4*r01);
IkReal x11176=(gconst5*r00);
IkReal x11177=(gconst4*r21);
IkReal x11178=(gconst5*r20);
IkReal x11179=((1.0)*x11172);
IkReal x11180=((1.0)*x11171);
evalcond[0]=((((-1.0)*r22*x11179))+((x11171*x11177))+(((-1.0)*x11178*x11180)));
evalcond[1]=((((-1.0)*x11174*x11180))+(((-1.0)*r12*x11179))+((x11171*x11173)));
evalcond[2]=((((-1.0)*x11175*x11179))+(((-1.0)*r02*x11180))+((x11172*x11176)));
evalcond[3]=((1.0)+((x11171*x11175))+(((-1.0)*x11176*x11180))+(((-1.0)*r02*x11179)));
evalcond[4]=(((cj2*sj1))+((x11172*x11174))+(((-1.0)*r12*x11180))+((cj1*sj2))+(((-1.0)*x11173*x11179)));
evalcond[5]=((((-1.0)*x11177*x11179))+((x11172*x11178))+(((-1.0)*r22*x11180))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11181=((-1.0)*r21);
CheckValue<IkReal> x11184 = IKatan2WithCheck(IkReal(x11181),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11184.valid){
continue;
}
IkReal x11182=((1.0)*(x11184.value));
IkReal x11183=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11182)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11182)));
IkReal gconst4=(x11181*x11183);
IkReal gconst5=((1.0)*r20*x11183);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11185=((-1.0)*r21);
CheckValue<IkReal> x11188 = IKatan2WithCheck(IkReal(x11185),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11188.valid){
continue;
}
IkReal x11186=((1.0)*(x11188.value));
IkReal x11187=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11186)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11186)));
IkReal gconst4=(x11185*x11187);
IkReal gconst5=((1.0)*r20*x11187);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11189=((-1.0)*r21);
CheckValue<IkReal> x11192 = IKatan2WithCheck(IkReal(x11189),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11192.valid){
continue;
}
IkReal x11190=((1.0)*(x11192.value));
IkReal x11191=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11190)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11190)));
IkReal gconst4=(x11189*x11191);
IkReal gconst5=((1.0)*r20*x11191);
IkReal x11193=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11197=IKPowWithIntegerCheck(x11193,-1);
if(!x11197.valid){
continue;
}
IkReal x11194=x11197.value;
IkReal x11195=((1.0)*x11194);
IkReal x11196=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x11194))+(((-1.0)*x11195*(r00*r00)*(r20*r20)))+(((-1.0)*x11195*(r01*r01)*(r21*r21))));
j4eval[0]=x11196;
j4eval[1]=IKsign(x11196);
j4eval[2]=r02;
j4eval[3]=x11193;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11198=(gconst4*r01);
IkReal x11199=(gconst5*r00);
CheckValue<IkReal> x11200=IKPowWithIntegerCheck(IKsign(((((2.0)*x11198*x11199))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11198*x11198)))+(((-1.0)*(x11199*x11199))))),-1);
if(!x11200.valid){
continue;
}
CheckValue<IkReal> x11201 = IKatan2WithCheck(IkReal((x11198+(((-1.0)*x11199)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11200.value)))+(x11201.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11202=IKcos(j4);
IkReal x11203=IKsin(j4);
IkReal x11204=(gconst4*r11);
IkReal x11205=(gconst5*r10);
IkReal x11206=(gconst5*r00);
IkReal x11207=(gconst5*r20);
IkReal x11208=((1.0)*x11202);
IkReal x11209=(gconst4*x11202);
IkReal x11210=((1.0)*x11203);
IkReal x11211=(gconst4*x11203);
evalcond[0]=((((-1.0)*x11206*x11208))+((r02*x11203))+((r01*x11209)));
evalcond[1]=((((-1.0)*r22*x11208))+((r21*x11211))+(((-1.0)*x11207*x11210)));
evalcond[2]=((((-1.0)*r12*x11208))+((x11203*x11204))+(((-1.0)*x11205*x11210)));
evalcond[3]=((1.0)+((r01*x11211))+(((-1.0)*r02*x11208))+(((-1.0)*x11206*x11210)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11202*x11204))+((r12*x11203))+(((-1.0)*x11205*x11208)));
evalcond[5]=(((r21*x11209))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11207*x11208))+((r22*x11203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11212=((1.0)*gconst5);
CheckValue<IkReal> x11213 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11212)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11213.valid){
continue;
}
CheckValue<IkReal> x11214=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11212))+(((-1.0)*gconst4*r20)))),-1);
if(!x11214.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11213.value)+(((1.5707963267949)*(x11214.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11215=IKcos(j4);
IkReal x11216=IKsin(j4);
IkReal x11217=(gconst4*r11);
IkReal x11218=(gconst5*r10);
IkReal x11219=(gconst5*r00);
IkReal x11220=(gconst5*r20);
IkReal x11221=((1.0)*x11215);
IkReal x11222=(gconst4*x11215);
IkReal x11223=((1.0)*x11216);
IkReal x11224=(gconst4*x11216);
evalcond[0]=(((r02*x11216))+(((-1.0)*x11219*x11221))+((r01*x11222)));
evalcond[1]=((((-1.0)*x11220*x11223))+((r21*x11224))+(((-1.0)*r22*x11221)));
evalcond[2]=(((x11216*x11217))+(((-1.0)*x11218*x11223))+(((-1.0)*r12*x11221)));
evalcond[3]=((1.0)+(((-1.0)*x11219*x11223))+((r01*x11224))+(((-1.0)*r02*x11221)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11218*x11221))+((r12*x11216))+((x11215*x11217)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11220*x11221))+((r21*x11222))+((r22*x11216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11225=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11225.valid){
continue;
}
CheckValue<IkReal> x11226 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11226.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11225.value)))+(x11226.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11227=IKcos(j4);
IkReal x11228=IKsin(j4);
IkReal x11229=(gconst4*r11);
IkReal x11230=(gconst5*r10);
IkReal x11231=(gconst5*r00);
IkReal x11232=(gconst5*r20);
IkReal x11233=((1.0)*x11227);
IkReal x11234=(gconst4*x11227);
IkReal x11235=((1.0)*x11228);
IkReal x11236=(gconst4*x11228);
evalcond[0]=((((-1.0)*x11231*x11233))+((r02*x11228))+((r01*x11234)));
evalcond[1]=((((-1.0)*x11232*x11235))+((r21*x11236))+(((-1.0)*r22*x11233)));
evalcond[2]=((((-1.0)*x11230*x11235))+(((-1.0)*r12*x11233))+((x11228*x11229)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11233))+(((-1.0)*x11231*x11235))+((r01*x11236)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11230*x11233))+((r12*x11228))+((cj1*sj2))+((x11227*x11229)));
evalcond[5]=(((r22*x11228))+(((-1.0)*x11232*x11233))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11237=((-1.0)*r21);
CheckValue<IkReal> x11240 = IKatan2WithCheck(IkReal(x11237),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11240.valid){
continue;
}
IkReal x11238=((1.0)*(x11240.value));
IkReal x11239=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11238)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11238)));
IkReal gconst4=(x11237*x11239);
IkReal gconst5=((1.0)*r20*x11239);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11241=((-1.0)*r21);
CheckValue<IkReal> x11244 = IKatan2WithCheck(IkReal(x11241),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11244.valid){
continue;
}
IkReal x11242=((1.0)*(x11244.value));
IkReal x11243=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11242)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11242)));
IkReal gconst4=(x11241*x11243);
IkReal gconst5=((1.0)*r20*x11243);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11245=((-1.0)*r21);
CheckValue<IkReal> x11248 = IKatan2WithCheck(IkReal(x11245),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11248.valid){
continue;
}
IkReal x11246=((1.0)*(x11248.value));
IkReal x11247=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11246)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11246)));
IkReal gconst4=(x11245*x11247);
IkReal gconst5=((1.0)*r20*x11247);
IkReal x11249=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11253=IKPowWithIntegerCheck(x11249,-1);
if(!x11253.valid){
continue;
}
IkReal x11250=x11253.value;
IkReal x11251=((1.0)*x11250);
IkReal x11252=((((-2.0)*r00*r01*r20*r21*x11250))+(((-1.0)*x11251*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x11251*(r01*r01)*(r21*r21))));
j4eval[0]=x11252;
j4eval[1]=IKsign(x11252);
j4eval[2]=r02;
j4eval[3]=x11249;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11254=(gconst4*r01);
IkReal x11255=(gconst5*r00);
CheckValue<IkReal> x11256 = IKatan2WithCheck(IkReal(((((-1.0)*x11255))+x11254)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11256.valid){
continue;
}
CheckValue<IkReal> x11257=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11255*x11255)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11254*x11254)))+(((2.0)*x11254*x11255)))),-1);
if(!x11257.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11256.value)+(((1.5707963267949)*(x11257.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11258=IKcos(j4);
IkReal x11259=IKsin(j4);
IkReal x11260=(gconst5*r10);
IkReal x11261=(gconst5*r00);
IkReal x11262=(gconst5*r20);
IkReal x11263=((1.0)*x11258);
IkReal x11264=(gconst4*x11259);
IkReal x11265=(gconst4*x11258);
IkReal x11266=((1.0)*x11259);
evalcond[0]=(((r02*x11259))+(((-1.0)*x11261*x11263))+((r01*x11265)));
evalcond[1]=(((r21*x11264))+(((-1.0)*r22*x11263))+(((-1.0)*x11262*x11266)));
evalcond[2]=((((-1.0)*x11260*x11266))+((r11*x11264))+(((-1.0)*r12*x11263)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11263))+(((-1.0)*x11261*x11266))+((r01*x11264)));
evalcond[4]=(((r22*x11259))+((cj2*sj1))+((cj1*sj2))+((r21*x11265))+(((-1.0)*x11262*x11263)));
evalcond[5]=((((-1.0)*x11260*x11263))+((r11*x11265))+(((-1.0)*sj1*sj2))+((r12*x11259))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11267=((1.0)*gconst5);
CheckValue<IkReal> x11268 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11267))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11268.valid){
continue;
}
CheckValue<IkReal> x11269=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11267))+(((-1.0)*gconst4*r20)))),-1);
if(!x11269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11268.value)+(((1.5707963267949)*(x11269.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11270=IKcos(j4);
IkReal x11271=IKsin(j4);
IkReal x11272=(gconst5*r10);
IkReal x11273=(gconst5*r00);
IkReal x11274=(gconst5*r20);
IkReal x11275=((1.0)*x11270);
IkReal x11276=(gconst4*x11271);
IkReal x11277=(gconst4*x11270);
IkReal x11278=((1.0)*x11271);
evalcond[0]=(((r01*x11277))+((r02*x11271))+(((-1.0)*x11273*x11275)));
evalcond[1]=((((-1.0)*x11274*x11278))+((r21*x11276))+(((-1.0)*r22*x11275)));
evalcond[2]=((((-1.0)*r12*x11275))+(((-1.0)*x11272*x11278))+((r11*x11276)));
evalcond[3]=((1.0)+((r01*x11276))+(((-1.0)*r02*x11275))+(((-1.0)*x11273*x11278)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x11271))+(((-1.0)*x11274*x11275))+((r21*x11277)));
evalcond[5]=(((r12*x11271))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x11272*x11275))+((r11*x11277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11279=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11279.valid){
continue;
}
CheckValue<IkReal> x11280 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11279.value)))+(x11280.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11281=IKcos(j4);
IkReal x11282=IKsin(j4);
IkReal x11283=(gconst5*r10);
IkReal x11284=(gconst5*r00);
IkReal x11285=(gconst5*r20);
IkReal x11286=((1.0)*x11281);
IkReal x11287=(gconst4*x11282);
IkReal x11288=(gconst4*x11281);
IkReal x11289=((1.0)*x11282);
evalcond[0]=((((-1.0)*x11284*x11286))+((r02*x11282))+((r01*x11288)));
evalcond[1]=((((-1.0)*r22*x11286))+((r21*x11287))+(((-1.0)*x11285*x11289)));
evalcond[2]=((((-1.0)*r12*x11286))+(((-1.0)*x11283*x11289))+((r11*x11287)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11286))+(((-1.0)*x11284*x11289))+((r01*x11287)));
evalcond[4]=(((cj2*sj1))+((r22*x11282))+((cj1*sj2))+((r21*x11288))+(((-1.0)*x11285*x11286)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x11283*x11286))+((r12*x11282))+((cj1*cj2))+((r11*x11288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11290=((-1.0)*r21);
CheckValue<IkReal> x11293 = IKatan2WithCheck(IkReal(x11290),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11293.valid){
continue;
}
IkReal x11291=((1.0)*(x11293.value));
IkReal x11292=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11291)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11291)));
IkReal gconst4=(x11290*x11292);
IkReal gconst5=((1.0)*r20*x11292);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11294=((-1.0)*r21);
CheckValue<IkReal> x11297 = IKatan2WithCheck(IkReal(x11294),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11297.valid){
continue;
}
IkReal x11295=((1.0)*(x11297.value));
IkReal x11296=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11295)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11295)));
IkReal gconst4=(x11294*x11296);
IkReal gconst5=((1.0)*r20*x11296);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11298=((-1.0)*r21);
CheckValue<IkReal> x11301 = IKatan2WithCheck(IkReal(x11298),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11301.valid){
continue;
}
IkReal x11299=((1.0)*(x11301.value));
IkReal x11300=x10092;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11299)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11299)));
IkReal gconst4=(x11298*x11300);
IkReal gconst5=((1.0)*r20*x11300);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11302=(gconst5*r00);
IkReal x11303=(gconst4*r01);
CheckValue<IkReal> x11304 = IKatan2WithCheck(IkReal((x11302+(((-1.0)*x11303)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11304.valid){
continue;
}
CheckValue<IkReal> x11305=IKPowWithIntegerCheck(IKsign(((x11303*x11303)+(x11302*x11302)+(((-2.0)*x11302*x11303))+(r02*r02))),-1);
if(!x11305.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11304.value)+(((1.5707963267949)*(x11305.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11306=IKsin(j4);
IkReal x11307=IKcos(j4);
IkReal x11308=(gconst4*r11);
IkReal x11309=(gconst5*r10);
IkReal x11310=(gconst5*r00);
IkReal x11311=(gconst5*r20);
IkReal x11312=((1.0)*x11307);
IkReal x11313=(gconst4*x11306);
IkReal x11314=((1.0)*x11306);
evalcond[0]=((((-1.0)*x11311*x11314))+(((-1.0)*r22*x11312))+((r21*x11313)));
evalcond[1]=(((x11306*x11308))+(((-1.0)*x11309*x11314))+(((-1.0)*r12*x11312)));
evalcond[2]=((((-1.0)*r02*x11314))+(((-1.0)*gconst4*r01*x11312))+((x11307*x11310)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11312))+(((-1.0)*x11310*x11314))+((r01*x11313)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11314))+((cj1*sj2))+((x11307*x11311))+(((-1.0)*gconst4*r21*x11312)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x11314))+(((-1.0)*x11308*x11312))+((cj1*cj2))+((x11307*x11309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11315=((1.0)*gconst5);
CheckValue<IkReal> x11316 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11315)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11316.valid){
continue;
}
CheckValue<IkReal> x11317=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11315))+(((-1.0)*gconst4*r20)))),-1);
if(!x11317.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11316.value)+(((1.5707963267949)*(x11317.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11318=IKsin(j4);
IkReal x11319=IKcos(j4);
IkReal x11320=(gconst4*r11);
IkReal x11321=(gconst5*r10);
IkReal x11322=(gconst5*r00);
IkReal x11323=(gconst5*r20);
IkReal x11324=((1.0)*x11319);
IkReal x11325=(gconst4*x11318);
IkReal x11326=((1.0)*x11318);
evalcond[0]=((((-1.0)*r22*x11324))+((r21*x11325))+(((-1.0)*x11323*x11326)));
evalcond[1]=((((-1.0)*r12*x11324))+((x11318*x11320))+(((-1.0)*x11321*x11326)));
evalcond[2]=((((-1.0)*r02*x11326))+(((-1.0)*gconst4*r01*x11324))+((x11319*x11322)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11324))+(((-1.0)*x11322*x11326))+((r01*x11325)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11326))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11324))+((x11319*x11323)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x11326))+((x11319*x11321))+((cj1*cj2))+(((-1.0)*x11320*x11324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11327=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11327.valid){
continue;
}
CheckValue<IkReal> x11328 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11327.value)))+(x11328.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11329=IKsin(j4);
IkReal x11330=IKcos(j4);
IkReal x11331=(gconst4*r11);
IkReal x11332=(gconst5*r10);
IkReal x11333=(gconst5*r00);
IkReal x11334=(gconst5*r20);
IkReal x11335=((1.0)*x11330);
IkReal x11336=(gconst4*x11329);
IkReal x11337=((1.0)*x11329);
evalcond[0]=((((-1.0)*r22*x11335))+(((-1.0)*x11334*x11337))+((r21*x11336)));
evalcond[1]=((((-1.0)*r12*x11335))+((x11329*x11331))+(((-1.0)*x11332*x11337)));
evalcond[2]=(((x11330*x11333))+(((-1.0)*gconst4*r01*x11335))+(((-1.0)*r02*x11337)));
evalcond[3]=((1.0)+(((-1.0)*x11333*x11337))+((r01*x11336))+(((-1.0)*r02*x11335)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x11337))+(((-1.0)*gconst4*r21*x11335))+((x11330*x11334)));
evalcond[5]=((((-1.0)*r12*x11337))+(((-1.0)*sj1*sj2))+(((-1.0)*x11331*x11335))+((x11330*x11332))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11338=((-1.0)*r21);
IkReal x11339=((-1.0)*r20);
CheckValue<IkReal> x11341 = IKatan2WithCheck(IkReal(x11338),IkReal(x11339),IKFAST_ATAN2_MAGTHRESH);
if(!x11341.valid){
continue;
}
IkReal x11340=((1.0)*(x11341.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11340)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11339);
rxp0_2=(py*r00);
rxp1_0=(py*x11338);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11340)));
IkReal gconst4=x11338;
IkReal gconst5=((1.0)*r20);
IkReal x11342=((1.0)*r01*r21);
IkReal x11343=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11343))+(((-1.0)*x11342)));
j4eval[1]=((((-1.0)*cj3*x11342))+(((-1.0)*cj3*x11343)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11344=((-1.0)*r21);
IkReal x11345=((-1.0)*r20);
CheckValue<IkReal> x11347 = IKatan2WithCheck(IkReal(x11344),IkReal(x11345),IKFAST_ATAN2_MAGTHRESH);
if(!x11347.valid){
continue;
}
IkReal x11346=((1.0)*(x11347.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11346)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11345);
rxp0_2=(py*r00);
rxp1_0=(py*x11344);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11346)));
IkReal gconst4=x11344;
IkReal gconst5=((1.0)*r20);
IkReal x11348=((1.0)*r01*r21);
IkReal x11349=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11349))+(((-1.0)*x11348)));
j4eval[1]=(((sj3*x11349))+((sj3*x11348)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11350=((-1.0)*r21);
IkReal x11351=((-1.0)*r20);
CheckValue<IkReal> x11353 = IKatan2WithCheck(IkReal(x11350),IkReal(x11351),IKFAST_ATAN2_MAGTHRESH);
if(!x11353.valid){
continue;
}
IkReal x11352=((1.0)*(x11353.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11352)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11351);
rxp0_2=(py*r00);
rxp1_0=(py*x11350);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11352)));
IkReal gconst4=x11350;
IkReal gconst5=((1.0)*r20);
IkReal x11354=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r01*r21*x11354))+(((-1.0)*r00*r20*x11354)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11355=((1.0)*gconst5);
CheckValue<IkReal> x11356=IKPowWithIntegerCheck(cj3,-1);
if(!x11356.valid){
continue;
}
CheckValue<IkReal> x11357=IKPowWithIntegerCheck(r12,-1);
if(!x11357.valid){
continue;
}
CheckValue<IkReal> x11358=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x11355))+((cj3*gconst4*r01))),-1);
if(!x11358.valid){
continue;
}
if( IKabs(((x11356.value)*(x11357.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11358.value)*(((((-1.0)*r01*sj3*x11355))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11356.value)*(x11357.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x11358.value)*(((((-1.0)*r01*sj3*x11355))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11356.value)*(x11357.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x11358.value)*(((((-1.0)*r01*sj3*x11355))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11359=IKsin(j4);
IkReal x11360=IKcos(j4);
IkReal x11361=(cj2*sj1);
IkReal x11362=(cj1*sj2);
IkReal x11363=(sj1*sj2);
IkReal x11364=(gconst5*sj3);
IkReal x11365=(gconst5*r00);
IkReal x11366=(cj3*gconst5);
IkReal x11367=(gconst4*sj3);
IkReal x11368=(cj3*gconst4);
IkReal x11369=(cj1*cj2);
IkReal x11370=((1.0)*x11359);
IkReal x11371=(gconst4*x11359);
IkReal x11372=((1.0)*x11360);
IkReal x11373=(x11361+x11362);
IkReal x11374=(x11360*x11364);
IkReal x11375=(x11360*x11368);
evalcond[0]=((-1.0)*r12*x11360);
evalcond[1]=(((r21*x11371))+(((-1.0)*gconst5*r20*x11370)));
evalcond[2]=((((-1.0)*x11363))+x11369+((cj3*r12*x11359)));
evalcond[3]=((((-1.0)*r12*sj3*x11370))+x11373);
evalcond[4]=((1.0)+((r01*x11371))+(((-1.0)*x11365*x11370)));
evalcond[5]=(((r01*x11364))+((r00*x11367))+((r01*x11375))+(((-1.0)*cj3*x11365*x11372)));
evalcond[6]=(((r00*x11374))+((r01*x11366))+((r00*x11368))+(((-1.0)*r01*x11367*x11372)));
evalcond[7]=(((r21*x11364))+((r21*x11375))+(((-1.0)*r20*x11366*x11372))+x11373+((r20*x11367)));
evalcond[8]=(((r20*x11374))+((r21*x11366))+(((-1.0)*x11369))+x11363+(((-1.0)*r21*x11367*x11372))+((r20*x11368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11376=((1.0)*gconst4);
IkReal x11377=(gconst5*r00);
CheckValue<IkReal> x11378=IKPowWithIntegerCheck(((((-1.0)*x11377))+((gconst4*r01))),-1);
if(!x11378.valid){
continue;
}
CheckValue<IkReal> x11379=IKPowWithIntegerCheck(((((-1.0)*r01*sj3*x11376))+((sj3*x11377))),-1);
if(!x11379.valid){
continue;
}
if( IKabs(((-1.0)*(x11378.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11379.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11376)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11378.value)))+IKsqr(((x11379.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11376))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11378.value)), ((x11379.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11376))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11380=IKsin(j4);
IkReal x11381=IKcos(j4);
IkReal x11382=(cj2*sj1);
IkReal x11383=(cj1*sj2);
IkReal x11384=(sj1*sj2);
IkReal x11385=(gconst5*sj3);
IkReal x11386=(gconst5*r00);
IkReal x11387=(cj3*gconst5);
IkReal x11388=(gconst4*sj3);
IkReal x11389=(cj3*gconst4);
IkReal x11390=(cj1*cj2);
IkReal x11391=((1.0)*x11380);
IkReal x11392=(gconst4*x11380);
IkReal x11393=((1.0)*x11381);
IkReal x11394=(x11382+x11383);
IkReal x11395=(x11381*x11385);
IkReal x11396=(x11381*x11389);
evalcond[0]=((-1.0)*r12*x11381);
evalcond[1]=((((-1.0)*gconst5*r20*x11391))+((r21*x11392)));
evalcond[2]=(((cj3*r12*x11380))+x11390+(((-1.0)*x11384)));
evalcond[3]=((((-1.0)*r12*sj3*x11391))+x11394);
evalcond[4]=((1.0)+((r01*x11392))+(((-1.0)*x11386*x11391)));
evalcond[5]=(((r01*x11396))+((r01*x11385))+((r00*x11388))+(((-1.0)*cj3*x11386*x11393)));
evalcond[6]=(((r00*x11395))+((r01*x11387))+((r00*x11389))+(((-1.0)*r01*x11388*x11393)));
evalcond[7]=(((r20*x11388))+x11394+((r21*x11385))+((r21*x11396))+(((-1.0)*r20*x11387*x11393)));
evalcond[8]=(((r20*x11395))+((r20*x11389))+x11384+(((-1.0)*x11390))+((r21*x11387))+(((-1.0)*r21*x11388*x11393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11397=((1.0)*gconst5);
IkReal x11398=(gconst4*r01);
CheckValue<IkReal> x11399=IKPowWithIntegerCheck((x11398+(((-1.0)*r00*x11397))),-1);
if(!x11399.valid){
continue;
}
CheckValue<IkReal> x11400=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x11397))+((cj3*x11398))),-1);
if(!x11400.valid){
continue;
}
if( IKabs(((-1.0)*(x11399.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11400.value)*(((((-1.0)*r01*sj3*x11397))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11399.value)))+IKsqr(((x11400.value)*(((((-1.0)*r01*sj3*x11397))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11399.value)), ((x11400.value)*(((((-1.0)*r01*sj3*x11397))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11401=IKsin(j4);
IkReal x11402=IKcos(j4);
IkReal x11403=(cj2*sj1);
IkReal x11404=(cj1*sj2);
IkReal x11405=(sj1*sj2);
IkReal x11406=(gconst5*sj3);
IkReal x11407=(gconst5*r00);
IkReal x11408=(cj3*gconst5);
IkReal x11409=(gconst4*sj3);
IkReal x11410=(cj3*gconst4);
IkReal x11411=(cj1*cj2);
IkReal x11412=((1.0)*x11401);
IkReal x11413=(gconst4*x11401);
IkReal x11414=((1.0)*x11402);
IkReal x11415=(x11404+x11403);
IkReal x11416=(x11402*x11406);
IkReal x11417=(x11402*x11410);
evalcond[0]=((-1.0)*r12*x11402);
evalcond[1]=((((-1.0)*gconst5*r20*x11412))+((r21*x11413)));
evalcond[2]=(x11411+((cj3*r12*x11401))+(((-1.0)*x11405)));
evalcond[3]=(x11415+(((-1.0)*r12*sj3*x11412)));
evalcond[4]=((1.0)+((r01*x11413))+(((-1.0)*x11407*x11412)));
evalcond[5]=(((r01*x11417))+(((-1.0)*cj3*x11407*x11414))+((r01*x11406))+((r00*x11409)));
evalcond[6]=(((r00*x11410))+((r00*x11416))+(((-1.0)*r01*x11409*x11414))+((r01*x11408)));
evalcond[7]=((((-1.0)*r20*x11408*x11414))+((r21*x11406))+x11415+((r21*x11417))+((r20*x11409)));
evalcond[8]=(((r21*x11408))+x11405+(((-1.0)*x11411))+(((-1.0)*r21*x11409*x11414))+((r20*x11410))+((r20*x11416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11418=gconst4*gconst4;
IkReal x11419=gconst5*gconst5;
IkReal x11420=(r01*r20);
IkReal x11421=(gconst4*sj3);
IkReal x11422=(r01*r21);
IkReal x11423=((1.0)*cj3);
IkReal x11424=(r00*r21);
IkReal x11425=(r00*r20);
IkReal x11426=(cj3*gconst4*gconst5);
IkReal x11427=((1.0)*x11419);
CheckValue<IkReal> x11428 = IKatan2WithCheck(IkReal((((r00*r22*x11421))+((gconst5*r01*r22*sj3)))),IkReal(((((-1.0)*sj3*x11420*x11427))+(((-1.0)*gconst5*x11421*x11425))+((sj3*x11418*x11424))+((gconst5*x11421*x11422)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11428.valid){
continue;
}
CheckValue<IkReal> x11429=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11419*x11423*x11425))+(((-1.0)*r02*r22*x11423))+(((-1.0)*x11418*x11422*x11423))+((x11420*x11426))+((x11424*x11426)))),-1);
if(!x11429.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11428.value)+(((1.5707963267949)*(x11429.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11430=IKsin(j4);
IkReal x11431=IKcos(j4);
IkReal x11432=(cj2*sj1);
IkReal x11433=(cj1*sj2);
IkReal x11434=(gconst5*sj3);
IkReal x11435=(gconst4*r11);
IkReal x11436=(sj1*sj2);
IkReal x11437=(gconst5*r10);
IkReal x11438=(cj1*cj2);
IkReal x11439=(gconst4*r01);
IkReal x11440=(gconst5*r00);
IkReal x11441=(gconst4*sj3);
IkReal x11442=(cj3*gconst5);
IkReal x11443=(cj3*gconst4);
IkReal x11444=(gconst4*r21);
IkReal x11445=((1.0)*x11431);
IkReal x11446=((1.0)*x11430);
IkReal x11447=(cj3*x11430);
IkReal x11448=(cj3*x11431);
IkReal x11449=(x11432+x11433);
evalcond[0]=(((x11430*x11444))+(((-1.0)*gconst5*r20*x11446))+(((-1.0)*r22*x11445)));
evalcond[1]=(((x11430*x11435))+(((-1.0)*r12*x11445))+(((-1.0)*x11437*x11446)));
evalcond[2]=((1.0)+((x11430*x11439))+(((-1.0)*x11440*x11446))+(((-1.0)*r02*x11445)));
evalcond[3]=(((r00*x11441))+((x11439*x11448))+(((-1.0)*cj3*x11440*x11445))+((r01*x11434))+((r02*x11447)));
evalcond[4]=(((r00*x11443))+(((-1.0)*r02*sj3*x11446))+(((-1.0)*sj3*x11439*x11445))+((r00*x11431*x11434))+((r01*x11442)));
evalcond[5]=((((-1.0)*r20*x11442*x11445))+x11449+((r22*x11447))+((r21*x11434))+((r21*x11431*x11443))+((r20*x11441)));
evalcond[6]=(((r12*x11447))+x11438+((r10*x11441))+(((-1.0)*x11436))+((r11*x11434))+(((-1.0)*cj3*x11437*x11445))+((x11435*x11448)));
evalcond[7]=(x11449+((r11*x11442))+(((-1.0)*sj3*x11435*x11445))+((r10*x11443))+(((-1.0)*r12*sj3*x11446))+((r10*x11431*x11434)));
evalcond[8]=(x11436+((r20*x11431*x11434))+(((-1.0)*r21*x11441*x11445))+(((-1.0)*r22*sj3*x11446))+(((-1.0)*x11438))+((r20*x11443))+((r21*x11442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11450=((1.0)*gconst5);
CheckValue<IkReal> x11451 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11450))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11451.valid){
continue;
}
CheckValue<IkReal> x11452=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11450))+(((-1.0)*gconst4*r20)))),-1);
if(!x11452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11451.value)+(((1.5707963267949)*(x11452.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11453=IKsin(j4);
IkReal x11454=IKcos(j4);
IkReal x11455=(cj2*sj1);
IkReal x11456=(cj1*sj2);
IkReal x11457=(gconst5*sj3);
IkReal x11458=(gconst4*r11);
IkReal x11459=(sj1*sj2);
IkReal x11460=(gconst5*r10);
IkReal x11461=(cj1*cj2);
IkReal x11462=(gconst4*r01);
IkReal x11463=(gconst5*r00);
IkReal x11464=(gconst4*sj3);
IkReal x11465=(cj3*gconst5);
IkReal x11466=(cj3*gconst4);
IkReal x11467=(gconst4*r21);
IkReal x11468=((1.0)*x11454);
IkReal x11469=((1.0)*x11453);
IkReal x11470=(cj3*x11453);
IkReal x11471=(cj3*x11454);
IkReal x11472=(x11456+x11455);
evalcond[0]=((((-1.0)*gconst5*r20*x11469))+(((-1.0)*r22*x11468))+((x11453*x11467)));
evalcond[1]=((((-1.0)*r12*x11468))+((x11453*x11458))+(((-1.0)*x11460*x11469)));
evalcond[2]=((1.0)+(((-1.0)*x11463*x11469))+(((-1.0)*r02*x11468))+((x11453*x11462)));
evalcond[3]=((((-1.0)*cj3*x11463*x11468))+((r01*x11457))+((r02*x11470))+((x11462*x11471))+((r00*x11464)));
evalcond[4]=(((r01*x11465))+(((-1.0)*r02*sj3*x11469))+(((-1.0)*sj3*x11462*x11468))+((r00*x11454*x11457))+((r00*x11466)));
evalcond[5]=(x11472+((r21*x11457))+((r22*x11470))+((r20*x11464))+((r21*x11454*x11466))+(((-1.0)*r20*x11465*x11468)));
evalcond[6]=(((r12*x11470))+x11461+(((-1.0)*cj3*x11460*x11468))+((x11458*x11471))+((r10*x11464))+(((-1.0)*x11459))+((r11*x11457)));
evalcond[7]=(x11472+((r11*x11465))+((r10*x11466))+(((-1.0)*r12*sj3*x11469))+((r10*x11454*x11457))+(((-1.0)*sj3*x11458*x11468)));
evalcond[8]=(((r20*x11454*x11457))+x11459+(((-1.0)*r21*x11464*x11468))+(((-1.0)*r22*sj3*x11469))+((r20*x11466))+((r21*x11465))+(((-1.0)*x11461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11473=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11473.valid){
continue;
}
CheckValue<IkReal> x11474 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11473.value)))+(x11474.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11475=IKsin(j4);
IkReal x11476=IKcos(j4);
IkReal x11477=(cj2*sj1);
IkReal x11478=(cj1*sj2);
IkReal x11479=(gconst5*sj3);
IkReal x11480=(gconst4*r11);
IkReal x11481=(sj1*sj2);
IkReal x11482=(gconst5*r10);
IkReal x11483=(cj1*cj2);
IkReal x11484=(gconst4*r01);
IkReal x11485=(gconst5*r00);
IkReal x11486=(gconst4*sj3);
IkReal x11487=(cj3*gconst5);
IkReal x11488=(cj3*gconst4);
IkReal x11489=(gconst4*r21);
IkReal x11490=((1.0)*x11476);
IkReal x11491=((1.0)*x11475);
IkReal x11492=(cj3*x11475);
IkReal x11493=(cj3*x11476);
IkReal x11494=(x11477+x11478);
evalcond[0]=((((-1.0)*gconst5*r20*x11491))+(((-1.0)*r22*x11490))+((x11475*x11489)));
evalcond[1]=((((-1.0)*x11482*x11491))+(((-1.0)*r12*x11490))+((x11475*x11480)));
evalcond[2]=((1.0)+(((-1.0)*x11485*x11491))+(((-1.0)*r02*x11490))+((x11475*x11484)));
evalcond[3]=((((-1.0)*cj3*x11485*x11490))+((r02*x11492))+((r00*x11486))+((x11484*x11493))+((r01*x11479)));
evalcond[4]=(((r00*x11488))+((r01*x11487))+(((-1.0)*r02*sj3*x11491))+(((-1.0)*sj3*x11484*x11490))+((r00*x11476*x11479)));
evalcond[5]=(((r22*x11492))+((r20*x11486))+x11494+((r21*x11479))+((r21*x11476*x11488))+(((-1.0)*r20*x11487*x11490)));
evalcond[6]=((((-1.0)*cj3*x11482*x11490))+x11483+((x11480*x11493))+((r11*x11479))+(((-1.0)*x11481))+((r12*x11492))+((r10*x11486)));
evalcond[7]=(x11494+(((-1.0)*sj3*x11480*x11490))+((r10*x11476*x11479))+((r11*x11487))+(((-1.0)*r12*sj3*x11491))+((r10*x11488)));
evalcond[8]=(((r20*x11488))+x11481+(((-1.0)*r22*sj3*x11491))+(((-1.0)*x11483))+(((-1.0)*r21*x11486*x11490))+((r20*x11476*x11479))+((r21*x11487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11495=((-1.0)*r21);
IkReal x11496=((-1.0)*px);
CheckValue<IkReal> x11498 = IKatan2WithCheck(IkReal(x11495),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11498.valid){
continue;
}
IkReal x11497=((1.0)*(x11498.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11497)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11496);
rxp1_1=(px*r21);
rxp1_2=(r11*x11496);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11497)));
IkReal gconst4=x11495;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11499=((-1.0)*r21);
IkReal x11500=((-1.0)*px);
CheckValue<IkReal> x11502 = IKatan2WithCheck(IkReal(x11499),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11502.valid){
continue;
}
IkReal x11501=((1.0)*(x11502.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11501)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11500);
rxp1_1=(px*r21);
rxp1_2=(r11*x11500);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11501)));
IkReal gconst4=x11499;
IkReal gconst5=((1.0)*r20);
IkReal x11503=((1.0)*cj3);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=((((-1.0)*x11503))+((x11503*(r10*r10)))+(((-1.0)*x11503*(r21*r21))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11504=((-1.0)*r21);
IkReal x11505=((-1.0)*px);
CheckValue<IkReal> x11507 = IKatan2WithCheck(IkReal(x11504),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11507.valid){
continue;
}
IkReal x11506=((1.0)*(x11507.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11506)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11505);
rxp1_1=(px*r21);
rxp1_2=(r11*x11505);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11506)));
IkReal gconst4=x11504;
IkReal gconst5=((1.0)*r20);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11508=((-1.0)*r21);
IkReal x11509=((-1.0)*px);
CheckValue<IkReal> x11511 = IKatan2WithCheck(IkReal(x11508),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11511.valid){
continue;
}
IkReal x11510=((1.0)*(x11511.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11510)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11509);
rxp1_1=(px*r21);
rxp1_2=(r11*x11509);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11510)));
IkReal gconst4=x11508;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11512=((-1.0)*r21);
IkReal x11513=((-1.0)*px);
CheckValue<IkReal> x11515 = IKatan2WithCheck(IkReal(x11512),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11515.valid){
continue;
}
IkReal x11514=((1.0)*(x11515.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11514)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11513);
rxp1_1=(px*r21);
rxp1_2=(r11*x11513);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11514)));
IkReal gconst4=x11512;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11516=((-1.0)*r21);
IkReal x11517=((-1.0)*px);
CheckValue<IkReal> x11519 = IKatan2WithCheck(IkReal(x11516),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11519.valid){
continue;
}
IkReal x11518=((1.0)*(x11519.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11518)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11517);
rxp1_1=(px*r21);
rxp1_2=(r11*x11517);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11518)));
IkReal gconst4=x11516;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11522=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x11522.valid){
continue;
}
IkReal x11520=x11522.value;
IkReal x11521=(sj0*x11520);
cj4array[0]=(((cj2*sj1*x11521))+((cj1*sj2*x11521)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11523=IKsin(j4);
IkReal x11524=IKcos(j4);
IkReal x11525=(gconst5*r20);
IkReal x11526=(gconst4*x11523);
IkReal x11527=((1.0)*x11524);
IkReal x11528=((1.0)*x11523);
evalcond[0]=((-1.0)*r02*x11523);
evalcond[1]=((((-1.0)*r02*x11527))+(((-1.0)*sj0)));
evalcond[2]=(((r21*x11526))+(((-1.0)*x11525*x11528)));
evalcond[3]=(((r11*x11526))+(((-1.0)*gconst5*r10*x11528)));
evalcond[4]=(((x11524*x11525))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst4*r21*x11527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11530=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11530.valid){
continue;
}
IkReal x11529=x11530.value;
cj4array[0]=((((-1.0)*sj1*sj2*x11529))+((cj1*cj2*x11529)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11531=IKsin(j4);
IkReal x11532=IKcos(j4);
IkReal x11533=(gconst5*r10);
IkReal x11534=((1.0)*sj0);
IkReal x11535=(gconst4*x11531);
IkReal x11536=((1.0)*x11532);
IkReal x11537=((1.0)*x11531);
evalcond[0]=((-1.0)*r02*x11531);
evalcond[1]=((((-1.0)*r02*x11536))+(((-1.0)*x11534)));
evalcond[2]=((((-1.0)*gconst5*r20*x11537))+((r21*x11535)));
evalcond[3]=(((r11*x11535))+(((-1.0)*x11533*x11537)));
evalcond[4]=((((-1.0)*cj2*sj1*x11534))+(((-1.0)*cj1*sj2*x11534))+((x11532*x11533))+(((-1.0)*gconst4*r11*x11536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11538=IKPowWithIntegerCheck(r02,-1);
if(!x11538.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11538.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11539=IKsin(j4);
IkReal x11540=IKcos(j4);
IkReal x11541=((1.0)*sj0);
IkReal x11542=(gconst5*x11540);
IkReal x11543=(gconst4*x11539);
IkReal x11544=((1.0)*gconst4*x11540);
IkReal x11545=((1.0)*gconst5*x11539);
evalcond[0]=((-1.0)*r02*x11539);
evalcond[1]=((((-1.0)*r20*x11545))+((r21*x11543)));
evalcond[2]=((((-1.0)*r10*x11545))+((r11*x11543)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11542))+(((-1.0)*r21*x11544)));
evalcond[4]=(((r10*x11542))+(((-1.0)*cj2*sj1*x11541))+(((-1.0)*cj1*sj2*x11541))+(((-1.0)*r11*x11544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11546=((-1.0)*r21);
IkReal x11547=((-1.0)*px);
CheckValue<IkReal> x11549 = IKatan2WithCheck(IkReal(x11546),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11549.valid){
continue;
}
IkReal x11548=((1.0)*(x11549.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11548)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11547);
rxp1_1=(px*r21);
rxp1_2=(r11*x11547);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11548)));
IkReal gconst4=x11546;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11550=((-1.0)*r21);
IkReal x11551=((-1.0)*px);
CheckValue<IkReal> x11553 = IKatan2WithCheck(IkReal(x11550),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11553.valid){
continue;
}
IkReal x11552=((1.0)*(x11553.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11552)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11551);
rxp1_1=(px*r21);
rxp1_2=(r11*x11551);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11552)));
IkReal gconst4=x11550;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11554=((-1.0)*r21);
IkReal x11555=((-1.0)*px);
CheckValue<IkReal> x11557 = IKatan2WithCheck(IkReal(x11554),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11557.valid){
continue;
}
IkReal x11556=((1.0)*(x11557.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11556)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11555);
rxp1_1=(px*r21);
rxp1_2=(r11*x11555);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11556)));
IkReal gconst4=x11554;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11560=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11560.valid){
continue;
}
IkReal x11558=x11560.value;
IkReal x11559=(sj0*x11558);
cj4array[0]=(((cj2*sj1*x11559))+((cj1*sj2*x11559)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11561=IKsin(j4);
IkReal x11562=IKcos(j4);
IkReal x11563=(gconst5*r20);
IkReal x11564=(gconst4*x11561);
IkReal x11565=((1.0)*x11562);
IkReal x11566=((1.0)*x11561);
evalcond[0]=(r02*x11561);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11565)));
evalcond[2]=(((r21*x11564))+(((-1.0)*x11563*x11566)));
evalcond[3]=((((-1.0)*gconst5*r10*x11566))+((r11*x11564)));
evalcond[4]=(((gconst4*r21*x11562))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11563*x11565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11568=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11568.valid){
continue;
}
IkReal x11567=x11568.value;
cj4array[0]=(((cj1*cj2*x11567))+(((-1.0)*sj1*sj2*x11567)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11569=IKsin(j4);
IkReal x11570=IKcos(j4);
IkReal x11571=(gconst4*r11);
IkReal x11572=((1.0)*sj0);
IkReal x11573=(gconst5*r10);
IkReal x11574=((1.0)*x11570);
IkReal x11575=((1.0)*x11569);
evalcond[0]=(r02*x11569);
evalcond[1]=((((-1.0)*r02*x11574))+(((-1.0)*x11572)));
evalcond[2]=(((gconst4*r21*x11569))+(((-1.0)*gconst5*r20*x11575)));
evalcond[3]=((((-1.0)*x11573*x11575))+((x11569*x11571)));
evalcond[4]=((((-1.0)*cj2*sj1*x11572))+((x11570*x11571))+(((-1.0)*x11573*x11574))+(((-1.0)*cj1*sj2*x11572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11576=IKPowWithIntegerCheck(r02,-1);
if(!x11576.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11576.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11577=IKsin(j4);
IkReal x11578=IKcos(j4);
IkReal x11579=(gconst4*r11);
IkReal x11580=((1.0)*cj1);
IkReal x11581=(gconst4*r21);
IkReal x11582=((1.0)*gconst5*x11578);
IkReal x11583=((1.0)*gconst5*x11577);
evalcond[0]=(r02*x11577);
evalcond[1]=(((x11577*x11581))+(((-1.0)*r20*x11583)));
evalcond[2]=(((x11577*x11579))+(((-1.0)*r10*x11583)));
evalcond[3]=(((sj1*sj2))+((x11578*x11581))+(((-1.0)*r20*x11582))+(((-1.0)*cj2*x11580)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x11580))+((x11578*x11579))+(((-1.0)*r10*x11582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11585=IKPowWithIntegerCheck(r02,-1);
if(!x11585.valid){
continue;
}
IkReal x11584=x11585.value;
CheckValue<IkReal> x11586=IKPowWithIntegerCheck(cj3,-1);
if(!x11586.valid){
continue;
}
if( IKabs((x11584*(x11586.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x11584)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11584*(x11586.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x11584))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11584*(x11586.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x11584));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11587=IKsin(j4);
IkReal x11588=IKcos(j4);
IkReal x11589=(gconst5*sj3);
IkReal x11590=(gconst4*r11);
IkReal x11591=(sj1*sj2);
IkReal x11592=((1.0)*gconst5);
IkReal x11593=(cj2*sj1);
IkReal x11594=((1.0)*sj0);
IkReal x11595=((1.0)*cj0);
IkReal x11596=(gconst4*r21);
IkReal x11597=(cj1*sj2);
IkReal x11598=(cj3*gconst4);
IkReal x11599=(gconst4*sj3);
IkReal x11600=(cj3*gconst5);
IkReal x11601=(r20*x11588);
IkReal x11602=((1.0)*cj1*cj2);
IkReal x11603=(r10*x11588);
IkReal x11604=(cj3*x11588);
IkReal x11605=(r02*x11587);
IkReal x11606=((1.0)*sj3*x11588);
evalcond[0]=((((-1.0)*x11594))+(((-1.0)*r02*x11588)));
evalcond[1]=(((x11587*x11596))+(((-1.0)*r20*x11587*x11592)));
evalcond[2]=((((-1.0)*r10*x11587*x11592))+cj0+((x11587*x11590)));
evalcond[3]=(((cj3*x11605))+(((-1.0)*cj1*cj2*x11595))+((cj0*x11591)));
evalcond[4]=((((-1.0)*x11593*x11595))+(((-1.0)*x11595*x11597))+(((-1.0)*sj3*x11605)));
evalcond[5]=(x11597+x11593+((r20*x11599))+((r21*x11589))+(((-1.0)*cj3*x11592*x11601))+((x11596*x11604)));
evalcond[6]=(x11591+((r20*x11598))+(((-1.0)*x11596*x11606))+((x11589*x11601))+((r21*x11600))+(((-1.0)*x11602)));
evalcond[7]=(((x11590*x11604))+((sj0*x11591))+((r10*x11599))+(((-1.0)*cj1*cj2*x11594))+(((-1.0)*cj3*x11592*x11603))+((r11*x11589)));
evalcond[8]=((((-1.0)*x11590*x11606))+(((-1.0)*x11593*x11594))+(((-1.0)*x11594*x11597))+((r10*x11598))+((x11589*x11603))+((r11*x11600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11607=((1.0)*gconst5);
CheckValue<IkReal> x11608=IKPowWithIntegerCheck(((((-1.0)*r10*x11607))+((gconst4*r11))),-1);
if(!x11608.valid){
continue;
}
CheckValue<IkReal> x11609=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x11607))+((cj3*gconst4*r21))),-1);
if(!x11609.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11608.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11609.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*r21*sj3*x11607))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11608.value)))+IKsqr(((x11609.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*r21*sj3*x11607))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11608.value)), ((x11609.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*r21*sj3*x11607))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11610=IKsin(j4);
IkReal x11611=IKcos(j4);
IkReal x11612=(gconst5*sj3);
IkReal x11613=(gconst4*r11);
IkReal x11614=(sj1*sj2);
IkReal x11615=((1.0)*gconst5);
IkReal x11616=(cj2*sj1);
IkReal x11617=((1.0)*sj0);
IkReal x11618=((1.0)*cj0);
IkReal x11619=(gconst4*r21);
IkReal x11620=(cj1*sj2);
IkReal x11621=(cj3*gconst4);
IkReal x11622=(gconst4*sj3);
IkReal x11623=(cj3*gconst5);
IkReal x11624=(r20*x11611);
IkReal x11625=((1.0)*cj1*cj2);
IkReal x11626=(r10*x11611);
IkReal x11627=(cj3*x11611);
IkReal x11628=(r02*x11610);
IkReal x11629=((1.0)*sj3*x11611);
evalcond[0]=((((-1.0)*x11617))+(((-1.0)*r02*x11611)));
evalcond[1]=(((x11610*x11619))+(((-1.0)*r20*x11610*x11615)));
evalcond[2]=(((x11610*x11613))+cj0+(((-1.0)*r10*x11610*x11615)));
evalcond[3]=((((-1.0)*cj1*cj2*x11618))+((cj3*x11628))+((cj0*x11614)));
evalcond[4]=((((-1.0)*sj3*x11628))+(((-1.0)*x11616*x11618))+(((-1.0)*x11618*x11620)));
evalcond[5]=(x11616+x11620+((x11619*x11627))+((r21*x11612))+(((-1.0)*cj3*x11615*x11624))+((r20*x11622)));
evalcond[6]=((((-1.0)*x11619*x11629))+x11614+((x11612*x11624))+(((-1.0)*x11625))+((r21*x11623))+((r20*x11621)));
evalcond[7]=((((-1.0)*cj1*cj2*x11617))+((x11613*x11627))+((r11*x11612))+((sj0*x11614))+(((-1.0)*cj3*x11615*x11626))+((r10*x11622)));
evalcond[8]=(((x11612*x11626))+((r11*x11623))+(((-1.0)*x11616*x11617))+(((-1.0)*x11617*x11620))+(((-1.0)*x11613*x11629))+((r10*x11621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11630=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11630.valid){
continue;
}
CheckValue<IkReal> x11631=IKPowWithIntegerCheck(r02,-1);
if(!x11631.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11630.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x11631.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11630.value)))+IKsqr(((-1.0)*sj0*(x11631.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11630.value)), ((-1.0)*sj0*(x11631.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11632=IKsin(j4);
IkReal x11633=IKcos(j4);
IkReal x11634=(gconst5*sj3);
IkReal x11635=(gconst4*r11);
IkReal x11636=(sj1*sj2);
IkReal x11637=((1.0)*gconst5);
IkReal x11638=(cj2*sj1);
IkReal x11639=((1.0)*sj0);
IkReal x11640=((1.0)*cj0);
IkReal x11641=(gconst4*r21);
IkReal x11642=(cj1*sj2);
IkReal x11643=(cj3*gconst4);
IkReal x11644=(gconst4*sj3);
IkReal x11645=(cj3*gconst5);
IkReal x11646=(r20*x11633);
IkReal x11647=((1.0)*cj1*cj2);
IkReal x11648=(r10*x11633);
IkReal x11649=(cj3*x11633);
IkReal x11650=(r02*x11632);
IkReal x11651=((1.0)*sj3*x11633);
evalcond[0]=((((-1.0)*x11639))+(((-1.0)*r02*x11633)));
evalcond[1]=((((-1.0)*r20*x11632*x11637))+((x11632*x11641)));
evalcond[2]=(cj0+(((-1.0)*r10*x11632*x11637))+((x11632*x11635)));
evalcond[3]=((((-1.0)*cj1*cj2*x11640))+((cj3*x11650))+((cj0*x11636)));
evalcond[4]=((((-1.0)*x11640*x11642))+(((-1.0)*sj3*x11650))+(((-1.0)*x11638*x11640)));
evalcond[5]=(x11638+x11642+((x11641*x11649))+((r21*x11634))+((r20*x11644))+(((-1.0)*cj3*x11637*x11646)));
evalcond[6]=(((x11634*x11646))+x11636+(((-1.0)*x11641*x11651))+((r21*x11645))+((r20*x11643))+(((-1.0)*x11647)));
evalcond[7]=(((x11635*x11649))+((r11*x11634))+((r10*x11644))+(((-1.0)*cj1*cj2*x11639))+((sj0*x11636))+(((-1.0)*cj3*x11637*x11648)));
evalcond[8]=(((x11634*x11648))+((r11*x11645))+(((-1.0)*x11639*x11642))+((r10*x11643))+(((-1.0)*x11638*x11639))+(((-1.0)*x11635*x11651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11652=((1.0)*sj0);
IkReal x11653=((1.0)*gconst4);
CheckValue<IkReal> x11654=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r21))+(((-1.0)*r20*x11653)))),-1);
if(!x11654.valid){
continue;
}
CheckValue<IkReal> x11655 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11652))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x11653))+(((-1.0)*gconst4*r11*x11652))+((cj0*gconst5*r00))+((gconst5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11654.value)))+(x11655.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11656=IKsin(j4);
IkReal x11657=IKcos(j4);
IkReal x11658=(gconst5*sj3);
IkReal x11659=(cj3*gconst5);
IkReal x11660=(gconst4*r11);
IkReal x11661=(sj1*sj2);
IkReal x11662=(cj2*sj1);
IkReal x11663=((1.0)*sj0);
IkReal x11664=(gconst4*r01);
IkReal x11665=(gconst4*r21);
IkReal x11666=((1.0)*cj0);
IkReal x11667=(cj1*sj2);
IkReal x11668=(gconst4*sj3);
IkReal x11669=(cj3*gconst4);
IkReal x11670=((1.0)*x11657);
IkReal x11671=((1.0)*cj1*cj2);
IkReal x11672=(cj3*x11656);
IkReal x11673=(cj3*x11657);
IkReal x11674=((1.0)*gconst5*x11656);
IkReal x11675=((1.0)*sj3*x11656);
evalcond[0]=((((-1.0)*r20*x11674))+(((-1.0)*r22*x11670))+((x11656*x11665)));
evalcond[1]=(cj0+(((-1.0)*r10*x11674))+((x11656*x11660))+(((-1.0)*r12*x11670)));
evalcond[2]=((((-1.0)*x11663))+(((-1.0)*r02*x11670))+((x11656*x11664))+(((-1.0)*r00*x11674)));
evalcond[3]=(x11667+x11662+((r22*x11672))+((r20*x11668))+(((-1.0)*r20*x11659*x11670))+((r21*x11658))+((x11665*x11673)));
evalcond[4]=(x11661+((r20*x11669))+((r21*x11659))+(((-1.0)*sj3*x11665*x11670))+(((-1.0)*r22*x11675))+((r20*x11657*x11658))+(((-1.0)*x11671)));
evalcond[5]=(((cj0*x11661))+((r02*x11672))+((r00*x11668))+(((-1.0)*r00*x11659*x11670))+(((-1.0)*cj1*cj2*x11666))+((x11664*x11673))+((r01*x11658)));
evalcond[6]=(((r11*x11658))+((r12*x11672))+((x11660*x11673))+(((-1.0)*cj1*cj2*x11663))+(((-1.0)*r10*x11659*x11670))+((r10*x11668))+((sj0*x11661)));
evalcond[7]=((((-1.0)*x11666*x11667))+((r00*x11657*x11658))+((r00*x11669))+(((-1.0)*r02*x11675))+(((-1.0)*x11662*x11666))+((r01*x11659))+(((-1.0)*sj3*x11664*x11670)));
evalcond[8]=(((r11*x11659))+(((-1.0)*sj3*x11660*x11670))+(((-1.0)*x11662*x11663))+((r10*x11657*x11658))+((r10*x11669))+(((-1.0)*x11663*x11667))+(((-1.0)*r12*x11675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11676=((1.0)*gconst5);
CheckValue<IkReal> x11677=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11676))+(((-1.0)*gconst4*r10)))),-1);
if(!x11677.valid){
continue;
}
CheckValue<IkReal> x11678 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x11676))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11677.value)))+(x11678.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11679=IKsin(j4);
IkReal x11680=IKcos(j4);
IkReal x11681=(gconst5*sj3);
IkReal x11682=(cj3*gconst5);
IkReal x11683=(gconst4*r11);
IkReal x11684=(sj1*sj2);
IkReal x11685=(cj2*sj1);
IkReal x11686=((1.0)*sj0);
IkReal x11687=(gconst4*r01);
IkReal x11688=(gconst4*r21);
IkReal x11689=((1.0)*cj0);
IkReal x11690=(cj1*sj2);
IkReal x11691=(gconst4*sj3);
IkReal x11692=(cj3*gconst4);
IkReal x11693=((1.0)*x11680);
IkReal x11694=((1.0)*cj1*cj2);
IkReal x11695=(cj3*x11679);
IkReal x11696=(cj3*x11680);
IkReal x11697=((1.0)*gconst5*x11679);
IkReal x11698=((1.0)*sj3*x11679);
evalcond[0]=((((-1.0)*r22*x11693))+(((-1.0)*r20*x11697))+((x11679*x11688)));
evalcond[1]=(cj0+((x11679*x11683))+(((-1.0)*r12*x11693))+(((-1.0)*r10*x11697)));
evalcond[2]=((((-1.0)*x11686))+(((-1.0)*r02*x11693))+((x11679*x11687))+(((-1.0)*r00*x11697)));
evalcond[3]=(x11685+x11690+((r20*x11691))+((r21*x11681))+((x11688*x11696))+((r22*x11695))+(((-1.0)*r20*x11682*x11693)));
evalcond[4]=((((-1.0)*r22*x11698))+x11684+(((-1.0)*sj3*x11688*x11693))+((r20*x11680*x11681))+((r20*x11692))+((r21*x11682))+(((-1.0)*x11694)));
evalcond[5]=(((x11687*x11696))+((r00*x11691))+((cj0*x11684))+(((-1.0)*cj1*cj2*x11689))+(((-1.0)*r00*x11682*x11693))+((r02*x11695))+((r01*x11681)));
evalcond[6]=(((sj0*x11684))+((r11*x11681))+((x11683*x11696))+((r12*x11695))+((r10*x11691))+(((-1.0)*cj1*cj2*x11686))+(((-1.0)*r10*x11682*x11693)));
evalcond[7]=((((-1.0)*x11689*x11690))+((r00*x11680*x11681))+(((-1.0)*sj3*x11687*x11693))+((r00*x11692))+(((-1.0)*r02*x11698))+(((-1.0)*x11685*x11689))+((r01*x11682)));
evalcond[8]=((((-1.0)*x11686*x11690))+((r11*x11682))+(((-1.0)*x11685*x11686))+((r10*x11692))+(((-1.0)*sj3*x11683*x11693))+(((-1.0)*r12*x11698))+((r10*x11680*x11681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11699=((1.0)*gconst5);
CheckValue<IkReal> x11700 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11699))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11700.valid){
continue;
}
CheckValue<IkReal> x11701=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11699)))),-1);
if(!x11701.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11700.value)+(((1.5707963267949)*(x11701.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11702=IKsin(j4);
IkReal x11703=IKcos(j4);
IkReal x11704=(gconst5*sj3);
IkReal x11705=(cj3*gconst5);
IkReal x11706=(gconst4*r11);
IkReal x11707=(sj1*sj2);
IkReal x11708=(cj2*sj1);
IkReal x11709=((1.0)*sj0);
IkReal x11710=(gconst4*r01);
IkReal x11711=(gconst4*r21);
IkReal x11712=((1.0)*cj0);
IkReal x11713=(cj1*sj2);
IkReal x11714=(gconst4*sj3);
IkReal x11715=(cj3*gconst4);
IkReal x11716=((1.0)*x11703);
IkReal x11717=((1.0)*cj1*cj2);
IkReal x11718=(cj3*x11702);
IkReal x11719=(cj3*x11703);
IkReal x11720=((1.0)*gconst5*x11702);
IkReal x11721=((1.0)*sj3*x11702);
evalcond[0]=(((x11702*x11711))+(((-1.0)*r20*x11720))+(((-1.0)*r22*x11716)));
evalcond[1]=(cj0+(((-1.0)*r10*x11720))+((x11702*x11706))+(((-1.0)*r12*x11716)));
evalcond[2]=(((x11702*x11710))+(((-1.0)*r00*x11720))+(((-1.0)*x11709))+(((-1.0)*r02*x11716)));
evalcond[3]=(x11713+x11708+(((-1.0)*r20*x11705*x11716))+((r21*x11704))+((r20*x11714))+((x11711*x11719))+((r22*x11718)));
evalcond[4]=(x11707+(((-1.0)*x11717))+((r20*x11703*x11704))+((r21*x11705))+((r20*x11715))+(((-1.0)*r22*x11721))+(((-1.0)*sj3*x11711*x11716)));
evalcond[5]=(((r00*x11714))+((r01*x11704))+((r02*x11718))+(((-1.0)*r00*x11705*x11716))+((cj0*x11707))+(((-1.0)*cj1*cj2*x11712))+((x11710*x11719)));
evalcond[6]=(((x11706*x11719))+(((-1.0)*r10*x11705*x11716))+((r10*x11714))+((sj0*x11707))+(((-1.0)*cj1*cj2*x11709))+((r11*x11704))+((r12*x11718)));
evalcond[7]=((((-1.0)*sj3*x11710*x11716))+(((-1.0)*x11708*x11712))+((r00*x11715))+((r01*x11705))+(((-1.0)*x11712*x11713))+((r00*x11703*x11704))+(((-1.0)*r02*x11721)));
evalcond[8]=(((r10*x11703*x11704))+(((-1.0)*x11709*x11713))+(((-1.0)*sj3*x11706*x11716))+(((-1.0)*r12*x11721))+((r10*x11715))+((r11*x11705))+(((-1.0)*x11708*x11709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11722=((-1.0)*r10);
IkReal x11724 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11724)==0){
continue;
}
IkReal x11723=pow(x11724,-0.5);
CheckValue<IkReal> x11725 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11722),IKFAST_ATAN2_MAGTHRESH);
if(!x11725.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11725.value));
IkReal gconst7=(r11*x11723);
IkReal gconst8=(x11722*x11723);
CheckValue<IkReal> x11726 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11726.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11726.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11727=((-1.0)*r10);
IkReal x11728=x11723;
CheckValue<IkReal> x11730 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11727),IKFAST_ATAN2_MAGTHRESH);
if(!x11730.valid){
continue;
}
IkReal x11729=((-1.0)*(x11730.value));
sj5=gconst7;
cj5=gconst8;
j5=x11729;
IkReal gconst6=x11729;
IkReal gconst7=(r11*x11728);
IkReal gconst8=(x11727*x11728);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11731=((1.0)*sj0);
IkReal x11732=((1.0)*gconst7);
CheckValue<IkReal> x11733=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11732))+(((-1.0)*gconst8*r21)))),-1);
if(!x11733.valid){
continue;
}
CheckValue<IkReal> x11734 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x11731)))),IkReal((((gconst8*r10*sj0))+(((-1.0)*gconst7*r11*x11731))+(((-1.0)*cj0*r01*x11732))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11733.value)))+(x11734.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11735=IKsin(j4);
IkReal x11736=IKcos(j4);
IkReal x11737=(gconst7*sj3);
IkReal x11738=(cj3*gconst8);
IkReal x11739=(cj3*gconst7);
IkReal x11740=(sj1*sj2);
IkReal x11741=(cj2*sj1);
IkReal x11742=((1.0)*sj0);
IkReal x11743=((1.0)*cj0);
IkReal x11744=(gconst8*sj3);
IkReal x11745=(cj1*sj2);
IkReal x11746=((1.0)*x11736);
IkReal x11747=((1.0)*x11735);
IkReal x11748=((1.0)*cj1*cj2);
IkReal x11749=(cj3*x11735);
IkReal x11750=(gconst7*x11735);
IkReal x11751=(x11736*x11744);
evalcond[0]=((((-1.0)*gconst8*r20*x11747))+(((-1.0)*r22*x11746))+((r21*x11750)));
evalcond[1]=(cj0+((r11*x11750))+(((-1.0)*r12*x11746))+(((-1.0)*gconst8*r10*x11747)));
evalcond[2]=((((-1.0)*x11742))+(((-1.0)*r02*x11746))+((r01*x11750))+(((-1.0)*gconst8*r00*x11747)));
evalcond[3]=(x11741+x11745+(((-1.0)*r20*x11738*x11746))+((r20*x11737))+((r21*x11744))+((r21*x11736*x11739))+((r22*x11749)));
evalcond[4]=(x11740+(((-1.0)*x11748))+((r20*x11739))+(((-1.0)*r21*x11737*x11746))+(((-1.0)*r22*sj3*x11747))+((r21*x11738))+((r20*x11751)));
evalcond[5]=(((r01*x11744))+((r00*x11737))+((r01*x11736*x11739))+((cj0*x11740))+(((-1.0)*r00*x11738*x11746))+(((-1.0)*cj1*cj2*x11743))+((r02*x11749)));
evalcond[6]=((((-1.0)*r10*x11738*x11746))+((sj0*x11740))+(((-1.0)*cj1*cj2*x11742))+((r10*x11737))+((r12*x11749))+((r11*x11736*x11739))+((r11*x11744)));
evalcond[7]=(((r01*x11738))+(((-1.0)*r02*sj3*x11747))+((r00*x11739))+(((-1.0)*x11741*x11743))+(((-1.0)*x11743*x11745))+(((-1.0)*r01*x11737*x11746))+((r00*x11751)));
evalcond[8]=(((r11*x11738))+((r10*x11751))+(((-1.0)*x11741*x11742))+(((-1.0)*x11742*x11745))+((r10*x11739))+(((-1.0)*r11*x11737*x11746))+(((-1.0)*r12*sj3*x11747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11752=((1.0)*gconst8);
CheckValue<IkReal> x11753=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r00))+(((-1.0)*r01*x11752)))),-1);
if(!x11753.valid){
continue;
}
CheckValue<IkReal> x11754 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11752))+((cj0*gconst7*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11754.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11753.value)))+(x11754.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11755=IKsin(j4);
IkReal x11756=IKcos(j4);
IkReal x11757=(gconst7*sj3);
IkReal x11758=(cj3*gconst8);
IkReal x11759=(cj3*gconst7);
IkReal x11760=(sj1*sj2);
IkReal x11761=(cj2*sj1);
IkReal x11762=((1.0)*sj0);
IkReal x11763=((1.0)*cj0);
IkReal x11764=(gconst8*sj3);
IkReal x11765=(cj1*sj2);
IkReal x11766=((1.0)*x11756);
IkReal x11767=((1.0)*x11755);
IkReal x11768=((1.0)*cj1*cj2);
IkReal x11769=(cj3*x11755);
IkReal x11770=(gconst7*x11755);
IkReal x11771=(x11756*x11764);
evalcond[0]=((((-1.0)*r22*x11766))+(((-1.0)*gconst8*r20*x11767))+((r21*x11770)));
evalcond[1]=((((-1.0)*r12*x11766))+(((-1.0)*gconst8*r10*x11767))+cj0+((r11*x11770)));
evalcond[2]=((((-1.0)*gconst8*r00*x11767))+(((-1.0)*r02*x11766))+((r01*x11770))+(((-1.0)*x11762)));
evalcond[3]=(x11761+x11765+(((-1.0)*r20*x11758*x11766))+((r21*x11756*x11759))+((r22*x11769))+((r21*x11764))+((r20*x11757)));
evalcond[4]=((((-1.0)*r22*sj3*x11767))+x11760+((r20*x11771))+(((-1.0)*r21*x11757*x11766))+(((-1.0)*x11768))+((r21*x11758))+((r20*x11759)));
evalcond[5]=(((cj0*x11760))+(((-1.0)*cj1*cj2*x11763))+((r02*x11769))+(((-1.0)*r00*x11758*x11766))+((r01*x11764))+((r00*x11757))+((r01*x11756*x11759)));
evalcond[6]=((((-1.0)*r10*x11758*x11766))+(((-1.0)*cj1*cj2*x11762))+((r11*x11764))+((r10*x11757))+((r12*x11769))+((sj0*x11760))+((r11*x11756*x11759)));
evalcond[7]=((((-1.0)*r01*x11757*x11766))+(((-1.0)*r02*sj3*x11767))+((r00*x11771))+(((-1.0)*x11763*x11765))+((r01*x11758))+((r00*x11759))+(((-1.0)*x11761*x11763)));
evalcond[8]=(((r10*x11771))+(((-1.0)*r11*x11757*x11766))+((r11*x11758))+((r10*x11759))+(((-1.0)*r12*sj3*x11767))+(((-1.0)*x11762*x11765))+(((-1.0)*x11761*x11762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11772=((-1.0)*r11);
IkReal x11774 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11774)==0){
continue;
}
IkReal x11773=pow(x11774,-0.5);
CheckValue<IkReal> x11775 = IKatan2WithCheck(IkReal(x11772),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11775.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11775.value))));
IkReal gconst10=(x11772*x11773);
IkReal gconst11=((1.0)*r10*x11773);
CheckValue<IkReal> x11776 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11776.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11776.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11777=((-1.0)*r11);
CheckValue<IkReal> x11780 = IKatan2WithCheck(IkReal(x11777),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11780.valid){
continue;
}
IkReal x11778=((1.0)*(x11780.value));
IkReal x11779=x11773;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11778)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11778)));
IkReal gconst10=(x11777*x11779);
IkReal gconst11=((1.0)*r10*x11779);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11781=((-1.0)*r11);
CheckValue<IkReal> x11784 = IKatan2WithCheck(IkReal(x11781),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11784.valid){
continue;
}
IkReal x11782=((1.0)*(x11784.value));
IkReal x11783=x11773;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11782)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11782)));
IkReal gconst10=(x11781*x11783);
IkReal gconst11=((1.0)*r10*x11783);
IkReal x11785=r12*r12;
IkReal x11786=((1.0)*sj0);
IkReal x11787=(cj0*r02);
IkReal x11788=x11773;
j4eval[0]=((IKabs(((((-1.0)*x11786*x11788))+((r12*x11787*x11788))+((sj0*x11785*x11788)))))+(IKabs(((((-1.0)*r12*x11786))+(((-1.0)*x11787))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11789=((-1.0)*r11);
CheckValue<IkReal> x11792 = IKatan2WithCheck(IkReal(x11789),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11792.valid){
continue;
}
IkReal x11790=((1.0)*(x11792.value));
IkReal x11791=x11773;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11790)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11790)));
IkReal gconst10=(x11789*x11791);
IkReal gconst11=((1.0)*r10*x11791);
IkReal x11793=((1.0)*cj3);
CheckValue<IkReal> x11798=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11798.valid){
continue;
}
IkReal x11794=x11798.value;
IkReal x11795=(cj3*x11794);
IkReal x11796=(x11793*x11794);
IkReal x11797=((((-2.0)*r10*r11*r20*r21*x11795))+(((-1.0)*x11796*(r10*r10)*(r20*r20)))+(((-1.0)*x11793*(r22*r22)))+(((-1.0)*x11796*(r11*r11)*(r21*r21))));
j4eval[0]=x11797;
j4eval[1]=IKsign(x11797);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11799=((-1.0)*r11);
CheckValue<IkReal> x11802 = IKatan2WithCheck(IkReal(x11799),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11802.valid){
continue;
}
IkReal x11800=((1.0)*(x11802.value));
IkReal x11801=x11773;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11800)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11800)));
IkReal gconst10=(x11799*x11801);
IkReal gconst11=((1.0)*r10*x11801);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11803=((-1.0)*r11);
CheckValue<IkReal> x11806 = IKatan2WithCheck(IkReal(x11803),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11806.valid){
continue;
}
IkReal x11804=((1.0)*(x11806.value));
IkReal x11805=x11773;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11804)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11804)));
IkReal gconst10=(x11803*x11805);
IkReal gconst11=((1.0)*r10*x11805);
IkReal x11807=r12*r12;
IkReal x11808=((1.0)*sj0);
IkReal x11809=(cj0*r02);
IkReal x11810=x11773;
j4eval[0]=((IKabs(((((-1.0)*r12*x11808))+(((-1.0)*x11809)))))+(IKabs((((sj0*x11807*x11810))+(((-1.0)*x11808*x11810))+((r12*x11809*x11810))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11811=((-1.0)*r11);
CheckValue<IkReal> x11814 = IKatan2WithCheck(IkReal(x11811),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11814.valid){
continue;
}
IkReal x11812=((1.0)*(x11814.value));
IkReal x11813=x11773;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11812)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11812)));
IkReal gconst10=(x11811*x11813);
IkReal gconst11=((1.0)*r10*x11813);
IkReal x11815=r12*r12;
IkReal x11816=(cj1*cj2*r22);
IkReal x11817=(r22*sj1*sj2);
CheckValue<IkReal> x11821=IKPowWithIntegerCheck(((-1.0)+x11815),-1);
if(!x11821.valid){
continue;
}
IkReal x11818=x11821.value;
if((((1.0)+(((-1.0)*x11815)))) < -0.00001)
continue;
IkReal x11819=IKsqrt(((1.0)+(((-1.0)*x11815))));
IkReal x11820=(r12*x11818*x11819);
j4eval[0]=((IKabs((((x11816*x11820))+(((-1.0)*x11817*x11820)))))+(IKabs(((((-1.0)*x11816))+x11817))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11822=((-1.0)*r11);
CheckValue<IkReal> x11825 = IKatan2WithCheck(IkReal(x11822),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11825.valid){
continue;
}
IkReal x11823=((1.0)*(x11825.value));
IkReal x11824=x11773;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11823)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11823)));
IkReal gconst10=(x11822*x11824);
IkReal gconst11=((1.0)*r10*x11824);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11826=((-1.0)*r11);
CheckValue<IkReal> x11829 = IKatan2WithCheck(IkReal(x11826),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11829.valid){
continue;
}
IkReal x11827=((1.0)*(x11829.value));
IkReal x11828=x11773;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11827)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11827)));
IkReal gconst10=(x11826*x11828);
IkReal gconst11=((1.0)*r10*x11828);
IkReal x11830=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11834=IKPowWithIntegerCheck(x11830,-1);
if(!x11834.valid){
continue;
}
IkReal x11831=x11834.value;
IkReal x11832=((1.0)*x11831);
IkReal x11833=((((-1.0)*x11832*(r01*r01)*(r11*r11)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r10*r11*x11831))+(((-1.0)*x11832*(r00*r00)*(r10*r10))));
j4eval[0]=x11833;
j4eval[1]=IKsign(x11833);
j4eval[2]=r02;
j4eval[3]=x11830;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11835=((-1.0)*r11);
CheckValue<IkReal> x11838 = IKatan2WithCheck(IkReal(x11835),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11838.valid){
continue;
}
IkReal x11836=((1.0)*(x11838.value));
IkReal x11837=x11773;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11836)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11836)));
IkReal gconst10=(x11835*x11837);
IkReal gconst11=((1.0)*r10*x11837);
IkReal x11839=r12*r12;
IkReal x11840=(cj1*cj2*r22);
IkReal x11841=(r22*sj1*sj2);
CheckValue<IkReal> x11845=IKPowWithIntegerCheck(((-1.0)+x11839),-1);
if(!x11845.valid){
continue;
}
IkReal x11842=x11845.value;
if((((1.0)+(((-1.0)*x11839)))) < -0.00001)
continue;
IkReal x11843=IKsqrt(((1.0)+(((-1.0)*x11839))));
IkReal x11844=(r12*x11842*x11843);
j4eval[0]=((IKabs((((x11840*x11844))+(((-1.0)*x11841*x11844)))))+(IKabs(((((-1.0)*x11840))+x11841))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11846=(gconst10*r21);
IkReal x11847=(gconst11*r20);
IkReal x11848=(sj1*sj2);
IkReal x11849=(cj1*cj2);
CheckValue<IkReal> x11850 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x11849))+((r22*x11848)))),IkReal(((((-1.0)*x11846*x11849))+((x11846*x11848))+(((-1.0)*x11847*x11848))+((x11847*x11849)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11850.valid){
continue;
}
CheckValue<IkReal> x11851=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11846*x11847))+(r22*r22)+(x11846*x11846)+(x11847*x11847))),-1);
if(!x11851.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11850.value)+(((1.5707963267949)*(x11851.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11852=IKsin(j4);
IkReal x11853=IKcos(j4);
IkReal x11854=((1.0)*cj2);
IkReal x11855=((1.0)*x11853);
IkReal x11856=(gconst10*x11852);
IkReal x11857=((1.0)*x11852);
IkReal x11858=(gconst11*x11853);
IkReal x11859=(gconst11*x11857);
evalcond[0]=(((r21*x11856))+(((-1.0)*r20*x11859))+(((-1.0)*r22*x11855)));
evalcond[1]=(((r11*x11856))+(((-1.0)*r12*x11855))+(((-1.0)*r10*x11859)));
evalcond[2]=((((-1.0)*r02*x11857))+(((-1.0)*gconst10*r01*x11855))+((r00*x11858)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11855))+((r01*x11856))+(((-1.0)*r00*x11859)));
evalcond[4]=(((r20*x11858))+(((-1.0)*cj1*x11854))+(((-1.0)*gconst10*r21*x11855))+((sj1*sj2))+(((-1.0)*r22*x11857)));
evalcond[5]=((((-1.0)*sj1*x11854))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*r11*x11855))+(((-1.0)*r12*x11857))+((r10*x11858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11860=(gconst11*r00);
IkReal x11861=(gconst10*r01);
CheckValue<IkReal> x11862=IKPowWithIntegerCheck(IKsign(((((2.0)*x11860*x11861))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11861*x11861)))+(((-1.0)*(x11860*x11860))))),-1);
if(!x11862.valid){
continue;
}
CheckValue<IkReal> x11863 = IKatan2WithCheck(IkReal(((((-1.0)*x11861))+x11860)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11862.value)))+(x11863.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11864=IKsin(j4);
IkReal x11865=IKcos(j4);
IkReal x11866=((1.0)*cj2);
IkReal x11867=((1.0)*x11865);
IkReal x11868=(gconst10*x11864);
IkReal x11869=((1.0)*x11864);
IkReal x11870=(gconst11*x11865);
IkReal x11871=(gconst11*x11869);
evalcond[0]=((((-1.0)*r22*x11867))+(((-1.0)*r20*x11871))+((r21*x11868)));
evalcond[1]=(((r11*x11868))+(((-1.0)*r10*x11871))+(((-1.0)*r12*x11867)));
evalcond[2]=(((r00*x11870))+(((-1.0)*gconst10*r01*x11867))+(((-1.0)*r02*x11869)));
evalcond[3]=((-1.0)+((r01*x11868))+(((-1.0)*r00*x11871))+(((-1.0)*r02*x11867)));
evalcond[4]=((((-1.0)*gconst10*r21*x11867))+(((-1.0)*r22*x11869))+(((-1.0)*cj1*x11866))+((r20*x11870))+((sj1*sj2)));
evalcond[5]=((((-1.0)*sj1*x11866))+(((-1.0)*gconst10*r11*x11867))+(((-1.0)*cj1*sj2))+((r10*x11870))+(((-1.0)*r12*x11869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11872 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11872.valid){
continue;
}
CheckValue<IkReal> x11873=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11872.value)+(((1.5707963267949)*(x11873.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11874=IKsin(j4);
IkReal x11875=IKcos(j4);
IkReal x11876=((1.0)*cj2);
IkReal x11877=((1.0)*x11875);
IkReal x11878=(gconst10*x11874);
IkReal x11879=((1.0)*x11874);
IkReal x11880=(gconst11*x11875);
IkReal x11881=(gconst11*x11879);
evalcond[0]=((((-1.0)*r22*x11877))+((r21*x11878))+(((-1.0)*r20*x11881)));
evalcond[1]=(((r11*x11878))+(((-1.0)*r12*x11877))+(((-1.0)*r10*x11881)));
evalcond[2]=(((r00*x11880))+(((-1.0)*gconst10*r01*x11877))+(((-1.0)*r02*x11879)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x11881))+((r01*x11878))+(((-1.0)*r02*x11877)));
evalcond[4]=((((-1.0)*r22*x11879))+(((-1.0)*gconst10*r21*x11877))+(((-1.0)*cj1*x11876))+((sj1*sj2))+((r20*x11880)));
evalcond[5]=((((-1.0)*sj1*x11876))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*r11*x11877))+((r10*x11880))+(((-1.0)*r12*x11879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11882=((-1.0)*r11);
CheckValue<IkReal> x11885 = IKatan2WithCheck(IkReal(x11882),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11885.valid){
continue;
}
IkReal x11883=((1.0)*(x11885.value));
IkReal x11884=x11773;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11883)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11883)));
IkReal gconst10=(x11882*x11884);
IkReal gconst11=((1.0)*r10*x11884);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11886=((-1.0)*r11);
CheckValue<IkReal> x11889 = IKatan2WithCheck(IkReal(x11886),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11889.valid){
continue;
}
IkReal x11887=((1.0)*(x11889.value));
IkReal x11888=x11773;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11887)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11887)));
IkReal gconst10=(x11886*x11888);
IkReal gconst11=((1.0)*r10*x11888);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11890=((-1.0)*r11);
CheckValue<IkReal> x11893 = IKatan2WithCheck(IkReal(x11890),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11893.valid){
continue;
}
IkReal x11891=((1.0)*(x11893.value));
IkReal x11892=x11773;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11891)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11891)));
IkReal gconst10=(x11890*x11892);
IkReal gconst11=((1.0)*r10*x11892);
IkReal x11894=r12*r12;
CheckValue<IkReal> x11897=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11894))),-1);
if(!x11897.valid){
continue;
}
IkReal x11895=x11897.value;
IkReal x11896=((1.0)*x11895);
j4eval[0]=IKsign((((x11896*(r11*r11*r11*r11)))+((x11896*(r10*r10*r10*r10)))+(((2.0)*x11895*(r10*r10)*(r11*r11)))+x11894));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11898=(cj2*sj1);
IkReal x11899=(gconst10*r11);
IkReal x11900=(gconst11*r10);
IkReal x11901=(cj1*sj2);
CheckValue<IkReal> x11902=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x11899*x11900))+(x11899*x11899)+(x11900*x11900))),-1);
if(!x11902.valid){
continue;
}
CheckValue<IkReal> x11903 = IKatan2WithCheck(IkReal((((r12*x11901))+((r12*x11898)))),IkReal(((((-1.0)*x11900*x11901))+((x11898*x11899))+((x11899*x11901))+(((-1.0)*x11898*x11900)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11902.value)))+(x11903.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11904=IKsin(j4);
IkReal x11905=IKcos(j4);
IkReal x11906=((1.0)*x11905);
IkReal x11907=(gconst10*x11904);
IkReal x11908=((1.0)*x11904);
IkReal x11909=(gconst11*x11905);
IkReal x11910=(gconst11*x11908);
evalcond[0]=((((-1.0)*r22*x11906))+(((-1.0)*r20*x11910))+((r21*x11907)));
evalcond[1]=((((-1.0)*r12*x11906))+(((-1.0)*r10*x11910))+((r11*x11907)));
evalcond[2]=((((-1.0)*r02*x11908))+((r00*x11909))+(((-1.0)*gconst10*r01*x11906)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11906))+((r01*x11907))+(((-1.0)*r00*x11910)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x11908))+(((-1.0)*gconst10*r11*x11906))+((r10*x11909)));
evalcond[5]=((((-1.0)*r22*x11908))+(((-1.0)*gconst10*r21*x11906))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11911=(gconst11*r00);
IkReal x11912=(gconst10*r01);
CheckValue<IkReal> x11913 = IKatan2WithCheck(IkReal((x11911+(((-1.0)*x11912)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11913.valid){
continue;
}
CheckValue<IkReal> x11914=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11911*x11912))+(x11911*x11911)+(x11912*x11912)+(r02*r02))),-1);
if(!x11914.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11913.value)+(((1.5707963267949)*(x11914.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11915=IKsin(j4);
IkReal x11916=IKcos(j4);
IkReal x11917=((1.0)*x11916);
IkReal x11918=(gconst10*x11915);
IkReal x11919=((1.0)*x11915);
IkReal x11920=(gconst11*x11916);
IkReal x11921=(gconst11*x11919);
evalcond[0]=((((-1.0)*r20*x11921))+(((-1.0)*r22*x11917))+((r21*x11918)));
evalcond[1]=(((r11*x11918))+(((-1.0)*r10*x11921))+(((-1.0)*r12*x11917)));
evalcond[2]=((((-1.0)*gconst10*r01*x11917))+(((-1.0)*r02*x11919))+((r00*x11920)));
evalcond[3]=((1.0)+((r01*x11918))+(((-1.0)*r00*x11921))+(((-1.0)*r02*x11917)));
evalcond[4]=(((cj2*sj1))+((r10*x11920))+((cj1*sj2))+(((-1.0)*gconst10*r11*x11917))+(((-1.0)*r12*x11919)));
evalcond[5]=((((-1.0)*gconst10*r21*x11917))+((r20*x11920))+(((-1.0)*r22*x11919))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11922=((1.0)*gconst11);
CheckValue<IkReal> x11923=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x11922)))),-1);
if(!x11923.valid){
continue;
}
CheckValue<IkReal> x11924 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11922)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11923.value)))+(x11924.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11925=IKsin(j4);
IkReal x11926=IKcos(j4);
IkReal x11927=((1.0)*x11926);
IkReal x11928=(gconst10*x11925);
IkReal x11929=((1.0)*x11925);
IkReal x11930=(gconst11*x11926);
IkReal x11931=(gconst11*x11929);
evalcond[0]=(((r21*x11928))+(((-1.0)*r22*x11927))+(((-1.0)*r20*x11931)));
evalcond[1]=((((-1.0)*r10*x11931))+((r11*x11928))+(((-1.0)*r12*x11927)));
evalcond[2]=((((-1.0)*r02*x11929))+((r00*x11930))+(((-1.0)*gconst10*r01*x11927)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11927))+(((-1.0)*r00*x11931))+((r01*x11928)));
evalcond[4]=(((cj2*sj1))+((r10*x11930))+((cj1*sj2))+(((-1.0)*gconst10*r11*x11927))+(((-1.0)*r12*x11929)));
evalcond[5]=(((r20*x11930))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11929))+(((-1.0)*gconst10*r21*x11927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11932=((-1.0)*r11);
IkReal x11933=((-1.0)*r10);
CheckValue<IkReal> x11935 = IKatan2WithCheck(IkReal(x11932),IkReal(x11933),IKFAST_ATAN2_MAGTHRESH);
if(!x11935.valid){
continue;
}
IkReal x11934=((1.0)*(x11935.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11934)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11933);
rxp1_1=(px*r21);
rxp1_2=(px*x11932);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11934)));
IkReal gconst10=x11932;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11936=((-1.0)*r11);
IkReal x11937=((-1.0)*r10);
CheckValue<IkReal> x11939 = IKatan2WithCheck(IkReal(x11936),IkReal(x11937),IKFAST_ATAN2_MAGTHRESH);
if(!x11939.valid){
continue;
}
IkReal x11938=((1.0)*(x11939.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11938)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11937);
rxp1_1=(px*r21);
rxp1_2=(px*x11936);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11938)));
IkReal gconst10=x11936;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11940=((-1.0)*r11);
IkReal x11941=((-1.0)*r10);
CheckValue<IkReal> x11943 = IKatan2WithCheck(IkReal(x11940),IkReal(x11941),IKFAST_ATAN2_MAGTHRESH);
if(!x11943.valid){
continue;
}
IkReal x11942=((1.0)*(x11943.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11942)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11941);
rxp1_1=(px*r21);
rxp1_2=(px*x11940);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11942)));
IkReal gconst10=x11940;
IkReal gconst11=((1.0)*r10);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11946=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x11946.valid){
continue;
}
IkReal x11944=x11946.value;
IkReal x11945=(sj0*x11944);
cj4array[0]=(((cj1*sj2*x11945))+((cj2*sj1*x11945)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11947=IKsin(j4);
IkReal x11948=IKcos(j4);
IkReal x11949=(gconst10*r21);
IkReal x11950=(gconst11*r20);
IkReal x11951=((1.0)*x11947);
IkReal x11952=((1.0)*x11948);
evalcond[0]=((-1.0)*r02*x11947);
evalcond[1]=((((-1.0)*r02*x11952))+(((-1.0)*sj0)));
evalcond[2]=(((x11947*x11949))+(((-1.0)*x11950*x11951)));
evalcond[3]=(((gconst10*r11*x11947))+(((-1.0)*gconst11*r10*x11951)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11949*x11952))+((x11948*x11950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11954=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x11954.valid){
continue;
}
IkReal x11953=x11954.value;
cj4array[0]=(((cj1*cj2*x11953))+(((-1.0)*sj1*sj2*x11953)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11955=IKsin(j4);
IkReal x11956=IKcos(j4);
IkReal x11957=((1.0)*sj0);
IkReal x11958=(gconst10*x11955);
IkReal x11959=((1.0)*x11956);
IkReal x11960=((1.0)*gconst11*x11955);
evalcond[0]=((-1.0)*r02*x11955);
evalcond[1]=((((-1.0)*r02*x11959))+(((-1.0)*x11957)));
evalcond[2]=(((r21*x11958))+(((-1.0)*r20*x11960)));
evalcond[3]=((((-1.0)*r10*x11960))+((r11*x11958)));
evalcond[4]=((((-1.0)*gconst10*r11*x11959))+(((-1.0)*cj2*sj1*x11957))+((gconst11*r10*x11956))+(((-1.0)*cj1*sj2*x11957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11961=IKPowWithIntegerCheck(r02,-1);
if(!x11961.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11961.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11962=IKsin(j4);
IkReal x11963=IKcos(j4);
IkReal x11964=(gconst10*r21);
IkReal x11965=((1.0)*sj0);
IkReal x11966=(gconst10*r11);
IkReal x11967=(gconst11*x11963);
IkReal x11968=((1.0)*x11963);
IkReal x11969=((1.0)*gconst11*x11962);
evalcond[0]=((-1.0)*r02*x11962);
evalcond[1]=(((x11962*x11964))+(((-1.0)*r20*x11969)));
evalcond[2]=((((-1.0)*r10*x11969))+((x11962*x11966)));
evalcond[3]=((((-1.0)*x11964*x11968))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11967)));
evalcond[4]=((((-1.0)*x11966*x11968))+((r10*x11967))+(((-1.0)*cj2*sj1*x11965))+(((-1.0)*cj1*sj2*x11965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11970=((1.0)*gconst11);
CheckValue<IkReal> x11971 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x11970))+(((-1.0)*r10*sj0*x11970))+((gconst10*r11*sj0))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11971.valid){
continue;
}
CheckValue<IkReal> x11972=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11972.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11971.value)+(((1.5707963267949)*(x11972.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11973=IKsin(j4);
IkReal x11974=IKcos(j4);
IkReal x11975=((1.0)*cj2);
IkReal x11976=((1.0)*sj0);
IkReal x11977=(cj1*sj2);
IkReal x11978=(gconst10*x11973);
IkReal x11979=((1.0)*x11974);
IkReal x11980=(gconst11*x11974);
IkReal x11981=((1.0)*x11973);
IkReal x11982=(gconst11*x11981);
evalcond[0]=((((-1.0)*r20*x11982))+((r21*x11978)));
evalcond[1]=((((-1.0)*r12*x11979))+cj0+((r11*x11978))+(((-1.0)*r10*x11982)));
evalcond[2]=((((-1.0)*cj1*x11975))+((sj1*sj2))+((r20*x11980))+(((-1.0)*gconst10*r21*x11979)));
evalcond[3]=(((r01*x11978))+(((-1.0)*r00*x11982))+(((-1.0)*x11976))+(((-1.0)*r02*x11979)));
evalcond[4]=((((-1.0)*r02*x11981))+(((-1.0)*cj0*sj1*x11975))+(((-1.0)*gconst10*r01*x11979))+((r00*x11980))+(((-1.0)*cj0*x11977)));
evalcond[5]=((((-1.0)*r12*x11981))+((r10*x11980))+(((-1.0)*gconst10*r11*x11979))+(((-1.0)*x11976*x11977))+(((-1.0)*sj0*sj1*x11975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11983=(gconst10*r21);
IkReal x11984=(gconst11*r20);
IkReal x11985=(sj1*sj2);
IkReal x11986=(cj1*cj2);
CheckValue<IkReal> x11987=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x11984*x11984)+(((-2.0)*x11983*x11984))+(x11983*x11983))),-1);
if(!x11987.valid){
continue;
}
CheckValue<IkReal> x11988 = IKatan2WithCheck(IkReal((((r22*x11985))+(((-1.0)*r22*x11986)))),IkReal((((x11983*x11985))+((x11984*x11986))+(((-1.0)*x11983*x11986))+(((-1.0)*x11984*x11985)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11987.value)))+(x11988.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11989=IKsin(j4);
IkReal x11990=IKcos(j4);
IkReal x11991=((1.0)*cj2);
IkReal x11992=((1.0)*sj0);
IkReal x11993=(cj1*sj2);
IkReal x11994=((1.0)*x11990);
IkReal x11995=(gconst10*x11989);
IkReal x11996=((1.0)*x11989);
IkReal x11997=(gconst11*x11990);
IkReal x11998=(gconst11*x11996);
evalcond[0]=(((r21*x11995))+(((-1.0)*r20*x11998))+(((-1.0)*r22*x11994)));
evalcond[1]=(cj0+(((-1.0)*r12*x11994))+(((-1.0)*r10*x11998))+((r11*x11995)));
evalcond[2]=((((-1.0)*r02*x11994))+((r01*x11995))+(((-1.0)*r00*x11998))+(((-1.0)*x11992)));
evalcond[3]=(((r20*x11997))+(((-1.0)*gconst10*r21*x11994))+((sj1*sj2))+(((-1.0)*cj1*x11991))+(((-1.0)*r22*x11996)));
evalcond[4]=((((-1.0)*r02*x11996))+(((-1.0)*cj0*x11993))+((r00*x11997))+(((-1.0)*gconst10*r01*x11994))+(((-1.0)*cj0*sj1*x11991)));
evalcond[5]=((((-1.0)*x11992*x11993))+(((-1.0)*r12*x11996))+(((-1.0)*gconst10*r11*x11994))+((r10*x11997))+(((-1.0)*sj0*sj1*x11991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11999=((1.0)*sj0);
IkReal x12000=((1.0)*gconst10);
CheckValue<IkReal> x12001 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x11999)))),IkReal(((((-1.0)*cj0*r01*x12000))+((cj0*gconst11*r00))+((gconst11*r10*sj0))+(((-1.0)*gconst10*r11*x11999)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12001.valid){
continue;
}
CheckValue<IkReal> x12002=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x12000)))),-1);
if(!x12002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12001.value)+(((1.5707963267949)*(x12002.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12003=IKsin(j4);
IkReal x12004=IKcos(j4);
IkReal x12005=((1.0)*cj2);
IkReal x12006=((1.0)*sj0);
IkReal x12007=(cj1*sj2);
IkReal x12008=((1.0)*x12004);
IkReal x12009=(gconst10*x12003);
IkReal x12010=((1.0)*x12003);
IkReal x12011=(gconst11*x12004);
IkReal x12012=(gconst11*x12010);
evalcond[0]=((((-1.0)*r20*x12012))+((r21*x12009))+(((-1.0)*r22*x12008)));
evalcond[1]=(cj0+(((-1.0)*r10*x12012))+(((-1.0)*r12*x12008))+((r11*x12009)));
evalcond[2]=((((-1.0)*x12006))+((r01*x12009))+(((-1.0)*r02*x12008))+(((-1.0)*r00*x12012)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*gconst10*r21*x12008))+(((-1.0)*r22*x12010))+((r20*x12011))+(((-1.0)*cj1*x12005)));
evalcond[4]=((((-1.0)*r02*x12010))+(((-1.0)*gconst10*r01*x12008))+(((-1.0)*cj0*sj1*x12005))+((r00*x12011))+(((-1.0)*cj0*x12007)));
evalcond[5]=((((-1.0)*x12006*x12007))+(((-1.0)*sj0*sj1*x12005))+((r10*x12011))+(((-1.0)*r12*x12010))+(((-1.0)*gconst10*r11*x12008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12013=((1.0)*gconst11);
CheckValue<IkReal> x12014=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12013))+(((-1.0)*gconst10*r00)))),-1);
if(!x12014.valid){
continue;
}
CheckValue<IkReal> x12015 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12013))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12015.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12014.value)))+(x12015.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12016=IKsin(j4);
IkReal x12017=IKcos(j4);
IkReal x12018=((1.0)*cj2);
IkReal x12019=((1.0)*sj0);
IkReal x12020=(cj1*sj2);
IkReal x12021=((1.0)*x12017);
IkReal x12022=(gconst10*x12016);
IkReal x12023=((1.0)*x12016);
IkReal x12024=(gconst11*x12017);
IkReal x12025=(gconst11*x12023);
evalcond[0]=((((-1.0)*r20*x12025))+((r21*x12022))+(((-1.0)*r22*x12021)));
evalcond[1]=(cj0+((r11*x12022))+(((-1.0)*r12*x12021))+(((-1.0)*r10*x12025)));
evalcond[2]=(((r01*x12022))+(((-1.0)*r00*x12025))+(((-1.0)*r02*x12021))+(((-1.0)*x12019)));
evalcond[3]=(((r20*x12024))+(((-1.0)*cj1*x12018))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12021))+(((-1.0)*r22*x12023)));
evalcond[4]=((((-1.0)*cj0*sj1*x12018))+((r00*x12024))+(((-1.0)*r02*x12023))+(((-1.0)*cj0*x12020))+(((-1.0)*gconst10*r01*x12021)));
evalcond[5]=((((-1.0)*gconst10*r11*x12021))+(((-1.0)*sj0*sj1*x12018))+(((-1.0)*r12*x12023))+((r10*x12024))+(((-1.0)*x12019*x12020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12026=((-1.0)*r11);
CheckValue<IkReal> x12029 = IKatan2WithCheck(IkReal(x12026),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12029.valid){
continue;
}
IkReal x12027=((1.0)*(x12029.value));
IkReal x12028=x11773;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12027)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12027)));
IkReal gconst10=(x12026*x12028);
IkReal gconst11=((1.0)*r10*x12028);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12030=((-1.0)*r11);
CheckValue<IkReal> x12033 = IKatan2WithCheck(IkReal(x12030),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12033.valid){
continue;
}
IkReal x12031=((1.0)*(x12033.value));
IkReal x12032=x11773;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12031)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12031)));
IkReal gconst10=(x12030*x12032);
IkReal gconst11=((1.0)*r10*x12032);
IkReal x12034=r12*r12;
IkReal x12035=((1.0)*sj0);
IkReal x12036=(cj0*r02);
IkReal x12037=x11773;
j4eval[0]=((IKabs((((r12*x12036*x12037))+(((-1.0)*x12035*x12037))+((sj0*x12034*x12037)))))+(IKabs(((((-1.0)*x12036))+(((-1.0)*r12*x12035))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12038=((-1.0)*r11);
CheckValue<IkReal> x12041 = IKatan2WithCheck(IkReal(x12038),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12041.valid){
continue;
}
IkReal x12039=((1.0)*(x12041.value));
IkReal x12040=x11773;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12039)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12039)));
IkReal gconst10=(x12038*x12040);
IkReal gconst11=((1.0)*r10*x12040);
IkReal x12042=r12*r12;
IkReal x12043=((1.0)+(((-1.0)*x12042)));
IkReal x12044=(r22*sj1*sj2);
IkReal x12045=(cj1*cj2*r22);
CheckValue<IkReal> x12052=IKPowWithIntegerCheck(x12043,-1);
if(!x12052.valid){
continue;
}
IkReal x12046=x12052.value;
CheckValue<IkReal> x12053=IKPowWithIntegerCheck(((-1.0)+x12042),-1);
if(!x12053.valid){
continue;
}
IkReal x12047=x12053.value;
IkReal x12048=((1.0)*x12046);
if((x12043) < -0.00001)
continue;
IkReal x12049=IKsqrt(x12043);
IkReal x12050=(r12*x12047*x12049);
IkReal x12051=((((-2.0)*r10*r11*r20*r21*x12046))+(((-1.0)*x12048*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-1.0)*x12048*(r10*r10)*(r20*r20))));
j4eval[0]=x12051;
j4eval[1]=((IKabs(((((-1.0)*x12044*x12050))+((x12045*x12050)))))+(IKabs(((((-1.0)*x12045))+x12044))));
j4eval[2]=IKsign(x12051);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12054=((-1.0)*r11);
CheckValue<IkReal> x12057 = IKatan2WithCheck(IkReal(x12054),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12057.valid){
continue;
}
IkReal x12055=((1.0)*(x12057.value));
IkReal x12056=x11773;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12055)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12055)));
IkReal gconst10=(x12054*x12056);
IkReal gconst11=((1.0)*r10*x12056);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12058=((-1.0)*r11);
CheckValue<IkReal> x12061 = IKatan2WithCheck(IkReal(x12058),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12061.valid){
continue;
}
IkReal x12059=((1.0)*(x12061.value));
IkReal x12060=x11773;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12059)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12059)));
IkReal gconst10=(x12058*x12060);
IkReal gconst11=((1.0)*r10*x12060);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12062=((-1.0)*r11);
CheckValue<IkReal> x12065 = IKatan2WithCheck(IkReal(x12062),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12065.valid){
continue;
}
IkReal x12063=((1.0)*(x12065.value));
IkReal x12064=x11773;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12063)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12063)));
IkReal gconst10=(x12062*x12064);
IkReal gconst11=((1.0)*r10*x12064);
IkReal x12066=(cj1*r02*sj2);
IkReal x12067=(cj2*r02*sj1);
IkReal x12068=x11773;
IkReal x12069=(r12*x12068);
j4eval[0]=((IKabs((((x12067*x12069))+((x12066*x12069)))))+(IKabs((x12066+x12067))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12070=(cj1*sj2);
IkReal x12071=(cj2*sj1);
IkReal x12072=(gconst11*r00);
IkReal x12073=((1.0)*gconst10*r01);
CheckValue<IkReal> x12074=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12074.valid){
continue;
}
CheckValue<IkReal> x12075 = IKatan2WithCheck(IkReal((((x12071*x12072))+((x12070*x12072))+(((-1.0)*x12071*x12073))+(((-1.0)*x12070*x12073)))),IkReal((((r02*x12071))+((r02*x12070)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12075.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12074.value)))+(x12075.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12076=IKcos(j4);
IkReal x12077=IKsin(j4);
IkReal x12078=((1.0)*cj2);
IkReal x12079=((1.0)*x12076);
IkReal x12080=(gconst10*x12076);
IkReal x12081=(gconst10*x12077);
IkReal x12082=((1.0)*gconst11*x12077);
evalcond[0]=((((-1.0)*gconst11*r00*x12079))+((r01*x12080))+((r02*x12077)));
evalcond[1]=(((r21*x12081))+(((-1.0)*r20*x12082))+(((-1.0)*r22*x12079)));
evalcond[2]=((((-1.0)*r12*x12079))+((r11*x12081))+(((-1.0)*r10*x12082)));
evalcond[3]=((-1.0)+((r01*x12081))+(((-1.0)*r02*x12079))+(((-1.0)*r00*x12082)));
evalcond[4]=((((-1.0)*gconst11*r20*x12079))+((sj1*sj2))+((r22*x12077))+((r21*x12080))+(((-1.0)*cj1*x12078)));
evalcond[5]=((((-1.0)*gconst11*r10*x12079))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12078))+((r11*x12080))+((r12*x12077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12083=(gconst10*r01);
IkReal x12084=(gconst11*r00);
CheckValue<IkReal> x12085 = IKatan2WithCheck(IkReal(((((-1.0)*x12084))+x12083)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12085.valid){
continue;
}
CheckValue<IkReal> x12086=IKPowWithIntegerCheck(IKsign(((x12084*x12084)+(((-2.0)*x12083*x12084))+(r02*r02)+(x12083*x12083))),-1);
if(!x12086.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12085.value)+(((1.5707963267949)*(x12086.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12087=IKcos(j4);
IkReal x12088=IKsin(j4);
IkReal x12089=((1.0)*cj2);
IkReal x12090=((1.0)*x12087);
IkReal x12091=(gconst10*x12087);
IkReal x12092=(gconst10*x12088);
IkReal x12093=((1.0)*gconst11*x12088);
evalcond[0]=(((r01*x12091))+((r02*x12088))+(((-1.0)*gconst11*r00*x12090)));
evalcond[1]=((((-1.0)*r20*x12093))+(((-1.0)*r22*x12090))+((r21*x12092)));
evalcond[2]=(((r11*x12092))+(((-1.0)*r10*x12093))+(((-1.0)*r12*x12090)));
evalcond[3]=((-1.0)+((r01*x12092))+(((-1.0)*r02*x12090))+(((-1.0)*r00*x12093)));
evalcond[4]=(((sj1*sj2))+((r22*x12088))+(((-1.0)*gconst11*r20*x12090))+(((-1.0)*cj1*x12089))+((r21*x12091)));
evalcond[5]=(((r11*x12091))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst11*r10*x12090))+((r12*x12088))+(((-1.0)*sj1*x12089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12094 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12094.valid){
continue;
}
CheckValue<IkReal> x12095=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12094.value)+(((1.5707963267949)*(x12095.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12096=IKcos(j4);
IkReal x12097=IKsin(j4);
IkReal x12098=((1.0)*cj2);
IkReal x12099=((1.0)*x12096);
IkReal x12100=(gconst10*x12096);
IkReal x12101=(gconst10*x12097);
IkReal x12102=((1.0)*gconst11*x12097);
evalcond[0]=((((-1.0)*gconst11*r00*x12099))+((r01*x12100))+((r02*x12097)));
evalcond[1]=((((-1.0)*r20*x12102))+(((-1.0)*r22*x12099))+((r21*x12101)));
evalcond[2]=((((-1.0)*r10*x12102))+(((-1.0)*r12*x12099))+((r11*x12101)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x12102))+((r01*x12101))+(((-1.0)*r02*x12099)));
evalcond[4]=(((r22*x12097))+((sj1*sj2))+(((-1.0)*cj1*x12098))+(((-1.0)*gconst11*r20*x12099))+((r21*x12100)));
evalcond[5]=(((r12*x12097))+(((-1.0)*sj1*x12098))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst11*r10*x12099))+((r11*x12100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12103=((-1.0)*r11);
CheckValue<IkReal> x12106 = IKatan2WithCheck(IkReal(x12103),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12106.valid){
continue;
}
IkReal x12104=((1.0)*(x12106.value));
IkReal x12105=x11773;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12104)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12104)));
IkReal gconst10=(x12103*x12105);
IkReal gconst11=((1.0)*r10*x12105);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12107=((-1.0)*r11);
CheckValue<IkReal> x12110 = IKatan2WithCheck(IkReal(x12107),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12110.valid){
continue;
}
IkReal x12108=((1.0)*(x12110.value));
IkReal x12109=x11773;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12108)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12108)));
IkReal gconst10=(x12107*x12109);
IkReal gconst11=((1.0)*r10*x12109);
IkReal x12111=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x12115=IKPowWithIntegerCheck(x12111,-1);
if(!x12115.valid){
continue;
}
IkReal x12112=x12115.value;
IkReal x12113=((1.0)*x12112);
IkReal x12114=((((-1.0)*x12113*(r01*r01)*(r11*r11)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r10*r11*x12112))+(((-1.0)*x12113*(r00*r00)*(r10*r10))));
j4eval[0]=x12114;
j4eval[1]=r02;
j4eval[2]=x12111;
j4eval[3]=IKsign(x12114);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12116=((-1.0)*r11);
CheckValue<IkReal> x12119 = IKatan2WithCheck(IkReal(x12116),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12119.valid){
continue;
}
IkReal x12117=((1.0)*(x12119.value));
IkReal x12118=x11773;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12117)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12117)));
IkReal gconst10=(x12116*x12118);
IkReal gconst11=((1.0)*r10*x12118);
IkReal x12120=r12*r12;
IkReal x12121=((1.0)*r02);
IkReal x12122=(cj1*sj2);
IkReal x12123=(cj2*sj1);
CheckValue<IkReal> x12127=IKPowWithIntegerCheck(((-1.0)+x12120),-1);
if(!x12127.valid){
continue;
}
IkReal x12124=x12127.value;
if((((1.0)+(((-1.0)*x12120)))) < -0.00001)
continue;
IkReal x12125=IKsqrt(((1.0)+(((-1.0)*x12120))));
IkReal x12126=(r12*x12124*x12125);
j4eval[0]=((IKabs(((((-1.0)*x12121*x12123*x12126))+(((-1.0)*x12121*x12122*x12126)))))+(IKabs(((((-1.0)*x12121*x12122))+(((-1.0)*x12121*x12123))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12128=(cj1*sj2);
IkReal x12129=(gconst10*r01);
IkReal x12130=(cj2*sj1);
IkReal x12131=((1.0)*r02);
IkReal x12132=((1.0)*gconst11*r00);
CheckValue<IkReal> x12133=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12133.valid){
continue;
}
CheckValue<IkReal> x12134 = IKatan2WithCheck(IkReal((((x12129*x12130))+(((-1.0)*x12130*x12132))+(((-1.0)*x12128*x12132))+((x12128*x12129)))),IkReal(((((-1.0)*x12130*x12131))+(((-1.0)*x12128*x12131)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12134.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12133.value)))+(x12134.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12135=IKcos(j4);
IkReal x12136=IKsin(j4);
IkReal x12137=((1.0)*x12135);
IkReal x12138=(gconst10*x12135);
IkReal x12139=(gconst10*x12136);
IkReal x12140=((1.0)*gconst11*x12136);
evalcond[0]=((((-1.0)*gconst11*r00*x12137))+((r01*x12138))+((r02*x12136)));
evalcond[1]=(((r21*x12139))+(((-1.0)*r22*x12137))+(((-1.0)*r20*x12140)));
evalcond[2]=((((-1.0)*r12*x12137))+((r11*x12139))+(((-1.0)*r10*x12140)));
evalcond[3]=((1.0)+(((-1.0)*r00*x12140))+((r01*x12139))+(((-1.0)*r02*x12137)));
evalcond[4]=(((cj2*sj1))+((r12*x12136))+((cj1*sj2))+(((-1.0)*gconst11*r10*x12137))+((r11*x12138)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x12138))+((r22*x12136))+(((-1.0)*gconst11*r20*x12137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12141=(gconst10*r01);
IkReal x12142=(gconst11*r00);
CheckValue<IkReal> x12143=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x12142*x12142)))+(((2.0)*x12141*x12142))+(((-1.0)*(r02*r02)))+(((-1.0)*(x12141*x12141))))),-1);
if(!x12143.valid){
continue;
}
CheckValue<IkReal> x12144 = IKatan2WithCheck(IkReal(((((-1.0)*x12142))+x12141)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12144.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12143.value)))+(x12144.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12145=IKcos(j4);
IkReal x12146=IKsin(j4);
IkReal x12147=((1.0)*x12145);
IkReal x12148=(gconst10*x12145);
IkReal x12149=(gconst10*x12146);
IkReal x12150=((1.0)*gconst11*x12146);
evalcond[0]=(((r02*x12146))+((r01*x12148))+(((-1.0)*gconst11*r00*x12147)));
evalcond[1]=((((-1.0)*r22*x12147))+((r21*x12149))+(((-1.0)*r20*x12150)));
evalcond[2]=((((-1.0)*r12*x12147))+((r11*x12149))+(((-1.0)*r10*x12150)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12147))+(((-1.0)*r00*x12150))+((r01*x12149)));
evalcond[4]=((((-1.0)*gconst11*r10*x12147))+((cj2*sj1))+((cj1*sj2))+((r12*x12146))+((r11*x12148)));
evalcond[5]=(((r22*x12146))+(((-1.0)*gconst11*r20*x12147))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x12148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12151=((1.0)*gconst11);
CheckValue<IkReal> x12152 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12151)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12152.valid){
continue;
}
CheckValue<IkReal> x12153=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12151)))),-1);
if(!x12153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12152.value)+(((1.5707963267949)*(x12153.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12154=IKcos(j4);
IkReal x12155=IKsin(j4);
IkReal x12156=((1.0)*x12154);
IkReal x12157=(gconst10*x12154);
IkReal x12158=(gconst10*x12155);
IkReal x12159=((1.0)*gconst11*x12155);
evalcond[0]=(((r02*x12155))+((r01*x12157))+(((-1.0)*gconst11*r00*x12156)));
evalcond[1]=((((-1.0)*r22*x12156))+((r21*x12158))+(((-1.0)*r20*x12159)));
evalcond[2]=((((-1.0)*r12*x12156))+((r11*x12158))+(((-1.0)*r10*x12159)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12156))+(((-1.0)*r00*x12159))+((r01*x12158)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst11*r10*x12156))+((cj1*sj2))+((r12*x12155))+((r11*x12157)));
evalcond[5]=((((-1.0)*gconst11*r20*x12156))+((r22*x12155))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x12157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12160=((-1.0)*r11);
IkReal x12161=((-1.0)*r10);
CheckValue<IkReal> x12163 = IKatan2WithCheck(IkReal(x12160),IkReal(x12161),IKFAST_ATAN2_MAGTHRESH);
if(!x12163.valid){
continue;
}
IkReal x12162=((1.0)*(x12163.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12162)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12161);
rxp1_1=(px*r21);
rxp1_2=(px*x12160);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12162)));
IkReal gconst10=x12160;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12164=((-1.0)*r11);
IkReal x12165=((-1.0)*r10);
CheckValue<IkReal> x12167 = IKatan2WithCheck(IkReal(x12164),IkReal(x12165),IKFAST_ATAN2_MAGTHRESH);
if(!x12167.valid){
continue;
}
IkReal x12166=((1.0)*(x12167.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12166)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12165);
rxp1_1=(px*r21);
rxp1_2=(px*x12164);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12166)));
IkReal gconst10=x12164;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12168=((-1.0)*r11);
IkReal x12169=((-1.0)*r10);
CheckValue<IkReal> x12171 = IKatan2WithCheck(IkReal(x12168),IkReal(x12169),IKFAST_ATAN2_MAGTHRESH);
if(!x12171.valid){
continue;
}
IkReal x12170=((1.0)*(x12171.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12170)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12169);
rxp1_1=(px*r21);
rxp1_2=(px*x12168);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12170)));
IkReal gconst10=x12168;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12174=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12174.valid){
continue;
}
IkReal x12172=x12174.value;
IkReal x12173=(sj0*x12172);
cj4array[0]=(((cj1*sj2*x12173))+((cj2*sj1*x12173)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12175=IKsin(j4);
IkReal x12176=IKcos(j4);
IkReal x12177=(gconst10*r21);
IkReal x12178=((1.0)*x12176);
IkReal x12179=((1.0)*gconst11*x12175);
evalcond[0]=(r02*x12175);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x12178)));
evalcond[2]=(((x12175*x12177))+(((-1.0)*r20*x12179)));
evalcond[3]=((((-1.0)*r10*x12179))+((gconst10*r11*x12175)));
evalcond[4]=((((-1.0)*gconst11*r20*x12178))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x12176*x12177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12181=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x12181.valid){
continue;
}
IkReal x12180=x12181.value;
cj4array[0]=((((-1.0)*sj1*sj2*x12180))+((cj1*cj2*x12180)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12182=IKsin(j4);
IkReal x12183=IKcos(j4);
IkReal x12184=((1.0)*sj0);
IkReal x12185=(gconst10*x12182);
IkReal x12186=((1.0)*x12183);
IkReal x12187=((1.0)*gconst11*x12182);
evalcond[0]=(r02*x12182);
evalcond[1]=((((-1.0)*x12184))+(((-1.0)*r02*x12186)));
evalcond[2]=(((r21*x12185))+(((-1.0)*r20*x12187)));
evalcond[3]=(((r11*x12185))+(((-1.0)*r10*x12187)));
evalcond[4]=((((-1.0)*cj1*sj2*x12184))+((gconst10*r11*x12183))+(((-1.0)*cj2*sj1*x12184))+(((-1.0)*gconst11*r10*x12186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12188=IKPowWithIntegerCheck(r02,-1);
if(!x12188.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12188.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12189=IKsin(j4);
IkReal x12190=IKcos(j4);
IkReal x12191=(gconst10*r21);
IkReal x12192=((1.0)*cj1);
IkReal x12193=(gconst10*r11);
IkReal x12194=((1.0)*gconst11*x12189);
IkReal x12195=((1.0)*gconst11*x12190);
evalcond[0]=(r02*x12189);
evalcond[1]=((((-1.0)*r20*x12194))+((x12189*x12191)));
evalcond[2]=(((x12189*x12193))+(((-1.0)*r10*x12194)));
evalcond[3]=((((-1.0)*r20*x12195))+(((-1.0)*cj2*x12192))+((sj1*sj2))+((x12190*x12191)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+((x12190*x12193))+(((-1.0)*sj0*sj2*x12192))+(((-1.0)*r10*x12195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12196=((1.0)*gconst11);
CheckValue<IkReal> x12197 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x12196))+((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*r10*sj0*x12196)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12197.valid){
continue;
}
CheckValue<IkReal> x12198=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12197.value)+(((1.5707963267949)*(x12198.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12199=IKsin(j4);
IkReal x12200=IKcos(j4);
IkReal x12201=((1.0)*gconst11);
IkReal x12202=((1.0)*cj2);
IkReal x12203=((1.0)*sj0);
IkReal x12204=(cj1*sj2);
IkReal x12205=(gconst10*x12200);
IkReal x12206=(gconst10*x12199);
IkReal x12207=((1.0)*x12200);
evalcond[0]=(((r21*x12206))+(((-1.0)*r20*x12199*x12201)));
evalcond[1]=(cj0+(((-1.0)*r12*x12207))+(((-1.0)*r10*x12199*x12201))+((r11*x12206)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*cj1*x12202))+(((-1.0)*r20*x12200*x12201))+((r21*x12205)));
evalcond[3]=((((-1.0)*r02*x12207))+(((-1.0)*r00*x12199*x12201))+((r01*x12206))+(((-1.0)*x12203)));
evalcond[4]=((((-1.0)*cj0*x12204))+(((-1.0)*r00*x12200*x12201))+(((-1.0)*cj0*sj1*x12202))+((r02*x12199))+((r01*x12205)));
evalcond[5]=((((-1.0)*sj0*sj1*x12202))+((r12*x12199))+(((-1.0)*x12203*x12204))+(((-1.0)*r10*x12200*x12201))+((r11*x12205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12208=(gconst10*r21);
IkReal x12209=(gconst11*r20);
IkReal x12210=(sj1*sj2);
IkReal x12211=(cj1*cj2);
CheckValue<IkReal> x12212=IKPowWithIntegerCheck(IKsign(((((2.0)*x12208*x12209))+(((-1.0)*(x12208*x12208)))+(((-1.0)*(x12209*x12209)))+(((-1.0)*(r22*r22))))),-1);
if(!x12212.valid){
continue;
}
CheckValue<IkReal> x12213 = IKatan2WithCheck(IkReal((((r22*x12210))+(((-1.0)*r22*x12211)))),IkReal(((((-1.0)*x12209*x12210))+((x12208*x12210))+(((-1.0)*x12208*x12211))+((x12209*x12211)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12212.value)))+(x12213.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12214=IKsin(j4);
IkReal x12215=IKcos(j4);
IkReal x12216=((1.0)*cj2);
IkReal x12217=((1.0)*sj0);
IkReal x12218=(cj1*sj2);
IkReal x12219=((1.0)*x12215);
IkReal x12220=(gconst10*x12215);
IkReal x12221=(gconst10*x12214);
IkReal x12222=((1.0)*gconst11*x12214);
evalcond[0]=((((-1.0)*r22*x12219))+((r21*x12221))+(((-1.0)*r20*x12222)));
evalcond[1]=(((r11*x12221))+cj0+(((-1.0)*r12*x12219))+(((-1.0)*r10*x12222)));
evalcond[2]=((((-1.0)*x12217))+(((-1.0)*r02*x12219))+(((-1.0)*r00*x12222))+((r01*x12221)));
evalcond[3]=(((r22*x12214))+(((-1.0)*cj1*x12216))+((sj1*sj2))+((r21*x12220))+(((-1.0)*gconst11*r20*x12219)));
evalcond[4]=((((-1.0)*gconst11*r00*x12219))+((r02*x12214))+(((-1.0)*cj0*x12218))+(((-1.0)*cj0*sj1*x12216))+((r01*x12220)));
evalcond[5]=((((-1.0)*gconst11*r10*x12219))+((r11*x12220))+(((-1.0)*sj0*sj1*x12216))+((r12*x12214))+(((-1.0)*x12217*x12218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12223=((1.0)*sj0);
IkReal x12224=((1.0)*gconst10);
CheckValue<IkReal> x12225 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12223)))),IkReal(((((-1.0)*cj0*r01*x12224))+((cj0*gconst11*r00))+(((-1.0)*gconst10*r11*x12223))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12225.valid){
continue;
}
CheckValue<IkReal> x12226=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12224))+(((-1.0)*gconst11*r21)))),-1);
if(!x12226.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12225.value)+(((1.5707963267949)*(x12226.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12227=IKsin(j4);
IkReal x12228=IKcos(j4);
IkReal x12229=((1.0)*cj2);
IkReal x12230=((1.0)*sj0);
IkReal x12231=(cj1*sj2);
IkReal x12232=((1.0)*x12228);
IkReal x12233=(gconst10*x12228);
IkReal x12234=(gconst10*x12227);
IkReal x12235=((1.0)*gconst11*x12227);
evalcond[0]=((((-1.0)*r22*x12232))+(((-1.0)*r20*x12235))+((r21*x12234)));
evalcond[1]=((((-1.0)*r12*x12232))+cj0+((r11*x12234))+(((-1.0)*r10*x12235)));
evalcond[2]=(((r01*x12234))+(((-1.0)*r00*x12235))+(((-1.0)*r02*x12232))+(((-1.0)*x12230)));
evalcond[3]=((((-1.0)*gconst11*r20*x12232))+(((-1.0)*cj1*x12229))+((r22*x12227))+((sj1*sj2))+((r21*x12233)));
evalcond[4]=(((r01*x12233))+((r02*x12227))+(((-1.0)*cj0*x12231))+(((-1.0)*gconst11*r00*x12232))+(((-1.0)*cj0*sj1*x12229)));
evalcond[5]=((((-1.0)*sj0*sj1*x12229))+(((-1.0)*x12230*x12231))+(((-1.0)*gconst11*r10*x12232))+((r11*x12233))+((r12*x12227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12236=((1.0)*gconst11);
CheckValue<IkReal> x12237 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12236))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12237.valid){
continue;
}
CheckValue<IkReal> x12238=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12236)))),-1);
if(!x12238.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12237.value)+(((1.5707963267949)*(x12238.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12239=IKsin(j4);
IkReal x12240=IKcos(j4);
IkReal x12241=((1.0)*cj2);
IkReal x12242=((1.0)*sj0);
IkReal x12243=(cj1*sj2);
IkReal x12244=((1.0)*x12240);
IkReal x12245=(gconst10*x12240);
IkReal x12246=(gconst10*x12239);
IkReal x12247=((1.0)*gconst11*x12239);
evalcond[0]=((((-1.0)*r20*x12247))+(((-1.0)*r22*x12244))+((r21*x12246)));
evalcond[1]=((((-1.0)*r12*x12244))+(((-1.0)*r10*x12247))+cj0+((r11*x12246)));
evalcond[2]=(((r01*x12246))+(((-1.0)*x12242))+(((-1.0)*r02*x12244))+(((-1.0)*r00*x12247)));
evalcond[3]=((((-1.0)*cj1*x12241))+((sj1*sj2))+((r22*x12239))+(((-1.0)*gconst11*r20*x12244))+((r21*x12245)));
evalcond[4]=((((-1.0)*cj0*sj1*x12241))+(((-1.0)*gconst11*r00*x12244))+((r01*x12245))+((r02*x12239))+(((-1.0)*cj0*x12243)));
evalcond[5]=(((r11*x12245))+(((-1.0)*x12242*x12243))+((r12*x12239))+(((-1.0)*gconst11*r10*x12244))+(((-1.0)*sj0*sj1*x12241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12248=((-1.0)*r11);
CheckValue<IkReal> x12251 = IKatan2WithCheck(IkReal(x12248),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12251.valid){
continue;
}
IkReal x12249=((1.0)*(x12251.value));
IkReal x12250=x11773;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12249)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12249)));
IkReal gconst10=(x12248*x12250);
IkReal gconst11=((1.0)*r10*x12250);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12252=gconst10*gconst10;
IkReal x12253=gconst11*gconst11;
IkReal x12254=(gconst10*r21);
IkReal x12255=(cj3*r00);
IkReal x12256=(r00*sj3);
IkReal x12257=((1.0)*gconst11);
IkReal x12258=(gconst10*r20);
IkReal x12259=(r01*sj3);
IkReal x12260=(cj3*gconst11*r01);
IkReal x12261=(r21*x12252);
IkReal x12262=(r20*x12253);
CheckValue<IkReal> x12263 = IKatan2WithCheck(IkReal((((gconst10*r22*x12255))+((r22*x12260)))),IkReal(((((-1.0)*cj3*r01*x12262))+((x12255*x12261))+((x12254*x12260))+(((-1.0)*x12255*x12257*x12258)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12263.valid){
continue;
}
CheckValue<IkReal> x12264=IKPowWithIntegerCheck(IKsign((((x12256*x12262))+(((-1.0)*x12254*x12256*x12257))+(((-1.0)*x12257*x12258*x12259))+((r02*r22*sj3))+((x12259*x12261)))),-1);
if(!x12264.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12263.value)+(((1.5707963267949)*(x12264.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12265=IKsin(j4);
IkReal x12266=IKcos(j4);
IkReal x12267=(sj1*sj2);
IkReal x12268=(gconst10*sj3);
IkReal x12269=(cj3*gconst10);
IkReal x12270=(gconst11*r20);
IkReal x12271=(gconst11*r21);
IkReal x12272=(gconst11*r00);
IkReal x12273=(cj3*gconst11);
IkReal x12274=(gconst11*r10);
IkReal x12275=((1.0)*cj1);
IkReal x12276=(cj2*sj1);
IkReal x12277=(gconst11*sj3);
IkReal x12278=(cj2*x12275);
IkReal x12279=((1.0)*x12266);
IkReal x12280=((1.0)*x12265);
IkReal x12281=(gconst10*x12265);
IkReal x12282=(cj3*x12265);
IkReal x12283=(sj3*x12266);
evalcond[0]=((((-1.0)*x12270*x12280))+(((-1.0)*r22*x12279))+((r21*x12281)));
evalcond[1]=((((-1.0)*x12274*x12280))+((r11*x12281))+(((-1.0)*r12*x12279)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12279))+((r01*x12281))+(((-1.0)*x12272*x12280)));
evalcond[3]=(((r01*x12266*x12269))+((r02*x12282))+((r00*x12268))+(((-1.0)*cj3*x12272*x12279))+((r01*x12277)));
evalcond[4]=((((-1.0)*r01*x12268*x12279))+((r00*x12269))+(((-1.0)*r02*sj3*x12280))+((x12272*x12283))+((r01*x12273)));
evalcond[5]=(((r22*x12282))+((cj1*sj2))+x12276+((sj3*x12271))+(((-1.0)*cj3*x12270*x12279))+((r20*x12268))+((r21*x12266*x12269)));
evalcond[6]=(((r10*x12268))+(((-1.0)*x12278))+x12267+((r12*x12282))+(((-1.0)*r10*x12273*x12279))+((r11*x12266*x12269))+((r11*x12277)));
evalcond[7]=((((-1.0)*x12278))+((x12270*x12283))+x12267+((cj3*x12271))+((r20*x12269))+(((-1.0)*r22*sj3*x12280))+(((-1.0)*r21*x12268*x12279)));
evalcond[8]=((((-1.0)*r12*sj3*x12280))+(((-1.0)*x12276))+((x12274*x12283))+(((-1.0)*sj2*x12275))+((r10*x12269))+(((-1.0)*r11*x12268*x12279))+((r11*x12273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12284 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12284.valid){
continue;
}
CheckValue<IkReal> x12285=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12284.value)+(((1.5707963267949)*(x12285.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12286=IKsin(j4);
IkReal x12287=IKcos(j4);
IkReal x12288=(sj1*sj2);
IkReal x12289=(gconst10*sj3);
IkReal x12290=(cj3*gconst10);
IkReal x12291=(gconst11*r20);
IkReal x12292=(gconst11*r21);
IkReal x12293=(gconst11*r00);
IkReal x12294=(cj3*gconst11);
IkReal x12295=(gconst11*r10);
IkReal x12296=((1.0)*cj1);
IkReal x12297=(cj2*sj1);
IkReal x12298=(gconst11*sj3);
IkReal x12299=(cj2*x12296);
IkReal x12300=((1.0)*x12287);
IkReal x12301=((1.0)*x12286);
IkReal x12302=(gconst10*x12286);
IkReal x12303=(cj3*x12286);
IkReal x12304=(sj3*x12287);
evalcond[0]=(((r21*x12302))+(((-1.0)*r22*x12300))+(((-1.0)*x12291*x12301)));
evalcond[1]=(((r11*x12302))+(((-1.0)*x12295*x12301))+(((-1.0)*r12*x12300)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12300))+(((-1.0)*x12293*x12301))+((r01*x12302)));
evalcond[3]=((((-1.0)*cj3*x12293*x12300))+((r01*x12298))+((r00*x12289))+((r01*x12287*x12290))+((r02*x12303)));
evalcond[4]=(((x12293*x12304))+((r01*x12294))+(((-1.0)*r01*x12289*x12300))+((r00*x12290))+(((-1.0)*r02*sj3*x12301)));
evalcond[5]=((((-1.0)*cj3*x12291*x12300))+((r21*x12287*x12290))+((cj1*sj2))+x12297+((sj3*x12292))+((r22*x12303))+((r20*x12289)));
evalcond[6]=((((-1.0)*x12299))+x12288+((r11*x12298))+(((-1.0)*r10*x12294*x12300))+((r12*x12303))+((r11*x12287*x12290))+((r10*x12289)));
evalcond[7]=(((x12291*x12304))+(((-1.0)*r22*sj3*x12301))+((r20*x12290))+((cj3*x12292))+(((-1.0)*r21*x12289*x12300))+(((-1.0)*x12299))+x12288);
evalcond[8]=((((-1.0)*r12*sj3*x12301))+((r10*x12290))+(((-1.0)*r11*x12289*x12300))+((x12295*x12304))+((r11*x12294))+(((-1.0)*sj2*x12296))+(((-1.0)*x12297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12305=((-1.0)*r11);
CheckValue<IkReal> x12308 = IKatan2WithCheck(IkReal(x12305),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12308.valid){
continue;
}
IkReal x12306=((1.0)*(x12308.value));
IkReal x12307=x11773;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12306)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12306)));
IkReal gconst10=(x12305*x12307);
IkReal gconst11=((1.0)*r10*x12307);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12309=gconst10*gconst10;
IkReal x12310=gconst11*gconst11;
IkReal x12311=(gconst10*r21);
IkReal x12312=(cj3*r00);
IkReal x12313=(r00*sj3);
IkReal x12314=((1.0)*gconst11);
IkReal x12315=(gconst10*r20);
IkReal x12316=(r01*sj3);
IkReal x12317=(cj3*gconst11*r01);
IkReal x12318=(r21*x12309);
IkReal x12319=(r20*x12310);
CheckValue<IkReal> x12320=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12311*x12313*x12314))+(((-1.0)*x12314*x12315*x12316))+((x12313*x12319))+((x12316*x12318))+((r02*r22*sj3)))),-1);
if(!x12320.valid){
continue;
}
CheckValue<IkReal> x12321 = IKatan2WithCheck(IkReal((((gconst10*r22*x12312))+((r22*x12317)))),IkReal(((((-1.0)*x12312*x12314*x12315))+((x12311*x12317))+((x12312*x12318))+(((-1.0)*cj3*r01*x12319)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12321.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12320.value)))+(x12321.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12322=IKsin(j4);
IkReal x12323=IKcos(j4);
IkReal x12324=(cj2*sj1);
IkReal x12325=(cj1*sj2);
IkReal x12326=(gconst10*sj3);
IkReal x12327=(cj3*gconst10);
IkReal x12328=(gconst11*r20);
IkReal x12329=(gconst11*r21);
IkReal x12330=(gconst11*r00);
IkReal x12331=(sj1*sj2);
IkReal x12332=(cj3*gconst11);
IkReal x12333=(gconst11*r10);
IkReal x12334=(cj1*cj2);
IkReal x12335=(gconst11*sj3);
IkReal x12336=((1.0)*x12323);
IkReal x12337=((1.0)*x12322);
IkReal x12338=(gconst10*x12322);
IkReal x12339=(cj3*x12322);
IkReal x12340=(sj3*x12323);
IkReal x12341=(x12325+x12324);
evalcond[0]=((((-1.0)*r22*x12336))+((r21*x12338))+(((-1.0)*x12328*x12337)));
evalcond[1]=((((-1.0)*x12333*x12337))+((r11*x12338))+(((-1.0)*r12*x12336)));
evalcond[2]=((1.0)+((r01*x12338))+(((-1.0)*x12330*x12337))+(((-1.0)*r02*x12336)));
evalcond[3]=((((-1.0)*cj3*x12330*x12336))+((r01*x12323*x12327))+((r00*x12326))+((r01*x12335))+((r02*x12339)));
evalcond[4]=(((x12330*x12340))+((r00*x12327))+((r01*x12332))+(((-1.0)*r01*x12326*x12336))+(((-1.0)*r02*sj3*x12337)));
evalcond[5]=(((r21*x12323*x12327))+x12341+((r20*x12326))+(((-1.0)*cj3*x12328*x12336))+((sj3*x12329))+((r22*x12339)));
evalcond[6]=(x12334+((r12*x12339))+((r10*x12326))+((r11*x12323*x12327))+(((-1.0)*r10*x12332*x12336))+((r11*x12335))+(((-1.0)*x12331)));
evalcond[7]=(((x12333*x12340))+x12341+(((-1.0)*r12*sj3*x12337))+((r10*x12327))+(((-1.0)*r11*x12326*x12336))+((r11*x12332)));
evalcond[8]=(((x12328*x12340))+x12331+((r20*x12327))+((cj3*x12329))+(((-1.0)*r22*sj3*x12337))+(((-1.0)*r21*x12326*x12336))+(((-1.0)*x12334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12342=((1.0)*gconst11);
CheckValue<IkReal> x12343=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12342)))),-1);
if(!x12343.valid){
continue;
}
CheckValue<IkReal> x12344 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12342)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12343.value)))+(x12344.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12345=IKsin(j4);
IkReal x12346=IKcos(j4);
IkReal x12347=(cj2*sj1);
IkReal x12348=(cj1*sj2);
IkReal x12349=(gconst10*sj3);
IkReal x12350=(cj3*gconst10);
IkReal x12351=(gconst11*r20);
IkReal x12352=(gconst11*r21);
IkReal x12353=(gconst11*r00);
IkReal x12354=(sj1*sj2);
IkReal x12355=(cj3*gconst11);
IkReal x12356=(gconst11*r10);
IkReal x12357=(cj1*cj2);
IkReal x12358=(gconst11*sj3);
IkReal x12359=((1.0)*x12346);
IkReal x12360=((1.0)*x12345);
IkReal x12361=(gconst10*x12345);
IkReal x12362=(cj3*x12345);
IkReal x12363=(sj3*x12346);
IkReal x12364=(x12348+x12347);
evalcond[0]=(((r21*x12361))+(((-1.0)*x12351*x12360))+(((-1.0)*r22*x12359)));
evalcond[1]=(((r11*x12361))+(((-1.0)*r12*x12359))+(((-1.0)*x12356*x12360)));
evalcond[2]=((1.0)+(((-1.0)*x12353*x12360))+(((-1.0)*r02*x12359))+((r01*x12361)));
evalcond[3]=((((-1.0)*cj3*x12353*x12359))+((r00*x12349))+((r01*x12358))+((r01*x12346*x12350))+((r02*x12362)));
evalcond[4]=(((x12353*x12363))+(((-1.0)*r02*sj3*x12360))+(((-1.0)*r01*x12349*x12359))+((r01*x12355))+((r00*x12350)));
evalcond[5]=(((r20*x12349))+((r21*x12346*x12350))+x12364+((sj3*x12352))+((r22*x12362))+(((-1.0)*cj3*x12351*x12359)));
evalcond[6]=((((-1.0)*x12354))+(((-1.0)*r10*x12355*x12359))+x12357+((r11*x12358))+((r10*x12349))+((r11*x12346*x12350))+((r12*x12362)));
evalcond[7]=(x12364+(((-1.0)*r11*x12349*x12359))+((r11*x12355))+((x12356*x12363))+((r10*x12350))+(((-1.0)*r12*sj3*x12360)));
evalcond[8]=((((-1.0)*x12357))+((r20*x12350))+x12354+((cj3*x12352))+(((-1.0)*r21*x12349*x12359))+((x12351*x12363))+(((-1.0)*r22*sj3*x12360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12365=((-1.0)*r11);
IkReal x12366=((-1.0)*r10);
CheckValue<IkReal> x12368 = IKatan2WithCheck(IkReal(x12365),IkReal(x12366),IKFAST_ATAN2_MAGTHRESH);
if(!x12368.valid){
continue;
}
IkReal x12367=((1.0)*(x12368.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12367)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12366);
rxp1_1=(px*r21);
rxp1_2=(px*x12365);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12367)));
IkReal gconst10=x12365;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12369=((-1.0)*r11);
IkReal x12370=((-1.0)*r10);
CheckValue<IkReal> x12372 = IKatan2WithCheck(IkReal(x12369),IkReal(x12370),IKFAST_ATAN2_MAGTHRESH);
if(!x12372.valid){
continue;
}
IkReal x12371=((1.0)*(x12372.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12371)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12370);
rxp1_1=(px*r21);
rxp1_2=(px*x12369);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12371)));
IkReal gconst10=x12369;
IkReal gconst11=((1.0)*r10);
IkReal x12373=((1.0)*cj3);
j4eval[0]=-1.0;
j4eval[1]=((((-1.0)*r11*r21*x12373))+(((-1.0)*r10*r20*x12373)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12374=((-1.0)*r11);
IkReal x12375=((-1.0)*r10);
CheckValue<IkReal> x12377 = IKatan2WithCheck(IkReal(x12374),IkReal(x12375),IKFAST_ATAN2_MAGTHRESH);
if(!x12377.valid){
continue;
}
IkReal x12376=((1.0)*(x12377.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12376)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12375);
rxp1_1=(px*r21);
rxp1_2=(px*x12374);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12376)));
IkReal gconst10=x12374;
IkReal gconst11=((1.0)*r10);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12379=IKPowWithIntegerCheck(r02,-1);
if(!x12379.valid){
continue;
}
IkReal x12378=x12379.value;
CheckValue<IkReal> x12380=IKPowWithIntegerCheck(cj3,-1);
if(!x12380.valid){
continue;
}
if( IKabs((x12378*(x12380.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x12378)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12378*(x12380.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x12378))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x12378*(x12380.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x12378));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12381=IKsin(j4);
IkReal x12382=IKcos(j4);
IkReal x12383=(cj3*r10);
IkReal x12384=((1.0)*gconst11);
IkReal x12385=(sj1*sj2);
IkReal x12386=(gconst11*sj3);
IkReal x12387=(cj3*r11);
IkReal x12388=(cj2*sj1);
IkReal x12389=(gconst10*r20);
IkReal x12390=(gconst10*sj3);
IkReal x12391=((1.0)*cj0);
IkReal x12392=((1.0)*sj0);
IkReal x12393=(cj1*sj2);
IkReal x12394=(cj3*r21);
IkReal x12395=((1.0)*cj1*cj2);
IkReal x12396=(r20*x12382);
IkReal x12397=(gconst10*x12381);
IkReal x12398=(gconst10*x12382);
IkReal x12399=(r02*x12381);
IkReal x12400=((1.0)*x12382);
evalcond[0]=((((-1.0)*x12392))+(((-1.0)*r02*x12400)));
evalcond[1]=((((-1.0)*r20*x12381*x12384))+((r21*x12397)));
evalcond[2]=(cj0+((r11*x12397))+(((-1.0)*r10*x12381*x12384)));
evalcond[3]=(((cj3*x12399))+((cj0*x12385))+(((-1.0)*cj1*cj2*x12391)));
evalcond[4]=((((-1.0)*x12388*x12391))+(((-1.0)*sj3*x12399))+(((-1.0)*x12391*x12393)));
evalcond[5]=(x12388+x12393+(((-1.0)*cj3*x12384*x12396))+((r21*x12386))+((x12394*x12398))+((sj3*x12389)));
evalcond[6]=(((cj3*x12389))+((gconst11*x12394))+x12385+(((-1.0)*r21*x12390*x12400))+(((-1.0)*x12395))+((x12386*x12396)));
evalcond[7]=(((r11*x12386))+((r10*x12390))+(((-1.0)*x12382*x12383*x12384))+((x12387*x12398))+(((-1.0)*cj1*cj2*x12392))+((sj0*x12385)));
evalcond[8]=(((gconst11*x12387))+(((-1.0)*r11*x12390*x12400))+((gconst10*x12383))+((r10*x12382*x12386))+(((-1.0)*x12388*x12392))+(((-1.0)*x12392*x12393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12401=((1.0)*r20);
IkReal x12402=((1.0)*gconst11);
CheckValue<IkReal> x12403=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*r10*x12402))),-1);
if(!x12403.valid){
continue;
}
CheckValue<IkReal> x12404=IKPowWithIntegerCheck((((cj3*gconst10*r21))+(((-1.0)*cj3*gconst11*x12401))),-1);
if(!x12404.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12403.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12404.value)*(((((-1.0)*gconst10*sj3*x12401))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x12402)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12403.value)))+IKsqr(((x12404.value)*(((((-1.0)*gconst10*sj3*x12401))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x12402))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12403.value)), ((x12404.value)*(((((-1.0)*gconst10*sj3*x12401))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x12402))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12405=IKsin(j4);
IkReal x12406=IKcos(j4);
IkReal x12407=(cj3*r10);
IkReal x12408=((1.0)*gconst11);
IkReal x12409=(sj1*sj2);
IkReal x12410=(gconst11*sj3);
IkReal x12411=(cj3*r11);
IkReal x12412=(cj2*sj1);
IkReal x12413=(gconst10*r20);
IkReal x12414=(gconst10*sj3);
IkReal x12415=((1.0)*cj0);
IkReal x12416=((1.0)*sj0);
IkReal x12417=(cj1*sj2);
IkReal x12418=(cj3*r21);
IkReal x12419=((1.0)*cj1*cj2);
IkReal x12420=(r20*x12406);
IkReal x12421=(gconst10*x12405);
IkReal x12422=(gconst10*x12406);
IkReal x12423=(r02*x12405);
IkReal x12424=((1.0)*x12406);
evalcond[0]=((((-1.0)*x12416))+(((-1.0)*r02*x12424)));
evalcond[1]=(((r21*x12421))+(((-1.0)*r20*x12405*x12408)));
evalcond[2]=(cj0+(((-1.0)*r10*x12405*x12408))+((r11*x12421)));
evalcond[3]=((((-1.0)*cj1*cj2*x12415))+((cj3*x12423))+((cj0*x12409)));
evalcond[4]=((((-1.0)*x12415*x12417))+(((-1.0)*sj3*x12423))+(((-1.0)*x12412*x12415)));
evalcond[5]=(((sj3*x12413))+((r21*x12410))+(((-1.0)*cj3*x12408*x12420))+((x12418*x12422))+x12412+x12417);
evalcond[6]=(((cj3*x12413))+((gconst11*x12418))+(((-1.0)*r21*x12414*x12424))+(((-1.0)*x12419))+((x12410*x12420))+x12409);
evalcond[7]=(((r10*x12414))+(((-1.0)*cj1*cj2*x12416))+((r11*x12410))+((sj0*x12409))+((x12411*x12422))+(((-1.0)*x12406*x12407*x12408)));
evalcond[8]=((((-1.0)*x12416*x12417))+((gconst11*x12411))+((gconst10*x12407))+(((-1.0)*r11*x12414*x12424))+(((-1.0)*x12412*x12416))+((r10*x12406*x12410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12425=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12425.valid){
continue;
}
CheckValue<IkReal> x12426=IKPowWithIntegerCheck(r02,-1);
if(!x12426.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12425.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x12426.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12425.value)))+IKsqr(((-1.0)*sj0*(x12426.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12425.value)), ((-1.0)*sj0*(x12426.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12427=IKsin(j4);
IkReal x12428=IKcos(j4);
IkReal x12429=(cj3*r10);
IkReal x12430=((1.0)*gconst11);
IkReal x12431=(sj1*sj2);
IkReal x12432=(gconst11*sj3);
IkReal x12433=(cj3*r11);
IkReal x12434=(cj2*sj1);
IkReal x12435=(gconst10*r20);
IkReal x12436=(gconst10*sj3);
IkReal x12437=((1.0)*cj0);
IkReal x12438=((1.0)*sj0);
IkReal x12439=(cj1*sj2);
IkReal x12440=(cj3*r21);
IkReal x12441=((1.0)*cj1*cj2);
IkReal x12442=(r20*x12428);
IkReal x12443=(gconst10*x12427);
IkReal x12444=(gconst10*x12428);
IkReal x12445=(r02*x12427);
IkReal x12446=((1.0)*x12428);
evalcond[0]=((((-1.0)*r02*x12446))+(((-1.0)*x12438)));
evalcond[1]=(((r21*x12443))+(((-1.0)*r20*x12427*x12430)));
evalcond[2]=(cj0+(((-1.0)*r10*x12427*x12430))+((r11*x12443)));
evalcond[3]=(((cj0*x12431))+((cj3*x12445))+(((-1.0)*cj1*cj2*x12437)));
evalcond[4]=((((-1.0)*x12434*x12437))+(((-1.0)*sj3*x12445))+(((-1.0)*x12437*x12439)));
evalcond[5]=(((x12440*x12444))+((r21*x12432))+(((-1.0)*cj3*x12430*x12442))+x12434+x12439+((sj3*x12435)));
evalcond[6]=((((-1.0)*x12441))+(((-1.0)*r21*x12436*x12446))+((cj3*x12435))+x12431+((gconst11*x12440))+((x12432*x12442)));
evalcond[7]=(((sj0*x12431))+((x12433*x12444))+((r10*x12436))+(((-1.0)*cj1*cj2*x12438))+((r11*x12432))+(((-1.0)*x12428*x12429*x12430)));
evalcond[8]=(((r10*x12428*x12432))+((gconst10*x12429))+(((-1.0)*r11*x12436*x12446))+(((-1.0)*x12434*x12438))+((gconst11*x12433))+(((-1.0)*x12438*x12439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12447=((-1.0)*r11);
CheckValue<IkReal> x12450 = IKatan2WithCheck(IkReal(x12447),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12450.valid){
continue;
}
IkReal x12448=((1.0)*(x12450.value));
IkReal x12449=x11773;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12448)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12448)));
IkReal gconst10=(x12447*x12449);
IkReal gconst11=((1.0)*r10*x12449);
IkReal x12451=r12*r12;
IkReal x12452=((1.0)*sj0);
IkReal x12453=(cj0*r02);
IkReal x12454=x11773;
j4eval[0]=((IKabs((((r12*x12453*x12454))+((sj0*x12451*x12454))+(((-1.0)*x12452*x12454)))))+(IKabs(((((-1.0)*r12*x12452))+(((-1.0)*x12453))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12455=((1.0)*r12);
IkReal x12456=(sj1*sj2);
IkReal x12457=((1.0)*r21);
IkReal x12458=(cj3*gconst11);
IkReal x12459=(r11*sj3);
IkReal x12460=(gconst11*r20);
IkReal x12461=((1.0)*sj3);
IkReal x12462=(cj1*cj2);
IkReal x12463=(gconst10*r21*sj3);
IkReal x12464=(cj3*gconst10*r20);
CheckValue<IkReal> x12465=IKPowWithIntegerCheck((((gconst11*r10*x12463))+(((-1.0)*x12457*x12459*(gconst10*gconst10)))+(((-1.0)*gconst11*r10*x12460*x12461))+((gconst10*x12459*x12460))),-1);
if(!x12465.valid){
continue;
}
CheckValue<IkReal> x12466=IKPowWithIntegerCheck(((((-1.0)*gconst10*sj3*x12457))+((sj3*x12460))),-1);
if(!x12466.valid){
continue;
}
if( IKabs(((x12465.value)*((((r12*x12462))+((cj0*x12463))+(((-1.0)*r21*x12455*x12458))+(((-1.0)*x12455*x12464))+(((-1.0)*x12455*x12456))+(((-1.0)*cj0*x12460*x12461)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12466.value)*(((((-1.0)*x12457*x12458))+(((-1.0)*x12464))+(((-1.0)*x12456))+x12462)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12465.value)*((((r12*x12462))+((cj0*x12463))+(((-1.0)*r21*x12455*x12458))+(((-1.0)*x12455*x12464))+(((-1.0)*x12455*x12456))+(((-1.0)*cj0*x12460*x12461))))))+IKsqr(((x12466.value)*(((((-1.0)*x12457*x12458))+(((-1.0)*x12464))+(((-1.0)*x12456))+x12462))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12465.value)*((((r12*x12462))+((cj0*x12463))+(((-1.0)*r21*x12455*x12458))+(((-1.0)*x12455*x12464))+(((-1.0)*x12455*x12456))+(((-1.0)*cj0*x12460*x12461))))), ((x12466.value)*(((((-1.0)*x12457*x12458))+(((-1.0)*x12464))+(((-1.0)*x12456))+x12462))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12467=IKsin(j4);
IkReal x12468=IKcos(j4);
IkReal x12469=(cj3*r10);
IkReal x12470=(gconst11*r20);
IkReal x12471=(gconst11*sj3);
IkReal x12472=(sj1*sj2);
IkReal x12473=(cj3*r11);
IkReal x12474=(r10*sj3);
IkReal x12475=(gconst10*r01);
IkReal x12476=(gconst10*sj3);
IkReal x12477=(cj2*sj1);
IkReal x12478=((1.0)*sj0);
IkReal x12479=(cj1*sj2);
IkReal x12480=(gconst10*r21);
IkReal x12481=(cj3*gconst10);
IkReal x12482=(cj3*gconst11);
IkReal x12483=((1.0)*cj0);
IkReal x12484=((1.0)*x12467);
IkReal x12485=((1.0)*cj1*cj2);
IkReal x12486=(gconst11*x12468);
IkReal x12487=(sj3*x12468);
IkReal x12488=(gconst10*x12467);
IkReal x12489=((1.0)*x12468);
IkReal x12490=(cj3*x12468);
IkReal x12491=(cj3*x12467);
evalcond[0]=((((-1.0)*x12470*x12484))+((x12467*x12480)));
evalcond[1]=(cj0+(((-1.0)*r12*x12489))+(((-1.0)*gconst11*r10*x12484))+((r11*x12488)));
evalcond[2]=((((-1.0)*r02*x12489))+(((-1.0)*gconst11*r00*x12484))+(((-1.0)*x12478))+((x12467*x12475)));
evalcond[3]=((((-1.0)*cj3*x12470*x12489))+((r20*x12476))+((x12480*x12490))+x12477+x12479+((r21*x12471)));
evalcond[4]=((((-1.0)*x12485))+(((-1.0)*r21*x12476*x12489))+((r20*x12481))+x12472+((r21*x12482))+((x12470*x12487)));
evalcond[5]=(((r00*x12476))+((x12475*x12490))+((r01*x12471))+((cj0*x12472))+(((-1.0)*cj1*cj2*x12483))+(((-1.0)*r00*x12482*x12489))+((r02*x12491)));
evalcond[6]=(((gconst10*x12474))+(((-1.0)*x12469*x12486))+((r11*x12471))+((gconst10*x12468*x12473))+((sj0*x12472))+((r12*x12491))+(((-1.0)*cj1*cj2*x12478)));
evalcond[7]=((((-1.0)*x12479*x12483))+((r00*x12468*x12471))+(((-1.0)*x12475*x12487))+((r00*x12481))+((r01*x12482))+(((-1.0)*r02*sj3*x12484))+(((-1.0)*x12477*x12483)));
evalcond[8]=((((-1.0)*r12*sj3*x12484))+(((-1.0)*r11*x12476*x12489))+((r10*x12468*x12471))+(((-1.0)*x12478*x12479))+((gconst10*x12469))+(((-1.0)*x12477*x12478))+((gconst11*x12473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12492=((1.0)*sj0);
IkReal x12493=((1.0)*gconst10);
CheckValue<IkReal> x12494 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12492)))),IkReal(((((-1.0)*cj0*r01*x12493))+(((-1.0)*gconst10*r11*x12492))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12494.valid){
continue;
}
CheckValue<IkReal> x12495=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12493))+(((-1.0)*gconst11*r21)))),-1);
if(!x12495.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12494.value)+(((1.5707963267949)*(x12495.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12496=IKsin(j4);
IkReal x12497=IKcos(j4);
IkReal x12498=(cj3*r10);
IkReal x12499=(gconst11*r20);
IkReal x12500=(gconst11*sj3);
IkReal x12501=(sj1*sj2);
IkReal x12502=(cj3*r11);
IkReal x12503=(r10*sj3);
IkReal x12504=(gconst10*r01);
IkReal x12505=(gconst10*sj3);
IkReal x12506=(cj2*sj1);
IkReal x12507=((1.0)*sj0);
IkReal x12508=(cj1*sj2);
IkReal x12509=(gconst10*r21);
IkReal x12510=(cj3*gconst10);
IkReal x12511=(cj3*gconst11);
IkReal x12512=((1.0)*cj0);
IkReal x12513=((1.0)*x12496);
IkReal x12514=((1.0)*cj1*cj2);
IkReal x12515=(gconst11*x12497);
IkReal x12516=(sj3*x12497);
IkReal x12517=(gconst10*x12496);
IkReal x12518=((1.0)*x12497);
IkReal x12519=(cj3*x12497);
IkReal x12520=(cj3*x12496);
evalcond[0]=(((x12496*x12509))+(((-1.0)*x12499*x12513)));
evalcond[1]=((((-1.0)*r12*x12518))+cj0+(((-1.0)*gconst11*r10*x12513))+((r11*x12517)));
evalcond[2]=((((-1.0)*x12507))+(((-1.0)*gconst11*r00*x12513))+(((-1.0)*r02*x12518))+((x12496*x12504)));
evalcond[3]=(((x12509*x12519))+(((-1.0)*cj3*x12499*x12518))+((r20*x12505))+((r21*x12500))+x12506+x12508);
evalcond[4]=((((-1.0)*x12514))+(((-1.0)*r21*x12505*x12518))+((x12499*x12516))+((r20*x12510))+((r21*x12511))+x12501);
evalcond[5]=(((r01*x12500))+((r00*x12505))+((x12504*x12519))+(((-1.0)*r00*x12511*x12518))+((cj0*x12501))+(((-1.0)*cj1*cj2*x12512))+((r02*x12520)));
evalcond[6]=(((sj0*x12501))+((r11*x12500))+(((-1.0)*x12498*x12515))+(((-1.0)*cj1*cj2*x12507))+((r12*x12520))+((gconst10*x12503))+((gconst10*x12497*x12502)));
evalcond[7]=(((r00*x12497*x12500))+(((-1.0)*r02*sj3*x12513))+(((-1.0)*x12504*x12516))+((r00*x12510))+((r01*x12511))+(((-1.0)*x12506*x12512))+(((-1.0)*x12508*x12512)));
evalcond[8]=((((-1.0)*r11*x12505*x12518))+(((-1.0)*x12507*x12508))+(((-1.0)*x12506*x12507))+((gconst10*x12498))+(((-1.0)*r12*sj3*x12513))+((r10*x12497*x12500))+((gconst11*x12502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12521=gconst10*gconst10;
IkReal x12522=r21*r21;
IkReal x12523=gconst11*gconst11;
IkReal x12524=r20*r20;
IkReal x12525=((1.0)*cj3);
IkReal x12526=(r20*sj3);
IkReal x12527=(gconst10*gconst11);
IkReal x12528=(cj2*sj1);
IkReal x12529=(gconst10*r21);
IkReal x12530=(cj1*sj2);
IkReal x12531=((1.0)*gconst11*r20);
CheckValue<IkReal> x12532 = IKatan2WithCheck(IkReal((((r22*x12528))+((gconst11*r21*r22*sj3))+((gconst10*r22*x12526))+((r22*x12530)))),IkReal(((((-1.0)*x12528*x12531))+(((-1.0)*sj3*x12524*x12527))+((sj3*x12522*x12527))+(((-1.0)*x12530*x12531))+((x12528*x12529))+(((-1.0)*r21*x12523*x12526))+((r21*x12521*x12526))+((x12529*x12530)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12532.valid){
continue;
}
CheckValue<IkReal> x12533=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12521*x12522*x12525))+(((-1.0)*x12523*x12524*x12525))+(((-1.0)*x12525*(r22*r22)))+(((2.0)*cj3*r20*r21*x12527)))),-1);
if(!x12533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12532.value)+(((1.5707963267949)*(x12533.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12534=IKsin(j4);
IkReal x12535=IKcos(j4);
IkReal x12536=(cj3*r10);
IkReal x12537=(gconst11*r20);
IkReal x12538=(gconst11*sj3);
IkReal x12539=(sj1*sj2);
IkReal x12540=(gconst11*r00);
IkReal x12541=(cj3*r11);
IkReal x12542=(gconst10*sj3);
IkReal x12543=(cj2*sj1);
IkReal x12544=(cj3*r01);
IkReal x12545=((1.0)*sj0);
IkReal x12546=(cj1*sj2);
IkReal x12547=(cj3*r21);
IkReal x12548=(cj3*gconst10);
IkReal x12549=((1.0)*cj0);
IkReal x12550=((1.0)*x12535);
IkReal x12551=((1.0)*x12534);
IkReal x12552=((1.0)*cj1*cj2);
IkReal x12553=(cj3*x12534);
IkReal x12554=(gconst10*x12534);
IkReal x12555=(gconst10*x12535);
evalcond[0]=((((-1.0)*x12537*x12551))+(((-1.0)*r22*x12550))+((r21*x12554)));
evalcond[1]=((((-1.0)*r12*x12550))+cj0+((r11*x12554))+(((-1.0)*gconst11*r10*x12551)));
evalcond[2]=(((r01*x12554))+(((-1.0)*x12540*x12551))+(((-1.0)*r02*x12550))+(((-1.0)*x12545)));
evalcond[3]=((((-1.0)*cj3*x12537*x12550))+((r20*x12542))+((r21*x12538))+((x12547*x12555))+((r22*x12553))+x12546+x12543);
evalcond[4]=(((r20*x12548))+(((-1.0)*r21*x12542*x12550))+((gconst11*x12547))+((sj3*x12535*x12537))+x12539+(((-1.0)*r22*sj3*x12551))+(((-1.0)*x12552)));
evalcond[5]=((((-1.0)*cj3*x12540*x12550))+((r00*x12542))+(((-1.0)*cj1*cj2*x12549))+((r02*x12553))+((x12544*x12555))+((r01*x12538))+((cj0*x12539)));
evalcond[6]=(((r11*x12538))+((r12*x12553))+((r10*x12542))+(((-1.0)*gconst11*x12536*x12550))+(((-1.0)*cj1*cj2*x12545))+((x12541*x12555))+((sj0*x12539)));
evalcond[7]=(((r00*x12548))+((r00*x12535*x12538))+(((-1.0)*x12546*x12549))+(((-1.0)*r01*x12542*x12550))+(((-1.0)*r02*sj3*x12551))+((gconst11*x12544))+(((-1.0)*x12543*x12549)));
evalcond[8]=((((-1.0)*x12545*x12546))+((r10*x12535*x12538))+(((-1.0)*r11*x12542*x12550))+(((-1.0)*r12*sj3*x12551))+((gconst11*x12541))+((gconst10*x12536))+(((-1.0)*x12543*x12545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12556=((1.0)*sj0);
IkReal x12557=((1.0)*gconst10);
CheckValue<IkReal> x12558 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12556))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst10*r11*x12556))+(((-1.0)*cj0*r01*x12557))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12558.valid){
continue;
}
CheckValue<IkReal> x12559=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12557))+(((-1.0)*gconst11*r21)))),-1);
if(!x12559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12558.value)+(((1.5707963267949)*(x12559.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12560=IKsin(j4);
IkReal x12561=IKcos(j4);
IkReal x12562=(cj3*r10);
IkReal x12563=(gconst11*r20);
IkReal x12564=(gconst11*sj3);
IkReal x12565=(sj1*sj2);
IkReal x12566=(gconst11*r00);
IkReal x12567=(cj3*r11);
IkReal x12568=(gconst10*sj3);
IkReal x12569=(cj2*sj1);
IkReal x12570=(cj3*r01);
IkReal x12571=((1.0)*sj0);
IkReal x12572=(cj1*sj2);
IkReal x12573=(cj3*r21);
IkReal x12574=(cj3*gconst10);
IkReal x12575=((1.0)*cj0);
IkReal x12576=((1.0)*x12561);
IkReal x12577=((1.0)*x12560);
IkReal x12578=((1.0)*cj1*cj2);
IkReal x12579=(cj3*x12560);
IkReal x12580=(gconst10*x12560);
IkReal x12581=(gconst10*x12561);
evalcond[0]=((((-1.0)*x12563*x12577))+((r21*x12580))+(((-1.0)*r22*x12576)));
evalcond[1]=((((-1.0)*gconst11*r10*x12577))+cj0+(((-1.0)*r12*x12576))+((r11*x12580)));
evalcond[2]=(((r01*x12580))+(((-1.0)*x12571))+(((-1.0)*r02*x12576))+(((-1.0)*x12566*x12577)));
evalcond[3]=(((r22*x12579))+((x12573*x12581))+((r20*x12568))+((r21*x12564))+x12569+x12572+(((-1.0)*cj3*x12563*x12576)));
evalcond[4]=(((sj3*x12561*x12563))+((gconst11*x12573))+(((-1.0)*x12578))+(((-1.0)*r21*x12568*x12576))+(((-1.0)*r22*sj3*x12577))+((r20*x12574))+x12565);
evalcond[5]=(((r02*x12579))+((x12570*x12581))+((r01*x12564))+((r00*x12568))+(((-1.0)*cj3*x12566*x12576))+(((-1.0)*cj1*cj2*x12575))+((cj0*x12565)));
evalcond[6]=(((r11*x12564))+(((-1.0)*gconst11*x12562*x12576))+((sj0*x12565))+((r12*x12579))+((r10*x12568))+((x12567*x12581))+(((-1.0)*cj1*cj2*x12571)));
evalcond[7]=(((r00*x12561*x12564))+((gconst11*x12570))+(((-1.0)*x12572*x12575))+(((-1.0)*x12569*x12575))+((r00*x12574))+(((-1.0)*r01*x12568*x12576))+(((-1.0)*r02*sj3*x12577)));
evalcond[8]=(((gconst11*x12567))+(((-1.0)*x12569*x12571))+(((-1.0)*x12571*x12572))+(((-1.0)*r11*x12568*x12576))+((gconst10*x12562))+(((-1.0)*r12*sj3*x12577))+((r10*x12561*x12564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12582=((1.0)*gconst11);
CheckValue<IkReal> x12583 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12582)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12583.valid){
continue;
}
CheckValue<IkReal> x12584=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12582))+(((-1.0)*gconst10*r00)))),-1);
if(!x12584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12583.value)+(((1.5707963267949)*(x12584.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12585=IKsin(j4);
IkReal x12586=IKcos(j4);
IkReal x12587=(cj3*r10);
IkReal x12588=(gconst11*r20);
IkReal x12589=(gconst11*sj3);
IkReal x12590=(sj1*sj2);
IkReal x12591=(gconst11*r00);
IkReal x12592=(cj3*r11);
IkReal x12593=(gconst10*sj3);
IkReal x12594=(cj2*sj1);
IkReal x12595=(cj3*r01);
IkReal x12596=((1.0)*sj0);
IkReal x12597=(cj1*sj2);
IkReal x12598=(cj3*r21);
IkReal x12599=(cj3*gconst10);
IkReal x12600=((1.0)*cj0);
IkReal x12601=((1.0)*x12586);
IkReal x12602=((1.0)*x12585);
IkReal x12603=((1.0)*cj1*cj2);
IkReal x12604=(cj3*x12585);
IkReal x12605=(gconst10*x12585);
IkReal x12606=(gconst10*x12586);
evalcond[0]=((((-1.0)*r22*x12601))+(((-1.0)*x12588*x12602))+((r21*x12605)));
evalcond[1]=(cj0+((r11*x12605))+(((-1.0)*gconst11*r10*x12602))+(((-1.0)*r12*x12601)));
evalcond[2]=((((-1.0)*x12591*x12602))+((r01*x12605))+(((-1.0)*x12596))+(((-1.0)*r02*x12601)));
evalcond[3]=(((x12598*x12606))+((r21*x12589))+((r22*x12604))+x12597+x12594+(((-1.0)*cj3*x12588*x12601))+((r20*x12593)));
evalcond[4]=((((-1.0)*r22*sj3*x12602))+((gconst11*x12598))+(((-1.0)*x12603))+(((-1.0)*r21*x12593*x12601))+((sj3*x12586*x12588))+x12590+((r20*x12599)));
evalcond[5]=(((cj0*x12590))+((r01*x12589))+((r00*x12593))+((x12595*x12606))+(((-1.0)*cj3*x12591*x12601))+((r02*x12604))+(((-1.0)*cj1*cj2*x12600)));
evalcond[6]=(((x12592*x12606))+((r12*x12604))+(((-1.0)*cj1*cj2*x12596))+(((-1.0)*gconst11*x12587*x12601))+((r11*x12589))+((sj0*x12590))+((r10*x12593)));
evalcond[7]=(((r00*x12599))+((gconst11*x12595))+(((-1.0)*r02*sj3*x12602))+(((-1.0)*r01*x12593*x12601))+(((-1.0)*x12597*x12600))+(((-1.0)*x12594*x12600))+((r00*x12586*x12589)));
evalcond[8]=((((-1.0)*x12596*x12597))+((gconst11*x12592))+(((-1.0)*r11*x12593*x12601))+((r10*x12586*x12589))+((gconst10*x12587))+(((-1.0)*r12*sj3*x12602))+(((-1.0)*x12594*x12596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12607=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12607;
j4eval[1]=IKsign(x12607);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12608=((1.0)*cj5);
IkReal x12609=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12608)));
j4eval[0]=x12609;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12608)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12609);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12610=cj5*cj5;
IkReal x12611=(cj3*r21);
IkReal x12612=(cj5*sj5);
IkReal x12613=((1.0)*cj3);
IkReal x12614=(((cj3*r11*r20*x12612))+((r10*x12611*x12612))+((r11*x12610*x12611))+(((-1.0)*r12*r22*x12613))+(((-1.0)*r11*x12611))+(((-1.0)*r10*r20*x12610*x12613)));
j4eval[0]=x12614;
j4eval[1]=IKsign(x12614);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12615=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12615;
j4eval[1]=IKsign(x12615);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12616=((1.0)*cj5);
IkReal x12617=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12616)));
j4eval[0]=x12617;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12616)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12617);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12618=cj5*cj5;
IkReal x12619=r11*r11;
IkReal x12620=(r11*sj5);
IkReal x12621=(cj5*r10);
IkReal x12622=((r12*r12)+(((-1.0)*x12618*x12619))+((x12618*(r10*r10)))+x12619+(((-2.0)*x12620*x12621)));
j4eval[0]=x12622;
j4eval[1]=IKsign(x12622);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x12620))+x12621))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12623=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12623);
rxp1_1=(px*r21);
rxp1_2=(r11*x12623);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12624=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12624);
rxp1_1=(px*r21);
rxp1_2=(r11*x12624);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12625=((1.0)*sj1);
CheckValue<IkReal> x12626=IKPowWithIntegerCheck(r02,-1);
if(!x12626.valid){
continue;
}
CheckValue<IkReal> x12627=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12627.valid){
continue;
}
if( IKabs(((x12626.value)*(((((-1.0)*cj2*x12625))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12627.value)*((((cj1*cj2))+(((-1.0)*sj2*x12625)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12626.value)*(((((-1.0)*cj2*x12625))+(((-1.0)*cj1*sj2))))))+IKsqr(((x12627.value)*((((cj1*cj2))+(((-1.0)*sj2*x12625))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12626.value)*(((((-1.0)*cj2*x12625))+(((-1.0)*cj1*sj2))))), ((x12627.value)*((((cj1*cj2))+(((-1.0)*sj2*x12625))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12628=IKsin(j4);
IkReal x12629=IKcos(j4);
IkReal x12630=(cj5*r20);
IkReal x12631=((1.0)*cj2);
IkReal x12632=(cj5*r10);
IkReal x12633=((1.0)*x12628);
IkReal x12634=(sj5*x12628);
IkReal x12635=((1.0)*sj5*x12629);
evalcond[0]=((-1.0)*r02*x12629);
evalcond[1]=(((r21*x12634))+(((-1.0)*x12630*x12633)));
evalcond[2]=(((x12629*x12632))+(((-1.0)*r11*x12635)));
evalcond[3]=((1.0)+((r11*x12634))+(((-1.0)*x12632*x12633)));
evalcond[4]=((((-1.0)*sj1*x12631))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12633)));
evalcond[5]=(((x12629*x12630))+(((-1.0)*r21*x12635))+((sj1*sj2))+(((-1.0)*cj1*x12631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12636=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12636.valid){
continue;
}
CheckValue<IkReal> x12637=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12637.valid){
continue;
}
if( IKabs(((-1.0)*(x12636.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12637.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12636.value)))+IKsqr(((x12637.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12636.value)), ((x12637.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12638=IKsin(j4);
IkReal x12639=IKcos(j4);
IkReal x12640=(cj5*r20);
IkReal x12641=((1.0)*cj2);
IkReal x12642=(cj5*r10);
IkReal x12643=((1.0)*x12638);
IkReal x12644=(sj5*x12638);
IkReal x12645=((1.0)*sj5*x12639);
evalcond[0]=((-1.0)*r02*x12639);
evalcond[1]=((((-1.0)*x12640*x12643))+((r21*x12644)));
evalcond[2]=(((x12639*x12642))+(((-1.0)*r11*x12645)));
evalcond[3]=((1.0)+(((-1.0)*x12642*x12643))+((r11*x12644)));
evalcond[4]=((((-1.0)*r02*x12643))+(((-1.0)*sj1*x12641))+(((-1.0)*cj1*sj2)));
evalcond[5]=((((-1.0)*r21*x12645))+((x12639*x12640))+((sj1*sj2))+(((-1.0)*cj1*x12641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12646=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12646);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12646);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12647=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12647);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12647);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12648=IKPowWithIntegerCheck(r22,-1);
if(!x12648.valid){
continue;
}
CheckValue<IkReal> x12649=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12649.valid){
continue;
}
if( IKabs(((x12648.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12649.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12648.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12649.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12648.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12649.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12650=IKsin(j4);
IkReal x12651=IKcos(j4);
IkReal x12652=((1.0)*cj2);
IkReal x12653=(cj5*x12651);
IkReal x12654=(sj5*x12650);
IkReal x12655=((1.0)*sj5*x12651);
IkReal x12656=((1.0)*cj5*x12650);
evalcond[0]=((-1.0)*r22*x12651);
evalcond[1]=((((-1.0)*r00*x12656))+((r01*x12654)));
evalcond[2]=((((-1.0)*r22*x12650))+(((-1.0)*cj1*x12652))+((sj1*sj2)));
evalcond[3]=(((r10*x12653))+(((-1.0)*r11*x12655)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12656))+((r11*x12654)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r01*x12655))+(((-1.0)*sj1*x12652))+((r00*x12653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12657=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12657.valid){
continue;
}
CheckValue<IkReal> x12658=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12658.valid){
continue;
}
if( IKabs(((-1.0)*(x12657.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12658.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12657.value)))+IKsqr(((x12658.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12657.value)), ((x12658.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12659=IKsin(j4);
IkReal x12660=IKcos(j4);
IkReal x12661=((1.0)*cj2);
IkReal x12662=(cj5*x12660);
IkReal x12663=(sj5*x12659);
IkReal x12664=((1.0)*sj5*x12660);
IkReal x12665=((1.0)*cj5*x12659);
evalcond[0]=((-1.0)*r22*x12660);
evalcond[1]=((((-1.0)*r00*x12665))+((r01*x12663)));
evalcond[2]=((((-1.0)*r22*x12659))+(((-1.0)*cj1*x12661))+((sj1*sj2)));
evalcond[3]=(((r10*x12662))+(((-1.0)*r11*x12664)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12665))+((r11*x12663)));
evalcond[5]=((((-1.0)*r01*x12664))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12661))+((r00*x12662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12666=cj5*cj5;
IkReal x12667=r11*r11;
IkReal x12668=(cj5*r10);
IkReal x12669=(r11*sj5);
CheckValue<IkReal> x12670=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x12666*(r10*r10)))+(((-1.0)*x12666*x12667))+x12667+(((-2.0)*x12668*x12669)))),-1);
if(!x12670.valid){
continue;
}
CheckValue<IkReal> x12671 = IKatan2WithCheck(IkReal(((((-1.0)*x12669))+x12668)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12671.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12670.value)))+(x12671.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12672=IKsin(j4);
IkReal x12673=IKcos(j4);
IkReal x12674=(cj5*r10);
IkReal x12675=(r01*sj5);
IkReal x12676=((1.0)*cj2);
IkReal x12677=(cj5*r00);
IkReal x12678=(cj5*r20);
IkReal x12679=((1.0)*x12673);
IkReal x12680=((1.0)*x12672);
IkReal x12681=(sj5*x12672);
evalcond[0]=(((r21*x12681))+(((-1.0)*r22*x12679))+(((-1.0)*x12678*x12680)));
evalcond[1]=((((-1.0)*r02*x12679))+(((-1.0)*x12677*x12680))+((x12672*x12675)));
evalcond[2]=((((-1.0)*r12*x12680))+(((-1.0)*r11*sj5*x12679))+((x12673*x12674)));
evalcond[3]=((1.0)+(((-1.0)*x12674*x12680))+((r11*x12681))+(((-1.0)*r12*x12679)));
evalcond[4]=((((-1.0)*cj1*x12676))+((sj1*sj2))+(((-1.0)*r21*sj5*x12679))+((x12673*x12678))+(((-1.0)*r22*x12680)));
evalcond[5]=((((-1.0)*x12675*x12679))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12680))+((x12673*x12677))+(((-1.0)*sj1*x12676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12682=((1.0)*cj5);
CheckValue<IkReal> x12683 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x12682))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12683.valid){
continue;
}
CheckValue<IkReal> x12684=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12682))+(((-1.0)*r00*sj5)))),-1);
if(!x12684.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12683.value)+(((1.5707963267949)*(x12684.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12685=IKsin(j4);
IkReal x12686=IKcos(j4);
IkReal x12687=(cj5*r10);
IkReal x12688=(r01*sj5);
IkReal x12689=((1.0)*cj2);
IkReal x12690=(cj5*r00);
IkReal x12691=(cj5*r20);
IkReal x12692=((1.0)*x12686);
IkReal x12693=((1.0)*x12685);
IkReal x12694=(sj5*x12685);
evalcond[0]=((((-1.0)*r22*x12692))+((r21*x12694))+(((-1.0)*x12691*x12693)));
evalcond[1]=((((-1.0)*r02*x12692))+((x12685*x12688))+(((-1.0)*x12690*x12693)));
evalcond[2]=((((-1.0)*r12*x12693))+(((-1.0)*r11*sj5*x12692))+((x12686*x12687)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12692))+(((-1.0)*x12687*x12693))+((r11*x12694)));
evalcond[4]=((((-1.0)*r22*x12693))+(((-1.0)*cj1*x12689))+((sj1*sj2))+(((-1.0)*r21*sj5*x12692))+((x12686*x12691)));
evalcond[5]=((((-1.0)*sj1*x12689))+(((-1.0)*r02*x12693))+(((-1.0)*cj1*sj2))+(((-1.0)*x12688*x12692))+((x12686*x12690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12695=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12695.valid){
continue;
}
CheckValue<IkReal> x12696 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12696.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12695.value)))+(x12696.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12697=IKsin(j4);
IkReal x12698=IKcos(j4);
IkReal x12699=(cj5*r10);
IkReal x12700=(r01*sj5);
IkReal x12701=((1.0)*cj2);
IkReal x12702=(cj5*r00);
IkReal x12703=(cj5*r20);
IkReal x12704=((1.0)*x12698);
IkReal x12705=((1.0)*x12697);
IkReal x12706=(sj5*x12697);
evalcond[0]=(((r21*x12706))+(((-1.0)*x12703*x12705))+(((-1.0)*r22*x12704)));
evalcond[1]=((((-1.0)*x12702*x12705))+((x12697*x12700))+(((-1.0)*r02*x12704)));
evalcond[2]=(((x12698*x12699))+(((-1.0)*r11*sj5*x12704))+(((-1.0)*r12*x12705)));
evalcond[3]=((1.0)+((r11*x12706))+(((-1.0)*x12699*x12705))+(((-1.0)*r12*x12704)));
evalcond[4]=((((-1.0)*r21*sj5*x12704))+((x12698*x12703))+((sj1*sj2))+(((-1.0)*r22*x12705))+(((-1.0)*cj1*x12701)));
evalcond[5]=(((x12698*x12702))+(((-1.0)*sj1*x12701))+(((-1.0)*cj1*sj2))+(((-1.0)*x12700*x12704))+(((-1.0)*r02*x12705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12707=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12707;
j4eval[1]=IKsign(x12707);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12708=((1.0)*cj5);
IkReal x12709=((((-1.0)*r01*x12708))+(((-1.0)*r00*sj5)));
j4eval[0]=x12709;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12708)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12709);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12710=(sj1*sj2);
IkReal x12711=(cj5*r10);
IkReal x12712=(r11*sj5);
IkReal x12713=(cj1*cj2);
IkReal x12714=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x12714;
j4eval[1]=((IKabs(((((-1.0)*x12712*x12713))+(((-1.0)*x12710*x12711))+((x12711*x12713))+((x12710*x12712)))))+(IKabs((((r12*x12713))+(((-1.0)*r12*x12710))))));
j4eval[2]=IKsign(x12714);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12715=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12715);
rxp1_1=(px*r21);
rxp1_2=(r11*x12715);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12716=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12716);
rxp1_1=(px*r21);
rxp1_2=(r11*x12716);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12717=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x12717))+((r11*sj5)));
j4eval[1]=(((r21*sj5))+(((-1.0)*r20*x12717)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12718=((1.0)*cj5);
CheckValue<IkReal> x12719=IKPowWithIntegerCheck(((((-1.0)*r10*x12718))+((r11*sj5))),-1);
if(!x12719.valid){
continue;
}
CheckValue<IkReal> x12720=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x12718))),-1);
if(!x12720.valid){
continue;
}
if( IKabs(((-1.0)*(x12719.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12720.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12719.value)))+IKsqr(((x12720.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12719.value)), ((x12720.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12721=IKsin(j4);
IkReal x12722=IKcos(j4);
IkReal x12723=((1.0)*cj2);
IkReal x12724=(r21*sj5);
IkReal x12725=(r11*sj5);
IkReal x12726=((1.0)*cj5*x12721);
IkReal x12727=((1.0)*cj5*x12722);
evalcond[0]=((-1.0)*r02*x12722);
evalcond[1]=(((x12721*x12724))+(((-1.0)*r20*x12726)));
evalcond[2]=(((r02*x12721))+(((-1.0)*sj1*x12723))+(((-1.0)*cj1*sj2)));
evalcond[3]=(((x12722*x12725))+(((-1.0)*r10*x12727)));
evalcond[4]=((1.0)+((x12721*x12725))+(((-1.0)*r10*x12726)));
evalcond[5]=(((x12722*x12724))+((sj1*sj2))+(((-1.0)*r20*x12727))+(((-1.0)*cj1*x12723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12728=IKPowWithIntegerCheck(r02,-1);
if(!x12728.valid){
continue;
}
CheckValue<IkReal> x12729=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12729.valid){
continue;
}
if( IKabs(((x12728.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12729.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12728.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12729.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12728.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12729.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12730=IKsin(j4);
IkReal x12731=IKcos(j4);
IkReal x12732=((1.0)*cj2);
IkReal x12733=(r21*sj5);
IkReal x12734=(r11*sj5);
IkReal x12735=((1.0)*cj5*x12730);
IkReal x12736=((1.0)*cj5*x12731);
evalcond[0]=((-1.0)*r02*x12731);
evalcond[1]=(((x12730*x12733))+(((-1.0)*r20*x12735)));
evalcond[2]=(((r02*x12730))+(((-1.0)*sj1*x12732))+(((-1.0)*cj1*sj2)));
evalcond[3]=((((-1.0)*r10*x12736))+((x12731*x12734)));
evalcond[4]=((1.0)+((x12730*x12734))+(((-1.0)*r10*x12735)));
evalcond[5]=(((sj1*sj2))+((x12731*x12733))+(((-1.0)*r20*x12736))+(((-1.0)*cj1*x12732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12737=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12737;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12737);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12738=((1.0)*cj5);
IkReal x12739=((((-1.0)*r21*x12738))+(((-1.0)*r20*sj5)));
j4eval[0]=x12739;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12738))+((r11*sj5))))));
j4eval[2]=IKsign(x12739);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12740=cj5*cj5;
IkReal x12741=(r11*r21);
IkReal x12742=((1.0)*r20);
IkReal x12743=(cj5*sj5);
IkReal x12744=((((-1.0)*x12741))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12740*x12742))+((r10*r21*x12743))+((r11*r20*x12743))+((x12740*x12741)));
j4eval[0]=x12744;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12742)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12744);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12745=cj5*cj5;
IkReal x12746=(r21*sj5);
IkReal x12747=(r11*r21);
IkReal x12748=((1.0)*r20);
CheckValue<IkReal> x12749 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x12748))+x12746)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12749.valid){
continue;
}
CheckValue<IkReal> x12750=IKPowWithIntegerCheck(IKsign((((x12745*x12747))+(((-1.0)*x12747))+(((-1.0)*r12*r22))+((cj5*r10*x12746))+(((-1.0)*r10*x12745*x12748))+((cj5*r11*r20*sj5)))),-1);
if(!x12750.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12749.value)+(((1.5707963267949)*(x12750.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12751=IKcos(j4);
IkReal x12752=IKsin(j4);
IkReal x12753=(cj5*r00);
IkReal x12754=(cj5*r20);
IkReal x12755=(cj5*r10);
IkReal x12756=((1.0)*x12751);
IkReal x12757=((1.0)*x12752);
IkReal x12758=(sj5*x12751);
IkReal x12759=(sj5*x12752);
evalcond[0]=(((r22*x12752))+(((-1.0)*x12754*x12756))+((r21*x12758)));
evalcond[1]=(((r11*x12758))+(((-1.0)*x12755*x12756))+((r12*x12752)));
evalcond[2]=((((-1.0)*r22*x12756))+(((-1.0)*x12754*x12757))+((r21*x12759)));
evalcond[3]=((((-1.0)*r02*x12756))+(((-1.0)*x12753*x12757))+((r01*x12759)));
evalcond[4]=((-1.0)+(((-1.0)*x12753*x12756))+((r02*x12752))+((r01*x12758)));
evalcond[5]=((1.0)+((r11*x12759))+(((-1.0)*r12*x12756))+(((-1.0)*x12755*x12757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12760=((1.0)*cj5);
CheckValue<IkReal> x12761=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12760))+(((-1.0)*r20*sj5)))),-1);
if(!x12761.valid){
continue;
}
CheckValue<IkReal> x12762 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12760))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12762.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12761.value)))+(x12762.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12763=IKcos(j4);
IkReal x12764=IKsin(j4);
IkReal x12765=(cj5*r00);
IkReal x12766=(cj5*r20);
IkReal x12767=(cj5*r10);
IkReal x12768=((1.0)*x12763);
IkReal x12769=((1.0)*x12764);
IkReal x12770=(sj5*x12763);
IkReal x12771=(sj5*x12764);
evalcond[0]=((((-1.0)*x12766*x12768))+((r22*x12764))+((r21*x12770)));
evalcond[1]=(((r12*x12764))+(((-1.0)*x12767*x12768))+((r11*x12770)));
evalcond[2]=((((-1.0)*x12766*x12769))+(((-1.0)*r22*x12768))+((r21*x12771)));
evalcond[3]=(((r01*x12771))+(((-1.0)*r02*x12768))+(((-1.0)*x12765*x12769)));
evalcond[4]=((-1.0)+((r01*x12770))+((r02*x12764))+(((-1.0)*x12765*x12768)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12768))+(((-1.0)*x12767*x12769))+((r11*x12771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12772 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12772.valid){
continue;
}
CheckValue<IkReal> x12773=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12773.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12772.value)+(((1.5707963267949)*(x12773.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12774=IKcos(j4);
IkReal x12775=IKsin(j4);
IkReal x12776=(cj5*r00);
IkReal x12777=(cj5*r20);
IkReal x12778=(cj5*r10);
IkReal x12779=((1.0)*x12774);
IkReal x12780=((1.0)*x12775);
IkReal x12781=(sj5*x12774);
IkReal x12782=(sj5*x12775);
evalcond[0]=((((-1.0)*x12777*x12779))+((r21*x12781))+((r22*x12775)));
evalcond[1]=(((r11*x12781))+((r12*x12775))+(((-1.0)*x12778*x12779)));
evalcond[2]=((((-1.0)*r22*x12779))+((r21*x12782))+(((-1.0)*x12777*x12780)));
evalcond[3]=(((r01*x12782))+(((-1.0)*r02*x12779))+(((-1.0)*x12776*x12780)));
evalcond[4]=((-1.0)+(((-1.0)*x12776*x12779))+((r01*x12781))+((r02*x12775)));
evalcond[5]=((1.0)+(((-1.0)*x12778*x12780))+((r11*x12782))+(((-1.0)*r12*x12779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12783=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12783;
j4eval[1]=IKsign(x12783);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12784=((1.0)*cj5);
IkReal x12785=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12784)));
j4eval[0]=x12785;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12784))))));
j4eval[2]=IKsign(x12785);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12786=cj5*cj5;
IkReal x12787=(r11*r21);
IkReal x12788=((1.0)*r20);
IkReal x12789=(cj5*sj5);
IkReal x12790=(((x12786*x12787))+((r10*r21*x12789))+(((-1.0)*r12*r22))+(((-1.0)*x12787))+(((-1.0)*r10*x12786*x12788))+((r11*r20*x12789)));
j4eval[0]=x12790;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12788))))));
j4eval[2]=IKsign(x12790);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12791=cj5*cj5;
IkReal x12792=(r21*sj5);
IkReal x12793=(r11*r21);
IkReal x12794=((1.0)*r20);
CheckValue<IkReal> x12795=IKPowWithIntegerCheck(IKsign((((x12791*x12793))+((cj5*r10*x12792))+(((-1.0)*r10*x12791*x12794))+(((-1.0)*r12*r22))+(((-1.0)*x12793))+((cj5*r11*r20*sj5)))),-1);
if(!x12795.valid){
continue;
}
CheckValue<IkReal> x12796 = IKatan2WithCheck(IkReal((x12792+(((-1.0)*cj5*x12794)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12796.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12795.value)))+(x12796.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12797=IKcos(j4);
IkReal x12798=IKsin(j4);
IkReal x12799=(cj5*r00);
IkReal x12800=(cj5*r20);
IkReal x12801=(cj5*r10);
IkReal x12802=((1.0)*x12797);
IkReal x12803=((1.0)*x12798);
IkReal x12804=(sj5*x12797);
IkReal x12805=(sj5*x12798);
evalcond[0]=((((-1.0)*x12800*x12802))+((r21*x12804))+((r22*x12798)));
evalcond[1]=(((r11*x12804))+((r12*x12798))+(((-1.0)*x12801*x12802)));
evalcond[2]=((((-1.0)*x12800*x12803))+((r21*x12805))+(((-1.0)*r22*x12802)));
evalcond[3]=((((-1.0)*x12799*x12803))+(((-1.0)*r02*x12802))+((r01*x12805)));
evalcond[4]=((1.0)+((r02*x12798))+(((-1.0)*x12799*x12802))+((r01*x12804)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12802))+((r11*x12805))+(((-1.0)*x12801*x12803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12806=((1.0)*cj5);
CheckValue<IkReal> x12807=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12806)))),-1);
if(!x12807.valid){
continue;
}
CheckValue<IkReal> x12808 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12806)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12808.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12807.value)))+(x12808.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12809=IKcos(j4);
IkReal x12810=IKsin(j4);
IkReal x12811=(cj5*r00);
IkReal x12812=(cj5*r20);
IkReal x12813=(cj5*r10);
IkReal x12814=((1.0)*x12809);
IkReal x12815=((1.0)*x12810);
IkReal x12816=(sj5*x12809);
IkReal x12817=(sj5*x12810);
evalcond[0]=((((-1.0)*x12812*x12814))+((r21*x12816))+((r22*x12810)));
evalcond[1]=((((-1.0)*x12813*x12814))+((r12*x12810))+((r11*x12816)));
evalcond[2]=((((-1.0)*x12812*x12815))+((r21*x12817))+(((-1.0)*r22*x12814)));
evalcond[3]=((((-1.0)*r02*x12814))+((r01*x12817))+(((-1.0)*x12811*x12815)));
evalcond[4]=((1.0)+((r02*x12810))+((r01*x12816))+(((-1.0)*x12811*x12814)));
evalcond[5]=((1.0)+(((-1.0)*x12813*x12815))+(((-1.0)*r12*x12814))+((r11*x12817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12818=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12818.valid){
continue;
}
CheckValue<IkReal> x12819 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12819.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12818.value)))+(x12819.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12820=IKcos(j4);
IkReal x12821=IKsin(j4);
IkReal x12822=(cj5*r00);
IkReal x12823=(cj5*r20);
IkReal x12824=(cj5*r10);
IkReal x12825=((1.0)*x12820);
IkReal x12826=((1.0)*x12821);
IkReal x12827=(sj5*x12820);
IkReal x12828=(sj5*x12821);
evalcond[0]=(((r22*x12821))+((r21*x12827))+(((-1.0)*x12823*x12825)));
evalcond[1]=((((-1.0)*x12824*x12825))+((r12*x12821))+((r11*x12827)));
evalcond[2]=((((-1.0)*r22*x12825))+((r21*x12828))+(((-1.0)*x12823*x12826)));
evalcond[3]=((((-1.0)*r02*x12825))+((r01*x12828))+(((-1.0)*x12822*x12826)));
evalcond[4]=((1.0)+((r01*x12827))+(((-1.0)*x12822*x12825))+((r02*x12821)));
evalcond[5]=((1.0)+(((-1.0)*x12824*x12826))+(((-1.0)*r12*x12825))+((r11*x12828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12829=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12829;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12829);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12830=((1.0)*cj5);
IkReal x12831=((((-1.0)*r21*x12830))+(((-1.0)*r20*sj5)));
j4eval[0]=x12831;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x12830)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12831);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12832=cj5*cj5;
IkReal x12833=(r11*r21);
IkReal x12834=((1.0)*r20);
IkReal x12835=(cj5*sj5);
IkReal x12836=((((-1.0)*r12*r22))+((r10*r21*x12835))+(((-1.0)*r10*x12832*x12834))+((r11*r20*x12835))+((x12832*x12833))+(((-1.0)*x12833)));
j4eval[0]=x12836;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12834)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12836);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12837=cj5*cj5;
IkReal x12838=(r21*sj5);
IkReal x12839=(r11*r21);
IkReal x12840=((1.0)*r20);
CheckValue<IkReal> x12841 = IKatan2WithCheck(IkReal((x12838+(((-1.0)*cj5*x12840)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12841.valid){
continue;
}
CheckValue<IkReal> x12842=IKPowWithIntegerCheck(IKsign((((x12837*x12839))+(((-1.0)*r12*r22))+((cj5*r10*x12838))+(((-1.0)*x12839))+(((-1.0)*r10*x12837*x12840))+((cj5*r11*r20*sj5)))),-1);
if(!x12842.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12841.value)+(((1.5707963267949)*(x12842.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12843=IKcos(j4);
IkReal x12844=IKsin(j4);
IkReal x12845=(cj5*r00);
IkReal x12846=(cj5*r20);
IkReal x12847=(cj5*r10);
IkReal x12848=((1.0)*x12843);
IkReal x12849=((1.0)*x12844);
IkReal x12850=(sj5*x12843);
IkReal x12851=(sj5*x12844);
evalcond[0]=(((r22*x12844))+((r21*x12850))+(((-1.0)*x12846*x12848)));
evalcond[1]=(((r11*x12850))+((r12*x12844))+(((-1.0)*x12847*x12848)));
evalcond[2]=((((-1.0)*r22*x12848))+((r21*x12851))+(((-1.0)*x12846*x12849)));
evalcond[3]=((((-1.0)*r02*x12848))+((r01*x12851))+(((-1.0)*x12845*x12849)));
evalcond[4]=((-1.0)+((r01*x12850))+(((-1.0)*x12845*x12848))+((r02*x12844)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12848))+((r11*x12851))+(((-1.0)*x12847*x12849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12852=((1.0)*cj5);
CheckValue<IkReal> x12853=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12852))+(((-1.0)*r20*sj5)))),-1);
if(!x12853.valid){
continue;
}
CheckValue<IkReal> x12854 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12852)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12854.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12853.value)))+(x12854.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12855=IKcos(j4);
IkReal x12856=IKsin(j4);
IkReal x12857=(cj5*r00);
IkReal x12858=(cj5*r20);
IkReal x12859=(cj5*r10);
IkReal x12860=((1.0)*x12855);
IkReal x12861=((1.0)*x12856);
IkReal x12862=(sj5*x12855);
IkReal x12863=(sj5*x12856);
evalcond[0]=(((r21*x12862))+((r22*x12856))+(((-1.0)*x12858*x12860)));
evalcond[1]=(((r11*x12862))+(((-1.0)*x12859*x12860))+((r12*x12856)));
evalcond[2]=(((r21*x12863))+(((-1.0)*x12858*x12861))+(((-1.0)*r22*x12860)));
evalcond[3]=((((-1.0)*r02*x12860))+((r01*x12863))+(((-1.0)*x12857*x12861)));
evalcond[4]=((-1.0)+((r02*x12856))+((r01*x12862))+(((-1.0)*x12857*x12860)));
evalcond[5]=((1.0)+((r11*x12863))+(((-1.0)*x12859*x12861))+(((-1.0)*r12*x12860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12864 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12864.valid){
continue;
}
CheckValue<IkReal> x12865=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12864.value)+(((1.5707963267949)*(x12865.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12866=IKcos(j4);
IkReal x12867=IKsin(j4);
IkReal x12868=(cj5*r00);
IkReal x12869=(cj5*r20);
IkReal x12870=(cj5*r10);
IkReal x12871=((1.0)*x12866);
IkReal x12872=((1.0)*x12867);
IkReal x12873=(sj5*x12866);
IkReal x12874=(sj5*x12867);
evalcond[0]=((((-1.0)*x12869*x12871))+((r21*x12873))+((r22*x12867)));
evalcond[1]=(((r12*x12867))+((r11*x12873))+(((-1.0)*x12870*x12871)));
evalcond[2]=((((-1.0)*r22*x12871))+(((-1.0)*x12869*x12872))+((r21*x12874)));
evalcond[3]=(((r01*x12874))+(((-1.0)*x12868*x12872))+(((-1.0)*r02*x12871)));
evalcond[4]=((-1.0)+((r01*x12873))+(((-1.0)*x12868*x12871))+((r02*x12867)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12871))+((r11*x12874))+(((-1.0)*x12870*x12872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12875=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12875;
j4eval[1]=IKsign(x12875);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12876=((1.0)*cj5);
IkReal x12877=((((-1.0)*r11*x12876))+(((-1.0)*r10*sj5)));
j4eval[0]=x12877;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12876)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12877);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12878=cj5*cj5;
IkReal x12879=(r11*r21);
IkReal x12880=((1.0)*r20);
IkReal x12881=(cj5*sj5);
IkReal x12882=((((-1.0)*r10*x12878*x12880))+(((-1.0)*r12*r22))+((r10*r21*x12881))+((x12878*x12879))+(((-1.0)*x12879))+((r11*r20*x12881)));
j4eval[0]=x12882;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12880))))));
j4eval[2]=IKsign(x12882);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12883=cj5*cj5;
IkReal x12884=(r21*sj5);
IkReal x12885=(r11*r21);
IkReal x12886=((1.0)*r20);
CheckValue<IkReal> x12887=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12885))+(((-1.0)*r10*x12883*x12886))+(((-1.0)*r12*r22))+((x12883*x12885))+((cj5*r10*x12884))+((cj5*r11*r20*sj5)))),-1);
if(!x12887.valid){
continue;
}
CheckValue<IkReal> x12888 = IKatan2WithCheck(IkReal((x12884+(((-1.0)*cj5*x12886)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12888.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12887.value)))+(x12888.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12889=IKcos(j4);
IkReal x12890=IKsin(j4);
IkReal x12891=(cj5*r00);
IkReal x12892=(cj5*r20);
IkReal x12893=(cj5*r10);
IkReal x12894=((1.0)*x12889);
IkReal x12895=((1.0)*x12890);
IkReal x12896=(sj5*x12889);
IkReal x12897=(sj5*x12890);
evalcond[0]=((((-1.0)*x12892*x12894))+((r21*x12896))+((r22*x12890)));
evalcond[1]=((((-1.0)*x12893*x12894))+((r12*x12890))+((r11*x12896)));
evalcond[2]=((((-1.0)*x12892*x12895))+(((-1.0)*r22*x12894))+((r21*x12897)));
evalcond[3]=((((-1.0)*x12891*x12895))+((r01*x12897))+(((-1.0)*r02*x12894)));
evalcond[4]=((1.0)+(((-1.0)*x12891*x12894))+((r01*x12896))+((r02*x12890)));
evalcond[5]=((1.0)+(((-1.0)*x12893*x12895))+((r11*x12897))+(((-1.0)*r12*x12894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12898=((1.0)*cj5);
CheckValue<IkReal> x12899 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x12898))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12899.valid){
continue;
}
CheckValue<IkReal> x12900=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12898)))),-1);
if(!x12900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12899.value)+(((1.5707963267949)*(x12900.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12901=IKcos(j4);
IkReal x12902=IKsin(j4);
IkReal x12903=(cj5*r00);
IkReal x12904=(cj5*r20);
IkReal x12905=(cj5*r10);
IkReal x12906=((1.0)*x12901);
IkReal x12907=((1.0)*x12902);
IkReal x12908=(sj5*x12901);
IkReal x12909=(sj5*x12902);
evalcond[0]=(((r21*x12908))+((r22*x12902))+(((-1.0)*x12904*x12906)));
evalcond[1]=(((r12*x12902))+(((-1.0)*x12905*x12906))+((r11*x12908)));
evalcond[2]=(((r21*x12909))+(((-1.0)*r22*x12906))+(((-1.0)*x12904*x12907)));
evalcond[3]=(((r01*x12909))+(((-1.0)*x12903*x12907))+(((-1.0)*r02*x12906)));
evalcond[4]=((1.0)+((r01*x12908))+(((-1.0)*x12903*x12906))+((r02*x12902)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12906))+(((-1.0)*x12905*x12907))+((r11*x12909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12910=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12910.valid){
continue;
}
CheckValue<IkReal> x12911 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12911.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12910.value)))+(x12911.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12912=IKcos(j4);
IkReal x12913=IKsin(j4);
IkReal x12914=(cj5*r00);
IkReal x12915=(cj5*r20);
IkReal x12916=(cj5*r10);
IkReal x12917=((1.0)*x12912);
IkReal x12918=((1.0)*x12913);
IkReal x12919=(sj5*x12912);
IkReal x12920=(sj5*x12913);
evalcond[0]=((((-1.0)*x12915*x12917))+((r21*x12919))+((r22*x12913)));
evalcond[1]=((((-1.0)*x12916*x12917))+((r12*x12913))+((r11*x12919)));
evalcond[2]=((((-1.0)*x12915*x12918))+(((-1.0)*r22*x12917))+((r21*x12920)));
evalcond[3]=((((-1.0)*r02*x12917))+(((-1.0)*x12914*x12918))+((r01*x12920)));
evalcond[4]=((1.0)+((r02*x12913))+(((-1.0)*x12914*x12917))+((r01*x12919)));
evalcond[5]=((1.0)+((r11*x12920))+(((-1.0)*x12916*x12918))+(((-1.0)*r12*x12917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12921=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12921;
j4eval[1]=IKsign(x12921);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12922=((1.0)*cj5);
IkReal x12923=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12922)));
j4eval[0]=x12923;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x12922))+((r21*sj5))))));
j4eval[2]=IKsign(x12923);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12924=cj5*cj5;
IkReal x12925=(r11*r21);
IkReal x12926=((1.0)*r20);
IkReal x12927=(cj5*sj5);
IkReal x12928=((((-1.0)*r12*r22))+(((-1.0)*x12925))+((r11*r20*x12927))+((x12924*x12925))+((r10*r21*x12927))+(((-1.0)*r10*x12924*x12926)));
j4eval[0]=x12928;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12926)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12928);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12929=cj5*cj5;
IkReal x12930=(r21*sj5);
IkReal x12931=(r11*r21);
IkReal x12932=((1.0)*r20);
CheckValue<IkReal> x12933=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x12929*x12932))+((cj5*r10*x12930))+(((-1.0)*r12*r22))+(((-1.0)*x12931))+((x12929*x12931))+((cj5*r11*r20*sj5)))),-1);
if(!x12933.valid){
continue;
}
CheckValue<IkReal> x12934 = IKatan2WithCheck(IkReal((x12930+(((-1.0)*cj5*x12932)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12933.value)))+(x12934.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12935=IKcos(j4);
IkReal x12936=IKsin(j4);
IkReal x12937=(cj5*r00);
IkReal x12938=(cj5*r20);
IkReal x12939=(cj5*r10);
IkReal x12940=((1.0)*x12935);
IkReal x12941=((1.0)*x12936);
IkReal x12942=(sj5*x12935);
IkReal x12943=(sj5*x12936);
evalcond[0]=(((r21*x12942))+((r22*x12936))+(((-1.0)*x12938*x12940)));
evalcond[1]=((((-1.0)*x12939*x12940))+((r12*x12936))+((r11*x12942)));
evalcond[2]=(((r21*x12943))+(((-1.0)*r22*x12940))+(((-1.0)*x12938*x12941)));
evalcond[3]=((((-1.0)*x12937*x12941))+((r01*x12943))+(((-1.0)*r02*x12940)));
evalcond[4]=((1.0)+(((-1.0)*x12937*x12940))+((r02*x12936))+((r01*x12942)));
evalcond[5]=((1.0)+(((-1.0)*x12939*x12941))+((r11*x12943))+(((-1.0)*r12*x12940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12944=((1.0)*cj5);
CheckValue<IkReal> x12945=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x12944))+(((-1.0)*r10*sj5)))),-1);
if(!x12945.valid){
continue;
}
CheckValue<IkReal> x12946 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12944)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12945.value)))+(x12946.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12947=IKcos(j4);
IkReal x12948=IKsin(j4);
IkReal x12949=(cj5*r00);
IkReal x12950=(cj5*r20);
IkReal x12951=(cj5*r10);
IkReal x12952=((1.0)*x12947);
IkReal x12953=((1.0)*x12948);
IkReal x12954=(sj5*x12947);
IkReal x12955=(sj5*x12948);
evalcond[0]=(((r22*x12948))+((r21*x12954))+(((-1.0)*x12950*x12952)));
evalcond[1]=((((-1.0)*x12951*x12952))+((r12*x12948))+((r11*x12954)));
evalcond[2]=(((r21*x12955))+(((-1.0)*r22*x12952))+(((-1.0)*x12950*x12953)));
evalcond[3]=(((r01*x12955))+(((-1.0)*r02*x12952))+(((-1.0)*x12949*x12953)));
evalcond[4]=((1.0)+((r01*x12954))+((r02*x12948))+(((-1.0)*x12949*x12952)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12952))+(((-1.0)*x12951*x12953))+((r11*x12955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12956=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12956.valid){
continue;
}
CheckValue<IkReal> x12957 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12957.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12956.value)))+(x12957.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12958=IKcos(j4);
IkReal x12959=IKsin(j4);
IkReal x12960=(cj5*r00);
IkReal x12961=(cj5*r20);
IkReal x12962=(cj5*r10);
IkReal x12963=((1.0)*x12958);
IkReal x12964=((1.0)*x12959);
IkReal x12965=(sj5*x12958);
IkReal x12966=(sj5*x12959);
evalcond[0]=(((r22*x12959))+(((-1.0)*x12961*x12963))+((r21*x12965)));
evalcond[1]=((((-1.0)*x12962*x12963))+((r12*x12959))+((r11*x12965)));
evalcond[2]=((((-1.0)*x12961*x12964))+(((-1.0)*r22*x12963))+((r21*x12966)));
evalcond[3]=(((r01*x12966))+(((-1.0)*x12960*x12964))+(((-1.0)*r02*x12963)));
evalcond[4]=((1.0)+((r01*x12965))+(((-1.0)*x12960*x12963))+((r02*x12959)));
evalcond[5]=((1.0)+(((-1.0)*x12962*x12964))+(((-1.0)*r12*x12963))+((r11*x12966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12967=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12967;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12967);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12968=((1.0)*cj5);
IkReal x12969=((((-1.0)*r21*x12968))+(((-1.0)*r20*sj5)));
j4eval[0]=x12969;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x12968))))));
j4eval[2]=IKsign(x12969);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12970=cj5*cj5;
IkReal x12971=(r11*r21);
IkReal x12972=((1.0)*r20);
IkReal x12973=(cj5*sj5);
IkReal x12974=(((r11*r20*x12973))+(((-1.0)*r12*r22))+(((-1.0)*x12971))+((x12970*x12971))+((r10*r21*x12973))+(((-1.0)*r10*x12970*x12972)));
j4eval[0]=x12974;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12972)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12974);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12975=cj5*cj5;
IkReal x12976=(r21*sj5);
IkReal x12977=(r11*r21);
IkReal x12978=((1.0)*r20);
CheckValue<IkReal> x12979=IKPowWithIntegerCheck(IKsign((((x12975*x12977))+(((-1.0)*r10*x12975*x12978))+(((-1.0)*r12*r22))+(((-1.0)*x12977))+((cj5*r10*x12976))+((cj5*r11*r20*sj5)))),-1);
if(!x12979.valid){
continue;
}
CheckValue<IkReal> x12980 = IKatan2WithCheck(IkReal((x12976+(((-1.0)*cj5*x12978)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12980.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12979.value)))+(x12980.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12981=IKcos(j4);
IkReal x12982=IKsin(j4);
IkReal x12983=(cj5*r00);
IkReal x12984=(cj5*r20);
IkReal x12985=(cj5*r10);
IkReal x12986=((1.0)*x12981);
IkReal x12987=((1.0)*x12982);
IkReal x12988=(sj5*x12981);
IkReal x12989=(sj5*x12982);
evalcond[0]=(((r22*x12982))+((r21*x12988))+(((-1.0)*x12984*x12986)));
evalcond[1]=(((r11*x12988))+((r12*x12982))+(((-1.0)*x12985*x12986)));
evalcond[2]=((((-1.0)*r22*x12986))+((r21*x12989))+(((-1.0)*x12984*x12987)));
evalcond[3]=((((-1.0)*x12983*x12987))+((r01*x12989))+(((-1.0)*r02*x12986)));
evalcond[4]=((-1.0)+(((-1.0)*x12983*x12986))+((r01*x12988))+((r02*x12982)));
evalcond[5]=((1.0)+((r11*x12989))+(((-1.0)*r12*x12986))+(((-1.0)*x12985*x12987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12990=((1.0)*cj5);
CheckValue<IkReal> x12991=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12990))+(((-1.0)*r20*sj5)))),-1);
if(!x12991.valid){
continue;
}
CheckValue<IkReal> x12992 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12990))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12992.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12991.value)))+(x12992.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12993=IKcos(j4);
IkReal x12994=IKsin(j4);
IkReal x12995=(cj5*r00);
IkReal x12996=(cj5*r20);
IkReal x12997=(cj5*r10);
IkReal x12998=((1.0)*x12993);
IkReal x12999=((1.0)*x12994);
IkReal x13000=(sj5*x12993);
IkReal x13001=(sj5*x12994);
evalcond[0]=(((r22*x12994))+(((-1.0)*x12996*x12998))+((r21*x13000)));
evalcond[1]=((((-1.0)*x12997*x12998))+((r12*x12994))+((r11*x13000)));
evalcond[2]=((((-1.0)*r22*x12998))+(((-1.0)*x12996*x12999))+((r21*x13001)));
evalcond[3]=((((-1.0)*r02*x12998))+((r01*x13001))+(((-1.0)*x12995*x12999)));
evalcond[4]=((-1.0)+((r02*x12994))+((r01*x13000))+(((-1.0)*x12995*x12998)));
evalcond[5]=((1.0)+(((-1.0)*x12997*x12999))+(((-1.0)*r12*x12998))+((r11*x13001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13002 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13002.valid){
continue;
}
CheckValue<IkReal> x13003=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13003.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13002.value)+(((1.5707963267949)*(x13003.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13004=IKcos(j4);
IkReal x13005=IKsin(j4);
IkReal x13006=(cj5*r00);
IkReal x13007=(cj5*r20);
IkReal x13008=(cj5*r10);
IkReal x13009=((1.0)*x13004);
IkReal x13010=((1.0)*x13005);
IkReal x13011=(sj5*x13004);
IkReal x13012=(sj5*x13005);
evalcond[0]=(((r21*x13011))+((r22*x13005))+(((-1.0)*x13007*x13009)));
evalcond[1]=((((-1.0)*x13008*x13009))+((r12*x13005))+((r11*x13011)));
evalcond[2]=(((r21*x13012))+(((-1.0)*r22*x13009))+(((-1.0)*x13007*x13010)));
evalcond[3]=(((r01*x13012))+(((-1.0)*r02*x13009))+(((-1.0)*x13006*x13010)));
evalcond[4]=((-1.0)+((r01*x13011))+((r02*x13005))+(((-1.0)*x13006*x13009)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13009))+(((-1.0)*x13008*x13010))+((r11*x13012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13013=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13013;
j4eval[1]=IKsign(x13013);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13014=((1.0)*cj5);
IkReal x13015=((((-1.0)*r10*sj5))+(((-1.0)*r11*x13014)));
j4eval[0]=x13015;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x13014))))));
j4eval[2]=IKsign(x13015);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13016=cj5*cj5;
IkReal x13017=(r11*r21);
IkReal x13018=((1.0)*r20);
IkReal x13019=(cj5*sj5);
IkReal x13020=(((x13016*x13017))+(((-1.0)*r12*r22))+(((-1.0)*r10*x13016*x13018))+((r11*r20*x13019))+(((-1.0)*x13017))+((r10*r21*x13019)));
j4eval[0]=x13020;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x13018)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13020);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13021=cj5*cj5;
IkReal x13022=(r21*sj5);
IkReal x13023=(r11*r21);
IkReal x13024=((1.0)*r20);
CheckValue<IkReal> x13025=IKPowWithIntegerCheck(IKsign((((cj5*r10*x13022))+(((-1.0)*r12*r22))+(((-1.0)*x13023))+((x13021*x13023))+(((-1.0)*r10*x13021*x13024))+((cj5*r11*r20*sj5)))),-1);
if(!x13025.valid){
continue;
}
CheckValue<IkReal> x13026 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13024))+x13022)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13025.value)))+(x13026.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13027=IKcos(j4);
IkReal x13028=IKsin(j4);
IkReal x13029=(cj5*r00);
IkReal x13030=(cj5*r20);
IkReal x13031=(cj5*r10);
IkReal x13032=((1.0)*x13027);
IkReal x13033=((1.0)*x13028);
IkReal x13034=(sj5*x13027);
IkReal x13035=(sj5*x13028);
evalcond[0]=((((-1.0)*x13030*x13032))+((r21*x13034))+((r22*x13028)));
evalcond[1]=((((-1.0)*x13031*x13032))+((r11*x13034))+((r12*x13028)));
evalcond[2]=((((-1.0)*x13030*x13033))+(((-1.0)*r22*x13032))+((r21*x13035)));
evalcond[3]=((((-1.0)*r02*x13032))+(((-1.0)*x13029*x13033))+((r01*x13035)));
evalcond[4]=((1.0)+(((-1.0)*x13029*x13032))+((r02*x13028))+((r01*x13034)));
evalcond[5]=((1.0)+(((-1.0)*x13031*x13033))+((r11*x13035))+(((-1.0)*r12*x13032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13036=((1.0)*cj5);
CheckValue<IkReal> x13037=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x13036)))),-1);
if(!x13037.valid){
continue;
}
CheckValue<IkReal> x13038 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x13036))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13038.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13037.value)))+(x13038.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13039=IKcos(j4);
IkReal x13040=IKsin(j4);
IkReal x13041=(cj5*r00);
IkReal x13042=(cj5*r20);
IkReal x13043=(cj5*r10);
IkReal x13044=((1.0)*x13039);
IkReal x13045=((1.0)*x13040);
IkReal x13046=(sj5*x13039);
IkReal x13047=(sj5*x13040);
evalcond[0]=(((r21*x13046))+((r22*x13040))+(((-1.0)*x13042*x13044)));
evalcond[1]=(((r11*x13046))+(((-1.0)*x13043*x13044))+((r12*x13040)));
evalcond[2]=(((r21*x13047))+(((-1.0)*r22*x13044))+(((-1.0)*x13042*x13045)));
evalcond[3]=((((-1.0)*r02*x13044))+((r01*x13047))+(((-1.0)*x13041*x13045)));
evalcond[4]=((1.0)+((r02*x13040))+((r01*x13046))+(((-1.0)*x13041*x13044)));
evalcond[5]=((1.0)+((r11*x13047))+(((-1.0)*x13043*x13045))+(((-1.0)*r12*x13044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13048=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13048.valid){
continue;
}
CheckValue<IkReal> x13049 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13049.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13048.value)))+(x13049.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13050=IKcos(j4);
IkReal x13051=IKsin(j4);
IkReal x13052=(cj5*r00);
IkReal x13053=(cj5*r20);
IkReal x13054=(cj5*r10);
IkReal x13055=((1.0)*x13050);
IkReal x13056=((1.0)*x13051);
IkReal x13057=(sj5*x13050);
IkReal x13058=(sj5*x13051);
evalcond[0]=(((r21*x13057))+((r22*x13051))+(((-1.0)*x13053*x13055)));
evalcond[1]=(((r12*x13051))+(((-1.0)*x13054*x13055))+((r11*x13057)));
evalcond[2]=(((r21*x13058))+(((-1.0)*r22*x13055))+(((-1.0)*x13053*x13056)));
evalcond[3]=((((-1.0)*r02*x13055))+((r01*x13058))+(((-1.0)*x13052*x13056)));
evalcond[4]=((1.0)+((r02*x13051))+((r01*x13057))+(((-1.0)*x13052*x13055)));
evalcond[5]=((1.0)+(((-1.0)*x13054*x13056))+(((-1.0)*r12*x13055))+((r11*x13058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13059=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13059;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13059);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13060=((1.0)*cj5);
IkReal x13061=((((-1.0)*r21*x13060))+(((-1.0)*r20*sj5)));
j4eval[0]=x13061;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x13060))))));
j4eval[2]=IKsign(x13061);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13062=cj5*cj5;
IkReal x13063=(r11*r21);
IkReal x13064=((1.0)*r20);
IkReal x13065=(cj5*sj5);
IkReal x13066=(((r10*r21*x13065))+(((-1.0)*x13063))+((r11*r20*x13065))+(((-1.0)*r12*r22))+(((-1.0)*r10*x13062*x13064))+((x13062*x13063)));
j4eval[0]=x13066;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x13064))))));
j4eval[2]=IKsign(x13066);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13067=cj5*cj5;
IkReal x13068=(r21*sj5);
IkReal x13069=(r11*r21);
IkReal x13070=((1.0)*r20);
CheckValue<IkReal> x13071=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13069))+(((-1.0)*r12*r22))+(((-1.0)*r10*x13067*x13070))+((cj5*r10*x13068))+((x13067*x13069))+((cj5*r11*r20*sj5)))),-1);
if(!x13071.valid){
continue;
}
CheckValue<IkReal> x13072 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13070))+x13068)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13071.value)))+(x13072.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13073=IKcos(j4);
IkReal x13074=IKsin(j4);
IkReal x13075=(cj5*r00);
IkReal x13076=(cj5*r20);
IkReal x13077=(cj5*r10);
IkReal x13078=((1.0)*x13073);
IkReal x13079=((1.0)*x13074);
IkReal x13080=(sj5*x13073);
IkReal x13081=(sj5*x13074);
evalcond[0]=((((-1.0)*x13076*x13078))+((r22*x13074))+((r21*x13080)));
evalcond[1]=(((r11*x13080))+((r12*x13074))+(((-1.0)*x13077*x13078)));
evalcond[2]=((((-1.0)*x13076*x13079))+(((-1.0)*r22*x13078))+((r21*x13081)));
evalcond[3]=((((-1.0)*r02*x13078))+(((-1.0)*x13075*x13079))+((r01*x13081)));
evalcond[4]=((-1.0)+((r02*x13074))+(((-1.0)*x13075*x13078))+((r01*x13080)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13078))+((r11*x13081))+(((-1.0)*x13077*x13079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13082=((1.0)*cj5);
CheckValue<IkReal> x13083 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x13082)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13083.valid){
continue;
}
CheckValue<IkReal> x13084=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13082))+(((-1.0)*r20*sj5)))),-1);
if(!x13084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13083.value)+(((1.5707963267949)*(x13084.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13085=IKcos(j4);
IkReal x13086=IKsin(j4);
IkReal x13087=(cj5*r00);
IkReal x13088=(cj5*r20);
IkReal x13089=(cj5*r10);
IkReal x13090=((1.0)*x13085);
IkReal x13091=((1.0)*x13086);
IkReal x13092=(sj5*x13085);
IkReal x13093=(sj5*x13086);
evalcond[0]=(((r22*x13086))+(((-1.0)*x13088*x13090))+((r21*x13092)));
evalcond[1]=(((r11*x13092))+((r12*x13086))+(((-1.0)*x13089*x13090)));
evalcond[2]=((((-1.0)*r22*x13090))+(((-1.0)*x13088*x13091))+((r21*x13093)));
evalcond[3]=((((-1.0)*x13087*x13091))+((r01*x13093))+(((-1.0)*r02*x13090)));
evalcond[4]=((-1.0)+((r02*x13086))+(((-1.0)*x13087*x13090))+((r01*x13092)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13090))+((r11*x13093))+(((-1.0)*x13089*x13091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13094 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13094.valid){
continue;
}
CheckValue<IkReal> x13095=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13094.value)+(((1.5707963267949)*(x13095.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13096=IKcos(j4);
IkReal x13097=IKsin(j4);
IkReal x13098=(cj5*r00);
IkReal x13099=(cj5*r20);
IkReal x13100=(cj5*r10);
IkReal x13101=((1.0)*x13096);
IkReal x13102=((1.0)*x13097);
IkReal x13103=(sj5*x13096);
IkReal x13104=(sj5*x13097);
evalcond[0]=((((-1.0)*x13099*x13101))+((r22*x13097))+((r21*x13103)));
evalcond[1]=((((-1.0)*x13100*x13101))+((r12*x13097))+((r11*x13103)));
evalcond[2]=((((-1.0)*x13099*x13102))+((r21*x13104))+(((-1.0)*r22*x13101)));
evalcond[3]=(((r01*x13104))+(((-1.0)*x13098*x13102))+(((-1.0)*r02*x13101)));
evalcond[4]=((-1.0)+((r02*x13097))+((r01*x13103))+(((-1.0)*x13098*x13101)));
evalcond[5]=((1.0)+(((-1.0)*x13100*x13102))+(((-1.0)*r12*x13101))+((r11*x13104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13105=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13105);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13105);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13106=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13106);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13106);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13107=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x13107)));
j4eval[1]=((((-1.0)*r00*x13107))+((r01*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13108=((1.0)*cj5);
CheckValue<IkReal> x13109=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x13108))),-1);
if(!x13109.valid){
continue;
}
CheckValue<IkReal> x13110=IKPowWithIntegerCheck(((((-1.0)*r00*x13108))+((r01*sj5))),-1);
if(!x13110.valid){
continue;
}
if( IKabs(((-1.0)*(x13109.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13110.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13109.value)))+IKsqr(((x13110.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13109.value)), ((x13110.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13111=IKsin(j4);
IkReal x13112=IKcos(j4);
IkReal x13113=((1.0)*cj5);
IkReal x13114=((1.0)*cj2);
IkReal x13115=(sj5*x13112);
IkReal x13116=(sj5*x13111);
evalcond[0]=((-1.0)*r22*x13112);
evalcond[1]=(((r22*x13111))+((sj1*sj2))+(((-1.0)*cj1*x13114)));
evalcond[2]=((((-1.0)*r00*x13111*x13113))+((r01*x13116)));
evalcond[3]=((((-1.0)*r10*x13112*x13113))+((r11*x13115)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13111*x13113))+((r11*x13116)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r00*x13112*x13113))+(((-1.0)*sj1*x13114))+((r01*x13115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13117=IKPowWithIntegerCheck(r22,-1);
if(!x13117.valid){
continue;
}
CheckValue<IkReal> x13118=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13118.valid){
continue;
}
if( IKabs(((x13117.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13118.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13117.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13118.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13117.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x13118.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13119=IKsin(j4);
IkReal x13120=IKcos(j4);
IkReal x13121=((1.0)*cj5);
IkReal x13122=((1.0)*cj2);
IkReal x13123=(sj5*x13120);
IkReal x13124=(sj5*x13119);
evalcond[0]=((-1.0)*r22*x13120);
evalcond[1]=(((r22*x13119))+(((-1.0)*cj1*x13122))+((sj1*sj2)));
evalcond[2]=(((r01*x13124))+(((-1.0)*r00*x13119*x13121)));
evalcond[3]=(((r11*x13123))+(((-1.0)*r10*x13120*x13121)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13119*x13121))+((r11*x13124)));
evalcond[5]=((((-1.0)*sj1*x13122))+(((-1.0)*cj1*sj2))+((r01*x13123))+(((-1.0)*r00*x13120*x13121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13125=(sj1*sj2);
IkReal x13126=(cj5*r10);
IkReal x13127=(r11*sj5);
IkReal x13128=(cj1*cj2);
CheckValue<IkReal> x13129=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x13129.valid){
continue;
}
CheckValue<IkReal> x13130 = IKatan2WithCheck(IkReal((((x13126*x13128))+(((-1.0)*x13127*x13128))+(((-1.0)*x13125*x13126))+((x13125*x13127)))),IkReal(((((-1.0)*r12*x13125))+((r12*x13128)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13129.value)))+(x13130.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13131=IKcos(j4);
IkReal x13132=IKsin(j4);
IkReal x13133=(cj5*r00);
IkReal x13134=(cj5*r10);
IkReal x13135=(r21*sj5);
IkReal x13136=((1.0)*cj2);
IkReal x13137=(cj5*r20);
IkReal x13138=((1.0)*x13131);
IkReal x13139=((1.0)*x13132);
IkReal x13140=(sj5*x13132);
IkReal x13141=(sj5*x13131);
evalcond[0]=((((-1.0)*x13134*x13138))+((r12*x13132))+((r11*x13141)));
evalcond[1]=(((x13132*x13135))+(((-1.0)*r22*x13138))+(((-1.0)*x13137*x13139)));
evalcond[2]=((((-1.0)*x13133*x13139))+((r01*x13140))+(((-1.0)*r02*x13138)));
evalcond[3]=((1.0)+(((-1.0)*x13134*x13139))+((r11*x13140))+(((-1.0)*r12*x13138)));
evalcond[4]=(((x13131*x13135))+(((-1.0)*cj1*x13136))+((sj1*sj2))+(((-1.0)*x13137*x13138))+((r22*x13132)));
evalcond[5]=((((-1.0)*x13133*x13138))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13136))+((r02*x13132))+((r01*x13141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13142=((1.0)*cj5);
CheckValue<IkReal> x13143 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13142))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13143.valid){
continue;
}
CheckValue<IkReal> x13144=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13142)))),-1);
if(!x13144.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13143.value)+(((1.5707963267949)*(x13144.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13145=IKcos(j4);
IkReal x13146=IKsin(j4);
IkReal x13147=(cj5*r00);
IkReal x13148=(cj5*r10);
IkReal x13149=(r21*sj5);
IkReal x13150=((1.0)*cj2);
IkReal x13151=(cj5*r20);
IkReal x13152=((1.0)*x13145);
IkReal x13153=((1.0)*x13146);
IkReal x13154=(sj5*x13146);
IkReal x13155=(sj5*x13145);
evalcond[0]=((((-1.0)*x13148*x13152))+((r12*x13146))+((r11*x13155)));
evalcond[1]=((((-1.0)*x13151*x13153))+((x13146*x13149))+(((-1.0)*r22*x13152)));
evalcond[2]=((((-1.0)*x13147*x13153))+(((-1.0)*r02*x13152))+((r01*x13154)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13152))+(((-1.0)*x13148*x13153))+((r11*x13154)));
evalcond[4]=((((-1.0)*x13151*x13152))+((r22*x13146))+((sj1*sj2))+((x13145*x13149))+(((-1.0)*cj1*x13150)));
evalcond[5]=((((-1.0)*sj1*x13150))+(((-1.0)*x13147*x13152))+(((-1.0)*cj1*sj2))+((r02*x13146))+((r01*x13155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13156=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13156.valid){
continue;
}
CheckValue<IkReal> x13157 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13157.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13156.value)))+(x13157.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13158=IKcos(j4);
IkReal x13159=IKsin(j4);
IkReal x13160=(cj5*r00);
IkReal x13161=(cj5*r10);
IkReal x13162=(r21*sj5);
IkReal x13163=((1.0)*cj2);
IkReal x13164=(cj5*r20);
IkReal x13165=((1.0)*x13158);
IkReal x13166=((1.0)*x13159);
IkReal x13167=(sj5*x13159);
IkReal x13168=(sj5*x13158);
evalcond[0]=((((-1.0)*x13161*x13165))+((r11*x13168))+((r12*x13159)));
evalcond[1]=((((-1.0)*x13164*x13166))+(((-1.0)*r22*x13165))+((x13159*x13162)));
evalcond[2]=((((-1.0)*x13160*x13166))+((r01*x13167))+(((-1.0)*r02*x13165)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13165))+(((-1.0)*x13161*x13166))+((r11*x13167)));
evalcond[4]=(((x13158*x13162))+(((-1.0)*cj1*x13163))+((sj1*sj2))+(((-1.0)*x13164*x13165))+((r22*x13159)));
evalcond[5]=(((r02*x13159))+(((-1.0)*x13160*x13165))+((r01*x13168))+(((-1.0)*sj1*x13163))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13169=((-1.0)*r00);
IkReal x13171 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13171)==0){
continue;
}
IkReal x13170=pow(x13171,-0.5);
CheckValue<IkReal> x13172 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13169),IKFAST_ATAN2_MAGTHRESH);
if(!x13172.valid){
continue;
}
IkReal gconst18=((-1.0)*(x13172.value));
IkReal gconst19=(r01*x13170);
IkReal gconst20=(x13169*x13170);
CheckValue<IkReal> x13173 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13173.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13173.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13174=((-1.0)*r00);
IkReal x13175=x13170;
CheckValue<IkReal> x13177 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13174),IKFAST_ATAN2_MAGTHRESH);
if(!x13177.valid){
continue;
}
IkReal x13176=((-1.0)*(x13177.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13176;
IkReal gconst18=x13176;
IkReal gconst19=(r01*x13175);
IkReal gconst20=(x13174*x13175);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13178=((-1.0)*r00);
IkReal x13179=x13170;
CheckValue<IkReal> x13181 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13178),IKFAST_ATAN2_MAGTHRESH);
if(!x13181.valid){
continue;
}
IkReal x13180=((-1.0)*(x13181.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13180;
IkReal gconst18=x13180;
IkReal gconst19=(r01*x13179);
IkReal gconst20=(x13178*x13179);
CheckValue<IkReal> x13189=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13189.valid){
continue;
}
IkReal x13182=x13189.value;
IkReal x13183=(sj3*x13182);
IkReal x13184=(r11*x13183);
IkReal x13185=(r21*x13183);
IkReal x13186=(r20*x13183);
IkReal x13187=(r10*x13183);
IkReal x13188=(r00*r01*x13183);
j4eval[0]=IKsign((((r00*r01*r20*x13184))+((r12*r22*sj3))+((r21*x13184*(r01*r01)))+((r10*x13186*(r00*r00)))+((r00*r01*r10*x13185))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13190=gconst19*gconst19;
IkReal x13191=gconst20*gconst20;
IkReal x13192=(gconst20*sj3);
IkReal x13193=((1.0)*cj3);
IkReal x13194=(r10*sj3);
IkReal x13195=(gconst19*r21);
IkReal x13196=(r11*r20);
IkReal x13197=(cj3*gconst20);
IkReal x13198=((1.0)*r10*r20);
IkReal x13199=(r21*x13190);
CheckValue<IkReal> x13200 = IKatan2WithCheck(IkReal((((gconst19*r22*x13194))+((r11*r22*x13192)))),IkReal((((r11*x13192*x13195))+(((-1.0)*gconst19*x13192*x13198))+(((-1.0)*sj3*x13191*x13196))+((x13194*x13199)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13200.valid){
continue;
}
CheckValue<IkReal> x13201=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x13193))+((r10*x13195*x13197))+(((-1.0)*r11*x13193*x13199))+((gconst19*x13196*x13197))+(((-1.0)*r10*r20*x13191*x13193)))),-1);
if(!x13201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13200.value)+(((1.5707963267949)*(x13201.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13202=IKsin(j4);
IkReal x13203=IKcos(j4);
IkReal x13204=(sj1*sj2);
IkReal x13205=(gconst20*sj3);
IkReal x13206=(gconst19*r21);
IkReal x13207=(gconst20*r10);
IkReal x13208=(cj3*gconst19);
IkReal x13209=(gconst19*sj3);
IkReal x13210=((1.0)*cj1);
IkReal x13211=(cj3*gconst20);
IkReal x13212=(cj2*sj1);
IkReal x13213=(cj2*x13210);
IkReal x13214=((1.0)*x13203);
IkReal x13215=((1.0)*x13202);
IkReal x13216=(cj3*x13202);
IkReal x13217=(gconst19*x13202);
evalcond[0]=(((x13202*x13206))+(((-1.0)*r22*x13214))+(((-1.0)*gconst20*r20*x13215)));
evalcond[1]=(((r01*x13217))+(((-1.0)*r02*x13214))+(((-1.0)*gconst20*r00*x13215)));
evalcond[2]=((1.0)+(((-1.0)*x13207*x13215))+((r11*x13217))+(((-1.0)*r12*x13214)));
evalcond[3]=(((r11*x13203*x13208))+(((-1.0)*cj3*x13207*x13214))+((r12*x13216))+((r10*x13209))+((r11*x13205)));
evalcond[4]=(((r10*x13208))+((r11*x13211))+(((-1.0)*r11*x13209*x13214))+((r10*x13203*x13205))+(((-1.0)*r12*sj3*x13215)));
evalcond[5]=((((-1.0)*r20*x13211*x13214))+((cj1*sj2))+((r21*x13205))+((cj3*x13203*x13206))+x13212+((r22*x13216))+((r20*x13209)));
evalcond[6]=(((r01*x13205))+((r00*x13209))+((r01*x13203*x13208))+(((-1.0)*x13213))+((r02*x13216))+x13204+(((-1.0)*r00*x13211*x13214)));
evalcond[7]=(((r21*x13211))+((r20*x13203*x13205))+(((-1.0)*x13213))+(((-1.0)*r22*sj3*x13215))+x13204+(((-1.0)*sj3*x13206*x13214))+((r20*x13208)));
evalcond[8]=((((-1.0)*x13212))+((r00*x13208))+((r01*x13211))+(((-1.0)*r02*sj3*x13215))+(((-1.0)*sj2*x13210))+(((-1.0)*r01*x13209*x13214))+((r00*x13203*x13205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13218=gconst19*gconst19;
IkReal x13219=gconst20*gconst20;
IkReal x13220=(r21*sj3);
IkReal x13221=(cj3*r11);
IkReal x13222=(gconst19*gconst20);
IkReal x13223=((1.0)*r10);
IkReal x13224=(cj3*r10);
IkReal x13225=(r20*x13219);
CheckValue<IkReal> x13226 = IKatan2WithCheck(IkReal((((gconst19*r22*x13224))+((gconst20*r22*x13221)))),IkReal((((r21*x13221*x13222))+(((-1.0)*x13221*x13225))+(((-1.0)*cj3*r20*x13222*x13223))+((r21*x13218*x13224)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13226.valid){
continue;
}
CheckValue<IkReal> x13227=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13220*x13222*x13223))+((r10*sj3*x13225))+((r12*r22*sj3))+(((-1.0)*r11*r20*sj3*x13222))+((r11*x13218*x13220)))),-1);
if(!x13227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13226.value)+(((1.5707963267949)*(x13227.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13228=IKsin(j4);
IkReal x13229=IKcos(j4);
IkReal x13230=(sj1*sj2);
IkReal x13231=(gconst20*sj3);
IkReal x13232=(gconst19*r21);
IkReal x13233=(gconst20*r10);
IkReal x13234=(cj3*gconst19);
IkReal x13235=(gconst19*sj3);
IkReal x13236=((1.0)*cj1);
IkReal x13237=(cj3*gconst20);
IkReal x13238=(cj2*sj1);
IkReal x13239=(cj2*x13236);
IkReal x13240=((1.0)*x13229);
IkReal x13241=((1.0)*x13228);
IkReal x13242=(cj3*x13228);
IkReal x13243=(gconst19*x13228);
evalcond[0]=(((x13228*x13232))+(((-1.0)*r22*x13240))+(((-1.0)*gconst20*r20*x13241)));
evalcond[1]=((((-1.0)*r02*x13240))+((r01*x13243))+(((-1.0)*gconst20*r00*x13241)));
evalcond[2]=((1.0)+(((-1.0)*x13233*x13241))+((r11*x13243))+(((-1.0)*r12*x13240)));
evalcond[3]=(((r10*x13235))+(((-1.0)*cj3*x13233*x13240))+((r11*x13231))+((r12*x13242))+((r11*x13229*x13234)));
evalcond[4]=(((r10*x13234))+(((-1.0)*r11*x13235*x13240))+((r11*x13237))+(((-1.0)*r12*sj3*x13241))+((r10*x13229*x13231)));
evalcond[5]=(((r20*x13235))+((cj3*x13229*x13232))+((cj1*sj2))+((r22*x13242))+((r21*x13231))+(((-1.0)*r20*x13237*x13240))+x13238);
evalcond[6]=(((r01*x13231))+((r02*x13242))+((r01*x13229*x13234))+(((-1.0)*r00*x13237*x13240))+x13230+(((-1.0)*x13239))+((r00*x13235)));
evalcond[7]=(((r20*x13234))+(((-1.0)*r22*sj3*x13241))+(((-1.0)*sj3*x13232*x13240))+((r21*x13237))+x13230+((r20*x13229*x13231))+(((-1.0)*x13239)));
evalcond[8]=(((r01*x13237))+(((-1.0)*r02*sj3*x13241))+(((-1.0)*r01*x13235*x13240))+((r00*x13229*x13231))+(((-1.0)*x13238))+(((-1.0)*sj2*x13236))+((r00*x13234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13244 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13244.valid){
continue;
}
CheckValue<IkReal> x13245=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13245.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13244.value)+(((1.5707963267949)*(x13245.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13246=IKsin(j4);
IkReal x13247=IKcos(j4);
IkReal x13248=(sj1*sj2);
IkReal x13249=(gconst20*sj3);
IkReal x13250=(gconst19*r21);
IkReal x13251=(gconst20*r10);
IkReal x13252=(cj3*gconst19);
IkReal x13253=(gconst19*sj3);
IkReal x13254=((1.0)*cj1);
IkReal x13255=(cj3*gconst20);
IkReal x13256=(cj2*sj1);
IkReal x13257=(cj2*x13254);
IkReal x13258=((1.0)*x13247);
IkReal x13259=((1.0)*x13246);
IkReal x13260=(cj3*x13246);
IkReal x13261=(gconst19*x13246);
evalcond[0]=(((x13246*x13250))+(((-1.0)*r22*x13258))+(((-1.0)*gconst20*r20*x13259)));
evalcond[1]=((((-1.0)*r02*x13258))+((r01*x13261))+(((-1.0)*gconst20*r00*x13259)));
evalcond[2]=((1.0)+((r11*x13261))+(((-1.0)*x13251*x13259))+(((-1.0)*r12*x13258)));
evalcond[3]=(((r10*x13253))+((r12*x13260))+(((-1.0)*cj3*x13251*x13258))+((r11*x13247*x13252))+((r11*x13249)));
evalcond[4]=(((r10*x13252))+((r10*x13247*x13249))+(((-1.0)*r12*sj3*x13259))+((r11*x13255))+(((-1.0)*r11*x13253*x13258)));
evalcond[5]=(((r21*x13249))+((cj1*sj2))+((cj3*x13247*x13250))+(((-1.0)*r20*x13255*x13258))+((r22*x13260))+x13256+((r20*x13253)));
evalcond[6]=(((r01*x13247*x13252))+((r01*x13249))+((r00*x13253))+(((-1.0)*r00*x13255*x13258))+((r02*x13260))+(((-1.0)*x13257))+x13248);
evalcond[7]=(((r21*x13255))+(((-1.0)*r22*sj3*x13259))+((r20*x13247*x13249))+(((-1.0)*x13257))+x13248+((r20*x13252))+(((-1.0)*sj3*x13250*x13258)));
evalcond[8]=((((-1.0)*x13256))+(((-1.0)*r02*sj3*x13259))+((r00*x13247*x13249))+((r01*x13255))+(((-1.0)*r01*x13253*x13258))+((r00*x13252))+(((-1.0)*sj2*x13254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13262=((-1.0)*r01);
IkReal x13264 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13264)==0){
continue;
}
IkReal x13263=pow(x13264,-0.5);
CheckValue<IkReal> x13265 = IKatan2WithCheck(IkReal(x13262),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13265.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x13265.value))));
IkReal gconst22=(x13262*x13263);
IkReal gconst23=((1.0)*r00*x13263);
CheckValue<IkReal> x13266 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13266.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13266.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13267=((-1.0)*r01);
CheckValue<IkReal> x13270 = IKatan2WithCheck(IkReal(x13267),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13270.valid){
continue;
}
IkReal x13268=((1.0)*(x13270.value));
IkReal x13269=x13263;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13268)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13268)));
IkReal gconst22=(x13267*x13269);
IkReal gconst23=((1.0)*r00*x13269);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13271=((-1.0)*r01);
CheckValue<IkReal> x13274 = IKatan2WithCheck(IkReal(x13271),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13274.valid){
continue;
}
IkReal x13272=((1.0)*(x13274.value));
IkReal x13273=x13263;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13272)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13272)));
IkReal gconst22=(x13271*x13273);
IkReal gconst23=((1.0)*r00*x13273);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13275=gconst22*gconst22;
IkReal x13276=gconst23*gconst23;
IkReal x13277=(r21*sj3);
IkReal x13278=((1.0)*cj3);
IkReal x13279=(gconst23*r11);
IkReal x13280=(r22*sj3);
IkReal x13281=(gconst22*r10);
IkReal x13282=((1.0)*r20*sj3);
CheckValue<IkReal> x13283 = IKatan2WithCheck(IkReal((((x13280*x13281))+((x13279*x13280)))),IkReal((((gconst22*x13277*x13279))+((r10*x13275*x13277))+(((-1.0)*gconst23*x13281*x13282))+(((-1.0)*r11*x13276*x13282)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13283.valid){
continue;
}
CheckValue<IkReal> x13284=IKPowWithIntegerCheck(IKsign((((cj3*gconst23*r21*x13281))+(((-1.0)*r10*r20*x13276*x13278))+(((-1.0)*r12*r22*x13278))+(((-1.0)*r11*r21*x13275*x13278))+((cj3*gconst22*r20*x13279)))),-1);
if(!x13284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13283.value)+(((1.5707963267949)*(x13284.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13285=IKsin(j4);
IkReal x13286=IKcos(j4);
IkReal x13287=(sj1*sj2);
IkReal x13288=(gconst23*sj3);
IkReal x13289=(gconst22*sj3);
IkReal x13290=(cj2*sj1);
IkReal x13291=((1.0)*cj1);
IkReal x13292=(cj3*gconst23);
IkReal x13293=(cj3*gconst22);
IkReal x13294=(cj2*x13291);
IkReal x13295=((1.0)*x13286);
IkReal x13296=(cj3*x13285);
IkReal x13297=(gconst22*x13285);
IkReal x13298=((1.0)*sj3*x13285);
IkReal x13299=(x13286*x13293);
IkReal x13300=((1.0)*gconst23*x13285);
evalcond[0]=((((-1.0)*r20*x13300))+(((-1.0)*r22*x13295))+((r21*x13297)));
evalcond[1]=((((-1.0)*r02*x13295))+(((-1.0)*r00*x13300))+((r01*x13297)));
evalcond[2]=((1.0)+(((-1.0)*r10*x13300))+((r11*x13297))+(((-1.0)*r12*x13295)));
evalcond[3]=(((r11*x13299))+((r12*x13296))+((r11*x13288))+(((-1.0)*r10*x13292*x13295))+((r10*x13289)));
evalcond[4]=(((r11*x13292))+(((-1.0)*r11*x13289*x13295))+((r10*x13293))+(((-1.0)*r12*x13298))+((r10*x13286*x13288)));
evalcond[5]=(((r20*x13289))+((cj1*sj2))+(((-1.0)*r20*x13292*x13295))+((r22*x13296))+((r21*x13288))+x13290+((r21*x13299)));
evalcond[6]=((((-1.0)*r00*x13292*x13295))+((r02*x13296))+x13287+((r01*x13288))+((r00*x13289))+(((-1.0)*x13294))+((r01*x13299)));
evalcond[7]=(((r20*x13293))+(((-1.0)*r21*x13289*x13295))+x13287+(((-1.0)*r22*x13298))+((r20*x13286*x13288))+(((-1.0)*x13294))+((r21*x13292)));
evalcond[8]=((((-1.0)*r01*x13289*x13295))+(((-1.0)*x13290))+(((-1.0)*r02*x13298))+(((-1.0)*sj2*x13291))+((r00*x13286*x13288))+((r00*x13293))+((r01*x13292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13301=((1.0)*gconst23);
CheckValue<IkReal> x13302=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13301))+(((-1.0)*gconst22*r00)))),-1);
if(!x13302.valid){
continue;
}
CheckValue<IkReal> x13303 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13301))+((gconst22*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13302.value)))+(x13303.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13304=IKsin(j4);
IkReal x13305=IKcos(j4);
IkReal x13306=(sj1*sj2);
IkReal x13307=(gconst23*sj3);
IkReal x13308=(gconst22*sj3);
IkReal x13309=(cj2*sj1);
IkReal x13310=((1.0)*cj1);
IkReal x13311=(cj3*gconst23);
IkReal x13312=(cj3*gconst22);
IkReal x13313=(cj2*x13310);
IkReal x13314=((1.0)*x13305);
IkReal x13315=(cj3*x13304);
IkReal x13316=(gconst22*x13304);
IkReal x13317=((1.0)*sj3*x13304);
IkReal x13318=(x13305*x13312);
IkReal x13319=((1.0)*gconst23*x13304);
evalcond[0]=((((-1.0)*r20*x13319))+((r21*x13316))+(((-1.0)*r22*x13314)));
evalcond[1]=(((r01*x13316))+(((-1.0)*r02*x13314))+(((-1.0)*r00*x13319)));
evalcond[2]=((1.0)+((r11*x13316))+(((-1.0)*r10*x13319))+(((-1.0)*r12*x13314)));
evalcond[3]=(((r11*x13318))+((r10*x13308))+(((-1.0)*r10*x13311*x13314))+((r11*x13307))+((r12*x13315)));
evalcond[4]=(((r11*x13311))+((r10*x13312))+((r10*x13305*x13307))+(((-1.0)*r11*x13308*x13314))+(((-1.0)*r12*x13317)));
evalcond[5]=(((r21*x13307))+(((-1.0)*r20*x13311*x13314))+((r20*x13308))+((cj1*sj2))+((r22*x13315))+((r21*x13318))+x13309);
evalcond[6]=((((-1.0)*r00*x13311*x13314))+((r01*x13318))+((r00*x13308))+((r01*x13307))+(((-1.0)*x13313))+x13306+((r02*x13315)));
evalcond[7]=(((r20*x13312))+(((-1.0)*r21*x13308*x13314))+(((-1.0)*x13313))+((r21*x13311))+((r20*x13305*x13307))+x13306+(((-1.0)*r22*x13317)));
evalcond[8]=((((-1.0)*sj2*x13310))+((r01*x13311))+((r00*x13312))+(((-1.0)*r02*x13317))+((r00*x13305*x13307))+(((-1.0)*r01*x13308*x13314))+(((-1.0)*x13309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13320=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x13320.valid){
continue;
}
CheckValue<IkReal> x13321 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst22*r01))+(((-1.0)*gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13321.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13320.value)))+(x13321.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13322=IKsin(j4);
IkReal x13323=IKcos(j4);
IkReal x13324=(sj1*sj2);
IkReal x13325=(gconst23*sj3);
IkReal x13326=(gconst22*sj3);
IkReal x13327=(cj2*sj1);
IkReal x13328=((1.0)*cj1);
IkReal x13329=(cj3*gconst23);
IkReal x13330=(cj3*gconst22);
IkReal x13331=(cj2*x13328);
IkReal x13332=((1.0)*x13323);
IkReal x13333=(cj3*x13322);
IkReal x13334=(gconst22*x13322);
IkReal x13335=((1.0)*sj3*x13322);
IkReal x13336=(x13323*x13330);
IkReal x13337=((1.0)*gconst23*x13322);
evalcond[0]=((((-1.0)*r22*x13332))+((r21*x13334))+(((-1.0)*r20*x13337)));
evalcond[1]=((((-1.0)*r00*x13337))+((r01*x13334))+(((-1.0)*r02*x13332)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13332))+(((-1.0)*r10*x13337))+((r11*x13334)));
evalcond[3]=(((r10*x13326))+(((-1.0)*r10*x13329*x13332))+((r11*x13325))+((r12*x13333))+((r11*x13336)));
evalcond[4]=((((-1.0)*r11*x13326*x13332))+((r10*x13330))+(((-1.0)*r12*x13335))+((r10*x13323*x13325))+((r11*x13329)));
evalcond[5]=(((r22*x13333))+((cj1*sj2))+((r20*x13326))+(((-1.0)*r20*x13329*x13332))+((r21*x13336))+((r21*x13325))+x13327);
evalcond[6]=((((-1.0)*x13331))+((r02*x13333))+(((-1.0)*r00*x13329*x13332))+((r01*x13336))+((r00*x13326))+((r01*x13325))+x13324);
evalcond[7]=((((-1.0)*x13331))+(((-1.0)*r22*x13335))+((r20*x13323*x13325))+((r20*x13330))+(((-1.0)*r21*x13326*x13332))+((r21*x13329))+x13324);
evalcond[8]=((((-1.0)*x13327))+((r00*x13330))+((r01*x13329))+(((-1.0)*r01*x13326*x13332))+((r00*x13323*x13325))+(((-1.0)*sj2*x13328))+(((-1.0)*r02*x13335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13339 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13339)==0){
continue;
}
IkReal x13338=pow(x13339,-0.5);
CheckValue<IkReal> x13340 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13340.valid){
continue;
}
IkReal gconst24=((-1.0)*(x13340.value));
IkReal gconst25=((-1.0)*r21*x13338);
IkReal gconst26=(r20*x13338);
CheckValue<IkReal> x13341 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13341.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13341.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13344 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13344.valid){
continue;
}
IkReal x13342=((-1.0)*(x13344.value));
IkReal x13343=x13338;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13342;
IkReal gconst24=x13342;
IkReal gconst25=((-1.0)*r21*x13343);
IkReal gconst26=(r20*x13343);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13347 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13347.valid){
continue;
}
IkReal x13345=((-1.0)*(x13347.value));
IkReal x13346=x13338;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13345;
IkReal gconst24=x13345;
IkReal gconst25=((-1.0)*r21*x13346);
IkReal gconst26=(r20*x13346);
CheckValue<IkReal> x13355=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13355.valid){
continue;
}
IkReal x13348=x13355.value;
IkReal x13349=(sj3*x13348);
IkReal x13350=(r11*x13349);
IkReal x13351=(r00*x13349);
IkReal x13352=(r01*x13349);
IkReal x13353=(r10*x13349);
IkReal x13354=(r20*r21*x13349);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x13352))+((r00*r20*r21*x13350))+((r10*x13351*(r20*r20)))+((r01*x13350*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13356=gconst25*gconst25;
IkReal x13357=gconst26*gconst26;
IkReal x13358=(r00*r11);
IkReal x13359=(r01*r10);
IkReal x13360=(r02*sj3);
IkReal x13361=(gconst25*r10);
IkReal x13362=(gconst26*r11);
IkReal x13363=((1.0)*sj3);
IkReal x13364=((1.0)*cj3);
IkReal x13365=(cj3*gconst25*gconst26);
CheckValue<IkReal> x13366=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*r10*x13357*x13364))+(((-1.0)*r02*r12*x13364))+((x13358*x13365))+((x13359*x13365))+(((-1.0)*r01*r11*x13356*x13364)))),-1);
if(!x13366.valid){
continue;
}
CheckValue<IkReal> x13367 = IKatan2WithCheck(IkReal((((x13360*x13361))+((x13360*x13362)))),IkReal(((((-1.0)*x13357*x13358*x13363))+((sj3*x13356*x13359))+((gconst25*r01*sj3*x13362))+(((-1.0)*gconst26*r00*x13361*x13363)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13367.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13366.value)))+(x13367.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13368=IKsin(j4);
IkReal x13369=IKcos(j4);
IkReal x13370=(sj1*sj2);
IkReal x13371=(gconst26*sj3);
IkReal x13372=(gconst25*sj3);
IkReal x13373=(gconst26*r10);
IkReal x13374=(gconst25*r11);
IkReal x13375=(cj3*gconst25);
IkReal x13376=((1.0)*cj2);
IkReal x13377=(cj1*sj2);
IkReal x13378=(gconst26*r00);
IkReal x13379=(gconst26*r20);
IkReal x13380=(cj3*gconst26);
IkReal x13381=(cj1*x13376);
IkReal x13382=((1.0)*x13369);
IkReal x13383=((1.0)*x13368);
IkReal x13384=(cj3*x13368);
IkReal x13385=(gconst25*x13368);
evalcond[0]=((((-1.0)*r22*x13382))+(((-1.0)*x13379*x13383))+((r21*x13385)));
evalcond[1]=(((r01*x13385))+(((-1.0)*x13378*x13383))+(((-1.0)*r02*x13382)));
evalcond[2]=((1.0)+(((-1.0)*x13373*x13383))+((x13368*x13374))+(((-1.0)*r12*x13382)));
evalcond[3]=(((r10*x13372))+((r11*x13371))+((r12*x13384))+((cj3*x13369*x13374))+(((-1.0)*cj3*x13373*x13382)));
evalcond[4]=(((r10*x13375))+((r11*x13380))+((r10*x13369*x13371))+(((-1.0)*r11*x13372*x13382))+(((-1.0)*r12*sj3*x13383)));
evalcond[5]=(((cj2*sj1))+((r21*x13369*x13375))+((r20*x13372))+(((-1.0)*cj3*x13379*x13382))+((r22*x13384))+((r21*x13371))+x13377);
evalcond[6]=((((-1.0)*cj3*x13378*x13382))+((r00*x13372))+((r01*x13371))+(((-1.0)*x13381))+((r01*x13369*x13375))+((r02*x13384))+x13370);
evalcond[7]=((((-1.0)*r21*x13372*x13382))+((r20*x13375))+(((-1.0)*r22*sj3*x13383))+(((-1.0)*x13381))+((r20*x13369*x13371))+x13370+((r21*x13380)));
evalcond[8]=((((-1.0)*r02*sj3*x13383))+(((-1.0)*sj1*x13376))+((r00*x13375))+((r01*x13380))+(((-1.0)*r01*x13372*x13382))+((r00*x13369*x13371))+(((-1.0)*x13377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13386=gconst26*gconst26;
IkReal x13387=gconst25*gconst25;
IkReal x13388=(r01*r10);
IkReal x13389=(cj3*r11);
IkReal x13390=(gconst25*gconst26);
IkReal x13391=(cj3*r10);
IkReal x13392=(r00*x13386);
IkReal x13393=((1.0)*sj3*x13390);
CheckValue<IkReal> x13394 = IKatan2WithCheck(IkReal((((gconst26*r02*x13389))+((gconst25*r02*x13391)))),IkReal((((r01*x13389*x13390))+(((-1.0)*r00*x13390*x13391))+((cj3*x13387*x13388))+(((-1.0)*x13389*x13392)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13394.valid){
continue;
}
CheckValue<IkReal> x13395=IKPowWithIntegerCheck(IKsign((((r10*sj3*x13392))+((r02*r12*sj3))+((r01*r11*sj3*x13387))+(((-1.0)*x13388*x13393))+(((-1.0)*r00*r11*x13393)))),-1);
if(!x13395.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13394.value)+(((1.5707963267949)*(x13395.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13396=IKsin(j4);
IkReal x13397=IKcos(j4);
IkReal x13398=(sj1*sj2);
IkReal x13399=(gconst26*sj3);
IkReal x13400=(gconst25*sj3);
IkReal x13401=(gconst26*r10);
IkReal x13402=(gconst25*r11);
IkReal x13403=(cj3*gconst25);
IkReal x13404=((1.0)*cj2);
IkReal x13405=(cj1*sj2);
IkReal x13406=(gconst26*r00);
IkReal x13407=(gconst26*r20);
IkReal x13408=(cj3*gconst26);
IkReal x13409=(cj1*x13404);
IkReal x13410=((1.0)*x13397);
IkReal x13411=((1.0)*x13396);
IkReal x13412=(cj3*x13396);
IkReal x13413=(gconst25*x13396);
evalcond[0]=((((-1.0)*r22*x13410))+(((-1.0)*x13407*x13411))+((r21*x13413)));
evalcond[1]=((((-1.0)*r02*x13410))+(((-1.0)*x13406*x13411))+((r01*x13413)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13410))+(((-1.0)*x13401*x13411))+((x13396*x13402)));
evalcond[3]=(((r11*x13399))+((r10*x13400))+((cj3*x13397*x13402))+(((-1.0)*cj3*x13401*x13410))+((r12*x13412)));
evalcond[4]=(((r10*x13397*x13399))+((r11*x13408))+((r10*x13403))+(((-1.0)*r11*x13400*x13410))+(((-1.0)*r12*sj3*x13411)));
evalcond[5]=(x13405+(((-1.0)*cj3*x13407*x13410))+((r22*x13412))+((cj2*sj1))+((r21*x13399))+((r21*x13397*x13403))+((r20*x13400)));
evalcond[6]=(((r02*x13412))+(((-1.0)*cj3*x13406*x13410))+((r00*x13400))+(((-1.0)*x13409))+((r01*x13399))+x13398+((r01*x13397*x13403)));
evalcond[7]=(((r21*x13408))+(((-1.0)*x13409))+(((-1.0)*r22*sj3*x13411))+((r20*x13397*x13399))+(((-1.0)*r21*x13400*x13410))+((r20*x13403))+x13398);
evalcond[8]=(((r01*x13408))+((r00*x13403))+(((-1.0)*sj1*x13404))+(((-1.0)*r01*x13400*x13410))+((r00*x13397*x13399))+(((-1.0)*x13405))+(((-1.0)*r02*sj3*x13411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13414=((1.0)*gconst26);
CheckValue<IkReal> x13415=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13414))+(((-1.0)*gconst25*r00)))),-1);
if(!x13415.valid){
continue;
}
CheckValue<IkReal> x13416 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13414))+((gconst25*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13415.value)))+(x13416.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13417=IKsin(j4);
IkReal x13418=IKcos(j4);
IkReal x13419=(sj1*sj2);
IkReal x13420=(gconst26*sj3);
IkReal x13421=(gconst25*sj3);
IkReal x13422=(gconst26*r10);
IkReal x13423=(gconst25*r11);
IkReal x13424=(cj3*gconst25);
IkReal x13425=((1.0)*cj2);
IkReal x13426=(cj1*sj2);
IkReal x13427=(gconst26*r00);
IkReal x13428=(gconst26*r20);
IkReal x13429=(cj3*gconst26);
IkReal x13430=(cj1*x13425);
IkReal x13431=((1.0)*x13418);
IkReal x13432=((1.0)*x13417);
IkReal x13433=(cj3*x13417);
IkReal x13434=(gconst25*x13417);
evalcond[0]=((((-1.0)*r22*x13431))+(((-1.0)*x13428*x13432))+((r21*x13434)));
evalcond[1]=(((r01*x13434))+(((-1.0)*x13427*x13432))+(((-1.0)*r02*x13431)));
evalcond[2]=((1.0)+((x13417*x13423))+(((-1.0)*r12*x13431))+(((-1.0)*x13422*x13432)));
evalcond[3]=((((-1.0)*cj3*x13422*x13431))+((cj3*x13418*x13423))+((r11*x13420))+((r12*x13433))+((r10*x13421)));
evalcond[4]=(((r10*x13418*x13420))+(((-1.0)*r11*x13421*x13431))+((r11*x13429))+(((-1.0)*r12*sj3*x13432))+((r10*x13424)));
evalcond[5]=(x13426+((cj2*sj1))+((r21*x13418*x13424))+((r22*x13433))+((r21*x13420))+(((-1.0)*cj3*x13428*x13431))+((r20*x13421)));
evalcond[6]=(x13419+(((-1.0)*cj3*x13427*x13431))+((r01*x13418*x13424))+(((-1.0)*x13430))+((r02*x13433))+((r00*x13421))+((r01*x13420)));
evalcond[7]=(x13419+(((-1.0)*r21*x13421*x13431))+(((-1.0)*x13430))+((r21*x13429))+((r20*x13418*x13420))+(((-1.0)*r22*sj3*x13432))+((r20*x13424)));
evalcond[8]=((((-1.0)*x13426))+(((-1.0)*sj1*x13425))+(((-1.0)*r02*sj3*x13432))+((r00*x13418*x13420))+((r00*x13424))+((r01*x13429))+(((-1.0)*r01*x13421*x13431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13436 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13436)==0){
continue;
}
IkReal x13435=pow(x13436,-0.5);
CheckValue<IkReal> x13437 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13437.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x13437.value))));
IkReal gconst28=((1.0)*r21*x13435);
IkReal gconst29=((-1.0)*r20*x13435);
CheckValue<IkReal> x13438 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13438.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13438.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13441 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13441.valid){
continue;
}
IkReal x13439=((1.0)*(x13441.value));
IkReal x13440=x13435;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13439)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13439)));
IkReal gconst28=((1.0)*r21*x13440);
IkReal gconst29=((-1.0)*r20*x13440);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13444 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13444.valid){
continue;
}
IkReal x13442=((1.0)*(x13444.value));
IkReal x13443=x13435;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13442)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13442)));
IkReal gconst28=((1.0)*r21*x13443);
IkReal gconst29=((-1.0)*r20*x13443);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13447 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13447.valid){
continue;
}
IkReal x13445=((1.0)*(x13447.value));
IkReal x13446=x13435;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13445)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13445)));
IkReal gconst28=((1.0)*r21*x13446);
IkReal gconst29=((-1.0)*r20*x13446);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13450 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13450.valid){
continue;
}
IkReal x13448=((1.0)*(x13450.value));
IkReal x13449=x13435;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13448)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13448)));
IkReal gconst28=((1.0)*r21*x13449);
IkReal gconst29=((-1.0)*r20*x13449);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13453 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13453.valid){
continue;
}
IkReal x13451=((1.0)*(x13453.value));
IkReal x13452=x13435;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13451)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13451)));
IkReal gconst28=((1.0)*r21*x13452);
IkReal gconst29=((-1.0)*r20*x13452);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13456 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13456.valid){
continue;
}
IkReal x13454=((1.0)*(x13456.value));
IkReal x13455=x13435;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13454)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13454)));
IkReal gconst28=((1.0)*r21*x13455);
IkReal gconst29=((-1.0)*r20*x13455);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13457=(gconst29*r10);
IkReal x13458=(gconst28*r11);
CheckValue<IkReal> x13459=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x13458*x13458)+(x13457*x13457)+(((-2.0)*x13457*x13458)))),-1);
if(!x13459.valid){
continue;
}
CheckValue<IkReal> x13460 = IKatan2WithCheck(IkReal((x13457+(((-1.0)*x13458)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13460.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13459.value)))+(x13460.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13461=IKsin(j4);
IkReal x13462=IKcos(j4);
IkReal x13463=(gconst28*r11);
IkReal x13464=((1.0)*cj2);
IkReal x13465=((1.0)*x13462);
IkReal x13466=(gconst29*x13462);
IkReal x13467=(gconst28*x13461);
IkReal x13468=((1.0)*x13461);
IkReal x13469=(gconst29*x13468);
evalcond[0]=((((-1.0)*r22*x13465))+((r21*x13467))+(((-1.0)*r20*x13469)));
evalcond[1]=((((-1.0)*r00*x13469))+(((-1.0)*r02*x13465))+((r01*x13467)));
evalcond[2]=((((-1.0)*x13463*x13465))+((r10*x13466))+(((-1.0)*r12*x13468)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13469))+((x13461*x13463))+(((-1.0)*r12*x13465)));
evalcond[4]=(((r20*x13466))+(((-1.0)*r22*x13468))+(((-1.0)*cj1*x13464))+((sj1*sj2))+(((-1.0)*gconst28*r21*x13465)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13464))+(((-1.0)*gconst28*r01*x13465))+(((-1.0)*r02*x13468))+((r00*x13466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13470=((1.0)*gconst29);
CheckValue<IkReal> x13471 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13470))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13471.valid){
continue;
}
CheckValue<IkReal> x13472=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13470)))),-1);
if(!x13472.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13471.value)+(((1.5707963267949)*(x13472.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13473=IKsin(j4);
IkReal x13474=IKcos(j4);
IkReal x13475=(gconst28*r11);
IkReal x13476=((1.0)*cj2);
IkReal x13477=((1.0)*x13474);
IkReal x13478=(gconst29*x13474);
IkReal x13479=(gconst28*x13473);
IkReal x13480=((1.0)*x13473);
IkReal x13481=(gconst29*x13480);
evalcond[0]=((((-1.0)*r20*x13481))+((r21*x13479))+(((-1.0)*r22*x13477)));
evalcond[1]=((((-1.0)*r00*x13481))+((r01*x13479))+(((-1.0)*r02*x13477)));
evalcond[2]=((((-1.0)*r12*x13480))+((r10*x13478))+(((-1.0)*x13475*x13477)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13481))+(((-1.0)*r12*x13477))+((x13473*x13475)));
evalcond[4]=((((-1.0)*cj1*x13476))+(((-1.0)*gconst28*r21*x13477))+(((-1.0)*r22*x13480))+((sj1*sj2))+((r20*x13478)));
evalcond[5]=(((r00*x13478))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13476))+(((-1.0)*r02*x13480))+(((-1.0)*gconst28*r01*x13477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13482=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13482.valid){
continue;
}
CheckValue<IkReal> x13483 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13482.value)))+(x13483.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13484=IKsin(j4);
IkReal x13485=IKcos(j4);
IkReal x13486=(gconst28*r11);
IkReal x13487=((1.0)*cj2);
IkReal x13488=((1.0)*x13485);
IkReal x13489=(gconst29*x13485);
IkReal x13490=(gconst28*x13484);
IkReal x13491=((1.0)*x13484);
IkReal x13492=(gconst29*x13491);
evalcond[0]=((((-1.0)*r20*x13492))+(((-1.0)*r22*x13488))+((r21*x13490)));
evalcond[1]=((((-1.0)*r00*x13492))+(((-1.0)*r02*x13488))+((r01*x13490)));
evalcond[2]=((((-1.0)*r12*x13491))+(((-1.0)*x13486*x13488))+((r10*x13489)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13488))+(((-1.0)*r10*x13492))+((x13484*x13486)));
evalcond[4]=((((-1.0)*r22*x13491))+((sj1*sj2))+((r20*x13489))+(((-1.0)*cj1*x13487))+(((-1.0)*gconst28*r21*x13488)));
evalcond[5]=((((-1.0)*sj1*x13487))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x13491))+((r00*x13489))+(((-1.0)*gconst28*r01*x13488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13495 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13495.valid){
continue;
}
IkReal x13493=((1.0)*(x13495.value));
IkReal x13494=x13435;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13493)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13493)));
IkReal gconst28=((1.0)*r21*x13494);
IkReal gconst29=((-1.0)*r20*x13494);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13498 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13498.valid){
continue;
}
IkReal x13496=((1.0)*(x13498.value));
IkReal x13497=x13435;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13496)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13496)));
IkReal gconst28=((1.0)*r21*x13497);
IkReal gconst29=((-1.0)*r20*x13497);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13501 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13501.valid){
continue;
}
IkReal x13499=((1.0)*(x13501.value));
IkReal x13500=x13435;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13499)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13499)));
IkReal gconst28=((1.0)*r21*x13500);
IkReal gconst29=((-1.0)*r20*x13500);
IkReal x13502=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13506=IKPowWithIntegerCheck(x13502,-1);
if(!x13506.valid){
continue;
}
IkReal x13503=x13506.value;
IkReal x13504=((1.0)*x13503);
IkReal x13505=((((-2.0)*r10*r11*r20*r21*x13503))+(((-1.0)*x13504*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x13504*(r10*r10)*(r20*r20))));
j4eval[0]=x13505;
j4eval[1]=r12;
j4eval[2]=x13502;
j4eval[3]=IKsign(x13505);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13507=(gconst28*r11);
IkReal x13508=(gconst29*r10);
CheckValue<IkReal> x13509 = IKatan2WithCheck(IkReal((x13507+(((-1.0)*x13508)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13509.valid){
continue;
}
CheckValue<IkReal> x13510=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13507*x13507)))+(((2.0)*x13507*x13508))+(((-1.0)*(r12*r12)))+(((-1.0)*(x13508*x13508))))),-1);
if(!x13510.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13509.value)+(((1.5707963267949)*(x13510.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13511=IKcos(j4);
IkReal x13512=IKsin(j4);
IkReal x13513=(gconst29*r10);
IkReal x13514=(gconst29*r20);
IkReal x13515=(gconst28*r21);
IkReal x13516=((1.0)*cj2);
IkReal x13517=(gconst29*r00);
IkReal x13518=((1.0)*x13511);
IkReal x13519=((1.0)*x13512);
IkReal x13520=(gconst28*x13511);
IkReal x13521=(gconst28*x13512);
evalcond[0]=(((r11*x13520))+((r12*x13512))+(((-1.0)*x13513*x13518)));
evalcond[1]=((((-1.0)*r22*x13518))+((x13512*x13515))+(((-1.0)*x13514*x13519)));
evalcond[2]=(((r01*x13521))+(((-1.0)*x13517*x13519))+(((-1.0)*r02*x13518)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13518))+((r11*x13521))+(((-1.0)*x13513*x13519)));
evalcond[4]=(((r22*x13512))+(((-1.0)*cj1*x13516))+((sj1*sj2))+((x13511*x13515))+(((-1.0)*x13514*x13518)));
evalcond[5]=(((r01*x13520))+(((-1.0)*sj1*x13516))+((r02*x13512))+(((-1.0)*cj1*sj2))+(((-1.0)*x13517*x13518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13522=((1.0)*gconst29);
CheckValue<IkReal> x13523 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13522))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13523.valid){
continue;
}
CheckValue<IkReal> x13524=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13522)))),-1);
if(!x13524.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13523.value)+(((1.5707963267949)*(x13524.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13525=IKcos(j4);
IkReal x13526=IKsin(j4);
IkReal x13527=(gconst29*r10);
IkReal x13528=(gconst29*r20);
IkReal x13529=(gconst28*r21);
IkReal x13530=((1.0)*cj2);
IkReal x13531=(gconst29*r00);
IkReal x13532=((1.0)*x13525);
IkReal x13533=((1.0)*x13526);
IkReal x13534=(gconst28*x13525);
IkReal x13535=(gconst28*x13526);
evalcond[0]=((((-1.0)*x13527*x13532))+((r12*x13526))+((r11*x13534)));
evalcond[1]=((((-1.0)*r22*x13532))+((x13526*x13529))+(((-1.0)*x13528*x13533)));
evalcond[2]=((((-1.0)*x13531*x13533))+(((-1.0)*r02*x13532))+((r01*x13535)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13532))+(((-1.0)*x13527*x13533))+((r11*x13535)));
evalcond[4]=(((x13525*x13529))+(((-1.0)*cj1*x13530))+((sj1*sj2))+(((-1.0)*x13528*x13532))+((r22*x13526)));
evalcond[5]=(((r02*x13526))+(((-1.0)*sj1*x13530))+(((-1.0)*cj1*sj2))+(((-1.0)*x13531*x13532))+((r01*x13534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13536=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13536.valid){
continue;
}
CheckValue<IkReal> x13537 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13537.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13536.value)))+(x13537.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13538=IKcos(j4);
IkReal x13539=IKsin(j4);
IkReal x13540=(gconst29*r10);
IkReal x13541=(gconst29*r20);
IkReal x13542=(gconst28*r21);
IkReal x13543=((1.0)*cj2);
IkReal x13544=(gconst29*r00);
IkReal x13545=((1.0)*x13538);
IkReal x13546=((1.0)*x13539);
IkReal x13547=(gconst28*x13538);
IkReal x13548=(gconst28*x13539);
evalcond[0]=((((-1.0)*x13540*x13545))+((r11*x13547))+((r12*x13539)));
evalcond[1]=(((x13539*x13542))+(((-1.0)*r22*x13545))+(((-1.0)*x13541*x13546)));
evalcond[2]=((((-1.0)*x13544*x13546))+((r01*x13548))+(((-1.0)*r02*x13545)));
evalcond[3]=((1.0)+(((-1.0)*x13540*x13546))+((r11*x13548))+(((-1.0)*r12*x13545)));
evalcond[4]=(((sj1*sj2))+((r22*x13539))+(((-1.0)*cj1*x13543))+((x13538*x13542))+(((-1.0)*x13541*x13545)));
evalcond[5]=((((-1.0)*x13544*x13545))+((r01*x13547))+((r02*x13539))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13551 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13551.valid){
continue;
}
IkReal x13549=((1.0)*(x13551.value));
IkReal x13550=x13435;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13549)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13549)));
IkReal gconst28=((1.0)*r21*x13550);
IkReal gconst29=((-1.0)*r20*x13550);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13554 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13554.valid){
continue;
}
IkReal x13552=((1.0)*(x13554.value));
IkReal x13553=x13435;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13552)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13552)));
IkReal gconst28=((1.0)*r21*x13553);
IkReal gconst29=((-1.0)*r20*x13553);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13557 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13557.valid){
continue;
}
IkReal x13555=((1.0)*(x13557.value));
IkReal x13556=x13435;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13555)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13555)));
IkReal gconst28=((1.0)*r21*x13556);
IkReal gconst29=((-1.0)*r20*x13556);
IkReal x13558=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13562=IKPowWithIntegerCheck(x13558,-1);
if(!x13562.valid){
continue;
}
IkReal x13559=x13562.value;
IkReal x13560=((1.0)*x13559);
IkReal x13561=((((-1.0)*x13560*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x13559))+(((-1.0)*x13560*(r11*r11)*(r21*r21))));
j4eval[0]=x13561;
j4eval[1]=r12;
j4eval[2]=x13558;
j4eval[3]=IKsign(x13561);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13563=(gconst28*r11);
IkReal x13564=(gconst29*r10);
CheckValue<IkReal> x13565=IKPowWithIntegerCheck(IKsign(((((2.0)*x13563*x13564))+(((-1.0)*(x13563*x13563)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x13564*x13564))))),-1);
if(!x13565.valid){
continue;
}
CheckValue<IkReal> x13566 = IKatan2WithCheck(IkReal((x13563+(((-1.0)*x13564)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13565.value)))+(x13566.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13567=IKcos(j4);
IkReal x13568=IKsin(j4);
IkReal x13569=(gconst29*r10);
IkReal x13570=(gconst29*r20);
IkReal x13571=(gconst28*r21);
IkReal x13572=(gconst29*r00);
IkReal x13573=((1.0)*x13567);
IkReal x13574=((1.0)*x13568);
IkReal x13575=(gconst28*x13567);
IkReal x13576=(gconst28*x13568);
evalcond[0]=(((r11*x13575))+((r12*x13568))+(((-1.0)*x13569*x13573)));
evalcond[1]=((((-1.0)*r22*x13573))+((x13568*x13571))+(((-1.0)*x13570*x13574)));
evalcond[2]=((((-1.0)*r02*x13573))+(((-1.0)*x13572*x13574))+((r01*x13576)));
evalcond[3]=((1.0)+((r11*x13576))+(((-1.0)*r12*x13573))+(((-1.0)*x13569*x13574)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x13570*x13573))+((x13567*x13571))+((r22*x13568)));
evalcond[5]=((((-1.0)*x13572*x13573))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13568))+((r01*x13575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13577=((1.0)*gconst29);
CheckValue<IkReal> x13578 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13577))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13578.valid){
continue;
}
CheckValue<IkReal> x13579=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13577))+(((-1.0)*gconst28*r00)))),-1);
if(!x13579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13578.value)+(((1.5707963267949)*(x13579.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13580=IKcos(j4);
IkReal x13581=IKsin(j4);
IkReal x13582=(gconst29*r10);
IkReal x13583=(gconst29*r20);
IkReal x13584=(gconst28*r21);
IkReal x13585=(gconst29*r00);
IkReal x13586=((1.0)*x13580);
IkReal x13587=((1.0)*x13581);
IkReal x13588=(gconst28*x13580);
IkReal x13589=(gconst28*x13581);
evalcond[0]=(((r12*x13581))+((r11*x13588))+(((-1.0)*x13582*x13586)));
evalcond[1]=((((-1.0)*x13583*x13587))+((x13581*x13584))+(((-1.0)*r22*x13586)));
evalcond[2]=((((-1.0)*r02*x13586))+(((-1.0)*x13585*x13587))+((r01*x13589)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13586))+((r11*x13589))+(((-1.0)*x13582*x13587)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x13580*x13584))+(((-1.0)*x13583*x13586))+((r22*x13581)));
evalcond[5]=((((-1.0)*x13585*x13586))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13588))+((r02*x13581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13590=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13590.valid){
continue;
}
CheckValue<IkReal> x13591 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13591.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13590.value)))+(x13591.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13592=IKcos(j4);
IkReal x13593=IKsin(j4);
IkReal x13594=(gconst29*r10);
IkReal x13595=(gconst29*r20);
IkReal x13596=(gconst28*r21);
IkReal x13597=(gconst29*r00);
IkReal x13598=((1.0)*x13592);
IkReal x13599=((1.0)*x13593);
IkReal x13600=(gconst28*x13592);
IkReal x13601=(gconst28*x13593);
evalcond[0]=(((r11*x13600))+(((-1.0)*x13594*x13598))+((r12*x13593)));
evalcond[1]=(((x13593*x13596))+(((-1.0)*r22*x13598))+(((-1.0)*x13595*x13599)));
evalcond[2]=((((-1.0)*x13597*x13599))+(((-1.0)*r02*x13598))+((r01*x13601)));
evalcond[3]=((1.0)+((r11*x13601))+(((-1.0)*r12*x13598))+(((-1.0)*x13594*x13599)));
evalcond[4]=(((cj2*sj1))+((r22*x13593))+((cj1*sj2))+((x13592*x13596))+(((-1.0)*x13595*x13598)));
evalcond[5]=((((-1.0)*x13597*x13598))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13593))+((r01*x13600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13604 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13604.valid){
continue;
}
IkReal x13602=((1.0)*(x13604.value));
IkReal x13603=x13435;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13602)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13602)));
IkReal gconst28=((1.0)*r21*x13603);
IkReal gconst29=((-1.0)*r20*x13603);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13607 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13607.valid){
continue;
}
IkReal x13605=((1.0)*(x13607.value));
IkReal x13606=x13435;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13605)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13605)));
IkReal gconst28=((1.0)*r21*x13606);
IkReal gconst29=((-1.0)*r20*x13606);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13610 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13610.valid){
continue;
}
IkReal x13608=((1.0)*(x13610.value));
IkReal x13609=x13435;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13608)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13608)));
IkReal gconst28=((1.0)*r21*x13609);
IkReal gconst29=((-1.0)*r20*x13609);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13611=(gconst29*r10);
IkReal x13612=(gconst28*r11);
CheckValue<IkReal> x13613 = IKatan2WithCheck(IkReal((x13611+(((-1.0)*x13612)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13613.valid){
continue;
}
CheckValue<IkReal> x13614=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x13611*x13612))+(x13612*x13612)+(x13611*x13611))),-1);
if(!x13614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13613.value)+(((1.5707963267949)*(x13614.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13615=IKsin(j4);
IkReal x13616=IKcos(j4);
IkReal x13617=(gconst28*r11);
IkReal x13618=((1.0)*x13616);
IkReal x13619=(gconst29*x13616);
IkReal x13620=(gconst28*x13615);
IkReal x13621=((1.0)*x13615);
IkReal x13622=(gconst29*x13621);
evalcond[0]=(((r21*x13620))+(((-1.0)*r20*x13622))+(((-1.0)*r22*x13618)));
evalcond[1]=((((-1.0)*r00*x13622))+(((-1.0)*r02*x13618))+((r01*x13620)));
evalcond[2]=(((r10*x13619))+(((-1.0)*r12*x13621))+(((-1.0)*x13617*x13618)));
evalcond[3]=((1.0)+((x13615*x13617))+(((-1.0)*r10*x13622))+(((-1.0)*r12*x13618)));
evalcond[4]=((((-1.0)*gconst28*r21*x13618))+((cj2*sj1))+((cj1*sj2))+((r20*x13619))+(((-1.0)*r22*x13621)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13619))+(((-1.0)*gconst28*r01*x13618))+(((-1.0)*r02*x13621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13623=((1.0)*gconst29);
CheckValue<IkReal> x13624 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst28*r21))+(((-1.0)*r20*x13623)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13624.valid){
continue;
}
CheckValue<IkReal> x13625=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13623))+(((-1.0)*gconst28*r00)))),-1);
if(!x13625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13624.value)+(((1.5707963267949)*(x13625.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13626=IKsin(j4);
IkReal x13627=IKcos(j4);
IkReal x13628=(gconst28*r11);
IkReal x13629=((1.0)*x13627);
IkReal x13630=(gconst29*x13627);
IkReal x13631=(gconst28*x13626);
IkReal x13632=((1.0)*x13626);
IkReal x13633=(gconst29*x13632);
evalcond[0]=(((r21*x13631))+(((-1.0)*r22*x13629))+(((-1.0)*r20*x13633)));
evalcond[1]=((((-1.0)*r00*x13633))+(((-1.0)*r02*x13629))+((r01*x13631)));
evalcond[2]=(((r10*x13630))+(((-1.0)*r12*x13632))+(((-1.0)*x13628*x13629)));
evalcond[3]=((1.0)+((x13626*x13628))+(((-1.0)*r12*x13629))+(((-1.0)*r10*x13633)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst28*r21*x13629))+(((-1.0)*r22*x13632))+((r20*x13630)));
evalcond[5]=((((-1.0)*r02*x13632))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst28*r01*x13629))+((r00*x13630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13634=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13634.valid){
continue;
}
CheckValue<IkReal> x13635 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13634.value)))+(x13635.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13636=IKsin(j4);
IkReal x13637=IKcos(j4);
IkReal x13638=(gconst28*r11);
IkReal x13639=((1.0)*x13637);
IkReal x13640=(gconst29*x13637);
IkReal x13641=(gconst28*x13636);
IkReal x13642=((1.0)*x13636);
IkReal x13643=(gconst29*x13642);
evalcond[0]=((((-1.0)*r22*x13639))+(((-1.0)*r20*x13643))+((r21*x13641)));
evalcond[1]=((((-1.0)*r02*x13639))+(((-1.0)*r00*x13643))+((r01*x13641)));
evalcond[2]=((((-1.0)*x13638*x13639))+(((-1.0)*r12*x13642))+((r10*x13640)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13643))+((x13636*x13638))+(((-1.0)*r12*x13639)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst28*r21*x13639))+((r20*x13640))+(((-1.0)*r22*x13642)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst28*r01*x13639))+((r00*x13640))+(((-1.0)*r02*x13642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst29*r10))+(((2.0)*gconst28*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13644=gconst28*gconst28;
IkReal x13645=gconst29*gconst29;
IkReal x13646=(r11*r21);
IkReal x13647=(gconst29*sj3);
IkReal x13648=((1.0)*cj3);
IkReal x13649=(r10*r20);
IkReal x13650=(r10*r21);
IkReal x13651=(r11*r20);
IkReal x13652=(cj3*gconst28*gconst29);
CheckValue<IkReal> x13653=IKPowWithIntegerCheck(IKsign((((x13651*x13652))+(((-1.0)*x13644*x13646*x13648))+(((-1.0)*r12*r22*x13648))+(((-1.0)*x13645*x13648*x13649))+((x13650*x13652)))),-1);
if(!x13653.valid){
continue;
}
CheckValue<IkReal> x13654 = IKatan2WithCheck(IkReal((((r11*r22*x13647))+((gconst28*r10*r22*sj3)))),IkReal((((sj3*x13644*x13650))+(((-1.0)*sj3*x13645*x13651))+((gconst28*x13646*x13647))+(((-1.0)*gconst28*x13647*x13649)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13653.value)))+(x13654.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13655=IKsin(j4);
IkReal x13656=IKcos(j4);
IkReal x13657=(sj1*sj2);
IkReal x13658=(gconst29*r20);
IkReal x13659=(gconst28*r20);
IkReal x13660=((1.0)*cj2);
IkReal x13661=(r11*sj3);
IkReal x13662=(cj1*sj2);
IkReal x13663=(gconst29*r01);
IkReal x13664=(gconst29*r10);
IkReal x13665=(cj3*gconst28);
IkReal x13666=(cj3*gconst29);
IkReal x13667=(gconst28*sj3);
IkReal x13668=(gconst29*r00);
IkReal x13669=(cj1*x13660);
IkReal x13670=((1.0)*x13656);
IkReal x13671=((1.0)*x13655);
IkReal x13672=(gconst28*x13655);
IkReal x13673=(cj3*x13655);
IkReal x13674=(sj3*x13656);
evalcond[0]=(((r21*x13672))+(((-1.0)*x13658*x13671))+(((-1.0)*r22*x13670)));
evalcond[1]=((((-1.0)*x13668*x13671))+((r01*x13672))+(((-1.0)*r02*x13670)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13670))+((r11*x13672))+(((-1.0)*x13664*x13671)));
evalcond[3]=((((-1.0)*cj3*x13664*x13670))+((r12*x13673))+((gconst29*x13661))+((r11*x13656*x13665))+((r10*x13667)));
evalcond[4]=(((x13664*x13674))+((r11*x13666))+(((-1.0)*gconst28*x13661*x13670))+((r10*x13665))+(((-1.0)*r12*sj3*x13671)));
evalcond[5]=(((cj2*sj1))+x13662+((gconst29*r21*sj3))+((r22*x13673))+(((-1.0)*cj3*x13658*x13670))+((sj3*x13659))+((r21*x13656*x13665)));
evalcond[6]=(x13657+((r02*x13673))+(((-1.0)*r00*x13666*x13670))+((r00*x13667))+(((-1.0)*x13669))+((sj3*x13663))+((r01*x13656*x13665)));
evalcond[7]=((((-1.0)*r21*x13667*x13670))+x13657+(((-1.0)*x13669))+((cj3*x13659))+((r21*x13666))+((x13658*x13674))+(((-1.0)*r22*sj3*x13671)));
evalcond[8]=(((cj3*x13663))+(((-1.0)*r01*x13667*x13670))+(((-1.0)*sj1*x13660))+((r00*x13665))+(((-1.0)*r02*sj3*x13671))+((x13668*x13674))+(((-1.0)*x13662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13675=((1.0)*gconst29);
CheckValue<IkReal> x13676=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13675))+(((-1.0)*gconst28*r00)))),-1);
if(!x13676.valid){
continue;
}
CheckValue<IkReal> x13677 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13675))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13676.value)))+(x13677.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13678=IKsin(j4);
IkReal x13679=IKcos(j4);
IkReal x13680=(sj1*sj2);
IkReal x13681=(gconst29*r20);
IkReal x13682=(gconst28*r20);
IkReal x13683=((1.0)*cj2);
IkReal x13684=(r11*sj3);
IkReal x13685=(cj1*sj2);
IkReal x13686=(gconst29*r01);
IkReal x13687=(gconst29*r10);
IkReal x13688=(cj3*gconst28);
IkReal x13689=(cj3*gconst29);
IkReal x13690=(gconst28*sj3);
IkReal x13691=(gconst29*r00);
IkReal x13692=(cj1*x13683);
IkReal x13693=((1.0)*x13679);
IkReal x13694=((1.0)*x13678);
IkReal x13695=(gconst28*x13678);
IkReal x13696=(cj3*x13678);
IkReal x13697=(sj3*x13679);
evalcond[0]=((((-1.0)*x13681*x13694))+((r21*x13695))+(((-1.0)*r22*x13693)));
evalcond[1]=(((r01*x13695))+(((-1.0)*r02*x13693))+(((-1.0)*x13691*x13694)));
evalcond[2]=((1.0)+(((-1.0)*x13687*x13694))+((r11*x13695))+(((-1.0)*r12*x13693)));
evalcond[3]=(((r11*x13679*x13688))+((gconst29*x13684))+((r10*x13690))+(((-1.0)*cj3*x13687*x13693))+((r12*x13696)));
evalcond[4]=(((r11*x13689))+(((-1.0)*r12*sj3*x13694))+((r10*x13688))+(((-1.0)*gconst28*x13684*x13693))+((x13687*x13697)));
evalcond[5]=(((cj2*sj1))+x13685+((gconst29*r21*sj3))+(((-1.0)*cj3*x13681*x13693))+((r22*x13696))+((r21*x13679*x13688))+((sj3*x13682)));
evalcond[6]=(((r00*x13690))+x13680+(((-1.0)*x13692))+((r01*x13679*x13688))+(((-1.0)*r00*x13689*x13693))+((r02*x13696))+((sj3*x13686)));
evalcond[7]=((((-1.0)*r22*sj3*x13694))+x13680+(((-1.0)*x13692))+((cj3*x13682))+(((-1.0)*r21*x13690*x13693))+((r21*x13689))+((x13681*x13697)));
evalcond[8]=((((-1.0)*sj1*x13683))+((cj3*x13686))+(((-1.0)*x13685))+((r00*x13688))+(((-1.0)*r01*x13690*x13693))+((x13691*x13697))+(((-1.0)*r02*sj3*x13694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13698=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13698.valid){
continue;
}
CheckValue<IkReal> x13699 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13699.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13698.value)))+(x13699.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13700=IKsin(j4);
IkReal x13701=IKcos(j4);
IkReal x13702=(sj1*sj2);
IkReal x13703=(gconst29*r20);
IkReal x13704=(gconst28*r20);
IkReal x13705=((1.0)*cj2);
IkReal x13706=(r11*sj3);
IkReal x13707=(cj1*sj2);
IkReal x13708=(gconst29*r01);
IkReal x13709=(gconst29*r10);
IkReal x13710=(cj3*gconst28);
IkReal x13711=(cj3*gconst29);
IkReal x13712=(gconst28*sj3);
IkReal x13713=(gconst29*r00);
IkReal x13714=(cj1*x13705);
IkReal x13715=((1.0)*x13701);
IkReal x13716=((1.0)*x13700);
IkReal x13717=(gconst28*x13700);
IkReal x13718=(cj3*x13700);
IkReal x13719=(sj3*x13701);
evalcond[0]=(((r21*x13717))+(((-1.0)*r22*x13715))+(((-1.0)*x13703*x13716)));
evalcond[1]=((((-1.0)*x13713*x13716))+((r01*x13717))+(((-1.0)*r02*x13715)));
evalcond[2]=((1.0)+(((-1.0)*x13709*x13716))+(((-1.0)*r12*x13715))+((r11*x13717)));
evalcond[3]=(((r12*x13718))+((gconst29*x13706))+(((-1.0)*cj3*x13709*x13715))+((r10*x13712))+((r11*x13701*x13710)));
evalcond[4]=(((r10*x13710))+((x13709*x13719))+(((-1.0)*gconst28*x13706*x13715))+((r11*x13711))+(((-1.0)*r12*sj3*x13716)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+((sj3*x13704))+x13707+((r22*x13718))+((r21*x13701*x13710))+(((-1.0)*cj3*x13703*x13715)));
evalcond[6]=(((sj3*x13708))+x13702+((r01*x13701*x13710))+((r00*x13712))+(((-1.0)*r00*x13711*x13715))+((r02*x13718))+(((-1.0)*x13714)));
evalcond[7]=(((r21*x13711))+((x13703*x13719))+x13702+((cj3*x13704))+(((-1.0)*r22*sj3*x13716))+(((-1.0)*r21*x13712*x13715))+(((-1.0)*x13714)));
evalcond[8]=((((-1.0)*sj1*x13705))+(((-1.0)*x13707))+((r00*x13710))+((cj3*x13708))+(((-1.0)*r01*x13712*x13715))+(((-1.0)*r02*sj3*x13716))+((x13713*x13719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13720=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13720);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13720);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13721=(r11*sj5);
IkReal x13722=((1.0)*cj5*r10);
j4eval[0]=(x13721+(((-1.0)*x13722)));
j4eval[1]=(((cj3*x13721))+(((-1.0)*cj3*x13722)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13723=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13723);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13723);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13724=(cj5*r10);
IkReal x13725=(r11*sj5);
j4eval[0]=(x13725+(((-1.0)*x13724)));
j4eval[1]=((((-1.0)*sj3*x13725))+((sj3*x13724)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13726=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13726);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13726);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13727=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13727);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13727);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13728=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x13728))+((r11*sj5)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x13728)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13729=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13729);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13729);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13730=((1.0)*sj1);
CheckValue<IkReal> x13731=IKPowWithIntegerCheck(r22,-1);
if(!x13731.valid){
continue;
}
CheckValue<IkReal> x13732=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13732.valid){
continue;
}
if( IKabs(((x13731.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13730)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13732.value)*(((((-1.0)*sj2*x13730))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13731.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13730))))))+IKsqr(((x13732.value)*(((((-1.0)*sj2*x13730))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13731.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13730))))), ((x13732.value)*(((((-1.0)*sj2*x13730))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13733=IKsin(j4);
IkReal x13734=IKcos(j4);
IkReal x13735=((1.0)*cj5);
IkReal x13736=(sj5*x13734);
IkReal x13737=(sj5*x13733);
evalcond[0]=((-1.0)*r22*x13734);
evalcond[1]=(((cj2*sj1))+((r22*x13733))+((cj1*sj2)));
evalcond[2]=((((-1.0)*r00*x13733*x13735))+((r01*x13737)));
evalcond[3]=(((r11*x13736))+(((-1.0)*r10*x13734*x13735)));
evalcond[4]=((1.0)+((r11*x13737))+(((-1.0)*r10*x13733*x13735)));
evalcond[5]=((((-1.0)*r00*x13734*x13735))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13738=((1.0)*cj5);
CheckValue<IkReal> x13739=IKPowWithIntegerCheck(((((-1.0)*r10*x13738))+((r11*sj5))),-1);
if(!x13739.valid){
continue;
}
CheckValue<IkReal> x13740=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x13738))),-1);
if(!x13740.valid){
continue;
}
if( IKabs(((-1.0)*(x13739.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13740.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13739.value)))+IKsqr(((x13740.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13739.value)), ((x13740.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13741=IKsin(j4);
IkReal x13742=IKcos(j4);
IkReal x13743=((1.0)*cj5);
IkReal x13744=(sj5*x13742);
IkReal x13745=(sj5*x13741);
evalcond[0]=((-1.0)*r22*x13742);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13741)));
evalcond[2]=(((r01*x13745))+(((-1.0)*r00*x13741*x13743)));
evalcond[3]=((((-1.0)*r10*x13742*x13743))+((r11*x13744)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13741*x13743))+((r11*x13745)));
evalcond[5]=(((r01*x13744))+(((-1.0)*r00*x13742*x13743))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13746=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13746);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13746);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13747=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13747);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13747);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13748=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13748.valid){
continue;
}
CheckValue<IkReal> x13749=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13749.valid){
continue;
}
if( IKabs(((-1.0)*(x13748.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13749.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13748.value)))+IKsqr(((x13749.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13748.value)), ((x13749.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13750=IKsin(j4);
IkReal x13751=IKcos(j4);
IkReal x13752=(cj5*x13751);
IkReal x13753=(sj5*x13750);
IkReal x13754=((1.0)*cj5*x13750);
IkReal x13755=((1.0)*sj5*x13751);
evalcond[0]=((-1.0)*r22*x13751);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13750)));
evalcond[2]=((((-1.0)*r00*x13754))+((r01*x13753)));
evalcond[3]=(((r10*x13752))+(((-1.0)*r11*x13755)));
evalcond[4]=((1.0)+((r11*x13753))+(((-1.0)*r10*x13754)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x13755))+((r00*x13752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13756=IKPowWithIntegerCheck(r22,-1);
if(!x13756.valid){
continue;
}
CheckValue<IkReal> x13757=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13757.valid){
continue;
}
if( IKabs(((x13756.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13757.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13756.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13757.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13756.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13757.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13758=IKsin(j4);
IkReal x13759=IKcos(j4);
IkReal x13760=(cj5*x13759);
IkReal x13761=(sj5*x13758);
IkReal x13762=((1.0)*cj5*x13758);
IkReal x13763=((1.0)*sj5*x13759);
evalcond[0]=((-1.0)*r22*x13759);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13758)));
evalcond[2]=((((-1.0)*r00*x13762))+((r01*x13761)));
evalcond[3]=((((-1.0)*r11*x13763))+((r10*x13760)));
evalcond[4]=((1.0)+((r11*x13761))+(((-1.0)*r10*x13762)));
evalcond[5]=((((-1.0)*r01*x13763))+((r00*x13760))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13764=((1.0)*r10);
CheckValue<IkReal> x13765=IKPowWithIntegerCheck(cj3,-1);
if(!x13765.valid){
continue;
}
CheckValue<IkReal> x13766=IKPowWithIntegerCheck(r22,-1);
if(!x13766.valid){
continue;
}
CheckValue<IkReal> x13767=IKPowWithIntegerCheck((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*x13764))),-1);
if(!x13767.valid){
continue;
}
if( IKabs(((x13765.value)*(x13766.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13767.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13764)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13765.value)*(x13766.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13767.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13764))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13765.value)*(x13766.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13767.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13764))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13768=IKsin(j4);
IkReal x13769=IKcos(j4);
IkReal x13770=(sj1*sj2);
IkReal x13771=(r11*sj5);
IkReal x13772=(r00*sj3);
IkReal x13773=(cj5*r01);
IkReal x13774=((1.0)*cj1);
IkReal x13775=(cj3*sj5);
IkReal x13776=(cj5*r11);
IkReal x13777=(r10*sj3);
IkReal x13778=(cj2*sj1);
IkReal x13779=((1.0)*cj5);
IkReal x13780=((1.0)*sj3);
IkReal x13781=(r01*sj5);
IkReal x13782=(cj2*x13774);
IkReal x13783=(cj3*x13769);
IkReal x13784=(r22*x13768);
IkReal x13785=(cj5*x13769);
IkReal x13786=(x13768*x13779);
evalcond[0]=((-1.0)*r22*x13769);
evalcond[1]=(x13778+((cj1*sj2))+((cj3*x13784)));
evalcond[2]=((((-1.0)*r00*x13786))+((x13768*x13781)));
evalcond[3]=((1.0)+((x13768*x13771))+(((-1.0)*r10*x13786)));
evalcond[4]=(x13770+(((-1.0)*x13782))+(((-1.0)*x13780*x13784)));
evalcond[5]=(((sj5*x13777))+((sj3*x13776))+((x13771*x13783))+(((-1.0)*r10*x13779*x13783)));
evalcond[6]=(((x13777*x13785))+((r10*x13775))+(((-1.0)*x13769*x13771*x13780))+((cj3*x13776)));
evalcond[7]=(x13770+((sj5*x13772))+((sj3*x13773))+(((-1.0)*r00*x13779*x13783))+(((-1.0)*x13782))+((r01*x13769*x13775)));
evalcond[8]=((((-1.0)*x13769*x13780*x13781))+(((-1.0)*x13778))+(((-1.0)*sj2*x13774))+((r00*x13775))+((cj3*x13773))+((x13772*x13785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13787=(cj5*r10);
IkReal x13788=((1.0)*r11);
CheckValue<IkReal> x13789=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*x13787))),-1);
if(!x13789.valid){
continue;
}
CheckValue<IkReal> x13790=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x13788))+((sj3*x13787))),-1);
if(!x13790.valid){
continue;
}
if( IKabs(((-1.0)*(x13789.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13790.value)*(((((-1.0)*cj3*cj5*x13788))+(((-1.0)*cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13789.value)))+IKsqr(((x13790.value)*(((((-1.0)*cj3*cj5*x13788))+(((-1.0)*cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13789.value)), ((x13790.value)*(((((-1.0)*cj3*cj5*x13788))+(((-1.0)*cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13791=IKsin(j4);
IkReal x13792=IKcos(j4);
IkReal x13793=(sj1*sj2);
IkReal x13794=(r11*sj5);
IkReal x13795=(r00*sj3);
IkReal x13796=(cj5*r01);
IkReal x13797=((1.0)*cj1);
IkReal x13798=(cj3*sj5);
IkReal x13799=(cj5*r11);
IkReal x13800=(r10*sj3);
IkReal x13801=(cj2*sj1);
IkReal x13802=((1.0)*cj5);
IkReal x13803=((1.0)*sj3);
IkReal x13804=(r01*sj5);
IkReal x13805=(cj2*x13797);
IkReal x13806=(cj3*x13792);
IkReal x13807=(r22*x13791);
IkReal x13808=(cj5*x13792);
IkReal x13809=(x13791*x13802);
evalcond[0]=((-1.0)*r22*x13792);
evalcond[1]=(x13801+((cj1*sj2))+((cj3*x13807)));
evalcond[2]=((((-1.0)*r00*x13809))+((x13791*x13804)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13809))+((x13791*x13794)));
evalcond[4]=((((-1.0)*x13805))+x13793+(((-1.0)*x13803*x13807)));
evalcond[5]=(((sj5*x13800))+((x13794*x13806))+(((-1.0)*r10*x13802*x13806))+((sj3*x13799)));
evalcond[6]=((((-1.0)*x13792*x13794*x13803))+((cj3*x13799))+((r10*x13798))+((x13800*x13808)));
evalcond[7]=((((-1.0)*x13805))+x13793+((r01*x13792*x13798))+((sj3*x13796))+((sj5*x13795))+(((-1.0)*r00*x13802*x13806)));
evalcond[8]=((((-1.0)*x13792*x13803*x13804))+((r00*x13798))+(((-1.0)*x13801))+((x13795*x13808))+(((-1.0)*sj2*x13797))+((cj3*x13796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13810=((1.0)*sj3);
IkReal x13811=(r11*sj5);
IkReal x13812=((1.0)*cj5*r10);
CheckValue<IkReal> x13813=IKPowWithIntegerCheck(((((-1.0)*x13812))+x13811),-1);
if(!x13813.valid){
continue;
}
CheckValue<IkReal> x13814=IKPowWithIntegerCheck(((((-1.0)*cj3*x13812))+((cj3*x13811))),-1);
if(!x13814.valid){
continue;
}
if( IKabs(((-1.0)*(x13813.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13814.value)*(((((-1.0)*r10*sj5*x13810))+(((-1.0)*cj5*r11*x13810)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13813.value)))+IKsqr(((x13814.value)*(((((-1.0)*r10*sj5*x13810))+(((-1.0)*cj5*r11*x13810))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13813.value)), ((x13814.value)*(((((-1.0)*r10*sj5*x13810))+(((-1.0)*cj5*r11*x13810))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13815=IKsin(j4);
IkReal x13816=IKcos(j4);
IkReal x13817=(sj1*sj2);
IkReal x13818=(r11*sj5);
IkReal x13819=(r00*sj3);
IkReal x13820=(cj5*r01);
IkReal x13821=((1.0)*cj1);
IkReal x13822=(cj3*sj5);
IkReal x13823=(cj5*r11);
IkReal x13824=(r10*sj3);
IkReal x13825=(cj2*sj1);
IkReal x13826=((1.0)*cj5);
IkReal x13827=((1.0)*sj3);
IkReal x13828=(r01*sj5);
IkReal x13829=(cj2*x13821);
IkReal x13830=(cj3*x13816);
IkReal x13831=(r22*x13815);
IkReal x13832=(cj5*x13816);
IkReal x13833=(x13815*x13826);
evalcond[0]=((-1.0)*r22*x13816);
evalcond[1]=(x13825+((cj1*sj2))+((cj3*x13831)));
evalcond[2]=(((x13815*x13828))+(((-1.0)*r00*x13833)));
evalcond[3]=((1.0)+((x13815*x13818))+(((-1.0)*r10*x13833)));
evalcond[4]=((((-1.0)*x13829))+x13817+(((-1.0)*x13827*x13831)));
evalcond[5]=(((x13818*x13830))+((sj3*x13823))+((sj5*x13824))+(((-1.0)*r10*x13826*x13830)));
evalcond[6]=(((r10*x13822))+(((-1.0)*x13816*x13818*x13827))+((cj3*x13823))+((x13824*x13832)));
evalcond[7]=((((-1.0)*x13829))+x13817+((r01*x13816*x13822))+((sj3*x13820))+((sj5*x13819))+(((-1.0)*r00*x13826*x13830)));
evalcond[8]=((((-1.0)*x13816*x13827*x13828))+((x13819*x13832))+((r00*x13822))+(((-1.0)*sj2*x13821))+(((-1.0)*x13825))+((cj3*x13820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13834=cj5*cj5;
IkReal x13835=((1.0)*cj3);
IkReal x13836=(r10*r21);
IkReal x13837=(cj5*sj5);
IkReal x13838=(r11*r21);
IkReal x13839=(r11*r20);
IkReal x13840=(r22*sj3);
IkReal x13841=(r10*r20);
IkReal x13842=((1.0)*sj3*x13834);
CheckValue<IkReal> x13843 = IKatan2WithCheck(IkReal((((r10*sj5*x13840))+((cj5*r11*x13840)))),IkReal(((((-1.0)*x13839*x13842))+((sj3*x13837*x13838))+((sj3*x13836))+(((-1.0)*x13836*x13842))+(((-1.0)*sj3*x13837*x13841)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13843.valid){
continue;
}
CheckValue<IkReal> x13844=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x13835))+(((-1.0)*x13835*x13838))+(((-1.0)*x13834*x13835*x13841))+((cj3*x13836*x13837))+((cj3*x13837*x13839))+((cj3*x13834*x13838)))),-1);
if(!x13844.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13843.value)+(((1.5707963267949)*(x13844.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13845=IKsin(j4);
IkReal x13846=IKcos(j4);
IkReal x13847=(sj1*sj2);
IkReal x13848=(cj5*sj3);
IkReal x13849=(cj5*r10);
IkReal x13850=(r00*sj5);
IkReal x13851=(r11*sj5);
IkReal x13852=(cj3*cj5);
IkReal x13853=((1.0)*cj1);
IkReal x13854=(cj3*sj5);
IkReal x13855=(r21*sj5);
IkReal x13856=(cj2*sj1);
IkReal x13857=(sj3*sj5);
IkReal x13858=(r01*sj5);
IkReal x13859=(cj2*x13853);
IkReal x13860=((1.0)*x13846);
IkReal x13861=((1.0)*x13845);
IkReal x13862=(cj3*x13845);
IkReal x13863=(cj3*x13846);
evalcond[0]=((((-1.0)*r22*x13860))+((x13845*x13855))+(((-1.0)*cj5*r20*x13861)));
evalcond[1]=((((-1.0)*cj5*r00*x13861))+(((-1.0)*r02*x13860))+((x13845*x13858)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13860))+((x13845*x13851))+(((-1.0)*x13849*x13861)));
evalcond[3]=(((r12*x13862))+((x13851*x13863))+((r11*x13848))+(((-1.0)*cj3*x13849*x13860))+((r10*x13857)));
evalcond[4]=((((-1.0)*sj3*x13851*x13860))+((r11*x13852))+(((-1.0)*r12*sj3*x13861))+((r10*x13846*x13848))+((r10*x13854)));
evalcond[5]=(((r21*x13846*x13854))+((r22*x13862))+x13856+((cj1*sj2))+(((-1.0)*r20*x13852*x13860))+((r21*x13848))+((r20*x13857)));
evalcond[6]=((((-1.0)*r00*x13852*x13860))+x13847+((sj3*x13850))+((r02*x13862))+((r01*x13846*x13854))+(((-1.0)*x13859))+((r01*x13848)));
evalcond[7]=(((r20*x13846*x13848))+x13847+(((-1.0)*sj3*x13855*x13860))+((r21*x13852))+(((-1.0)*r22*sj3*x13861))+((r20*x13854))+(((-1.0)*x13859)));
evalcond[8]=((((-1.0)*x13856))+((r01*x13852))+(((-1.0)*sj2*x13853))+(((-1.0)*r02*sj3*x13861))+((r00*x13846*x13848))+((cj3*x13850))+(((-1.0)*r01*x13857*x13860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13864=((1.0)*cj5);
CheckValue<IkReal> x13865=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13864)))),-1);
if(!x13865.valid){
continue;
}
CheckValue<IkReal> x13866 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13864)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13865.value)))+(x13866.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13867=IKsin(j4);
IkReal x13868=IKcos(j4);
IkReal x13869=(sj1*sj2);
IkReal x13870=(cj5*sj3);
IkReal x13871=(cj5*r10);
IkReal x13872=(r00*sj5);
IkReal x13873=(r11*sj5);
IkReal x13874=(cj3*cj5);
IkReal x13875=((1.0)*cj1);
IkReal x13876=(cj3*sj5);
IkReal x13877=(r21*sj5);
IkReal x13878=(cj2*sj1);
IkReal x13879=(sj3*sj5);
IkReal x13880=(r01*sj5);
IkReal x13881=(cj2*x13875);
IkReal x13882=((1.0)*x13868);
IkReal x13883=((1.0)*x13867);
IkReal x13884=(cj3*x13867);
IkReal x13885=(cj3*x13868);
evalcond[0]=(((x13867*x13877))+(((-1.0)*cj5*r20*x13883))+(((-1.0)*r22*x13882)));
evalcond[1]=((((-1.0)*r02*x13882))+((x13867*x13880))+(((-1.0)*cj5*r00*x13883)));
evalcond[2]=((1.0)+((x13867*x13873))+(((-1.0)*x13871*x13883))+(((-1.0)*r12*x13882)));
evalcond[3]=(((r11*x13870))+(((-1.0)*cj3*x13871*x13882))+((r12*x13884))+((r10*x13879))+((x13873*x13885)));
evalcond[4]=(((r11*x13874))+((r10*x13868*x13870))+((r10*x13876))+(((-1.0)*r12*sj3*x13883))+(((-1.0)*sj3*x13873*x13882)));
evalcond[5]=(x13878+((cj1*sj2))+((r21*x13870))+((r20*x13879))+(((-1.0)*r20*x13874*x13882))+((r21*x13868*x13876))+((r22*x13884)));
evalcond[6]=(((sj3*x13872))+(((-1.0)*r00*x13874*x13882))+x13869+((r02*x13884))+((r01*x13870))+((r01*x13868*x13876))+(((-1.0)*x13881)));
evalcond[7]=((((-1.0)*r22*sj3*x13883))+x13869+((r21*x13874))+((r20*x13868*x13870))+((r20*x13876))+(((-1.0)*sj3*x13877*x13882))+(((-1.0)*x13881)));
evalcond[8]=(((cj3*x13872))+(((-1.0)*x13878))+(((-1.0)*sj2*x13875))+((r01*x13874))+(((-1.0)*r01*x13879*x13882))+((r00*x13868*x13870))+(((-1.0)*r02*sj3*x13883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13886=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13886.valid){
continue;
}
CheckValue<IkReal> x13887 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13887.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13886.value)))+(x13887.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13888=IKsin(j4);
IkReal x13889=IKcos(j4);
IkReal x13890=(sj1*sj2);
IkReal x13891=(cj5*sj3);
IkReal x13892=(cj5*r10);
IkReal x13893=(r00*sj5);
IkReal x13894=(r11*sj5);
IkReal x13895=(cj3*cj5);
IkReal x13896=((1.0)*cj1);
IkReal x13897=(cj3*sj5);
IkReal x13898=(r21*sj5);
IkReal x13899=(cj2*sj1);
IkReal x13900=(sj3*sj5);
IkReal x13901=(r01*sj5);
IkReal x13902=(cj2*x13896);
IkReal x13903=((1.0)*x13889);
IkReal x13904=((1.0)*x13888);
IkReal x13905=(cj3*x13888);
IkReal x13906=(cj3*x13889);
evalcond[0]=((((-1.0)*cj5*r20*x13904))+(((-1.0)*r22*x13903))+((x13888*x13898)));
evalcond[1]=(((x13888*x13901))+(((-1.0)*cj5*r00*x13904))+(((-1.0)*r02*x13903)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13903))+(((-1.0)*x13892*x13904))+((x13888*x13894)));
evalcond[3]=(((r10*x13900))+((x13894*x13906))+(((-1.0)*cj3*x13892*x13903))+((r12*x13905))+((r11*x13891)));
evalcond[4]=((((-1.0)*sj3*x13894*x13903))+(((-1.0)*r12*sj3*x13904))+((r10*x13897))+((r11*x13895))+((r10*x13889*x13891)));
evalcond[5]=(((r22*x13905))+(((-1.0)*r20*x13895*x13903))+x13899+((cj1*sj2))+((r20*x13900))+((r21*x13891))+((r21*x13889*x13897)));
evalcond[6]=(((r02*x13905))+x13890+((sj3*x13893))+((r01*x13891))+(((-1.0)*x13902))+((r01*x13889*x13897))+(((-1.0)*r00*x13895*x13903)));
evalcond[7]=((((-1.0)*r22*sj3*x13904))+((r20*x13889*x13891))+x13890+((r20*x13897))+(((-1.0)*sj3*x13898*x13903))+((r21*x13895))+(((-1.0)*x13902)));
evalcond[8]=((((-1.0)*sj2*x13896))+((r00*x13889*x13891))+((cj3*x13893))+(((-1.0)*r02*sj3*x13904))+(((-1.0)*r01*x13900*x13903))+((r01*x13895))+(((-1.0)*x13899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13907=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13907;
j4eval[1]=IKsign(x13907);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13908=((1.0)*cj5);
IkReal x13909=((((-1.0)*r21*x13908))+(((-1.0)*r20*sj5)));
j4eval[0]=x13909;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13908))))));
j4eval[2]=IKsign(x13909);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13910=cj5*cj5;
IkReal x13911=(cj3*r21);
IkReal x13912=(cj5*sj5);
IkReal x13913=((1.0)*cj3);
IkReal x13914=((((-1.0)*r12*r22*x13913))+((cj3*r11*r20*x13912))+((r11*x13910*x13911))+(((-1.0)*r10*r20*x13910*x13913))+(((-1.0)*r11*x13911))+((r10*x13911*x13912)));
j4eval[0]=x13914;
j4eval[1]=IKsign(x13914);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13915=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13915;
j4eval[1]=IKsign(x13915);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13916=((1.0)*cj5);
IkReal x13917=((((-1.0)*r21*x13916))+(((-1.0)*r20*sj5)));
j4eval[0]=x13917;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13916))))));
j4eval[2]=IKsign(x13917);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13918=cj5*cj5;
IkReal x13919=r11*r11;
IkReal x13920=(cj5*r10);
IkReal x13921=(r11*sj5);
IkReal x13922=((((-1.0)*x13918*(r10*r10)))+(((-1.0)*x13919))+(((-1.0)*(r12*r12)))+((x13918*x13919))+(((2.0)*x13920*x13921)));
j4eval[0]=x13922;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x13921))+x13920))));
j4eval[2]=IKsign(x13922);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13923=cj5*cj5;
IkReal x13924=r11*r11;
IkReal x13925=(cj5*r10);
IkReal x13926=(r11*sj5);
CheckValue<IkReal> x13927=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13923*(r10*r10)))+(((2.0)*x13925*x13926))+((x13923*x13924))+(((-1.0)*x13924))+(((-1.0)*(r12*r12))))),-1);
if(!x13927.valid){
continue;
}
CheckValue<IkReal> x13928 = IKatan2WithCheck(IkReal(((((-1.0)*x13926))+x13925)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13927.value)))+(x13928.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13929=IKsin(j4);
IkReal x13930=IKcos(j4);
IkReal x13931=(cj5*r10);
IkReal x13932=(r01*sj5);
IkReal x13933=(cj5*r00);
IkReal x13934=(cj5*r20);
IkReal x13935=((1.0)*x13930);
IkReal x13936=((1.0)*x13929);
IkReal x13937=(sj5*x13929);
evalcond[0]=((((-1.0)*x13934*x13936))+((r21*x13937))+(((-1.0)*r22*x13935)));
evalcond[1]=(((x13929*x13932))+(((-1.0)*r02*x13935))+(((-1.0)*x13933*x13936)));
evalcond[2]=((((-1.0)*r12*x13936))+((x13930*x13931))+(((-1.0)*r11*sj5*x13935)));
evalcond[3]=((-1.0)+((r11*x13937))+(((-1.0)*r12*x13935))+(((-1.0)*x13931*x13936)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x13930*x13933))+(((-1.0)*x13932*x13935))+(((-1.0)*r02*x13936)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x13930*x13934))+(((-1.0)*r22*x13936))+(((-1.0)*r21*sj5*x13935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13938=((1.0)*cj5);
CheckValue<IkReal> x13939=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13938))+(((-1.0)*r20*sj5)))),-1);
if(!x13939.valid){
continue;
}
CheckValue<IkReal> x13940 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13938)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13940.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13939.value)))+(x13940.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13941=IKsin(j4);
IkReal x13942=IKcos(j4);
IkReal x13943=(cj5*r10);
IkReal x13944=(r01*sj5);
IkReal x13945=(cj5*r00);
IkReal x13946=(cj5*r20);
IkReal x13947=((1.0)*x13942);
IkReal x13948=((1.0)*x13941);
IkReal x13949=(sj5*x13941);
evalcond[0]=((((-1.0)*r22*x13947))+((r21*x13949))+(((-1.0)*x13946*x13948)));
evalcond[1]=((((-1.0)*x13945*x13948))+((x13941*x13944))+(((-1.0)*r02*x13947)));
evalcond[2]=((((-1.0)*r11*sj5*x13947))+(((-1.0)*r12*x13948))+((x13942*x13943)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13947))+(((-1.0)*x13943*x13948))+((r11*x13949)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x13942*x13945))+(((-1.0)*x13944*x13947))+(((-1.0)*r02*x13948)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x13942*x13946))+(((-1.0)*r22*x13948))+(((-1.0)*r21*sj5*x13947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13950 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13950.valid){
continue;
}
CheckValue<IkReal> x13951=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13950.value)+(((1.5707963267949)*(x13951.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13952=IKsin(j4);
IkReal x13953=IKcos(j4);
IkReal x13954=(cj5*r10);
IkReal x13955=(r01*sj5);
IkReal x13956=(cj5*r00);
IkReal x13957=(cj5*r20);
IkReal x13958=((1.0)*x13953);
IkReal x13959=((1.0)*x13952);
IkReal x13960=(sj5*x13952);
evalcond[0]=((((-1.0)*x13957*x13959))+(((-1.0)*r22*x13958))+((r21*x13960)));
evalcond[1]=((((-1.0)*x13956*x13959))+(((-1.0)*r02*x13958))+((x13952*x13955)));
evalcond[2]=((((-1.0)*r11*sj5*x13958))+((x13953*x13954))+(((-1.0)*r12*x13959)));
evalcond[3]=((-1.0)+((r11*x13960))+(((-1.0)*r12*x13958))+(((-1.0)*x13954*x13959)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13955*x13958))+((cj1*sj2))+(((-1.0)*r02*x13959))+((x13953*x13956)));
evalcond[5]=((((-1.0)*r21*sj5*x13958))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x13953*x13957))+(((-1.0)*r22*x13959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13961=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13961;
j4eval[1]=IKsign(x13961);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13962=((1.0)*cj5);
IkReal x13963=((((-1.0)*r21*x13962))+(((-1.0)*r20*sj5)));
j4eval[0]=x13963;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13962))))));
j4eval[2]=IKsign(x13963);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13964=cj5*cj5;
IkReal x13965=r11*r11;
IkReal x13966=(r11*sj5);
IkReal x13967=(cj5*r10);
IkReal x13968=((r12*r12)+x13965+(((-1.0)*x13964*x13965))+(((-2.0)*x13966*x13967))+((x13964*(r10*r10))));
j4eval[0]=x13968;
j4eval[1]=IKsign(x13968);
j4eval[2]=((IKabs(r12))+(IKabs((x13966+(((-1.0)*x13967))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13969=cj5*cj5;
IkReal x13970=r11*r11;
IkReal x13971=(cj5*r10);
IkReal x13972=(r11*sj5);
CheckValue<IkReal> x13973 = IKatan2WithCheck(IkReal((x13972+(((-1.0)*x13971)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13973.valid){
continue;
}
CheckValue<IkReal> x13974=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x13969*x13970))+(((-2.0)*x13971*x13972))+x13970+((x13969*(r10*r10))))),-1);
if(!x13974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13973.value)+(((1.5707963267949)*(x13974.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13975=IKcos(j4);
IkReal x13976=IKsin(j4);
IkReal x13977=(cj5*r00);
IkReal x13978=(cj5*r10);
IkReal x13979=(r21*sj5);
IkReal x13980=(cj5*r20);
IkReal x13981=((1.0)*x13975);
IkReal x13982=((1.0)*x13976);
IkReal x13983=(sj5*x13976);
IkReal x13984=(sj5*x13975);
evalcond[0]=(((r11*x13984))+(((-1.0)*x13978*x13981))+((r12*x13976)));
evalcond[1]=(((x13976*x13979))+(((-1.0)*r22*x13981))+(((-1.0)*x13980*x13982)));
evalcond[2]=(((r01*x13983))+(((-1.0)*r02*x13981))+(((-1.0)*x13977*x13982)));
evalcond[3]=((-1.0)+((r11*x13983))+(((-1.0)*x13978*x13982))+(((-1.0)*r12*x13981)));
evalcond[4]=(((cj2*sj1))+((r02*x13976))+((r01*x13984))+((cj1*sj2))+(((-1.0)*x13977*x13981)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x13975*x13979))+(((-1.0)*x13980*x13981))+((r22*x13976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13985=((1.0)*cj5);
CheckValue<IkReal> x13986=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13985))+(((-1.0)*r20*sj5)))),-1);
if(!x13986.valid){
continue;
}
CheckValue<IkReal> x13987 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13985)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13987.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13986.value)))+(x13987.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13988=IKcos(j4);
IkReal x13989=IKsin(j4);
IkReal x13990=(cj5*r00);
IkReal x13991=(cj5*r10);
IkReal x13992=(r21*sj5);
IkReal x13993=(cj5*r20);
IkReal x13994=((1.0)*x13988);
IkReal x13995=((1.0)*x13989);
IkReal x13996=(sj5*x13989);
IkReal x13997=(sj5*x13988);
evalcond[0]=(((r12*x13989))+((r11*x13997))+(((-1.0)*x13991*x13994)));
evalcond[1]=((((-1.0)*x13993*x13995))+(((-1.0)*r22*x13994))+((x13989*x13992)));
evalcond[2]=((((-1.0)*r02*x13994))+(((-1.0)*x13990*x13995))+((r01*x13996)));
evalcond[3]=((-1.0)+((r11*x13996))+(((-1.0)*r12*x13994))+(((-1.0)*x13991*x13995)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x13990*x13994))+((r02*x13989))+((r01*x13997)));
evalcond[5]=((((-1.0)*x13993*x13994))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x13989))+((x13988*x13992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13998 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13998.valid){
continue;
}
CheckValue<IkReal> x13999=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13998.value)+(((1.5707963267949)*(x13999.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14000=IKcos(j4);
IkReal x14001=IKsin(j4);
IkReal x14002=(cj5*r00);
IkReal x14003=(cj5*r10);
IkReal x14004=(r21*sj5);
IkReal x14005=(cj5*r20);
IkReal x14006=((1.0)*x14000);
IkReal x14007=((1.0)*x14001);
IkReal x14008=(sj5*x14001);
IkReal x14009=(sj5*x14000);
evalcond[0]=(((r11*x14009))+((r12*x14001))+(((-1.0)*x14003*x14006)));
evalcond[1]=((((-1.0)*x14005*x14007))+((x14001*x14004))+(((-1.0)*r22*x14006)));
evalcond[2]=((((-1.0)*r02*x14006))+(((-1.0)*x14002*x14007))+((r01*x14008)));
evalcond[3]=((-1.0)+((r11*x14008))+(((-1.0)*x14003*x14007))+(((-1.0)*r12*x14006)));
evalcond[4]=(((cj2*sj1))+((r02*x14001))+((cj1*sj2))+(((-1.0)*x14002*x14006))+((r01*x14009)));
evalcond[5]=((((-1.0)*x14005*x14006))+((x14000*x14004))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x14001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14011 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14011)==0){
continue;
}
IkReal x14010=pow(x14011,-0.5);
CheckValue<IkReal> x14012 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14012.valid){
continue;
}
IkReal gconst36=((-1.0)*(x14012.value));
IkReal gconst37=((-1.0)*r01*x14010);
IkReal gconst38=(r00*x14010);
CheckValue<IkReal> x14013 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14013.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14013.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14016 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14016.valid){
continue;
}
IkReal x14014=((-1.0)*(x14016.value));
IkReal x14015=x14010;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14014;
IkReal gconst36=x14014;
IkReal gconst37=((-1.0)*r01*x14015);
IkReal gconst38=(r00*x14015);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14019 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14019.valid){
continue;
}
IkReal x14017=((-1.0)*(x14019.value));
IkReal x14018=x14010;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14017;
IkReal gconst36=x14017;
IkReal gconst37=((-1.0)*r01*x14018);
IkReal gconst38=(r00*x14018);
CheckValue<IkReal> x14027=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14027.valid){
continue;
}
IkReal x14020=x14027.value;
IkReal x14021=(sj3*x14020);
IkReal x14022=(r11*x14021);
IkReal x14023=(r21*x14021);
IkReal x14024=(r20*x14021);
IkReal x14025=(r10*x14021);
IkReal x14026=(r00*r01*x14021);
j4eval[0]=IKsign((((r00*r01*r20*x14022))+((r00*r01*r10*x14023))+((r12*r22*sj3))+((r10*x14024*(r00*r00)))+((r21*x14022*(r01*r01)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14028=gconst38*gconst38;
IkReal x14029=gconst37*gconst37;
IkReal x14030=((1.0)*cj3);
IkReal x14031=(r11*r20);
IkReal x14032=(r10*sj3);
IkReal x14033=(gconst37*gconst38);
IkReal x14034=(r11*sj3);
IkReal x14035=(r21*x14029);
IkReal x14036=(cj3*x14033);
CheckValue<IkReal> x14037=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x14028*x14030))+((x14031*x14036))+(((-1.0)*r12*r22*x14030))+(((-1.0)*r11*x14030*x14035))+((r10*r21*x14036)))),-1);
if(!x14037.valid){
continue;
}
CheckValue<IkReal> x14038 = IKatan2WithCheck(IkReal((((gconst38*r22*x14034))+((gconst37*r22*x14032)))),IkReal(((((-1.0)*r20*x14032*x14033))+(((-1.0)*sj3*x14028*x14031))+((r21*x14033*x14034))+((x14032*x14035)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14038.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14037.value)))+(x14038.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14039=IKsin(j4);
IkReal x14040=IKcos(j4);
IkReal x14041=(cj2*sj1);
IkReal x14042=(cj1*sj2);
IkReal x14043=(gconst38*r21);
IkReal x14044=(cj3*r20);
IkReal x14045=(gconst38*r10);
IkReal x14046=(cj3*gconst37);
IkReal x14047=(sj1*sj2);
IkReal x14048=(gconst38*r00);
IkReal x14049=(cj1*cj2);
IkReal x14050=(gconst37*sj3);
IkReal x14051=(gconst38*r20);
IkReal x14052=(gconst38*r01);
IkReal x14053=(gconst38*r11);
IkReal x14054=((1.0)*x14040);
IkReal x14055=((1.0)*x14039);
IkReal x14056=(cj3*x14039);
IkReal x14057=(sj3*x14040);
IkReal x14058=(gconst37*x14039);
IkReal x14059=(x14042+x14041);
evalcond[0]=((((-1.0)*x14051*x14055))+(((-1.0)*r22*x14054))+((r21*x14058)));
evalcond[1]=((((-1.0)*x14048*x14055))+(((-1.0)*r02*x14054))+((r01*x14058)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14054))+((r11*x14058))+(((-1.0)*x14045*x14055)));
evalcond[3]=(((r12*x14056))+(((-1.0)*cj3*x14045*x14054))+((r10*x14050))+((sj3*x14053))+((r11*x14040*x14046)));
evalcond[4]=(((r10*x14046))+(((-1.0)*r11*x14050*x14054))+(((-1.0)*r12*sj3*x14055))+((cj3*x14053))+((x14045*x14057)));
evalcond[5]=(((r20*x14050))+(((-1.0)*gconst38*x14044*x14054))+((sj3*x14043))+((r22*x14056))+x14059+((r21*x14040*x14046)));
evalcond[6]=(((r00*x14050))+(((-1.0)*x14047))+((r02*x14056))+((r01*x14040*x14046))+(((-1.0)*cj3*x14048*x14054))+x14049+((sj3*x14052)));
evalcond[7]=(((r00*x14046))+(((-1.0)*r01*x14050*x14054))+((x14048*x14057))+((cj3*x14052))+(((-1.0)*r02*sj3*x14055))+x14059);
evalcond[8]=((((-1.0)*x14049))+((x14051*x14057))+((cj3*x14043))+(((-1.0)*r22*sj3*x14055))+((gconst37*x14044))+(((-1.0)*r21*x14050*x14054))+x14047);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14060=gconst38*gconst38;
IkReal x14061=gconst37*gconst37;
IkReal x14062=(gconst37*r10);
IkReal x14063=(cj3*r22);
IkReal x14064=((1.0)*gconst38);
IkReal x14065=(r21*sj3);
IkReal x14066=(gconst38*r11);
IkReal x14067=(cj3*r20);
IkReal x14068=(cj3*r21);
IkReal x14069=(r20*sj3);
CheckValue<IkReal> x14070=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r11*x14064*x14069))+((r10*x14060*x14069))+((r11*x14061*x14065))+((r12*r22*sj3))+(((-1.0)*x14062*x14064*x14065)))),-1);
if(!x14070.valid){
continue;
}
CheckValue<IkReal> x14071 = IKatan2WithCheck(IkReal((((x14063*x14066))+((x14062*x14063)))),IkReal((((r10*x14061*x14068))+(((-1.0)*r11*x14060*x14067))+((gconst37*x14066*x14068))+(((-1.0)*x14062*x14064*x14067)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14070.value)))+(x14071.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14072=IKsin(j4);
IkReal x14073=IKcos(j4);
IkReal x14074=(cj2*sj1);
IkReal x14075=(cj1*sj2);
IkReal x14076=(gconst38*r21);
IkReal x14077=(cj3*r20);
IkReal x14078=(gconst38*r10);
IkReal x14079=(cj3*gconst37);
IkReal x14080=(sj1*sj2);
IkReal x14081=(gconst38*r00);
IkReal x14082=(cj1*cj2);
IkReal x14083=(gconst37*sj3);
IkReal x14084=(gconst38*r20);
IkReal x14085=(gconst38*r01);
IkReal x14086=(gconst38*r11);
IkReal x14087=((1.0)*x14073);
IkReal x14088=((1.0)*x14072);
IkReal x14089=(cj3*x14072);
IkReal x14090=(sj3*x14073);
IkReal x14091=(gconst37*x14072);
IkReal x14092=(x14075+x14074);
evalcond[0]=((((-1.0)*r22*x14087))+((r21*x14091))+(((-1.0)*x14084*x14088)));
evalcond[1]=((((-1.0)*x14081*x14088))+(((-1.0)*r02*x14087))+((r01*x14091)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14087))+(((-1.0)*x14078*x14088))+((r11*x14091)));
evalcond[3]=((((-1.0)*cj3*x14078*x14087))+((r12*x14089))+((r10*x14083))+((r11*x14073*x14079))+((sj3*x14086)));
evalcond[4]=((((-1.0)*r12*sj3*x14088))+((x14078*x14090))+(((-1.0)*r11*x14083*x14087))+((cj3*x14086))+((r10*x14079)));
evalcond[5]=((((-1.0)*gconst38*x14077*x14087))+((r20*x14083))+((sj3*x14076))+((r22*x14089))+((r21*x14073*x14079))+x14092);
evalcond[6]=(((r00*x14083))+(((-1.0)*x14080))+((r02*x14089))+((r01*x14073*x14079))+x14082+((sj3*x14085))+(((-1.0)*cj3*x14081*x14087)));
evalcond[7]=(((x14081*x14090))+((r00*x14079))+(((-1.0)*r02*sj3*x14088))+((cj3*x14085))+x14092+(((-1.0)*r01*x14083*x14087)));
evalcond[8]=((((-1.0)*r22*sj3*x14088))+((x14084*x14090))+(((-1.0)*x14082))+(((-1.0)*r21*x14083*x14087))+((gconst37*x14077))+x14080+((cj3*x14076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14093=((1.0)*gconst38);
CheckValue<IkReal> x14094 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14093))+((gconst37*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14094.valid){
continue;
}
CheckValue<IkReal> x14095=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r20))+(((-1.0)*r21*x14093)))),-1);
if(!x14095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14094.value)+(((1.5707963267949)*(x14095.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14096=IKsin(j4);
IkReal x14097=IKcos(j4);
IkReal x14098=(cj2*sj1);
IkReal x14099=(cj1*sj2);
IkReal x14100=(gconst38*r21);
IkReal x14101=(cj3*r20);
IkReal x14102=(gconst38*r10);
IkReal x14103=(cj3*gconst37);
IkReal x14104=(sj1*sj2);
IkReal x14105=(gconst38*r00);
IkReal x14106=(cj1*cj2);
IkReal x14107=(gconst37*sj3);
IkReal x14108=(gconst38*r20);
IkReal x14109=(gconst38*r01);
IkReal x14110=(gconst38*r11);
IkReal x14111=((1.0)*x14097);
IkReal x14112=((1.0)*x14096);
IkReal x14113=(cj3*x14096);
IkReal x14114=(sj3*x14097);
IkReal x14115=(gconst37*x14096);
IkReal x14116=(x14099+x14098);
evalcond[0]=((((-1.0)*x14108*x14112))+(((-1.0)*r22*x14111))+((r21*x14115)));
evalcond[1]=((((-1.0)*x14105*x14112))+((r01*x14115))+(((-1.0)*r02*x14111)));
evalcond[2]=((-1.0)+((r11*x14115))+(((-1.0)*r12*x14111))+(((-1.0)*x14102*x14112)));
evalcond[3]=(((sj3*x14110))+((r11*x14097*x14103))+(((-1.0)*cj3*x14102*x14111))+((r10*x14107))+((r12*x14113)));
evalcond[4]=(((x14102*x14114))+((cj3*x14110))+((r10*x14103))+(((-1.0)*r11*x14107*x14111))+(((-1.0)*r12*sj3*x14112)));
evalcond[5]=(((sj3*x14100))+((r22*x14113))+((r21*x14097*x14103))+x14116+((r20*x14107))+(((-1.0)*gconst38*x14101*x14111)));
evalcond[6]=(((r02*x14113))+((sj3*x14109))+((r00*x14107))+(((-1.0)*x14104))+((r01*x14097*x14103))+x14106+(((-1.0)*cj3*x14105*x14111)));
evalcond[7]=(((r00*x14103))+((cj3*x14109))+(((-1.0)*r02*sj3*x14112))+((x14105*x14114))+(((-1.0)*r01*x14107*x14111))+x14116);
evalcond[8]=((((-1.0)*r21*x14107*x14111))+((cj3*x14100))+((x14108*x14114))+(((-1.0)*x14106))+x14104+((gconst37*x14101))+(((-1.0)*r22*sj3*x14112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14118 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14118)==0){
continue;
}
IkReal x14117=pow(x14118,-0.5);
CheckValue<IkReal> x14119 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14119.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x14119.value))));
IkReal gconst40=((1.0)*r01*x14117);
IkReal gconst41=((-1.0)*r00*x14117);
CheckValue<IkReal> x14120 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14120.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14120.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14123 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14123.valid){
continue;
}
IkReal x14121=((1.0)*(x14123.value));
IkReal x14122=x14117;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14121)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14121)));
IkReal gconst40=((1.0)*r01*x14122);
IkReal gconst41=((-1.0)*r00*x14122);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14126 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14126.valid){
continue;
}
IkReal x14124=((1.0)*(x14126.value));
IkReal x14125=x14117;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14124)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14124)));
IkReal gconst40=((1.0)*r01*x14125);
IkReal gconst41=((-1.0)*r00*x14125);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14127=gconst41*gconst41;
IkReal x14128=gconst40*gconst40;
IkReal x14129=(gconst40*r10);
IkReal x14130=(r22*sj3);
IkReal x14131=(r11*sj3);
IkReal x14132=((1.0)*cj3);
IkReal x14133=(gconst41*r21);
IkReal x14134=(gconst41*r20);
IkReal x14135=(r21*x14128);
IkReal x14136=((1.0)*r20*x14127);
CheckValue<IkReal> x14137 = IKatan2WithCheck(IkReal((((gconst41*r11*x14130))+((x14129*x14130)))),IkReal((((r10*sj3*x14135))+((gconst40*x14131*x14133))+(((-1.0)*sj3*x14129*x14134))+(((-1.0)*x14131*x14136)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14137.valid){
continue;
}
CheckValue<IkReal> x14138=IKPowWithIntegerCheck(IKsign((((cj3*gconst40*r11*x14134))+(((-1.0)*r12*r22*x14132))+(((-1.0)*r11*x14132*x14135))+(((-1.0)*r10*r20*x14127*x14132))+((cj3*x14129*x14133)))),-1);
if(!x14138.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14137.value)+(((1.5707963267949)*(x14138.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14139=IKsin(j4);
IkReal x14140=IKcos(j4);
IkReal x14141=(cj2*sj1);
IkReal x14142=(cj1*sj2);
IkReal x14143=(gconst40*sj3);
IkReal x14144=(gconst41*sj3);
IkReal x14145=(gconst41*r20);
IkReal x14146=(cj3*gconst41);
IkReal x14147=(sj1*sj2);
IkReal x14148=(cj1*cj2);
IkReal x14149=(cj3*gconst40);
IkReal x14150=((1.0)*x14140);
IkReal x14151=((1.0)*x14139);
IkReal x14152=(cj3*x14139);
IkReal x14153=(gconst40*x14139);
IkReal x14154=(x14142+x14141);
IkReal x14155=(x14140*x14149);
evalcond[0]=((((-1.0)*r22*x14150))+(((-1.0)*x14145*x14151))+((r21*x14153)));
evalcond[1]=((((-1.0)*r02*x14150))+((r01*x14153))+(((-1.0)*gconst41*r00*x14151)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14151))+((r11*x14153))+(((-1.0)*r12*x14150)));
evalcond[3]=(((r10*x14143))+(((-1.0)*r10*x14146*x14150))+((r11*x14155))+((r12*x14152))+((r11*x14144)));
evalcond[4]=(((r10*x14149))+(((-1.0)*r11*x14143*x14150))+(((-1.0)*r12*sj3*x14151))+((r10*x14140*x14144))+((r11*x14146)));
evalcond[5]=(((r22*x14152))+((r21*x14144))+(((-1.0)*cj3*x14145*x14150))+x14154+((r21*x14155))+((r20*x14143)));
evalcond[6]=((((-1.0)*r00*x14146*x14150))+((r02*x14152))+((r01*x14144))+((r00*x14143))+((r01*x14155))+x14148+(((-1.0)*x14147)));
evalcond[7]=((((-1.0)*r01*x14143*x14150))+(((-1.0)*r02*sj3*x14151))+((r00*x14140*x14144))+((r01*x14146))+((r00*x14149))+x14154);
evalcond[8]=((((-1.0)*r21*x14143*x14150))+((r21*x14146))+(((-1.0)*r22*sj3*x14151))+((r20*x14140*x14144))+x14147+(((-1.0)*x14148))+((r20*x14149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14156=((1.0)*gconst41);
CheckValue<IkReal> x14157 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst40*r01))+(((-1.0)*r00*x14156)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14157.valid){
continue;
}
CheckValue<IkReal> x14158=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14156))+(((-1.0)*gconst40*r20)))),-1);
if(!x14158.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14157.value)+(((1.5707963267949)*(x14158.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14159=IKsin(j4);
IkReal x14160=IKcos(j4);
IkReal x14161=(cj2*sj1);
IkReal x14162=(cj1*sj2);
IkReal x14163=(gconst40*sj3);
IkReal x14164=(gconst41*sj3);
IkReal x14165=(gconst41*r20);
IkReal x14166=(cj3*gconst41);
IkReal x14167=(sj1*sj2);
IkReal x14168=(cj1*cj2);
IkReal x14169=(cj3*gconst40);
IkReal x14170=((1.0)*x14160);
IkReal x14171=((1.0)*x14159);
IkReal x14172=(cj3*x14159);
IkReal x14173=(gconst40*x14159);
IkReal x14174=(x14161+x14162);
IkReal x14175=(x14160*x14169);
evalcond[0]=(((r21*x14173))+(((-1.0)*r22*x14170))+(((-1.0)*x14165*x14171)));
evalcond[1]=(((r01*x14173))+(((-1.0)*r02*x14170))+(((-1.0)*gconst41*r00*x14171)));
evalcond[2]=((-1.0)+((r11*x14173))+(((-1.0)*gconst41*r10*x14171))+(((-1.0)*r12*x14170)));
evalcond[3]=((((-1.0)*r10*x14166*x14170))+((r10*x14163))+((r11*x14175))+((r12*x14172))+((r11*x14164)));
evalcond[4]=((((-1.0)*r12*sj3*x14171))+(((-1.0)*r11*x14163*x14170))+((r10*x14169))+((r11*x14166))+((r10*x14160*x14164)));
evalcond[5]=(((r22*x14172))+((r21*x14175))+x14174+((r21*x14164))+(((-1.0)*cj3*x14165*x14170))+((r20*x14163)));
evalcond[6]=(((r01*x14175))+(((-1.0)*r00*x14166*x14170))+((r02*x14172))+((r00*x14163))+((r01*x14164))+x14168+(((-1.0)*x14167)));
evalcond[7]=(((r00*x14160*x14164))+(((-1.0)*r01*x14163*x14170))+((r00*x14169))+((r01*x14166))+x14174+(((-1.0)*r02*sj3*x14171)));
evalcond[8]=((((-1.0)*r21*x14163*x14170))+((r20*x14160*x14164))+x14167+((r21*x14166))+(((-1.0)*r22*sj3*x14171))+((r20*x14169))+(((-1.0)*x14168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14176 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*gconst41*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14176.valid){
continue;
}
CheckValue<IkReal> x14177=IKPowWithIntegerCheck(IKsign((((gconst41*r01))+((gconst40*r00)))),-1);
if(!x14177.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14176.value)+(((1.5707963267949)*(x14177.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14178=IKsin(j4);
IkReal x14179=IKcos(j4);
IkReal x14180=(cj2*sj1);
IkReal x14181=(cj1*sj2);
IkReal x14182=(gconst40*sj3);
IkReal x14183=(gconst41*sj3);
IkReal x14184=(gconst41*r20);
IkReal x14185=(cj3*gconst41);
IkReal x14186=(sj1*sj2);
IkReal x14187=(cj1*cj2);
IkReal x14188=(cj3*gconst40);
IkReal x14189=((1.0)*x14179);
IkReal x14190=((1.0)*x14178);
IkReal x14191=(cj3*x14178);
IkReal x14192=(gconst40*x14178);
IkReal x14193=(x14181+x14180);
IkReal x14194=(x14179*x14188);
evalcond[0]=((((-1.0)*r22*x14189))+(((-1.0)*x14184*x14190))+((r21*x14192)));
evalcond[1]=((((-1.0)*gconst41*r00*x14190))+(((-1.0)*r02*x14189))+((r01*x14192)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14189))+((r11*x14192))+(((-1.0)*gconst41*r10*x14190)));
evalcond[3]=((((-1.0)*r10*x14185*x14189))+((r11*x14194))+((r12*x14191))+((r11*x14183))+((r10*x14182)));
evalcond[4]=((((-1.0)*r12*sj3*x14190))+(((-1.0)*r11*x14182*x14189))+((r11*x14185))+((r10*x14179*x14183))+((r10*x14188)));
evalcond[5]=(((r20*x14182))+((r22*x14191))+((r21*x14183))+x14193+((r21*x14194))+(((-1.0)*cj3*x14184*x14189)));
evalcond[6]=(((r02*x14191))+((r01*x14183))+((r00*x14182))+((r01*x14194))+x14187+(((-1.0)*r00*x14185*x14189))+(((-1.0)*x14186)));
evalcond[7]=((((-1.0)*r01*x14182*x14189))+((r01*x14185))+((r00*x14188))+x14193+(((-1.0)*r02*sj3*x14190))+((r00*x14179*x14183)));
evalcond[8]=((((-1.0)*r22*sj3*x14190))+((r20*x14188))+((r20*x14179*x14183))+((r21*x14185))+x14186+(((-1.0)*r21*x14182*x14189))+(((-1.0)*x14187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14195=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14195);
rxp1_1=(px*r21);
rxp1_2=(r11*x14195);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14196=(r11*sj5);
IkReal x14197=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x14197))+x14196);
j4eval[1]=((((-1.0)*cj3*x14197))+((cj3*x14196)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14198=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14198);
rxp1_1=(px*r21);
rxp1_2=(r11*x14198);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14199=(cj5*r10);
IkReal x14200=(r11*sj5);
j4eval[0]=((((-1.0)*x14199))+x14200);
j4eval[1]=(((sj3*x14199))+(((-1.0)*sj3*x14200)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14201=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14201);
rxp1_1=(px*r21);
rxp1_2=(r11*x14201);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14202=((1.0)*r10);
CheckValue<IkReal> x14203=IKPowWithIntegerCheck(cj3,-1);
if(!x14203.valid){
continue;
}
CheckValue<IkReal> x14204=IKPowWithIntegerCheck(r02,-1);
if(!x14204.valid){
continue;
}
CheckValue<IkReal> x14205=IKPowWithIntegerCheck((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*x14202))),-1);
if(!x14205.valid){
continue;
}
if( IKabs(((x14203.value)*(x14204.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14205.value)*(((((-1.0)*sj3*sj5*x14202))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14203.value)*(x14204.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x14205.value)*(((((-1.0)*sj3*sj5*x14202))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14203.value)*(x14204.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x14205.value)*(((((-1.0)*sj3*sj5*x14202))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14206=IKsin(j4);
IkReal x14207=IKcos(j4);
IkReal x14208=(cj2*sj1);
IkReal x14209=(cj1*sj2);
IkReal x14210=(cj5*r10);
IkReal x14211=(sj1*sj2);
IkReal x14212=(cj5*sj3);
IkReal x14213=(r11*sj5);
IkReal x14214=(cj3*sj5);
IkReal x14215=(r21*sj5);
IkReal x14216=(cj1*cj2);
IkReal x14217=(cj3*cj5);
IkReal x14218=(sj3*sj5);
IkReal x14219=((1.0)*x14206);
IkReal x14220=(r20*x14207);
IkReal x14221=(cj3*x14207);
IkReal x14222=(sj3*x14207);
IkReal x14223=(x14208+x14209);
evalcond[0]=((-1.0)*r02*x14207);
evalcond[1]=((((-1.0)*cj5*r20*x14219))+((x14206*x14215)));
evalcond[2]=((((-1.0)*x14211))+((cj3*r02*x14206))+x14216);
evalcond[3]=((((-1.0)*r02*sj3*x14219))+x14223);
evalcond[4]=((-1.0)+((x14206*x14213))+(((-1.0)*x14210*x14219)));
evalcond[5]=(((r11*x14212))+((r10*x14218))+(((-1.0)*x14210*x14221))+((x14213*x14221)));
evalcond[6]=(((r11*x14217))+((r10*x14214))+(((-1.0)*x14213*x14222))+((x14210*x14222)));
evalcond[7]=(((r21*x14207*x14214))+(((-1.0)*x14217*x14220))+((r21*x14212))+((r20*x14218))+x14223);
evalcond[8]=((((-1.0)*x14216))+(((-1.0)*x14215*x14222))+((r21*x14217))+((r20*x14214))+x14211+((x14212*x14220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14224=(cj5*r10);
IkReal x14225=((1.0)*r11);
CheckValue<IkReal> x14226=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*x14224))),-1);
if(!x14226.valid){
continue;
}
CheckValue<IkReal> x14227=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x14225))+((sj3*x14224))),-1);
if(!x14227.valid){
continue;
}
if( IKabs(x14226.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14227.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14225)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14226.value)+IKsqr(((x14227.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14225))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14226.value, ((x14227.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14225))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14228=IKsin(j4);
IkReal x14229=IKcos(j4);
IkReal x14230=(cj2*sj1);
IkReal x14231=(cj1*sj2);
IkReal x14232=(cj5*r10);
IkReal x14233=(sj1*sj2);
IkReal x14234=(cj5*sj3);
IkReal x14235=(r11*sj5);
IkReal x14236=(cj3*sj5);
IkReal x14237=(r21*sj5);
IkReal x14238=(cj1*cj2);
IkReal x14239=(cj3*cj5);
IkReal x14240=(sj3*sj5);
IkReal x14241=((1.0)*x14228);
IkReal x14242=(r20*x14229);
IkReal x14243=(cj3*x14229);
IkReal x14244=(sj3*x14229);
IkReal x14245=(x14231+x14230);
evalcond[0]=((-1.0)*r02*x14229);
evalcond[1]=(((x14228*x14237))+(((-1.0)*cj5*r20*x14241)));
evalcond[2]=((((-1.0)*x14233))+x14238+((cj3*r02*x14228)));
evalcond[3]=((((-1.0)*r02*sj3*x14241))+x14245);
evalcond[4]=((-1.0)+((x14228*x14235))+(((-1.0)*x14232*x14241)));
evalcond[5]=((((-1.0)*x14232*x14243))+((x14235*x14243))+((r10*x14240))+((r11*x14234)));
evalcond[6]=((((-1.0)*x14235*x14244))+((r10*x14236))+((x14232*x14244))+((r11*x14239)));
evalcond[7]=(((r21*x14234))+((r21*x14229*x14236))+((r20*x14240))+(((-1.0)*x14239*x14242))+x14245);
evalcond[8]=(((r20*x14236))+(((-1.0)*x14237*x14244))+((r21*x14239))+((x14234*x14242))+(((-1.0)*x14238))+x14233);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14246=((1.0)*r10);
IkReal x14247=(r11*sj5);
CheckValue<IkReal> x14248=IKPowWithIntegerCheck(((((-1.0)*cj5*x14246))+x14247),-1);
if(!x14248.valid){
continue;
}
CheckValue<IkReal> x14249=IKPowWithIntegerCheck((((cj3*x14247))+(((-1.0)*cj3*cj5*x14246))),-1);
if(!x14249.valid){
continue;
}
if( IKabs(x14248.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14249.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14246)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14248.value)+IKsqr(((x14249.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14246))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14248.value, ((x14249.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14246))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14250=IKsin(j4);
IkReal x14251=IKcos(j4);
IkReal x14252=(cj2*sj1);
IkReal x14253=(cj1*sj2);
IkReal x14254=(cj5*r10);
IkReal x14255=(sj1*sj2);
IkReal x14256=(cj5*sj3);
IkReal x14257=(r11*sj5);
IkReal x14258=(cj3*sj5);
IkReal x14259=(r21*sj5);
IkReal x14260=(cj1*cj2);
IkReal x14261=(cj3*cj5);
IkReal x14262=(sj3*sj5);
IkReal x14263=((1.0)*x14250);
IkReal x14264=(r20*x14251);
IkReal x14265=(cj3*x14251);
IkReal x14266=(sj3*x14251);
IkReal x14267=(x14253+x14252);
evalcond[0]=((-1.0)*r02*x14251);
evalcond[1]=((((-1.0)*cj5*r20*x14263))+((x14250*x14259)));
evalcond[2]=(((cj3*r02*x14250))+x14260+(((-1.0)*x14255)));
evalcond[3]=((((-1.0)*r02*sj3*x14263))+x14267);
evalcond[4]=((-1.0)+(((-1.0)*x14254*x14263))+((x14250*x14257)));
evalcond[5]=((((-1.0)*x14254*x14265))+((x14257*x14265))+((r11*x14256))+((r10*x14262)));
evalcond[6]=(((r11*x14261))+((r10*x14258))+((x14254*x14266))+(((-1.0)*x14257*x14266)));
evalcond[7]=(((r21*x14256))+((r21*x14251*x14258))+((r20*x14262))+(((-1.0)*x14261*x14264))+x14267);
evalcond[8]=(((r21*x14261))+(((-1.0)*x14260))+((x14256*x14264))+((r20*x14258))+(((-1.0)*x14259*x14266))+x14255);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14268=cj5*cj5;
IkReal x14269=((1.0)*cj3);
IkReal x14270=(r10*r21);
IkReal x14271=(cj5*sj5);
IkReal x14272=(r11*r21);
IkReal x14273=(r11*r20);
IkReal x14274=(r22*sj3);
IkReal x14275=(r10*r20);
IkReal x14276=((1.0)*sj3*x14268);
CheckValue<IkReal> x14277 = IKatan2WithCheck(IkReal((((cj5*r11*x14274))+((r10*sj5*x14274)))),IkReal((((sj3*x14270))+(((-1.0)*x14273*x14276))+(((-1.0)*x14270*x14276))+(((-1.0)*sj3*x14271*x14275))+((sj3*x14271*x14272)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14277.valid){
continue;
}
CheckValue<IkReal> x14278=IKPowWithIntegerCheck(IKsign((((cj3*x14271*x14273))+((cj3*x14270*x14271))+((cj3*x14268*x14272))+(((-1.0)*x14268*x14269*x14275))+(((-1.0)*x14269*x14272))+(((-1.0)*r12*r22*x14269)))),-1);
if(!x14278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14277.value)+(((1.5707963267949)*(x14278.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14279=IKsin(j4);
IkReal x14280=IKcos(j4);
IkReal x14281=(cj2*sj1);
IkReal x14282=(cj1*sj2);
IkReal x14283=(cj5*sj3);
IkReal x14284=(cj5*r10);
IkReal x14285=(r00*sj5);
IkReal x14286=(sj1*sj2);
IkReal x14287=(r11*sj5);
IkReal x14288=(cj3*cj5);
IkReal x14289=(cj3*sj5);
IkReal x14290=(r21*sj5);
IkReal x14291=(cj1*cj2);
IkReal x14292=(sj3*sj5);
IkReal x14293=(r01*sj5);
IkReal x14294=((1.0)*x14280);
IkReal x14295=((1.0)*x14279);
IkReal x14296=(cj3*x14279);
IkReal x14297=(cj3*x14280);
IkReal x14298=(x14281+x14282);
evalcond[0]=((((-1.0)*r22*x14294))+((x14279*x14290))+(((-1.0)*cj5*r20*x14295)));
evalcond[1]=((((-1.0)*cj5*r00*x14295))+((x14279*x14293))+(((-1.0)*r02*x14294)));
evalcond[2]=((-1.0)+(((-1.0)*x14284*x14295))+((x14279*x14287))+(((-1.0)*r12*x14294)));
evalcond[3]=(((x14287*x14297))+((r10*x14292))+((r12*x14296))+(((-1.0)*cj3*x14284*x14294))+((r11*x14283)));
evalcond[4]=(((r10*x14289))+((r11*x14288))+((r10*x14280*x14283))+(((-1.0)*sj3*x14287*x14294))+(((-1.0)*r12*sj3*x14295)));
evalcond[5]=((((-1.0)*r20*x14288*x14294))+((r20*x14292))+((r21*x14283))+((r21*x14280*x14289))+((r22*x14296))+x14298);
evalcond[6]=(((r02*x14296))+((r01*x14283))+((r01*x14280*x14289))+((sj3*x14285))+(((-1.0)*x14286))+(((-1.0)*r00*x14288*x14294))+x14291);
evalcond[7]=(((r00*x14280*x14283))+((cj3*x14285))+((r01*x14288))+(((-1.0)*r02*sj3*x14295))+x14298+(((-1.0)*r01*x14292*x14294)));
evalcond[8]=((((-1.0)*sj3*x14290*x14294))+((r21*x14288))+(((-1.0)*x14291))+(((-1.0)*r22*sj3*x14295))+x14286+((r20*x14289))+((r20*x14280*x14283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14299=((1.0)*cj5);
CheckValue<IkReal> x14300=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14299))+(((-1.0)*r20*sj5)))),-1);
if(!x14300.valid){
continue;
}
CheckValue<IkReal> x14301 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14299)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14300.value)))+(x14301.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14302=IKsin(j4);
IkReal x14303=IKcos(j4);
IkReal x14304=(cj2*sj1);
IkReal x14305=(cj1*sj2);
IkReal x14306=(cj5*sj3);
IkReal x14307=(cj5*r10);
IkReal x14308=(r00*sj5);
IkReal x14309=(sj1*sj2);
IkReal x14310=(r11*sj5);
IkReal x14311=(cj3*cj5);
IkReal x14312=(cj3*sj5);
IkReal x14313=(r21*sj5);
IkReal x14314=(cj1*cj2);
IkReal x14315=(sj3*sj5);
IkReal x14316=(r01*sj5);
IkReal x14317=((1.0)*x14303);
IkReal x14318=((1.0)*x14302);
IkReal x14319=(cj3*x14302);
IkReal x14320=(cj3*x14303);
IkReal x14321=(x14305+x14304);
evalcond[0]=((((-1.0)*r22*x14317))+(((-1.0)*cj5*r20*x14318))+((x14302*x14313)));
evalcond[1]=((((-1.0)*r02*x14317))+((x14302*x14316))+(((-1.0)*cj5*r00*x14318)));
evalcond[2]=((-1.0)+(((-1.0)*x14307*x14318))+((x14302*x14310))+(((-1.0)*r12*x14317)));
evalcond[3]=(((r11*x14306))+(((-1.0)*cj3*x14307*x14317))+((x14310*x14320))+((r12*x14319))+((r10*x14315)));
evalcond[4]=(((r11*x14311))+((r10*x14303*x14306))+(((-1.0)*r12*sj3*x14318))+(((-1.0)*sj3*x14310*x14317))+((r10*x14312)));
evalcond[5]=(((r21*x14303*x14312))+(((-1.0)*r20*x14311*x14317))+((r20*x14315))+x14321+((r21*x14306))+((r22*x14319)));
evalcond[6]=((((-1.0)*r00*x14311*x14317))+((r02*x14319))+((r01*x14306))+(((-1.0)*x14309))+x14314+((r01*x14303*x14312))+((sj3*x14308)));
evalcond[7]=(((r00*x14303*x14306))+(((-1.0)*r01*x14315*x14317))+(((-1.0)*r02*sj3*x14318))+((r01*x14311))+x14321+((cj3*x14308)));
evalcond[8]=(((r20*x14303*x14306))+(((-1.0)*x14314))+(((-1.0)*sj3*x14313*x14317))+((r20*x14312))+((r21*x14311))+x14309+(((-1.0)*r22*sj3*x14318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14322 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14322.valid){
continue;
}
CheckValue<IkReal> x14323=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14322.value)+(((1.5707963267949)*(x14323.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14324=IKsin(j4);
IkReal x14325=IKcos(j4);
IkReal x14326=(cj2*sj1);
IkReal x14327=(cj1*sj2);
IkReal x14328=(cj5*sj3);
IkReal x14329=(cj5*r10);
IkReal x14330=(r00*sj5);
IkReal x14331=(sj1*sj2);
IkReal x14332=(r11*sj5);
IkReal x14333=(cj3*cj5);
IkReal x14334=(cj3*sj5);
IkReal x14335=(r21*sj5);
IkReal x14336=(cj1*cj2);
IkReal x14337=(sj3*sj5);
IkReal x14338=(r01*sj5);
IkReal x14339=((1.0)*x14325);
IkReal x14340=((1.0)*x14324);
IkReal x14341=(cj3*x14324);
IkReal x14342=(cj3*x14325);
IkReal x14343=(x14327+x14326);
evalcond[0]=((((-1.0)*r22*x14339))+((x14324*x14335))+(((-1.0)*cj5*r20*x14340)));
evalcond[1]=((((-1.0)*r02*x14339))+((x14324*x14338))+(((-1.0)*cj5*r00*x14340)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14339))+((x14324*x14332))+(((-1.0)*x14329*x14340)));
evalcond[3]=(((x14332*x14342))+((r11*x14328))+(((-1.0)*cj3*x14329*x14339))+((r12*x14341))+((r10*x14337)));
evalcond[4]=(((r10*x14325*x14328))+((r11*x14333))+(((-1.0)*sj3*x14332*x14339))+(((-1.0)*r12*sj3*x14340))+((r10*x14334)));
evalcond[5]=(((r20*x14337))+((r22*x14341))+(((-1.0)*r20*x14333*x14339))+((r21*x14325*x14334))+((r21*x14328))+x14343);
evalcond[6]=((((-1.0)*r00*x14333*x14339))+((r01*x14328))+(((-1.0)*x14331))+((r02*x14341))+((r01*x14325*x14334))+x14336+((sj3*x14330)));
evalcond[7]=(((r00*x14325*x14328))+(((-1.0)*r02*sj3*x14340))+(((-1.0)*r01*x14337*x14339))+((r01*x14333))+x14343+((cj3*x14330)));
evalcond[8]=(((r20*x14334))+(((-1.0)*sj3*x14335*x14339))+(((-1.0)*x14336))+x14331+((r20*x14325*x14328))+((r21*x14333))+(((-1.0)*r22*sj3*x14340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14344=((-1.0)*r00);
IkReal x14346 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14346)==0){
continue;
}
IkReal x14345=pow(x14346,-0.5);
CheckValue<IkReal> x14347 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14344),IKFAST_ATAN2_MAGTHRESH);
if(!x14347.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14347.value));
IkReal gconst13=(r01*x14345);
IkReal gconst14=(x14344*x14345);
CheckValue<IkReal> x14348 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14348.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14348.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14349=((-1.0)*r00);
IkReal x14350=x14345;
CheckValue<IkReal> x14352 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14349),IKFAST_ATAN2_MAGTHRESH);
if(!x14352.valid){
continue;
}
IkReal x14351=((-1.0)*(x14352.value));
sj5=gconst13;
cj5=gconst14;
j5=x14351;
IkReal gconst12=x14351;
IkReal gconst13=(r01*x14350);
IkReal gconst14=(x14349*x14350);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14353=((1.0)*sj0);
IkReal x14354=((1.0)*cj0);
CheckValue<IkReal> x14355 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14354))+(((-1.0)*r12*x14353)))),IkReal((((cj0*gconst14*r00))+((gconst14*r10*sj0))+(((-1.0)*gconst13*r11*x14353))+(((-1.0)*gconst13*r01*x14354)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14355.valid){
continue;
}
CheckValue<IkReal> x14356=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x14356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14355.value)+(((1.5707963267949)*(x14356.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14357=IKsin(j4);
IkReal x14358=IKcos(j4);
IkReal x14359=((1.0)*r22);
IkReal x14360=((1.0)*r12);
IkReal x14361=(gconst13*sj3);
IkReal x14362=(gconst13*r01);
IkReal x14363=(sj1*sj2);
IkReal x14364=(gconst14*sj3);
IkReal x14365=(cj2*sj1);
IkReal x14366=((1.0)*sj0);
IkReal x14367=(cj3*gconst13);
IkReal x14368=(cj3*gconst14);
IkReal x14369=((1.0)*cj0);
IkReal x14370=((1.0)*gconst14);
IkReal x14371=(cj1*sj2);
IkReal x14372=(sj3*x14357);
IkReal x14373=((1.0)*cj1*cj2);
IkReal x14374=(cj3*x14358);
IkReal x14375=(cj3*x14357);
IkReal x14376=(gconst13*x14357);
IkReal x14377=((1.0)*x14358);
IkReal x14378=(x14357*x14370);
evalcond[0]=(((r21*x14376))+(((-1.0)*r20*x14378))+(((-1.0)*x14358*x14359)));
evalcond[1]=(cj0+(((-1.0)*r10*x14378))+((r11*x14376))+(((-1.0)*x14358*x14360)));
evalcond[2]=((((-1.0)*x14366))+((x14357*x14362))+(((-1.0)*r02*x14377))+(((-1.0)*r00*x14378)));
evalcond[3]=(((r21*x14358*x14367))+(((-1.0)*r20*x14368*x14377))+((r20*x14361))+((r22*x14375))+((r21*x14364))+x14371+x14365);
evalcond[4]=((((-1.0)*r21*x14361*x14377))+(((-1.0)*x14359*x14372))+((r20*x14367))+((r21*x14368))+((r20*x14358*x14364))+x14363+(((-1.0)*x14373)));
evalcond[5]=(((x14362*x14374))+(((-1.0)*r00*x14368*x14377))+((cj0*x14363))+(((-1.0)*cj1*cj2*x14369))+((r01*x14364))+((r00*x14361))+((r02*x14375)));
evalcond[6]=(((r10*x14361))+((r11*x14364))+(((-1.0)*r10*x14368*x14377))+((r12*x14375))+((sj0*x14363))+(((-1.0)*cj1*cj2*x14366))+((r11*x14358*x14367)));
evalcond[7]=((((-1.0)*r01*x14361*x14377))+(((-1.0)*x14369*x14371))+((r01*x14368))+((r00*x14358*x14364))+(((-1.0)*x14365*x14369))+((r00*x14367))+(((-1.0)*r02*x14372)));
evalcond[8]=(((r10*x14367))+(((-1.0)*r11*x14361*x14377))+((r11*x14368))+((r10*x14358*x14364))+(((-1.0)*x14365*x14366))+(((-1.0)*x14360*x14372))+(((-1.0)*x14366*x14371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14379=((1.0)*gconst14);
CheckValue<IkReal> x14380=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14379))+(((-1.0)*gconst13*r10)))),-1);
if(!x14380.valid){
continue;
}
CheckValue<IkReal> x14381 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x14379))+((gconst13*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14381.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14380.value)))+(x14381.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14382=IKsin(j4);
IkReal x14383=IKcos(j4);
IkReal x14384=((1.0)*r22);
IkReal x14385=((1.0)*r12);
IkReal x14386=(gconst13*sj3);
IkReal x14387=(gconst13*r01);
IkReal x14388=(sj1*sj2);
IkReal x14389=(gconst14*sj3);
IkReal x14390=(cj2*sj1);
IkReal x14391=((1.0)*sj0);
IkReal x14392=(cj3*gconst13);
IkReal x14393=(cj3*gconst14);
IkReal x14394=((1.0)*cj0);
IkReal x14395=((1.0)*gconst14);
IkReal x14396=(cj1*sj2);
IkReal x14397=(sj3*x14382);
IkReal x14398=((1.0)*cj1*cj2);
IkReal x14399=(cj3*x14383);
IkReal x14400=(cj3*x14382);
IkReal x14401=(gconst13*x14382);
IkReal x14402=((1.0)*x14383);
IkReal x14403=(x14382*x14395);
evalcond[0]=(((r21*x14401))+(((-1.0)*x14383*x14384))+(((-1.0)*r20*x14403)));
evalcond[1]=(cj0+((r11*x14401))+(((-1.0)*r10*x14403))+(((-1.0)*x14383*x14385)));
evalcond[2]=((((-1.0)*r02*x14402))+((x14382*x14387))+(((-1.0)*r00*x14403))+(((-1.0)*x14391)));
evalcond[3]=(((r20*x14386))+((r21*x14389))+((r21*x14383*x14392))+((r22*x14400))+(((-1.0)*r20*x14393*x14402))+x14396+x14390);
evalcond[4]=((((-1.0)*x14384*x14397))+((r21*x14393))+(((-1.0)*r21*x14386*x14402))+((r20*x14383*x14389))+x14388+((r20*x14392))+(((-1.0)*x14398)));
evalcond[5]=(((cj0*x14388))+(((-1.0)*cj1*cj2*x14394))+((x14387*x14399))+((r00*x14386))+((r01*x14389))+((r02*x14400))+(((-1.0)*r00*x14393*x14402)));
evalcond[6]=((((-1.0)*cj1*cj2*x14391))+((sj0*x14388))+((r12*x14400))+((r11*x14383*x14392))+((r10*x14386))+((r11*x14389))+(((-1.0)*r10*x14393*x14402)));
evalcond[7]=((((-1.0)*x14390*x14394))+(((-1.0)*x14394*x14396))+((r01*x14393))+((r00*x14392))+(((-1.0)*r01*x14386*x14402))+(((-1.0)*r02*x14397))+((r00*x14383*x14389)));
evalcond[8]=((((-1.0)*x14390*x14391))+(((-1.0)*r11*x14386*x14402))+((r10*x14383*x14389))+((r10*x14392))+(((-1.0)*x14385*x14397))+(((-1.0)*x14391*x14396))+((r11*x14393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14404=((-1.0)*r01);
IkReal x14406 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14406)==0){
continue;
}
IkReal x14405=pow(x14406,-0.5);
CheckValue<IkReal> x14407 = IKatan2WithCheck(IkReal(x14404),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14407.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14407.value))));
IkReal gconst16=(x14404*x14405);
IkReal gconst17=((1.0)*r00*x14405);
CheckValue<IkReal> x14408 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14408.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14408.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x14409=((-1.0)*r01);
CheckValue<IkReal> x14412 = IKatan2WithCheck(IkReal(x14409),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14412.valid){
continue;
}
IkReal x14410=((1.0)*(x14412.value));
IkReal x14411=x14405;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14410)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14410)));
IkReal gconst16=(x14409*x14411);
IkReal gconst17=((1.0)*r00*x14411);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14413=((-1.0)*r01);
CheckValue<IkReal> x14416 = IKatan2WithCheck(IkReal(x14413),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14416.valid){
continue;
}
IkReal x14414=((1.0)*(x14416.value));
IkReal x14415=x14405;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14414)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14414)));
IkReal gconst16=(x14413*x14415);
IkReal gconst17=((1.0)*r00*x14415);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14417=((-1.0)*r01);
CheckValue<IkReal> x14420 = IKatan2WithCheck(IkReal(x14417),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14420.valid){
continue;
}
IkReal x14418=((1.0)*(x14420.value));
IkReal x14419=x14405;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14418)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14418)));
IkReal gconst16=(x14417*x14419);
IkReal gconst17=((1.0)*r00*x14419);
IkReal x14421=r02*r02;
IkReal x14422=(r12*sj0);
IkReal x14423=((1.0)*cj0);
IkReal x14424=x14405;
j4eval[0]=((IKabs(((((-1.0)*x14422))+(((-1.0)*r02*x14423)))))+(IKabs((((cj0*x14421*x14424))+(((-1.0)*x14423*x14424))+((r02*x14422*x14424))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x14425=((-1.0)*r01);
CheckValue<IkReal> x14428 = IKatan2WithCheck(IkReal(x14425),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14428.valid){
continue;
}
IkReal x14426=((1.0)*(x14428.value));
IkReal x14427=x14405;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14426)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14426)));
IkReal gconst16=(x14425*x14427);
IkReal gconst17=((1.0)*r00*x14427);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14429=((-1.0)*r01);
CheckValue<IkReal> x14432 = IKatan2WithCheck(IkReal(x14429),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14432.valid){
continue;
}
IkReal x14430=((1.0)*(x14432.value));
IkReal x14431=x14405;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14430)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14430)));
IkReal gconst16=(x14429*x14431);
IkReal gconst17=((1.0)*r00*x14431);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14433=gconst16*gconst16;
IkReal x14434=gconst17*gconst17;
IkReal x14435=(r11*sj3);
IkReal x14436=(cj3*r10);
IkReal x14437=((1.0)*cj3);
IkReal x14438=(r10*sj3);
IkReal x14439=(gconst16*gconst17);
IkReal x14440=(r21*x14433);
IkReal x14441=((1.0)*r20*x14434);
CheckValue<IkReal> x14442 = IKatan2WithCheck(IkReal((((gconst17*r22*x14435))+((gconst16*r22*x14438)))),IkReal(((((-1.0)*r20*x14438*x14439))+((x14438*x14440))+((r21*x14435*x14439))+(((-1.0)*x14435*x14441)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14442.valid){
continue;
}
CheckValue<IkReal> x14443=IKPowWithIntegerCheck(IKsign((((r21*x14436*x14439))+(((-1.0)*x14436*x14441))+(((-1.0)*r12*r22*x14437))+((cj3*r11*r20*x14439))+(((-1.0)*r11*x14437*x14440)))),-1);
if(!x14443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14442.value)+(((1.5707963267949)*(x14443.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14444=IKsin(j4);
IkReal x14445=IKcos(j4);
IkReal x14446=(cj2*sj1);
IkReal x14447=(cj1*sj2);
IkReal x14448=(gconst16*r21);
IkReal x14449=(cj3*gconst17);
IkReal x14450=(gconst16*r20);
IkReal x14451=(sj1*sj2);
IkReal x14452=(gconst17*r20);
IkReal x14453=(gconst17*sj3);
IkReal x14454=(gconst16*r10);
IkReal x14455=(cj1*cj2);
IkReal x14456=(gconst16*sj3);
IkReal x14457=((1.0)*x14445);
IkReal x14458=((1.0)*x14444);
IkReal x14459=(gconst16*x14444);
IkReal x14460=(cj3*x14445);
IkReal x14461=(cj3*x14444);
IkReal x14462=(x14446+x14447);
evalcond[0]=((((-1.0)*x14452*x14458))+(((-1.0)*r22*x14457))+((x14444*x14448)));
evalcond[1]=(((r01*x14459))+(((-1.0)*gconst17*r00*x14458))+(((-1.0)*r02*x14457)));
evalcond[2]=((-1.0)+((r11*x14459))+(((-1.0)*gconst17*r10*x14458))+(((-1.0)*r12*x14457)));
evalcond[3]=(((gconst16*r11*x14460))+((r11*x14453))+((r12*x14461))+((sj3*x14454))+(((-1.0)*r10*x14449*x14457)));
evalcond[4]=((((-1.0)*r11*x14456*x14457))+((r11*x14449))+(((-1.0)*r12*sj3*x14458))+((r10*x14445*x14453))+((cj3*x14454)));
evalcond[5]=(((r22*x14461))+((x14448*x14460))+x14462+((sj3*x14450))+(((-1.0)*r20*x14449*x14457))+((r21*x14453)));
evalcond[6]=((((-1.0)*r00*x14449*x14457))+((r00*x14456))+((r01*x14453))+((r02*x14461))+(((-1.0)*x14451))+x14455+((gconst16*r01*x14460)));
evalcond[7]=(((r00*x14445*x14453))+((r01*x14449))+(((-1.0)*r01*x14456*x14457))+x14462+(((-1.0)*r02*sj3*x14458))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*r22*sj3*x14458))+(((-1.0)*x14455))+x14451+((cj3*x14450))+((r21*x14449))+((sj3*x14445*x14452))+(((-1.0)*sj3*x14448*x14457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14463=((1.0)*gconst17);
CheckValue<IkReal> x14464=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x14463)))),-1);
if(!x14464.valid){
continue;
}
CheckValue<IkReal> x14465 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14463))+((gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14464.value)))+(x14465.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14466=IKsin(j4);
IkReal x14467=IKcos(j4);
IkReal x14468=(cj2*sj1);
IkReal x14469=(cj1*sj2);
IkReal x14470=(gconst16*r21);
IkReal x14471=(cj3*gconst17);
IkReal x14472=(gconst16*r20);
IkReal x14473=(sj1*sj2);
IkReal x14474=(gconst17*r20);
IkReal x14475=(gconst17*sj3);
IkReal x14476=(gconst16*r10);
IkReal x14477=(cj1*cj2);
IkReal x14478=(gconst16*sj3);
IkReal x14479=((1.0)*x14467);
IkReal x14480=((1.0)*x14466);
IkReal x14481=(gconst16*x14466);
IkReal x14482=(cj3*x14467);
IkReal x14483=(cj3*x14466);
IkReal x14484=(x14468+x14469);
evalcond[0]=((((-1.0)*x14474*x14480))+(((-1.0)*r22*x14479))+((x14466*x14470)));
evalcond[1]=((((-1.0)*gconst17*r00*x14480))+(((-1.0)*r02*x14479))+((r01*x14481)));
evalcond[2]=((-1.0)+((r11*x14481))+(((-1.0)*gconst17*r10*x14480))+(((-1.0)*r12*x14479)));
evalcond[3]=(((sj3*x14476))+(((-1.0)*r10*x14471*x14479))+((r12*x14483))+((r11*x14475))+((gconst16*r11*x14482)));
evalcond[4]=(((r11*x14471))+((r10*x14467*x14475))+(((-1.0)*r12*sj3*x14480))+(((-1.0)*r11*x14478*x14479))+((cj3*x14476)));
evalcond[5]=((((-1.0)*r20*x14471*x14479))+((sj3*x14472))+((r21*x14475))+((r22*x14483))+x14484+((x14470*x14482)));
evalcond[6]=((((-1.0)*r00*x14471*x14479))+((r00*x14478))+((r02*x14483))+((r01*x14475))+(((-1.0)*x14473))+x14477+((gconst16*r01*x14482)));
evalcond[7]=((((-1.0)*r02*sj3*x14480))+((r01*x14471))+(((-1.0)*r01*x14478*x14479))+x14484+((r00*x14467*x14475))+((cj3*gconst16*r00)));
evalcond[8]=(((r21*x14471))+(((-1.0)*r22*sj3*x14480))+(((-1.0)*x14477))+((sj3*x14467*x14474))+(((-1.0)*sj3*x14470*x14479))+x14473+((cj3*x14472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14485=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x14485.valid){
continue;
}
CheckValue<IkReal> x14486 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst17*r20))+((gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14486.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14485.value)))+(x14486.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14487=IKsin(j4);
IkReal x14488=IKcos(j4);
IkReal x14489=(cj2*sj1);
IkReal x14490=(cj1*sj2);
IkReal x14491=(gconst16*r21);
IkReal x14492=(cj3*gconst17);
IkReal x14493=(gconst16*r20);
IkReal x14494=(sj1*sj2);
IkReal x14495=(gconst17*r20);
IkReal x14496=(gconst17*sj3);
IkReal x14497=(gconst16*r10);
IkReal x14498=(cj1*cj2);
IkReal x14499=(gconst16*sj3);
IkReal x14500=((1.0)*x14488);
IkReal x14501=((1.0)*x14487);
IkReal x14502=(gconst16*x14487);
IkReal x14503=(cj3*x14488);
IkReal x14504=(cj3*x14487);
IkReal x14505=(x14490+x14489);
evalcond[0]=(((x14487*x14491))+(((-1.0)*x14495*x14501))+(((-1.0)*r22*x14500)));
evalcond[1]=((((-1.0)*r02*x14500))+(((-1.0)*gconst17*r00*x14501))+((r01*x14502)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14500))+((r11*x14502))+(((-1.0)*gconst17*r10*x14501)));
evalcond[3]=(((r11*x14496))+(((-1.0)*r10*x14492*x14500))+((gconst16*r11*x14503))+((sj3*x14497))+((r12*x14504)));
evalcond[4]=(((r11*x14492))+((r10*x14488*x14496))+((cj3*x14497))+(((-1.0)*r11*x14499*x14500))+(((-1.0)*r12*sj3*x14501)));
evalcond[5]=(((r21*x14496))+((sj3*x14493))+((r22*x14504))+(((-1.0)*r20*x14492*x14500))+x14505+((x14491*x14503)));
evalcond[6]=((((-1.0)*x14494))+((r02*x14504))+(((-1.0)*r00*x14492*x14500))+((gconst16*r01*x14503))+x14498+((r00*x14499))+((r01*x14496)));
evalcond[7]=(((r00*x14488*x14496))+x14505+((r01*x14492))+(((-1.0)*r01*x14499*x14500))+((cj3*gconst16*r00))+(((-1.0)*r02*sj3*x14501)));
evalcond[8]=((((-1.0)*x14498))+(((-1.0)*sj3*x14491*x14500))+((r21*x14492))+x14494+((cj3*x14493))+(((-1.0)*r22*sj3*x14501))+((sj3*x14488*x14495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14506=((-1.0)*r01);
CheckValue<IkReal> x14509 = IKatan2WithCheck(IkReal(x14506),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14509.valid){
continue;
}
IkReal x14507=((1.0)*(x14509.value));
IkReal x14508=x14405;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14507)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14507)));
IkReal gconst16=(x14506*x14508);
IkReal gconst17=((1.0)*r00*x14508);
IkReal x14510=r02*r02;
IkReal x14511=(r12*sj0);
IkReal x14512=((1.0)*cj0);
IkReal x14513=x14405;
j4eval[0]=((IKabs(((((-1.0)*r02*x14512))+(((-1.0)*x14511)))))+(IKabs(((((-1.0)*x14512*x14513))+((cj0*x14510*x14513))+((r02*x14511*x14513))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14514=((1.0)*r12);
IkReal x14515=(sj1*sj2);
IkReal x14516=(cj1*cj2);
IkReal x14517=((1.0)*sj3);
IkReal x14518=(gconst16*r21);
IkReal x14519=(cj3*gconst16*r20);
IkReal x14520=(gconst17*r20*sj3);
IkReal x14521=(cj3*gconst17*r21);
CheckValue<IkReal> x14522=IKPowWithIntegerCheck(((((-1.0)*gconst16*r11*x14517*x14518))+((gconst17*r10*sj3*x14518))+(((-1.0)*r10*r20*x14517*(gconst17*gconst17)))+((gconst16*r11*x14520))),-1);
if(!x14522.valid){
continue;
}
CheckValue<IkReal> x14523=IKPowWithIntegerCheck(((((-1.0)*x14517*x14518))+x14520),-1);
if(!x14523.valid){
continue;
}
if( IKabs(((x14522.value)*(((((-1.0)*x14514*x14521))+(((-1.0)*x14514*x14519))+(((-1.0)*x14514*x14515))+((cj0*sj3*x14518))+((r12*x14516))+(((-1.0)*cj0*gconst17*r20*x14517)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14523.value)*(((((-1.0)*x14521))+x14516+(((-1.0)*x14515))+(((-1.0)*x14519)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14522.value)*(((((-1.0)*x14514*x14521))+(((-1.0)*x14514*x14519))+(((-1.0)*x14514*x14515))+((cj0*sj3*x14518))+((r12*x14516))+(((-1.0)*cj0*gconst17*r20*x14517))))))+IKsqr(((x14523.value)*(((((-1.0)*x14521))+x14516+(((-1.0)*x14515))+(((-1.0)*x14519))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14522.value)*(((((-1.0)*x14514*x14521))+(((-1.0)*x14514*x14519))+(((-1.0)*x14514*x14515))+((cj0*sj3*x14518))+((r12*x14516))+(((-1.0)*cj0*gconst17*r20*x14517))))), ((x14523.value)*(((((-1.0)*x14521))+x14516+(((-1.0)*x14515))+(((-1.0)*x14519))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14524=IKsin(j4);
IkReal x14525=IKcos(j4);
IkReal x14526=((1.0)*gconst17);
IkReal x14527=(gconst17*sj3);
IkReal x14528=(gconst16*r21);
IkReal x14529=(cj3*gconst17);
IkReal x14530=(sj1*sj2);
IkReal x14531=((1.0)*sj0);
IkReal x14532=(gconst16*sj3);
IkReal x14533=(cj3*gconst16);
IkReal x14534=(cj2*sj1);
IkReal x14535=((1.0)*cj0);
IkReal x14536=((1.0)*sj3);
IkReal x14537=(cj1*sj2);
IkReal x14538=(cj3*x14525);
IkReal x14539=(gconst16*x14524);
IkReal x14540=((1.0)*x14525);
IkReal x14541=((1.0)*cj1*cj2);
IkReal x14542=(r02*x14524);
IkReal x14543=(r12*x14524);
evalcond[0]=(((x14524*x14528))+(((-1.0)*r20*x14524*x14526)));
evalcond[1]=(cj0+((r11*x14539))+(((-1.0)*r12*x14540))+(((-1.0)*r10*x14524*x14526)));
evalcond[2]=((((-1.0)*x14531))+((r01*x14539))+(((-1.0)*r00*x14524*x14526))+(((-1.0)*r02*x14540)));
evalcond[3]=((((-1.0)*r20*x14526*x14538))+x14537+x14534+((x14528*x14538))+((r21*x14527))+((r20*x14532)));
evalcond[4]=((((-1.0)*x14525*x14528*x14536))+((r20*x14525*x14527))+x14530+((r21*x14529))+((r20*x14533))+(((-1.0)*x14541)));
evalcond[5]=((((-1.0)*r00*x14526*x14538))+((r01*x14527))+((r00*x14532))+((cj3*x14542))+((cj0*x14530))+((r01*x14525*x14533))+(((-1.0)*cj1*cj2*x14535)));
evalcond[6]=(((sj0*x14530))+((r11*x14525*x14533))+((cj3*x14543))+(((-1.0)*r10*x14526*x14538))+((r11*x14527))+(((-1.0)*cj1*cj2*x14531))+((r10*x14532)));
evalcond[7]=((((-1.0)*x14535*x14537))+(((-1.0)*r01*x14532*x14540))+((r01*x14529))+((r00*x14533))+((r00*x14525*x14527))+(((-1.0)*x14534*x14535))+(((-1.0)*x14536*x14542)));
evalcond[8]=((((-1.0)*x14531*x14537))+(((-1.0)*x14531*x14534))+((r11*x14529))+((r10*x14525*x14527))+(((-1.0)*r11*x14532*x14540))+(((-1.0)*x14536*x14543))+((r10*x14533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14544=((1.0)*sj0);
IkReal x14545=((1.0)*cj0);
CheckValue<IkReal> x14546=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14546.valid){
continue;
}
CheckValue<IkReal> x14547 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14544))+(((-1.0)*r02*x14545)))),IkReal(((((-1.0)*gconst16*r11*x14544))+(((-1.0)*gconst16*r01*x14545))+((cj0*gconst17*r00))+((gconst17*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14546.value)))+(x14547.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14548=IKsin(j4);
IkReal x14549=IKcos(j4);
IkReal x14550=((1.0)*gconst17);
IkReal x14551=(gconst17*sj3);
IkReal x14552=(gconst16*r21);
IkReal x14553=(cj3*gconst17);
IkReal x14554=(sj1*sj2);
IkReal x14555=((1.0)*sj0);
IkReal x14556=(gconst16*sj3);
IkReal x14557=(cj3*gconst16);
IkReal x14558=(cj2*sj1);
IkReal x14559=((1.0)*cj0);
IkReal x14560=((1.0)*sj3);
IkReal x14561=(cj1*sj2);
IkReal x14562=(cj3*x14549);
IkReal x14563=(gconst16*x14548);
IkReal x14564=((1.0)*x14549);
IkReal x14565=((1.0)*cj1*cj2);
IkReal x14566=(r02*x14548);
IkReal x14567=(r12*x14548);
evalcond[0]=(((x14548*x14552))+(((-1.0)*r20*x14548*x14550)));
evalcond[1]=(cj0+(((-1.0)*r12*x14564))+((r11*x14563))+(((-1.0)*r10*x14548*x14550)));
evalcond[2]=(((r01*x14563))+(((-1.0)*r02*x14564))+(((-1.0)*x14555))+(((-1.0)*r00*x14548*x14550)));
evalcond[3]=(((r20*x14556))+x14558+x14561+(((-1.0)*r20*x14550*x14562))+((x14552*x14562))+((r21*x14551)));
evalcond[4]=(((r20*x14549*x14551))+(((-1.0)*x14549*x14552*x14560))+((r20*x14557))+(((-1.0)*x14565))+x14554+((r21*x14553)));
evalcond[5]=((((-1.0)*cj1*cj2*x14559))+(((-1.0)*r00*x14550*x14562))+((r01*x14549*x14557))+((cj3*x14566))+((r01*x14551))+((r00*x14556))+((cj0*x14554)));
evalcond[6]=((((-1.0)*r10*x14550*x14562))+(((-1.0)*cj1*cj2*x14555))+((sj0*x14554))+((cj3*x14567))+((r10*x14556))+((r11*x14551))+((r11*x14549*x14557)));
evalcond[7]=((((-1.0)*x14559*x14561))+((r00*x14549*x14551))+(((-1.0)*x14558*x14559))+(((-1.0)*x14560*x14566))+((r01*x14553))+((r00*x14557))+(((-1.0)*r01*x14556*x14564)));
evalcond[8]=(((r10*x14557))+(((-1.0)*x14560*x14567))+((r11*x14553))+(((-1.0)*x14555*x14561))+(((-1.0)*r11*x14556*x14564))+(((-1.0)*x14555*x14558))+((r10*x14549*x14551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14568=((1.0)*sj0);
IkReal x14569=((1.0)*cj0);
CheckValue<IkReal> x14570=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14570.valid){
continue;
}
CheckValue<IkReal> x14571 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14569))+(((-1.0)*r12*x14568)))),IkReal(((((-1.0)*gconst16*r01*x14569))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r11*x14568)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14571.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14570.value)))+(x14571.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14572=IKsin(j4);
IkReal x14573=IKcos(j4);
IkReal x14574=(cj3*gconst17);
IkReal x14575=(gconst16*r21);
IkReal x14576=(gconst17*sj3);
IkReal x14577=(gconst16*r20);
IkReal x14578=(sj1*sj2);
IkReal x14579=(gconst16*r10);
IkReal x14580=(cj2*sj1);
IkReal x14581=(gconst16*sj3);
IkReal x14582=((1.0)*cj0);
IkReal x14583=((1.0)*sj0);
IkReal x14584=(cj1*sj2);
IkReal x14585=((1.0)*x14573);
IkReal x14586=(gconst16*x14572);
IkReal x14587=(cj3*x14573);
IkReal x14588=(cj3*x14572);
IkReal x14589=((1.0)*cj1*cj2);
IkReal x14590=((1.0)*gconst17*x14572);
IkReal x14591=((1.0)*sj3*x14572);
evalcond[0]=((((-1.0)*r20*x14590))+((x14572*x14575))+(((-1.0)*r22*x14585)));
evalcond[1]=(cj0+(((-1.0)*r12*x14585))+(((-1.0)*r10*x14590))+((r11*x14586)));
evalcond[2]=((((-1.0)*r02*x14585))+(((-1.0)*x14583))+(((-1.0)*r00*x14590))+((r01*x14586)));
evalcond[3]=(((r21*x14576))+((x14575*x14587))+((r22*x14588))+x14584+x14580+(((-1.0)*r20*x14574*x14585))+((sj3*x14577)));
evalcond[4]=(((r21*x14574))+(((-1.0)*sj3*x14575*x14585))+(((-1.0)*x14589))+x14578+((cj3*x14577))+(((-1.0)*r22*x14591))+((r20*x14573*x14576)));
evalcond[5]=(((r02*x14588))+((cj0*x14578))+(((-1.0)*r00*x14574*x14585))+(((-1.0)*cj1*cj2*x14582))+((gconst16*r01*x14587))+((r00*x14581))+((r01*x14576)));
evalcond[6]=((((-1.0)*r10*x14574*x14585))+((gconst16*r11*x14587))+(((-1.0)*cj1*cj2*x14583))+((r11*x14576))+((sj0*x14578))+((r12*x14588))+((sj3*x14579)));
evalcond[7]=(((r00*x14573*x14576))+(((-1.0)*r02*x14591))+(((-1.0)*x14580*x14582))+(((-1.0)*r01*x14581*x14585))+((cj3*gconst16*r00))+(((-1.0)*x14582*x14584))+((r01*x14574)));
evalcond[8]=((((-1.0)*x14583*x14584))+(((-1.0)*r12*x14591))+(((-1.0)*r11*x14581*x14585))+((cj3*x14579))+((r11*x14574))+(((-1.0)*x14580*x14583))+((r10*x14573*x14576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14592=((1.0)*gconst17);
CheckValue<IkReal> x14593 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x14592))+((gconst16*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14593.valid){
continue;
}
CheckValue<IkReal> x14594=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x14592)))),-1);
if(!x14594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14593.value)+(((1.5707963267949)*(x14594.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14595=IKsin(j4);
IkReal x14596=IKcos(j4);
IkReal x14597=(cj3*gconst17);
IkReal x14598=(gconst16*r21);
IkReal x14599=(gconst17*sj3);
IkReal x14600=(gconst16*r20);
IkReal x14601=(sj1*sj2);
IkReal x14602=(gconst16*r10);
IkReal x14603=(cj2*sj1);
IkReal x14604=(gconst16*sj3);
IkReal x14605=((1.0)*cj0);
IkReal x14606=((1.0)*sj0);
IkReal x14607=(cj1*sj2);
IkReal x14608=((1.0)*x14596);
IkReal x14609=(gconst16*x14595);
IkReal x14610=(cj3*x14596);
IkReal x14611=(cj3*x14595);
IkReal x14612=((1.0)*cj1*cj2);
IkReal x14613=((1.0)*gconst17*x14595);
IkReal x14614=((1.0)*sj3*x14595);
evalcond[0]=((((-1.0)*r20*x14613))+(((-1.0)*r22*x14608))+((x14595*x14598)));
evalcond[1]=(cj0+(((-1.0)*r10*x14613))+(((-1.0)*r12*x14608))+((r11*x14609)));
evalcond[2]=(((r01*x14609))+(((-1.0)*r00*x14613))+(((-1.0)*r02*x14608))+(((-1.0)*x14606)));
evalcond[3]=(((r21*x14599))+((r22*x14611))+(((-1.0)*r20*x14597*x14608))+x14607+x14603+((x14598*x14610))+((sj3*x14600)));
evalcond[4]=((((-1.0)*r22*x14614))+(((-1.0)*sj3*x14598*x14608))+((r21*x14597))+((cj3*x14600))+x14601+(((-1.0)*x14612))+((r20*x14596*x14599)));
evalcond[5]=(((gconst16*r01*x14610))+((r02*x14611))+((cj0*x14601))+(((-1.0)*cj1*cj2*x14605))+((r00*x14604))+(((-1.0)*r00*x14597*x14608))+((r01*x14599)));
evalcond[6]=(((gconst16*r11*x14610))+((sj0*x14601))+(((-1.0)*cj1*cj2*x14606))+(((-1.0)*r10*x14597*x14608))+((sj3*x14602))+((r11*x14599))+((r12*x14611)));
evalcond[7]=(((r00*x14596*x14599))+(((-1.0)*r01*x14604*x14608))+(((-1.0)*x14605*x14607))+((r01*x14597))+(((-1.0)*r02*x14614))+((cj3*gconst16*r00))+(((-1.0)*x14603*x14605)));
evalcond[8]=(((r10*x14596*x14599))+(((-1.0)*r11*x14604*x14608))+(((-1.0)*r12*x14614))+(((-1.0)*x14606*x14607))+((cj3*x14602))+((r11*x14597))+(((-1.0)*x14603*x14606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14615=((1.0)*gconst17);
CheckValue<IkReal> x14616 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x14615))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14616.valid){
continue;
}
CheckValue<IkReal> x14617=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x14615)))),-1);
if(!x14617.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14616.value)+(((1.5707963267949)*(x14617.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14618=IKsin(j4);
IkReal x14619=IKcos(j4);
IkReal x14620=(cj3*gconst17);
IkReal x14621=(gconst16*r21);
IkReal x14622=(gconst17*sj3);
IkReal x14623=(gconst16*r20);
IkReal x14624=(sj1*sj2);
IkReal x14625=(gconst16*r10);
IkReal x14626=(cj2*sj1);
IkReal x14627=(gconst16*sj3);
IkReal x14628=((1.0)*cj0);
IkReal x14629=((1.0)*sj0);
IkReal x14630=(cj1*sj2);
IkReal x14631=((1.0)*x14619);
IkReal x14632=(gconst16*x14618);
IkReal x14633=(cj3*x14619);
IkReal x14634=(cj3*x14618);
IkReal x14635=((1.0)*cj1*cj2);
IkReal x14636=((1.0)*gconst17*x14618);
IkReal x14637=((1.0)*sj3*x14618);
evalcond[0]=((((-1.0)*r22*x14631))+(((-1.0)*r20*x14636))+((x14618*x14621)));
evalcond[1]=(cj0+((r11*x14632))+(((-1.0)*r10*x14636))+(((-1.0)*r12*x14631)));
evalcond[2]=((((-1.0)*x14629))+(((-1.0)*r00*x14636))+((r01*x14632))+(((-1.0)*r02*x14631)));
evalcond[3]=(((sj3*x14623))+((r22*x14634))+((x14621*x14633))+((r21*x14622))+x14630+x14626+(((-1.0)*r20*x14620*x14631)));
evalcond[4]=((((-1.0)*r22*x14637))+((r21*x14620))+((r20*x14619*x14622))+((cj3*x14623))+(((-1.0)*x14635))+x14624+(((-1.0)*sj3*x14621*x14631)));
evalcond[5]=(((r02*x14634))+((gconst16*r01*x14633))+(((-1.0)*r00*x14620*x14631))+((cj0*x14624))+((r00*x14627))+((r01*x14622))+(((-1.0)*cj1*cj2*x14628)));
evalcond[6]=(((sj3*x14625))+((gconst16*r11*x14633))+((r11*x14622))+((r12*x14634))+(((-1.0)*cj1*cj2*x14629))+(((-1.0)*r10*x14620*x14631))+((sj0*x14624)));
evalcond[7]=((((-1.0)*x14628*x14630))+((r00*x14619*x14622))+((r01*x14620))+((cj3*gconst16*r00))+(((-1.0)*x14626*x14628))+(((-1.0)*r02*x14637))+(((-1.0)*r01*x14627*x14631)));
evalcond[8]=((((-1.0)*r11*x14627*x14631))+(((-1.0)*x14629*x14630))+((cj3*x14625))+((r11*x14620))+((r10*x14619*x14622))+(((-1.0)*x14626*x14629))+(((-1.0)*r12*x14637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14638=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14638;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14638);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14639=((1.0)*cj5);
IkReal x14640=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14639)));
j4eval[0]=x14640;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x14639))+((r21*sj5))))));
j4eval[2]=IKsign(x14640);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14641=cj5*cj5;
IkReal x14642=(cj3*r01);
IkReal x14643=(cj5*sj5);
IkReal x14644=((1.0)*cj3);
IkReal x14645=((((-1.0)*r21*x14642))+((r20*x14642*x14643))+((cj3*r00*r21*x14643))+((r21*x14641*x14642))+(((-1.0)*r00*r20*x14641*x14644))+(((-1.0)*r02*r22*x14644)));
j4eval[0]=x14645;
j4eval[1]=IKsign(x14645);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14646=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14646;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14646);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14647=((1.0)*cj5);
IkReal x14648=((((-1.0)*r11*x14647))+(((-1.0)*r10*sj5)));
j4eval[0]=x14648;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x14647)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14648);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14649=cj5*cj5;
IkReal x14650=r01*r01;
IkReal x14651=(r01*sj5);
IkReal x14652=(cj5*r00);
IkReal x14653=((((2.0)*x14651*x14652))+(((-1.0)*x14650))+(((-1.0)*x14649*(r00*r00)))+(((-1.0)*(r02*r02)))+((x14649*x14650)));
j4eval[0]=x14653;
j4eval[1]=IKsign(x14653);
j4eval[2]=((IKabs(((((-1.0)*x14651))+x14652)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14654=cj5*cj5;
IkReal x14655=r01*r01;
IkReal x14656=(r01*sj5);
IkReal x14657=(cj5*r00);
CheckValue<IkReal> x14658=IKPowWithIntegerCheck(IKsign((((x14654*x14655))+(((-1.0)*x14655))+(((-1.0)*(r02*r02)))+(((2.0)*x14656*x14657))+(((-1.0)*x14654*(r00*r00))))),-1);
if(!x14658.valid){
continue;
}
CheckValue<IkReal> x14659 = IKatan2WithCheck(IkReal(((((-1.0)*x14656))+x14657)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14659.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14658.value)))+(x14659.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14660=IKsin(j4);
IkReal x14661=IKcos(j4);
IkReal x14662=(cj5*r10);
IkReal x14663=(r01*sj5);
IkReal x14664=((1.0)*cj2);
IkReal x14665=(cj5*r00);
IkReal x14666=(cj5*r20);
IkReal x14667=((1.0)*x14661);
IkReal x14668=((1.0)*x14660);
IkReal x14669=(sj5*x14660);
evalcond[0]=((((-1.0)*r22*x14667))+((r21*x14669))+(((-1.0)*x14666*x14668)));
evalcond[1]=((((-1.0)*r12*x14667))+((r11*x14669))+(((-1.0)*x14662*x14668)));
evalcond[2]=(((x14661*x14665))+(((-1.0)*x14663*x14667))+(((-1.0)*r02*x14668)));
evalcond[3]=((-1.0)+((x14660*x14663))+(((-1.0)*x14665*x14668))+(((-1.0)*r02*x14667)));
evalcond[4]=(((x14661*x14666))+(((-1.0)*r22*x14668))+((sj1*sj2))+(((-1.0)*cj1*x14664))+(((-1.0)*r21*sj5*x14667)));
evalcond[5]=((((-1.0)*r11*sj5*x14667))+((x14661*x14662))+(((-1.0)*sj1*x14664))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x14668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14670=((1.0)*cj5);
CheckValue<IkReal> x14671 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14670)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14671.valid){
continue;
}
CheckValue<IkReal> x14672=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14670)))),-1);
if(!x14672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14671.value)+(((1.5707963267949)*(x14672.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14673=IKsin(j4);
IkReal x14674=IKcos(j4);
IkReal x14675=(cj5*r10);
IkReal x14676=(r01*sj5);
IkReal x14677=((1.0)*cj2);
IkReal x14678=(cj5*r00);
IkReal x14679=(cj5*r20);
IkReal x14680=((1.0)*x14674);
IkReal x14681=((1.0)*x14673);
IkReal x14682=(sj5*x14673);
evalcond[0]=((((-1.0)*r22*x14680))+((r21*x14682))+(((-1.0)*x14679*x14681)));
evalcond[1]=(((r11*x14682))+(((-1.0)*x14675*x14681))+(((-1.0)*r12*x14680)));
evalcond[2]=((((-1.0)*r02*x14681))+(((-1.0)*x14676*x14680))+((x14674*x14678)));
evalcond[3]=((-1.0)+(((-1.0)*x14678*x14681))+(((-1.0)*r02*x14680))+((x14673*x14676)));
evalcond[4]=((((-1.0)*r21*sj5*x14680))+(((-1.0)*cj1*x14677))+((sj1*sj2))+(((-1.0)*r22*x14681))+((x14674*x14679)));
evalcond[5]=((((-1.0)*sj1*x14677))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x14680))+((x14674*x14675))+(((-1.0)*r12*x14681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14683=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14683.valid){
continue;
}
CheckValue<IkReal> x14684 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14684.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14683.value)))+(x14684.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14685=IKsin(j4);
IkReal x14686=IKcos(j4);
IkReal x14687=(cj5*r10);
IkReal x14688=(r01*sj5);
IkReal x14689=((1.0)*cj2);
IkReal x14690=(cj5*r00);
IkReal x14691=(cj5*r20);
IkReal x14692=((1.0)*x14686);
IkReal x14693=((1.0)*x14685);
IkReal x14694=(sj5*x14685);
evalcond[0]=((((-1.0)*r22*x14692))+(((-1.0)*x14691*x14693))+((r21*x14694)));
evalcond[1]=(((r11*x14694))+(((-1.0)*r12*x14692))+(((-1.0)*x14687*x14693)));
evalcond[2]=((((-1.0)*r02*x14693))+((x14686*x14690))+(((-1.0)*x14688*x14692)));
evalcond[3]=((-1.0)+((x14685*x14688))+(((-1.0)*r02*x14692))+(((-1.0)*x14690*x14693)));
evalcond[4]=((((-1.0)*cj1*x14689))+(((-1.0)*r21*sj5*x14692))+((x14686*x14691))+((sj1*sj2))+(((-1.0)*r22*x14693)));
evalcond[5]=(((x14686*x14687))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x14692))+(((-1.0)*sj1*x14689))+(((-1.0)*r12*x14693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14695=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14695;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14695);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14696=((1.0)*cj5);
IkReal x14697=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14696)));
j4eval[0]=x14697;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14696))))));
j4eval[2]=IKsign(x14697);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14698=cj5*cj5;
IkReal x14699=r01*r01;
IkReal x14700=(cj5*r00);
IkReal x14701=(r01*sj5);
IkReal x14702=(((x14698*(r00*r00)))+(((-1.0)*x14698*x14699))+(((-2.0)*x14700*x14701))+x14699+(r02*r02));
j4eval[0]=x14702;
j4eval[1]=IKsign(x14702);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14700))+x14701))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14703=cj5*cj5;
IkReal x14704=r01*r01;
IkReal x14705=(r01*sj5);
IkReal x14706=(cj5*r00);
CheckValue<IkReal> x14707=IKPowWithIntegerCheck(IKsign((((x14703*(r00*r00)))+(((-2.0)*x14705*x14706))+x14704+(((-1.0)*x14703*x14704))+(r02*r02))),-1);
if(!x14707.valid){
continue;
}
CheckValue<IkReal> x14708 = IKatan2WithCheck(IkReal(((((-1.0)*x14706))+x14705)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14707.value)))+(x14708.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14709=IKcos(j4);
IkReal x14710=IKsin(j4);
IkReal x14711=(cj5*r00);
IkReal x14712=(cj5*r10);
IkReal x14713=(r21*sj5);
IkReal x14714=((1.0)*cj2);
IkReal x14715=(cj5*r20);
IkReal x14716=((1.0)*x14709);
IkReal x14717=((1.0)*x14710);
IkReal x14718=(sj5*x14710);
IkReal x14719=(sj5*x14709);
evalcond[0]=(((r02*x14710))+((r01*x14719))+(((-1.0)*x14711*x14716)));
evalcond[1]=(((x14710*x14713))+(((-1.0)*r22*x14716))+(((-1.0)*x14715*x14717)));
evalcond[2]=(((r11*x14718))+(((-1.0)*x14712*x14717))+(((-1.0)*r12*x14716)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14716))+((r01*x14718))+(((-1.0)*x14711*x14717)));
evalcond[4]=(((r22*x14710))+((sj1*sj2))+(((-1.0)*x14715*x14716))+((x14709*x14713))+(((-1.0)*cj1*x14714)));
evalcond[5]=(((r12*x14710))+(((-1.0)*sj1*x14714))+((r11*x14719))+(((-1.0)*cj1*sj2))+(((-1.0)*x14712*x14716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14720=((1.0)*cj5);
CheckValue<IkReal> x14721=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14720))+(((-1.0)*r10*sj5)))),-1);
if(!x14721.valid){
continue;
}
CheckValue<IkReal> x14722 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14720))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14721.value)))+(x14722.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14723=IKcos(j4);
IkReal x14724=IKsin(j4);
IkReal x14725=(cj5*r00);
IkReal x14726=(cj5*r10);
IkReal x14727=(r21*sj5);
IkReal x14728=((1.0)*cj2);
IkReal x14729=(cj5*r20);
IkReal x14730=((1.0)*x14723);
IkReal x14731=((1.0)*x14724);
IkReal x14732=(sj5*x14724);
IkReal x14733=(sj5*x14723);
evalcond[0]=(((r01*x14733))+((r02*x14724))+(((-1.0)*x14725*x14730)));
evalcond[1]=((((-1.0)*x14729*x14731))+(((-1.0)*r22*x14730))+((x14724*x14727)));
evalcond[2]=((((-1.0)*r12*x14730))+(((-1.0)*x14726*x14731))+((r11*x14732)));
evalcond[3]=((-1.0)+((r01*x14732))+(((-1.0)*r02*x14730))+(((-1.0)*x14725*x14731)));
evalcond[4]=((((-1.0)*x14729*x14730))+((x14723*x14727))+((sj1*sj2))+((r22*x14724))+(((-1.0)*cj1*x14728)));
evalcond[5]=((((-1.0)*sj1*x14728))+(((-1.0)*cj1*sj2))+(((-1.0)*x14726*x14730))+((r11*x14733))+((r12*x14724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14734=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14734.valid){
continue;
}
CheckValue<IkReal> x14735 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14734.value)))+(x14735.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14736=IKcos(j4);
IkReal x14737=IKsin(j4);
IkReal x14738=(cj5*r00);
IkReal x14739=(cj5*r10);
IkReal x14740=(r21*sj5);
IkReal x14741=((1.0)*cj2);
IkReal x14742=(cj5*r20);
IkReal x14743=((1.0)*x14736);
IkReal x14744=((1.0)*x14737);
IkReal x14745=(sj5*x14737);
IkReal x14746=(sj5*x14736);
evalcond[0]=(((r02*x14737))+(((-1.0)*x14738*x14743))+((r01*x14746)));
evalcond[1]=((((-1.0)*x14742*x14744))+((x14737*x14740))+(((-1.0)*r22*x14743)));
evalcond[2]=(((r11*x14745))+(((-1.0)*x14739*x14744))+(((-1.0)*r12*x14743)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14743))+(((-1.0)*x14738*x14744))+((r01*x14745)));
evalcond[4]=(((x14736*x14740))+(((-1.0)*x14742*x14743))+((sj1*sj2))+((r22*x14737))+(((-1.0)*cj1*x14741)));
evalcond[5]=(((r11*x14746))+(((-1.0)*x14739*x14743))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14741))+((r12*x14737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14748 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14748)==0){
continue;
}
IkReal x14747=pow(x14748,-0.5);
CheckValue<IkReal> x14749 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14749.valid){
continue;
}
IkReal gconst48=((-1.0)*(x14749.value));
IkReal gconst49=((-1.0)*r21*x14747);
IkReal gconst50=(r20*x14747);
CheckValue<IkReal> x14750 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14750.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14750.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14753 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14753.valid){
continue;
}
IkReal x14751=((-1.0)*(x14753.value));
IkReal x14752=x14747;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14751;
IkReal gconst48=x14751;
IkReal gconst49=((-1.0)*r21*x14752);
IkReal gconst50=(r20*x14752);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14756 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14756.valid){
continue;
}
IkReal x14754=((-1.0)*(x14756.value));
IkReal x14755=x14747;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14754;
IkReal gconst48=x14754;
IkReal gconst49=((-1.0)*r21*x14755);
IkReal gconst50=(r20*x14755);
CheckValue<IkReal> x14764=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14764.valid){
continue;
}
IkReal x14757=x14764.value;
IkReal x14758=(sj3*x14757);
IkReal x14759=(r11*x14758);
IkReal x14760=(r00*x14758);
IkReal x14761=(r01*x14758);
IkReal x14762=(r10*x14758);
IkReal x14763=(r20*r21*x14758);
j4eval[0]=IKsign((((r10*x14760*(r20*r20)))+((r01*x14759*(r21*r21)))+((r02*r12*sj3))+((r10*r20*r21*x14761))+((r00*r20*r21*x14759))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14765=gconst49*gconst49;
IkReal x14766=gconst50*gconst50;
IkReal x14767=((1.0)*cj3);
IkReal x14768=(gconst50*r01);
IkReal x14769=(gconst49*r10);
IkReal x14770=(r12*sj3);
IkReal x14771=(gconst49*r00);
IkReal x14772=(r00*sj3);
IkReal x14773=(r11*x14765);
IkReal x14774=(r10*x14766);
CheckValue<IkReal> x14775 = IKatan2WithCheck(IkReal((((x14770*x14771))+((x14768*x14770)))),IkReal(((((-1.0)*gconst50*x14769*x14772))+((gconst49*r11*sj3*x14768))+(((-1.0)*r01*sj3*x14774))+((x14772*x14773)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14775.valid){
continue;
}
CheckValue<IkReal> x14776=IKPowWithIntegerCheck(IKsign((((cj3*gconst50*r11*x14771))+((cj3*x14768*x14769))+(((-1.0)*r02*r12*x14767))+(((-1.0)*r01*x14767*x14773))+(((-1.0)*r00*x14767*x14774)))),-1);
if(!x14776.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14775.value)+(((1.5707963267949)*(x14776.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14777=IKsin(j4);
IkReal x14778=IKcos(j4);
IkReal x14779=(sj1*sj2);
IkReal x14780=(gconst50*r20);
IkReal x14781=(gconst50*sj3);
IkReal x14782=(cj3*r01);
IkReal x14783=(gconst50*r10);
IkReal x14784=(gconst49*sj3);
IkReal x14785=((1.0)*cj2);
IkReal x14786=(cj1*sj2);
IkReal x14787=(cj3*r11);
IkReal x14788=(gconst50*r00);
IkReal x14789=(cj3*r21);
IkReal x14790=(cj3*gconst49);
IkReal x14791=(cj1*x14785);
IkReal x14792=((1.0)*x14778);
IkReal x14793=((1.0)*x14777);
IkReal x14794=(gconst49*x14777);
IkReal x14795=(gconst49*x14778);
IkReal x14796=(cj3*x14777);
evalcond[0]=((((-1.0)*x14780*x14793))+(((-1.0)*r22*x14792))+((r21*x14794)));
evalcond[1]=((((-1.0)*r12*x14792))+((r11*x14794))+(((-1.0)*x14783*x14793)));
evalcond[2]=((-1.0)+(((-1.0)*x14788*x14793))+(((-1.0)*r02*x14792))+((r01*x14794)));
evalcond[3]=(((r01*x14781))+((r00*x14784))+((x14782*x14795))+(((-1.0)*cj3*x14788*x14792))+((r02*x14796)));
evalcond[4]=(((gconst50*x14782))+((r00*x14790))+((r00*x14778*x14781))+(((-1.0)*r02*sj3*x14793))+(((-1.0)*r01*x14784*x14792)));
evalcond[5]=(((cj2*sj1))+((r20*x14784))+((r21*x14781))+(((-1.0)*cj3*x14780*x14792))+x14786+((r22*x14796))+((x14789*x14795)));
evalcond[6]=(((r10*x14784))+(((-1.0)*cj3*x14783*x14792))+((x14787*x14795))+((r11*x14781))+((r12*x14796))+x14779+(((-1.0)*x14791)));
evalcond[7]=(((gconst50*x14789))+((r20*x14790))+((sj3*x14778*x14780))+(((-1.0)*r22*sj3*x14793))+x14779+(((-1.0)*r21*x14784*x14792))+(((-1.0)*x14791)));
evalcond[8]=(((gconst50*x14787))+((r10*x14790))+(((-1.0)*x14786))+(((-1.0)*r12*sj3*x14793))+(((-1.0)*sj1*x14785))+(((-1.0)*r11*x14784*x14792))+((r10*x14778*x14781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14797=gconst49*gconst49;
IkReal x14798=gconst50*gconst50;
IkReal x14799=(cj3*r12);
IkReal x14800=(gconst49*r00);
IkReal x14801=(r01*r11);
IkReal x14802=(r00*r11);
IkReal x14803=(cj3*gconst50);
IkReal x14804=((1.0)*r01*r10);
IkReal x14805=(gconst49*gconst50*sj3);
CheckValue<IkReal> x14806 = IKatan2WithCheck(IkReal((((gconst50*r01*x14799))+((x14799*x14800)))),IkReal(((((-1.0)*r10*x14800*x14803))+(((-1.0)*cj3*x14798*x14804))+((gconst49*x14801*x14803))+((cj3*x14797*x14802)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14806.valid){
continue;
}
CheckValue<IkReal> x14807=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((sj3*x14797*x14801))+(((-1.0)*gconst50*r11*sj3*x14800))+((r00*r10*sj3*x14798))+(((-1.0)*x14804*x14805)))),-1);
if(!x14807.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14806.value)+(((1.5707963267949)*(x14807.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14808=IKsin(j4);
IkReal x14809=IKcos(j4);
IkReal x14810=(sj1*sj2);
IkReal x14811=(gconst50*r20);
IkReal x14812=(gconst50*sj3);
IkReal x14813=(cj3*r01);
IkReal x14814=(gconst50*r10);
IkReal x14815=(gconst49*sj3);
IkReal x14816=((1.0)*cj2);
IkReal x14817=(cj1*sj2);
IkReal x14818=(cj3*r11);
IkReal x14819=(gconst50*r00);
IkReal x14820=(cj3*r21);
IkReal x14821=(cj3*gconst49);
IkReal x14822=(cj1*x14816);
IkReal x14823=((1.0)*x14809);
IkReal x14824=((1.0)*x14808);
IkReal x14825=(gconst49*x14808);
IkReal x14826=(gconst49*x14809);
IkReal x14827=(cj3*x14808);
evalcond[0]=(((r21*x14825))+(((-1.0)*r22*x14823))+(((-1.0)*x14811*x14824)));
evalcond[1]=((((-1.0)*x14814*x14824))+(((-1.0)*r12*x14823))+((r11*x14825)));
evalcond[2]=((-1.0)+((r01*x14825))+(((-1.0)*x14819*x14824))+(((-1.0)*r02*x14823)));
evalcond[3]=(((r02*x14827))+((r00*x14815))+((r01*x14812))+((x14813*x14826))+(((-1.0)*cj3*x14819*x14823)));
evalcond[4]=((((-1.0)*r02*sj3*x14824))+((r00*x14821))+((r00*x14809*x14812))+(((-1.0)*r01*x14815*x14823))+((gconst50*x14813)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj3*x14811*x14823))+((x14820*x14826))+x14817+((r21*x14812))+((r22*x14827))+((r20*x14815)));
evalcond[6]=(x14810+((r10*x14815))+(((-1.0)*x14822))+((x14818*x14826))+(((-1.0)*cj3*x14814*x14823))+((r12*x14827))+((r11*x14812)));
evalcond[7]=(x14810+(((-1.0)*x14822))+(((-1.0)*r22*sj3*x14824))+((gconst50*x14820))+((r20*x14821))+((sj3*x14809*x14811))+(((-1.0)*r21*x14815*x14823)));
evalcond[8]=(((r10*x14821))+(((-1.0)*r11*x14815*x14823))+(((-1.0)*r12*sj3*x14824))+(((-1.0)*x14817))+((r10*x14809*x14812))+(((-1.0)*sj1*x14816))+((gconst50*x14818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14828=((1.0)*gconst50);
CheckValue<IkReal> x14829=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst49*r10))+(((-1.0)*r11*x14828)))),-1);
if(!x14829.valid){
continue;
}
CheckValue<IkReal> x14830 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst49*r21))+(((-1.0)*r20*x14828)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14830.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14829.value)))+(x14830.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14831=IKsin(j4);
IkReal x14832=IKcos(j4);
IkReal x14833=(sj1*sj2);
IkReal x14834=(gconst50*r20);
IkReal x14835=(gconst50*sj3);
IkReal x14836=(cj3*r01);
IkReal x14837=(gconst50*r10);
IkReal x14838=(gconst49*sj3);
IkReal x14839=((1.0)*cj2);
IkReal x14840=(cj1*sj2);
IkReal x14841=(cj3*r11);
IkReal x14842=(gconst50*r00);
IkReal x14843=(cj3*r21);
IkReal x14844=(cj3*gconst49);
IkReal x14845=(cj1*x14839);
IkReal x14846=((1.0)*x14832);
IkReal x14847=((1.0)*x14831);
IkReal x14848=(gconst49*x14831);
IkReal x14849=(gconst49*x14832);
IkReal x14850=(cj3*x14831);
evalcond[0]=((((-1.0)*x14834*x14847))+(((-1.0)*r22*x14846))+((r21*x14848)));
evalcond[1]=((((-1.0)*x14837*x14847))+((r11*x14848))+(((-1.0)*r12*x14846)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14846))+(((-1.0)*x14842*x14847))+((r01*x14848)));
evalcond[3]=(((x14836*x14849))+((r02*x14850))+((r01*x14835))+(((-1.0)*cj3*x14842*x14846))+((r00*x14838)));
evalcond[4]=(((gconst50*x14836))+(((-1.0)*r02*sj3*x14847))+(((-1.0)*r01*x14838*x14846))+((r00*x14832*x14835))+((r00*x14844)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj3*x14834*x14846))+((x14843*x14849))+x14840+((r20*x14838))+((r21*x14835))+((r22*x14850)));
evalcond[6]=(((x14841*x14849))+x14833+((r11*x14835))+(((-1.0)*x14845))+((r10*x14838))+(((-1.0)*cj3*x14837*x14846))+((r12*x14850)));
evalcond[7]=(((sj3*x14832*x14834))+((r20*x14844))+x14833+(((-1.0)*r21*x14838*x14846))+(((-1.0)*x14845))+((gconst50*x14843))+(((-1.0)*r22*sj3*x14847)));
evalcond[8]=((((-1.0)*x14840))+((r10*x14832*x14835))+(((-1.0)*sj1*x14839))+((gconst50*x14841))+((r10*x14844))+(((-1.0)*r11*x14838*x14846))+(((-1.0)*r12*sj3*x14847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14852 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14852)==0){
continue;
}
IkReal x14851=pow(x14852,-0.5);
CheckValue<IkReal> x14853 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14853.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x14853.value))));
IkReal gconst52=((1.0)*r21*x14851);
IkReal gconst53=((-1.0)*r20*x14851);
CheckValue<IkReal> x14854 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14854.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14854.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14857 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14857.valid){
continue;
}
IkReal x14855=((1.0)*(x14857.value));
IkReal x14856=x14851;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14855)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14855)));
IkReal gconst52=((1.0)*r21*x14856);
IkReal gconst53=((-1.0)*r20*x14856);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14860 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14860.valid){
continue;
}
IkReal x14858=((1.0)*(x14860.value));
IkReal x14859=x14851;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14858)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14858)));
IkReal gconst52=((1.0)*r21*x14859);
IkReal gconst53=((-1.0)*r20*x14859);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14863 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14863.valid){
continue;
}
IkReal x14861=((1.0)*(x14863.value));
IkReal x14862=x14851;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14861)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14861)));
IkReal gconst52=((1.0)*r21*x14862);
IkReal gconst53=((-1.0)*r20*x14862);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14864=gconst52*gconst52;
IkReal x14865=gconst53*gconst53;
IkReal x14866=(gconst53*r01);
IkReal x14867=(cj3*r20);
IkReal x14868=(r22*sj3);
IkReal x14869=((1.0)*cj3);
IkReal x14870=(gconst52*sj3);
IkReal x14871=((1.0)*r00);
IkReal x14872=(gconst52*r00);
IkReal x14873=(r21*x14864);
CheckValue<IkReal> x14874 = IKatan2WithCheck(IkReal((((x14868*x14872))+((x14866*x14868)))),IkReal((((r00*sj3*x14873))+(((-1.0)*gconst53*r20*x14870*x14871))+((r21*x14866*x14870))+(((-1.0)*r01*r20*sj3*x14865)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14874.valid){
continue;
}
CheckValue<IkReal> x14875=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x14869*x14873))+((gconst52*x14866*x14867))+(((-1.0)*r02*r22*x14869))+(((-1.0)*x14865*x14867*x14871))+((cj3*gconst53*r21*x14872)))),-1);
if(!x14875.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14874.value)+(((1.5707963267949)*(x14875.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14876=IKsin(j4);
IkReal x14877=IKcos(j4);
IkReal x14878=(sj1*sj2);
IkReal x14879=((1.0)*cj1);
IkReal x14880=(cj3*gconst52);
IkReal x14881=(gconst53*sj3);
IkReal x14882=(cj3*gconst53);
IkReal x14883=(cj2*sj1);
IkReal x14884=(gconst52*sj3);
IkReal x14885=(cj2*x14879);
IkReal x14886=((1.0)*x14877);
IkReal x14887=((1.0)*x14876);
IkReal x14888=(gconst52*x14876);
IkReal x14889=(cj3*x14876);
evalcond[0]=((((-1.0)*r22*x14886))+((r21*x14888))+(((-1.0)*gconst53*r20*x14887)));
evalcond[1]=(((r11*x14888))+(((-1.0)*gconst53*r10*x14887))+(((-1.0)*r12*x14886)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14886))+((r01*x14888))+(((-1.0)*gconst53*r00*x14887)));
evalcond[3]=((((-1.0)*r00*x14882*x14886))+((r01*x14877*x14880))+((r00*x14884))+((r01*x14881))+((r02*x14889)));
evalcond[4]=(((r00*x14880))+((r01*x14882))+((r00*x14877*x14881))+(((-1.0)*r01*x14884*x14886))+(((-1.0)*r02*sj3*x14887)));
evalcond[5]=((((-1.0)*r20*x14882*x14886))+((r22*x14889))+x14883+((cj1*sj2))+((r21*x14881))+((r20*x14884))+((r21*x14877*x14880)));
evalcond[6]=(((r11*x14881))+((r10*x14884))+((r12*x14889))+x14878+((r11*x14877*x14880))+(((-1.0)*x14885))+(((-1.0)*r10*x14882*x14886)));
evalcond[7]=((((-1.0)*r22*sj3*x14887))+x14878+((r20*x14877*x14881))+((r21*x14882))+(((-1.0)*r21*x14884*x14886))+(((-1.0)*x14885))+((r20*x14880)));
evalcond[8]=(((r11*x14882))+((r10*x14880))+(((-1.0)*r12*sj3*x14887))+(((-1.0)*r11*x14884*x14886))+((r10*x14877*x14881))+(((-1.0)*sj2*x14879))+(((-1.0)*x14883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14890=((1.0)*gconst53);
CheckValue<IkReal> x14891=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst52*r10))+(((-1.0)*r11*x14890)))),-1);
if(!x14891.valid){
continue;
}
CheckValue<IkReal> x14892 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst52*r21))+(((-1.0)*r20*x14890)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14892.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14891.value)))+(x14892.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14893=IKsin(j4);
IkReal x14894=IKcos(j4);
IkReal x14895=(sj1*sj2);
IkReal x14896=((1.0)*cj1);
IkReal x14897=(cj3*gconst52);
IkReal x14898=(gconst53*sj3);
IkReal x14899=(cj3*gconst53);
IkReal x14900=(cj2*sj1);
IkReal x14901=(gconst52*sj3);
IkReal x14902=(cj2*x14896);
IkReal x14903=((1.0)*x14894);
IkReal x14904=((1.0)*x14893);
IkReal x14905=(gconst52*x14893);
IkReal x14906=(cj3*x14893);
evalcond[0]=(((r21*x14905))+(((-1.0)*r22*x14903))+(((-1.0)*gconst53*r20*x14904)));
evalcond[1]=((((-1.0)*r12*x14903))+((r11*x14905))+(((-1.0)*gconst53*r10*x14904)));
evalcond[2]=((-1.0)+((r01*x14905))+(((-1.0)*r02*x14903))+(((-1.0)*gconst53*r00*x14904)));
evalcond[3]=(((r00*x14901))+(((-1.0)*r00*x14899*x14903))+((r01*x14898))+((r02*x14906))+((r01*x14894*x14897)));
evalcond[4]=((((-1.0)*r01*x14901*x14903))+((r01*x14899))+((r00*x14897))+(((-1.0)*r02*sj3*x14904))+((r00*x14894*x14898)));
evalcond[5]=(((r21*x14894*x14897))+((r22*x14906))+x14900+((cj1*sj2))+((r21*x14898))+((r20*x14901))+(((-1.0)*r20*x14899*x14903)));
evalcond[6]=(((r11*x14898))+(((-1.0)*x14902))+x14895+((r11*x14894*x14897))+(((-1.0)*r10*x14899*x14903))+((r12*x14906))+((r10*x14901)));
evalcond[7]=((((-1.0)*r21*x14901*x14903))+(((-1.0)*x14902))+x14895+((r21*x14899))+(((-1.0)*r22*sj3*x14904))+((r20*x14897))+((r20*x14894*x14898)));
evalcond[8]=(((r10*x14897))+(((-1.0)*sj2*x14896))+((r11*x14899))+(((-1.0)*x14900))+(((-1.0)*r11*x14901*x14903))+((r10*x14894*x14898))+(((-1.0)*r12*sj3*x14904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14907 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst53*r10))+((gconst52*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14907.valid){
continue;
}
CheckValue<IkReal> x14908=IKPowWithIntegerCheck(IKsign((((gconst53*r21))+((gconst52*r20)))),-1);
if(!x14908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14907.value)+(((1.5707963267949)*(x14908.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14909=IKsin(j4);
IkReal x14910=IKcos(j4);
IkReal x14911=(sj1*sj2);
IkReal x14912=((1.0)*cj1);
IkReal x14913=(cj3*gconst52);
IkReal x14914=(gconst53*sj3);
IkReal x14915=(cj3*gconst53);
IkReal x14916=(cj2*sj1);
IkReal x14917=(gconst52*sj3);
IkReal x14918=(cj2*x14912);
IkReal x14919=((1.0)*x14910);
IkReal x14920=((1.0)*x14909);
IkReal x14921=(gconst52*x14909);
IkReal x14922=(cj3*x14909);
evalcond[0]=((((-1.0)*r22*x14919))+((r21*x14921))+(((-1.0)*gconst53*r20*x14920)));
evalcond[1]=((((-1.0)*r12*x14919))+((r11*x14921))+(((-1.0)*gconst53*r10*x14920)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14919))+((r01*x14921))+(((-1.0)*gconst53*r00*x14920)));
evalcond[3]=((((-1.0)*r00*x14915*x14919))+((r01*x14914))+((r00*x14917))+((r01*x14910*x14913))+((r02*x14922)));
evalcond[4]=(((r01*x14915))+((r00*x14913))+(((-1.0)*r02*sj3*x14920))+(((-1.0)*r01*x14917*x14919))+((r00*x14910*x14914)));
evalcond[5]=(((r21*x14914))+x14916+((cj1*sj2))+(((-1.0)*r20*x14915*x14919))+((r21*x14910*x14913))+((r20*x14917))+((r22*x14922)));
evalcond[6]=(((r10*x14917))+(((-1.0)*x14918))+x14911+((r11*x14914))+(((-1.0)*r10*x14915*x14919))+((r11*x14910*x14913))+((r12*x14922)));
evalcond[7]=(((r21*x14915))+(((-1.0)*x14918))+x14911+(((-1.0)*r22*sj3*x14920))+(((-1.0)*r21*x14917*x14919))+((r20*x14910*x14914))+((r20*x14913)));
evalcond[8]=(((r10*x14913))+(((-1.0)*sj2*x14912))+(((-1.0)*r12*sj3*x14920))+(((-1.0)*r11*x14917*x14919))+((r11*x14915))+(((-1.0)*x14916))+((r10*x14910*x14914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14923=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14923);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14923);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14924=(r01*sj5);
IkReal x14925=((1.0)*cj5*r00);
j4eval[0]=(x14924+(((-1.0)*x14925)));
j4eval[1]=((((-1.0)*cj3*x14925))+((cj3*x14924)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14926=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14926);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14926);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14927=(cj5*r00);
IkReal x14928=(r01*sj5);
j4eval[0]=((((-1.0)*x14927))+x14928);
j4eval[1]=(((sj3*x14927))+(((-1.0)*sj3*x14928)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14929=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14929);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14929);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14930=((1.0)*r00);
CheckValue<IkReal> x14931=IKPowWithIntegerCheck(cj3,-1);
if(!x14931.valid){
continue;
}
CheckValue<IkReal> x14932=IKPowWithIntegerCheck(r22,-1);
if(!x14932.valid){
continue;
}
CheckValue<IkReal> x14933=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x14930))),-1);
if(!x14933.valid){
continue;
}
if( IKabs(((x14931.value)*(x14932.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14933.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14930)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14931.value)*(x14932.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x14933.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14930))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14931.value)*(x14932.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x14933.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14930))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14934=IKsin(j4);
IkReal x14935=IKcos(j4);
IkReal x14936=(sj1*sj2);
IkReal x14937=(cj5*sj3);
IkReal x14938=(r11*sj5);
IkReal x14939=(cj3*cj5);
IkReal x14940=((1.0)*cj1);
IkReal x14941=(cj3*sj5);
IkReal x14942=(sj3*sj5);
IkReal x14943=(cj2*sj1);
IkReal x14944=(r01*sj5);
IkReal x14945=((1.0)*sj3);
IkReal x14946=(cj2*x14940);
IkReal x14947=(r10*x14935);
IkReal x14948=(r22*x14934);
IkReal x14949=(cj3*x14935);
IkReal x14950=((1.0)*cj5*x14934);
evalcond[0]=((-1.0)*r22*x14935);
evalcond[1]=(x14943+((cj1*sj2))+((cj3*x14948)));
evalcond[2]=(((x14934*x14938))+(((-1.0)*r10*x14950)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x14950))+((x14934*x14944)));
evalcond[4]=((((-1.0)*x14945*x14948))+x14936+(((-1.0)*x14946)));
evalcond[5]=(((r01*x14935*x14941))+((r00*x14942))+((r01*x14937))+(((-1.0)*r00*x14935*x14939)));
evalcond[6]=((((-1.0)*r01*x14935*x14942))+((r00*x14941))+((r01*x14939))+((r00*x14935*x14937)));
evalcond[7]=(x14936+((r10*x14942))+(((-1.0)*x14946))+((x14938*x14949))+((r11*x14937))+(((-1.0)*x14939*x14947)));
evalcond[8]=((((-1.0)*x14935*x14938*x14945))+((r10*x14941))+(((-1.0)*sj2*x14940))+(((-1.0)*x14943))+((x14937*x14947))+((r11*x14939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14951=((1.0)*cj3);
IkReal x14952=(cj5*r00);
IkReal x14953=(r01*sj5);
CheckValue<IkReal> x14954=IKPowWithIntegerCheck((x14953+(((-1.0)*x14952))),-1);
if(!x14954.valid){
continue;
}
CheckValue<IkReal> x14955=IKPowWithIntegerCheck((((sj3*x14952))+(((-1.0)*sj3*x14953))),-1);
if(!x14955.valid){
continue;
}
if( IKabs(x14954.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14955.value)*(((((-1.0)*cj5*r01*x14951))+(((-1.0)*r00*sj5*x14951)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14954.value)+IKsqr(((x14955.value)*(((((-1.0)*cj5*r01*x14951))+(((-1.0)*r00*sj5*x14951))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14954.value, ((x14955.value)*(((((-1.0)*cj5*r01*x14951))+(((-1.0)*r00*sj5*x14951))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14956=IKsin(j4);
IkReal x14957=IKcos(j4);
IkReal x14958=(sj1*sj2);
IkReal x14959=(cj5*sj3);
IkReal x14960=(r11*sj5);
IkReal x14961=(cj3*cj5);
IkReal x14962=((1.0)*cj1);
IkReal x14963=(cj3*sj5);
IkReal x14964=(sj3*sj5);
IkReal x14965=(cj2*sj1);
IkReal x14966=(r01*sj5);
IkReal x14967=((1.0)*sj3);
IkReal x14968=(cj2*x14962);
IkReal x14969=(r10*x14957);
IkReal x14970=(r22*x14956);
IkReal x14971=(cj3*x14957);
IkReal x14972=((1.0)*cj5*x14956);
evalcond[0]=((-1.0)*r22*x14957);
evalcond[1]=(x14965+((cj3*x14970))+((cj1*sj2)));
evalcond[2]=((((-1.0)*r10*x14972))+((x14956*x14960)));
evalcond[3]=((-1.0)+((x14956*x14966))+(((-1.0)*r00*x14972)));
evalcond[4]=((((-1.0)*x14967*x14970))+x14958+(((-1.0)*x14968)));
evalcond[5]=(((r01*x14959))+(((-1.0)*r00*x14957*x14961))+((r01*x14957*x14963))+((r00*x14964)));
evalcond[6]=(((r01*x14961))+((r00*x14957*x14959))+(((-1.0)*r01*x14957*x14964))+((r00*x14963)));
evalcond[7]=(((x14960*x14971))+x14958+(((-1.0)*x14968))+((r10*x14964))+(((-1.0)*x14961*x14969))+((r11*x14959)));
evalcond[8]=((((-1.0)*sj2*x14962))+(((-1.0)*x14957*x14960*x14967))+(((-1.0)*x14965))+((r11*x14961))+((x14959*x14969))+((r10*x14963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14973=((1.0)*sj3);
IkReal x14974=(r01*sj5);
IkReal x14975=((1.0)*cj5*r00);
CheckValue<IkReal> x14976=IKPowWithIntegerCheck((x14974+(((-1.0)*x14975))),-1);
if(!x14976.valid){
continue;
}
CheckValue<IkReal> x14977=IKPowWithIntegerCheck((((cj3*x14974))+(((-1.0)*cj3*x14975))),-1);
if(!x14977.valid){
continue;
}
if( IKabs(x14976.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14977.value)*(((((-1.0)*cj5*r01*x14973))+(((-1.0)*r00*sj5*x14973)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14976.value)+IKsqr(((x14977.value)*(((((-1.0)*cj5*r01*x14973))+(((-1.0)*r00*sj5*x14973))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14976.value, ((x14977.value)*(((((-1.0)*cj5*r01*x14973))+(((-1.0)*r00*sj5*x14973))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14978=IKsin(j4);
IkReal x14979=IKcos(j4);
IkReal x14980=(sj1*sj2);
IkReal x14981=(cj5*sj3);
IkReal x14982=(r11*sj5);
IkReal x14983=(cj3*cj5);
IkReal x14984=((1.0)*cj1);
IkReal x14985=(cj3*sj5);
IkReal x14986=(sj3*sj5);
IkReal x14987=(cj2*sj1);
IkReal x14988=(r01*sj5);
IkReal x14989=((1.0)*sj3);
IkReal x14990=(cj2*x14984);
IkReal x14991=(r10*x14979);
IkReal x14992=(r22*x14978);
IkReal x14993=(cj3*x14979);
IkReal x14994=((1.0)*cj5*x14978);
evalcond[0]=((-1.0)*r22*x14979);
evalcond[1]=(x14987+((cj1*sj2))+((cj3*x14992)));
evalcond[2]=((((-1.0)*r10*x14994))+((x14978*x14982)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x14994))+((x14978*x14988)));
evalcond[4]=((((-1.0)*x14990))+x14980+(((-1.0)*x14989*x14992)));
evalcond[5]=(((r01*x14979*x14985))+((r00*x14986))+((r01*x14981))+(((-1.0)*r00*x14979*x14983)));
evalcond[6]=(((r00*x14979*x14981))+((r00*x14985))+((r01*x14983))+(((-1.0)*r01*x14979*x14986)));
evalcond[7]=((((-1.0)*x14990))+x14980+(((-1.0)*x14983*x14991))+((r10*x14986))+((r11*x14981))+((x14982*x14993)));
evalcond[8]=(((x14981*x14991))+(((-1.0)*sj2*x14984))+(((-1.0)*x14979*x14982*x14989))+((r10*x14985))+((r11*x14983))+(((-1.0)*x14987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14995=cj5*cj5;
IkReal x14996=(cj3*r20);
IkReal x14997=(r21*sj3);
IkReal x14998=((1.0)*cj3);
IkReal x14999=(r01*r21);
IkReal x15000=(r01*sj3);
IkReal x15001=(r00*sj5);
IkReal x15002=(cj5*r01*sj5);
IkReal x15003=((1.0)*x14995);
CheckValue<IkReal> x15004=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14998*x14999))+((x14996*x15002))+(((-1.0)*r02*r22*x14998))+(((-1.0)*r00*x14996*x15003))+((cj3*cj5*r21*x15001))+((cj3*x14995*x14999)))),-1);
if(!x15004.valid){
continue;
}
CheckValue<IkReal> x15005 = IKatan2WithCheck(IkReal((((cj5*r22*x15000))+((r22*sj3*x15001)))),IkReal(((((-1.0)*r00*x14997*x15003))+(((-1.0)*r20*x15000*x15003))+((r00*x14997))+((x14997*x15002))+(((-1.0)*cj5*r20*sj3*x15001)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15004.value)))+(x15005.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15006=IKsin(j4);
IkReal x15007=IKcos(j4);
IkReal x15008=(sj1*sj2);
IkReal x15009=(r11*sj5);
IkReal x15010=(cj5*r10);
IkReal x15011=(cj5*r01);
IkReal x15012=(cj5*r00);
IkReal x15013=((1.0)*cj1);
IkReal x15014=(cj3*sj5);
IkReal x15015=(r21*sj5);
IkReal x15016=(cj5*sj3);
IkReal x15017=(sj3*sj5);
IkReal x15018=(cj2*sj1);
IkReal x15019=(r01*sj5);
IkReal x15020=(cj3*cj5);
IkReal x15021=(cj5*r20);
IkReal x15022=(cj2*x15013);
IkReal x15023=((1.0)*x15007);
IkReal x15024=((1.0)*x15006);
IkReal x15025=(cj3*x15007);
IkReal x15026=(sj3*x15007);
IkReal x15027=(cj3*x15006);
evalcond[0]=((((-1.0)*r22*x15023))+((x15006*x15015))+(((-1.0)*x15021*x15024)));
evalcond[1]=((((-1.0)*x15010*x15024))+((x15006*x15009))+(((-1.0)*r12*x15023)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x15023))+(((-1.0)*x15012*x15024))+((x15006*x15019)));
evalcond[3]=((((-1.0)*cj3*x15012*x15023))+((r01*x15007*x15014))+((r02*x15027))+((r00*x15017))+((sj3*x15011)));
evalcond[4]=(((cj3*x15011))+((x15012*x15026))+(((-1.0)*r02*sj3*x15024))+((r00*x15014))+(((-1.0)*r01*x15017*x15023)));
evalcond[5]=(((cj1*sj2))+x15018+((r21*x15016))+((r22*x15027))+((r21*x15007*x15014))+((r20*x15017))+(((-1.0)*r20*x15020*x15023)));
evalcond[6]=((((-1.0)*cj3*x15010*x15023))+((r10*x15017))+x15008+(((-1.0)*x15022))+((r11*x15016))+((x15009*x15025))+((r12*x15027)));
evalcond[7]=((((-1.0)*sj3*x15015*x15023))+((r20*x15007*x15016))+((r21*x15020))+x15008+(((-1.0)*x15022))+((r20*x15014))+(((-1.0)*r22*sj3*x15024)));
evalcond[8]=((((-1.0)*r12*sj3*x15024))+(((-1.0)*x15018))+((x15010*x15026))+((r10*x15014))+((r11*x15020))+(((-1.0)*sj2*x15013))+(((-1.0)*sj3*x15009*x15023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15028=((1.0)*cj5);
CheckValue<IkReal> x15029=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15028)))),-1);
if(!x15029.valid){
continue;
}
CheckValue<IkReal> x15030 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x15028)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15029.value)))+(x15030.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15031=IKsin(j4);
IkReal x15032=IKcos(j4);
IkReal x15033=(sj1*sj2);
IkReal x15034=(r11*sj5);
IkReal x15035=(cj5*r10);
IkReal x15036=(cj5*r01);
IkReal x15037=(cj5*r00);
IkReal x15038=((1.0)*cj1);
IkReal x15039=(cj3*sj5);
IkReal x15040=(r21*sj5);
IkReal x15041=(cj5*sj3);
IkReal x15042=(sj3*sj5);
IkReal x15043=(cj2*sj1);
IkReal x15044=(r01*sj5);
IkReal x15045=(cj3*cj5);
IkReal x15046=(cj5*r20);
IkReal x15047=(cj2*x15038);
IkReal x15048=((1.0)*x15032);
IkReal x15049=((1.0)*x15031);
IkReal x15050=(cj3*x15032);
IkReal x15051=(sj3*x15032);
IkReal x15052=(cj3*x15031);
evalcond[0]=(((x15031*x15040))+(((-1.0)*r22*x15048))+(((-1.0)*x15046*x15049)));
evalcond[1]=((((-1.0)*x15035*x15049))+((x15031*x15034))+(((-1.0)*r12*x15048)));
evalcond[2]=((-1.0)+((x15031*x15044))+(((-1.0)*x15037*x15049))+(((-1.0)*r02*x15048)));
evalcond[3]=(((sj3*x15036))+(((-1.0)*cj3*x15037*x15048))+((r00*x15042))+((r02*x15052))+((r01*x15032*x15039)));
evalcond[4]=(((r00*x15039))+(((-1.0)*r01*x15042*x15048))+((cj3*x15036))+(((-1.0)*r02*sj3*x15049))+((x15037*x15051)));
evalcond[5]=(((r21*x15032*x15039))+((cj1*sj2))+x15043+((r20*x15042))+((r22*x15052))+(((-1.0)*r20*x15045*x15048))+((r21*x15041)));
evalcond[6]=((((-1.0)*x15047))+((x15034*x15050))+(((-1.0)*cj3*x15035*x15048))+((r11*x15041))+x15033+((r10*x15042))+((r12*x15052)));
evalcond[7]=((((-1.0)*x15047))+(((-1.0)*r22*sj3*x15049))+((r20*x15032*x15041))+x15033+((r20*x15039))+(((-1.0)*sj3*x15040*x15048))+((r21*x15045)));
evalcond[8]=((((-1.0)*sj3*x15034*x15048))+(((-1.0)*sj2*x15038))+((r11*x15045))+(((-1.0)*r12*sj3*x15049))+((x15035*x15051))+((r10*x15039))+(((-1.0)*x15043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15053=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15053.valid){
continue;
}
CheckValue<IkReal> x15054 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15054.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15053.value)))+(x15054.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15055=IKsin(j4);
IkReal x15056=IKcos(j4);
IkReal x15057=(sj1*sj2);
IkReal x15058=(r11*sj5);
IkReal x15059=(cj5*r10);
IkReal x15060=(cj5*r01);
IkReal x15061=(cj5*r00);
IkReal x15062=((1.0)*cj1);
IkReal x15063=(cj3*sj5);
IkReal x15064=(r21*sj5);
IkReal x15065=(cj5*sj3);
IkReal x15066=(sj3*sj5);
IkReal x15067=(cj2*sj1);
IkReal x15068=(r01*sj5);
IkReal x15069=(cj3*cj5);
IkReal x15070=(cj5*r20);
IkReal x15071=(cj2*x15062);
IkReal x15072=((1.0)*x15056);
IkReal x15073=((1.0)*x15055);
IkReal x15074=(cj3*x15056);
IkReal x15075=(sj3*x15056);
IkReal x15076=(cj3*x15055);
evalcond[0]=(((x15055*x15064))+(((-1.0)*r22*x15072))+(((-1.0)*x15070*x15073)));
evalcond[1]=((((-1.0)*r12*x15072))+((x15055*x15058))+(((-1.0)*x15059*x15073)));
evalcond[2]=((-1.0)+(((-1.0)*x15061*x15073))+((x15055*x15068))+(((-1.0)*r02*x15072)));
evalcond[3]=(((r02*x15076))+((sj3*x15060))+((r00*x15066))+((r01*x15056*x15063))+(((-1.0)*cj3*x15061*x15072)));
evalcond[4]=(((x15061*x15075))+((r00*x15063))+((cj3*x15060))+(((-1.0)*r01*x15066*x15072))+(((-1.0)*r02*sj3*x15073)));
evalcond[5]=(((r21*x15065))+((r20*x15066))+((r22*x15076))+((cj1*sj2))+x15067+(((-1.0)*r20*x15069*x15072))+((r21*x15056*x15063)));
evalcond[6]=((((-1.0)*cj3*x15059*x15072))+(((-1.0)*x15071))+((r12*x15076))+((x15058*x15074))+x15057+((r11*x15065))+((r10*x15066)));
evalcond[7]=((((-1.0)*x15071))+((r21*x15069))+(((-1.0)*r22*sj3*x15073))+((r20*x15063))+x15057+(((-1.0)*sj3*x15064*x15072))+((r20*x15056*x15065)));
evalcond[8]=((((-1.0)*sj2*x15062))+(((-1.0)*r12*sj3*x15073))+((x15059*x15075))+(((-1.0)*x15067))+((r11*x15069))+(((-1.0)*sj3*x15058*x15072))+((r10*x15063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15077=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15077;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15077);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15078=((1.0)*cj5);
IkReal x15079=((((-1.0)*r21*x15078))+(((-1.0)*r20*sj5)));
j4eval[0]=x15079;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x15078)))))+(IKabs(r12)));
j4eval[2]=IKsign(x15079);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15080=cj5*cj5;
IkReal x15081=(cj3*r01);
IkReal x15082=(cj5*sj5);
IkReal x15083=((1.0)*cj3);
IkReal x15084=(((r21*x15080*x15081))+((r20*x15081*x15082))+((cj3*r00*r21*x15082))+(((-1.0)*r00*r20*x15080*x15083))+(((-1.0)*r21*x15081))+(((-1.0)*r02*r22*x15083)));
j4eval[0]=x15084;
j4eval[1]=IKsign(x15084);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15085=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15085;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15085);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15086=((1.0)*cj5);
IkReal x15087=((((-1.0)*r21*x15086))+(((-1.0)*r20*sj5)));
j4eval[0]=x15087;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x15086)))))+(IKabs(r12)));
j4eval[2]=IKsign(x15087);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15088=cj5*cj5;
IkReal x15089=r01*r01;
IkReal x15090=(cj5*r00);
IkReal x15091=(r01*sj5);
IkReal x15092=(((x15088*(r00*r00)))+x15089+(((-1.0)*x15088*x15089))+(((-2.0)*x15090*x15091))+(r02*r02));
j4eval[0]=x15092;
j4eval[1]=((IKabs(r02))+(IKabs((x15090+(((-1.0)*x15091))))));
j4eval[2]=IKsign(x15092);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15093=cj5*cj5;
IkReal x15094=r01*r01;
IkReal x15095=(r01*sj5);
IkReal x15096=(cj5*r00);
CheckValue<IkReal> x15097=IKPowWithIntegerCheck(IKsign((((x15093*(r00*r00)))+x15094+(((-2.0)*x15095*x15096))+(r02*r02)+(((-1.0)*x15093*x15094)))),-1);
if(!x15097.valid){
continue;
}
CheckValue<IkReal> x15098 = IKatan2WithCheck(IkReal((x15096+(((-1.0)*x15095)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x15098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15097.value)))+(x15098.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15099=IKsin(j4);
IkReal x15100=IKcos(j4);
IkReal x15101=(cj5*r10);
IkReal x15102=(r01*sj5);
IkReal x15103=(cj5*r00);
IkReal x15104=(cj5*r20);
IkReal x15105=((1.0)*x15100);
IkReal x15106=((1.0)*x15099);
IkReal x15107=(sj5*x15099);
evalcond[0]=((((-1.0)*x15104*x15106))+((r21*x15107))+(((-1.0)*r22*x15105)));
evalcond[1]=((((-1.0)*r12*x15105))+(((-1.0)*x15101*x15106))+((r11*x15107)));
evalcond[2]=((((-1.0)*x15102*x15105))+(((-1.0)*r02*x15106))+((x15100*x15103)));
evalcond[3]=((1.0)+((x15099*x15102))+(((-1.0)*r02*x15105))+(((-1.0)*x15103*x15106)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x15106))+(((-1.0)*r11*sj5*x15105))+((cj1*sj2))+((x15100*x15101)));
evalcond[5]=((((-1.0)*cj1*cj2))+(((-1.0)*r22*x15106))+((sj1*sj2))+(((-1.0)*r21*sj5*x15105))+((x15100*x15104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15108=((1.0)*cj5);
CheckValue<IkReal> x15109 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15108))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15109.valid){
continue;
}
CheckValue<IkReal> x15110=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15108))+(((-1.0)*r20*sj5)))),-1);
if(!x15110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15109.value)+(((1.5707963267949)*(x15110.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15111=IKsin(j4);
IkReal x15112=IKcos(j4);
IkReal x15113=(cj5*r10);
IkReal x15114=(r01*sj5);
IkReal x15115=(cj5*r00);
IkReal x15116=(cj5*r20);
IkReal x15117=((1.0)*x15112);
IkReal x15118=((1.0)*x15111);
IkReal x15119=(sj5*x15111);
evalcond[0]=((((-1.0)*x15116*x15118))+(((-1.0)*r22*x15117))+((r21*x15119)));
evalcond[1]=((((-1.0)*x15113*x15118))+((r11*x15119))+(((-1.0)*r12*x15117)));
evalcond[2]=((((-1.0)*x15114*x15117))+(((-1.0)*r02*x15118))+((x15112*x15115)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15117))+((x15111*x15114))+(((-1.0)*x15115*x15118)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x15117))+((cj1*sj2))+((x15112*x15113))+(((-1.0)*r12*x15118)));
evalcond[5]=((((-1.0)*r21*sj5*x15117))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15112*x15116))+(((-1.0)*r22*x15118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15120 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15120.valid){
continue;
}
CheckValue<IkReal> x15121=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15121.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15120.value)+(((1.5707963267949)*(x15121.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15122=IKsin(j4);
IkReal x15123=IKcos(j4);
IkReal x15124=(cj5*r10);
IkReal x15125=(r01*sj5);
IkReal x15126=(cj5*r00);
IkReal x15127=(cj5*r20);
IkReal x15128=((1.0)*x15123);
IkReal x15129=((1.0)*x15122);
IkReal x15130=(sj5*x15122);
evalcond[0]=(((r21*x15130))+(((-1.0)*x15127*x15129))+(((-1.0)*r22*x15128)));
evalcond[1]=((((-1.0)*x15124*x15129))+(((-1.0)*r12*x15128))+((r11*x15130)));
evalcond[2]=((((-1.0)*r02*x15129))+(((-1.0)*x15125*x15128))+((x15123*x15126)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15128))+(((-1.0)*x15126*x15129))+((x15122*x15125)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x15129))+(((-1.0)*r11*sj5*x15128))+((x15123*x15124)));
evalcond[5]=((((-1.0)*r21*sj5*x15128))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15129))+((x15123*x15127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15131=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15131;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15131);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15132=((1.0)*cj5);
IkReal x15133=((((-1.0)*r21*x15132))+(((-1.0)*r20*sj5)));
j4eval[0]=x15133;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15132))+((r11*sj5))))));
j4eval[2]=IKsign(x15133);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15134=cj5*cj5;
IkReal x15135=r01*r01;
IkReal x15136=(r01*sj5);
IkReal x15137=(cj5*r00);
IkReal x15138=((((-1.0)*(r02*r02)))+(((2.0)*x15136*x15137))+((x15134*x15135))+(((-1.0)*x15135))+(((-1.0)*x15134*(r00*r00))));
j4eval[0]=x15138;
j4eval[1]=IKsign(x15138);
j4eval[2]=((IKabs(r02))+(IKabs((x15136+(((-1.0)*x15137))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15139=cj5*cj5;
IkReal x15140=r01*r01;
IkReal x15141=(r01*sj5);
IkReal x15142=(cj5*r00);
CheckValue<IkReal> x15143 = IKatan2WithCheck(IkReal(((((-1.0)*x15142))+x15141)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x15143.valid){
continue;
}
CheckValue<IkReal> x15144=IKPowWithIntegerCheck(IKsign(((((2.0)*x15141*x15142))+(((-1.0)*x15139*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x15140))+((x15139*x15140)))),-1);
if(!x15144.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15143.value)+(((1.5707963267949)*(x15144.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15145=IKcos(j4);
IkReal x15146=IKsin(j4);
IkReal x15147=(cj5*r00);
IkReal x15148=(cj5*r10);
IkReal x15149=(r21*sj5);
IkReal x15150=(cj5*r20);
IkReal x15151=((1.0)*x15145);
IkReal x15152=((1.0)*x15146);
IkReal x15153=(sj5*x15146);
IkReal x15154=(sj5*x15145);
evalcond[0]=(((r01*x15154))+(((-1.0)*x15147*x15151))+((r02*x15146)));
evalcond[1]=((((-1.0)*r22*x15151))+((x15146*x15149))+(((-1.0)*x15150*x15152)));
evalcond[2]=((((-1.0)*x15148*x15152))+(((-1.0)*r12*x15151))+((r11*x15153)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15151))+((r01*x15153))+(((-1.0)*x15147*x15152)));
evalcond[4]=(((cj2*sj1))+((r12*x15146))+((cj1*sj2))+(((-1.0)*x15148*x15151))+((r11*x15154)));
evalcond[5]=(((r22*x15146))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15150*x15151))+((x15145*x15149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15155=((1.0)*cj5);
CheckValue<IkReal> x15156=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15155))+(((-1.0)*r20*sj5)))),-1);
if(!x15156.valid){
continue;
}
CheckValue<IkReal> x15157 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15155))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15157.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15156.value)))+(x15157.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15158=IKcos(j4);
IkReal x15159=IKsin(j4);
IkReal x15160=(cj5*r00);
IkReal x15161=(cj5*r10);
IkReal x15162=(r21*sj5);
IkReal x15163=(cj5*r20);
IkReal x15164=((1.0)*x15158);
IkReal x15165=((1.0)*x15159);
IkReal x15166=(sj5*x15159);
IkReal x15167=(sj5*x15158);
evalcond[0]=((((-1.0)*x15160*x15164))+((r02*x15159))+((r01*x15167)));
evalcond[1]=((((-1.0)*x15163*x15165))+((x15159*x15162))+(((-1.0)*r22*x15164)));
evalcond[2]=(((r11*x15166))+(((-1.0)*x15161*x15165))+(((-1.0)*r12*x15164)));
evalcond[3]=((1.0)+(((-1.0)*x15160*x15165))+(((-1.0)*r02*x15164))+((r01*x15166)));
evalcond[4]=(((cj2*sj1))+((r11*x15167))+((cj1*sj2))+((r12*x15159))+(((-1.0)*x15161*x15164)));
evalcond[5]=(((x15158*x15162))+(((-1.0)*x15163*x15164))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15168 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15168.valid){
continue;
}
CheckValue<IkReal> x15169=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15168.value)+(((1.5707963267949)*(x15169.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15170=IKcos(j4);
IkReal x15171=IKsin(j4);
IkReal x15172=(cj5*r00);
IkReal x15173=(cj5*r10);
IkReal x15174=(r21*sj5);
IkReal x15175=(cj5*r20);
IkReal x15176=((1.0)*x15170);
IkReal x15177=((1.0)*x15171);
IkReal x15178=(sj5*x15171);
IkReal x15179=(sj5*x15170);
evalcond[0]=(((r02*x15171))+(((-1.0)*x15172*x15176))+((r01*x15179)));
evalcond[1]=(((x15171*x15174))+(((-1.0)*x15175*x15177))+(((-1.0)*r22*x15176)));
evalcond[2]=((((-1.0)*x15173*x15177))+((r11*x15178))+(((-1.0)*r12*x15176)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15176))+(((-1.0)*x15172*x15177))+((r01*x15178)));
evalcond[4]=((((-1.0)*x15173*x15176))+((cj2*sj1))+((r11*x15179))+((cj1*sj2))+((r12*x15171)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x15170*x15174))+(((-1.0)*x15175*x15176))+((r22*x15171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15181 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15181)==0){
continue;
}
IkReal x15180=pow(x15181,-0.5);
CheckValue<IkReal> x15182 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15182.valid){
continue;
}
IkReal gconst60=((-1.0)*(x15182.value));
IkReal gconst61=((-1.0)*r11*x15180);
IkReal gconst62=(r10*x15180);
CheckValue<IkReal> x15183 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15183.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15183.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15186 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15186.valid){
continue;
}
IkReal x15184=((-1.0)*(x15186.value));
IkReal x15185=x15180;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15184;
IkReal gconst60=x15184;
IkReal gconst61=((-1.0)*r11*x15185);
IkReal gconst62=(r10*x15185);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15189 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15189.valid){
continue;
}
IkReal x15187=((-1.0)*(x15189.value));
IkReal x15188=x15180;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15187;
IkReal gconst60=x15187;
IkReal gconst61=((-1.0)*r11*x15188);
IkReal gconst62=(r10*x15188);
CheckValue<IkReal> x15197=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x15197.valid){
continue;
}
IkReal x15190=x15197.value;
IkReal x15191=(sj3*x15190);
IkReal x15192=(r20*x15191);
IkReal x15193=(r00*x15191);
IkReal x15194=(r01*x15191);
IkReal x15195=(r21*x15191);
IkReal x15196=(r10*r11*x15191);
j4eval[0]=IKsign((((r01*r10*r11*x15192))+((r21*x15194*(r11*r11)))+((r10*r11*r21*x15193))+((r00*x15192*(r10*r10)))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15198=gconst61*gconst61;
IkReal x15199=gconst62*gconst62;
IkReal x15200=(cj3*r01);
IkReal x15201=(r22*sj3);
IkReal x15202=(gconst61*r00);
IkReal x15203=((1.0)*cj3);
IkReal x15204=(gconst62*r01);
IkReal x15205=((1.0)*sj3);
IkReal x15206=(gconst61*gconst62*r20);
IkReal x15207=(r21*x15198);
IkReal x15208=(r20*x15199);
CheckValue<IkReal> x15209 = IKatan2WithCheck(IkReal((((x15201*x15204))+((x15201*x15202)))),IkReal(((((-1.0)*r01*x15205*x15208))+(((-1.0)*gconst62*r20*x15202*x15205))+((r00*sj3*x15207))+((gconst61*r21*sj3*x15204)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15209.valid){
continue;
}
CheckValue<IkReal> x15210=IKPowWithIntegerCheck(IKsign((((x15200*x15206))+((cj3*gconst62*r21*x15202))+(((-1.0)*r00*x15203*x15208))+(((-1.0)*r02*r22*x15203))+(((-1.0)*x15200*x15207)))),-1);
if(!x15210.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15209.value)+(((1.5707963267949)*(x15210.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15211=IKsin(j4);
IkReal x15212=IKcos(j4);
IkReal x15213=(cj2*sj1);
IkReal x15214=(cj1*sj2);
IkReal x15215=(gconst61*sj3);
IkReal x15216=(cj3*gconst61);
IkReal x15217=(cj3*gconst62);
IkReal x15218=(sj1*sj2);
IkReal x15219=(gconst62*sj3);
IkReal x15220=(cj1*cj2);
IkReal x15221=((1.0)*x15212);
IkReal x15222=((1.0)*x15211);
IkReal x15223=(gconst61*x15211);
IkReal x15224=(cj3*x15211);
IkReal x15225=(x15214+x15213);
evalcond[0]=((((-1.0)*gconst62*r20*x15222))+(((-1.0)*r22*x15221))+((r21*x15223)));
evalcond[1]=((((-1.0)*r12*x15221))+(((-1.0)*gconst62*r10*x15222))+((r11*x15223)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r00*x15222))+(((-1.0)*r02*x15221))+((r01*x15223)));
evalcond[3]=((((-1.0)*r00*x15217*x15221))+((r02*x15224))+((r00*x15215))+((r01*x15219))+((r01*x15212*x15216)));
evalcond[4]=((((-1.0)*r01*x15215*x15221))+((r00*x15212*x15219))+((r00*x15216))+((r01*x15217))+(((-1.0)*r02*sj3*x15222)));
evalcond[5]=(((r20*x15215))+((r22*x15224))+x15225+((r21*x15212*x15216))+(((-1.0)*r20*x15217*x15221))+((r21*x15219)));
evalcond[6]=(((r12*x15224))+((r10*x15215))+(((-1.0)*r10*x15217*x15221))+((r11*x15219))+(((-1.0)*x15218))+x15220+((r11*x15212*x15216)));
evalcond[7]=((((-1.0)*r11*x15215*x15221))+(((-1.0)*r12*sj3*x15222))+((r10*x15216))+((r11*x15217))+((r10*x15212*x15219))+x15225);
evalcond[8]=((((-1.0)*x15220))+(((-1.0)*r21*x15215*x15221))+((r20*x15216))+x15218+(((-1.0)*r22*sj3*x15222))+((r21*x15217))+((r20*x15212*x15219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15226=gconst61*gconst61;
IkReal x15227=gconst62*gconst62;
IkReal x15228=(cj3*r22);
IkReal x15229=(gconst62*r01);
IkReal x15230=(gconst61*r00);
IkReal x15231=((1.0)*r20);
IkReal x15232=(cj3*r21);
IkReal x15233=(r21*sj3);
CheckValue<IkReal> x15234 = IKatan2WithCheck(IkReal((((x15228*x15229))+((x15228*x15230)))),IkReal(((((-1.0)*cj3*gconst62*x15230*x15231))+((r00*x15226*x15232))+((gconst61*x15229*x15232))+(((-1.0)*cj3*r01*x15227*x15231)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15234.valid){
continue;
}
CheckValue<IkReal> x15235=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst62*x15230*x15233))+((r01*x15226*x15233))+((r00*r20*sj3*x15227))+(((-1.0)*gconst61*sj3*x15229*x15231))+((r02*r22*sj3)))),-1);
if(!x15235.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15234.value)+(((1.5707963267949)*(x15235.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15236=IKsin(j4);
IkReal x15237=IKcos(j4);
IkReal x15238=(cj2*sj1);
IkReal x15239=(cj1*sj2);
IkReal x15240=(gconst61*sj3);
IkReal x15241=(cj3*gconst61);
IkReal x15242=(cj3*gconst62);
IkReal x15243=(sj1*sj2);
IkReal x15244=(gconst62*sj3);
IkReal x15245=(cj1*cj2);
IkReal x15246=((1.0)*x15237);
IkReal x15247=((1.0)*x15236);
IkReal x15248=(gconst61*x15236);
IkReal x15249=(cj3*x15236);
IkReal x15250=(x15238+x15239);
evalcond[0]=((((-1.0)*gconst62*r20*x15247))+((r21*x15248))+(((-1.0)*r22*x15246)));
evalcond[1]=((((-1.0)*gconst62*r10*x15247))+(((-1.0)*r12*x15246))+((r11*x15248)));
evalcond[2]=((1.0)+((r01*x15248))+(((-1.0)*r02*x15246))+(((-1.0)*gconst62*r00*x15247)));
evalcond[3]=(((r01*x15244))+((r00*x15240))+(((-1.0)*r00*x15242*x15246))+((r01*x15237*x15241))+((r02*x15249)));
evalcond[4]=(((r00*x15237*x15244))+((r01*x15242))+((r00*x15241))+(((-1.0)*r01*x15240*x15246))+(((-1.0)*r02*sj3*x15247)));
evalcond[5]=(((r21*x15237*x15241))+x15250+((r21*x15244))+(((-1.0)*r20*x15242*x15246))+((r22*x15249))+((r20*x15240)));
evalcond[6]=(((r11*x15237*x15241))+(((-1.0)*x15243))+x15245+(((-1.0)*r10*x15242*x15246))+((r10*x15240))+((r12*x15249))+((r11*x15244)));
evalcond[7]=((((-1.0)*r12*sj3*x15247))+(((-1.0)*r11*x15240*x15246))+x15250+((r10*x15241))+((r10*x15237*x15244))+((r11*x15242)));
evalcond[8]=((((-1.0)*x15245))+x15243+((r21*x15242))+(((-1.0)*r22*sj3*x15247))+(((-1.0)*r21*x15240*x15246))+((r20*x15237*x15244))+((r20*x15241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15251=((1.0)*gconst62);
CheckValue<IkReal> x15252=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*r20))+(((-1.0)*r21*x15251)))),-1);
if(!x15252.valid){
continue;
}
CheckValue<IkReal> x15253 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15251))+((gconst61*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15253.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15252.value)))+(x15253.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15254=IKsin(j4);
IkReal x15255=IKcos(j4);
IkReal x15256=(cj2*sj1);
IkReal x15257=(cj1*sj2);
IkReal x15258=(gconst61*sj3);
IkReal x15259=(cj3*gconst61);
IkReal x15260=(cj3*gconst62);
IkReal x15261=(sj1*sj2);
IkReal x15262=(gconst62*sj3);
IkReal x15263=(cj1*cj2);
IkReal x15264=((1.0)*x15255);
IkReal x15265=((1.0)*x15254);
IkReal x15266=(gconst61*x15254);
IkReal x15267=(cj3*x15254);
IkReal x15268=(x15256+x15257);
evalcond[0]=((((-1.0)*gconst62*r20*x15265))+(((-1.0)*r22*x15264))+((r21*x15266)));
evalcond[1]=((((-1.0)*gconst62*r10*x15265))+(((-1.0)*r12*x15264))+((r11*x15266)));
evalcond[2]=((1.0)+(((-1.0)*r02*x15264))+((r01*x15266))+(((-1.0)*gconst62*r00*x15265)));
evalcond[3]=(((r00*x15258))+((r01*x15255*x15259))+(((-1.0)*r00*x15260*x15264))+((r01*x15262))+((r02*x15267)));
evalcond[4]=(((r00*x15259))+(((-1.0)*r01*x15258*x15264))+((r00*x15255*x15262))+((r01*x15260))+(((-1.0)*r02*sj3*x15265)));
evalcond[5]=(x15268+((r22*x15267))+((r20*x15258))+(((-1.0)*r20*x15260*x15264))+((r21*x15255*x15259))+((r21*x15262)));
evalcond[6]=(((r12*x15267))+x15263+(((-1.0)*r10*x15260*x15264))+((r10*x15258))+(((-1.0)*x15261))+((r11*x15255*x15259))+((r11*x15262)));
evalcond[7]=((((-1.0)*r11*x15258*x15264))+(((-1.0)*r12*sj3*x15265))+x15268+((r10*x15255*x15262))+((r10*x15259))+((r11*x15260)));
evalcond[8]=(x15261+(((-1.0)*r21*x15258*x15264))+((r20*x15259))+(((-1.0)*r22*sj3*x15265))+(((-1.0)*x15263))+((r21*x15260))+((r20*x15255*x15262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15270 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15270)==0){
continue;
}
IkReal x15269=pow(x15270,-0.5);
CheckValue<IkReal> x15271 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15271.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x15271.value))));
IkReal gconst64=((1.0)*r11*x15269);
IkReal gconst65=((-1.0)*r10*x15269);
CheckValue<IkReal> x15272 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15272.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15272.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15275 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15275.valid){
continue;
}
IkReal x15273=((1.0)*(x15275.value));
IkReal x15274=x15269;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x15273)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x15273)));
IkReal gconst64=((1.0)*r11*x15274);
IkReal gconst65=((-1.0)*r10*x15274);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15276=gconst64*gconst64;
IkReal x15277=gconst65*gconst65;
IkReal x15278=(gconst65*r01);
IkReal x15279=(cj3*r22);
IkReal x15280=(gconst64*r00);
IkReal x15281=(cj3*r21);
IkReal x15282=((1.0)*gconst64*sj3);
IkReal x15283=((1.0)*cj3*r20);
CheckValue<IkReal> x15284 = IKatan2WithCheck(IkReal((((x15279*x15280))+((x15278*x15279)))),IkReal(((((-1.0)*r01*x15277*x15283))+(((-1.0)*gconst65*x15280*x15283))+((gconst64*x15278*x15281))+((r00*x15276*x15281)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15284.valid){
continue;
}
CheckValue<IkReal> x15285=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst65*r21*sj3*x15280))+((r01*r21*sj3*x15276))+((r00*r20*sj3*x15277))+(((-1.0)*r20*x15278*x15282))+((r02*r22*sj3)))),-1);
if(!x15285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15284.value)+(((1.5707963267949)*(x15285.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15286=IKsin(j4);
IkReal x15287=IKcos(j4);
IkReal x15288=(cj2*sj1);
IkReal x15289=(cj1*sj2);
IkReal x15290=(cj3*gconst64);
IkReal x15291=(gconst65*r21);
IkReal x15292=(sj1*sj2);
IkReal x15293=(gconst65*sj3);
IkReal x15294=(gconst64*sj3);
IkReal x15295=(cj3*gconst65);
IkReal x15296=(cj1*cj2);
IkReal x15297=((1.0)*x15287);
IkReal x15298=((1.0)*x15286);
IkReal x15299=(cj3*x15286);
IkReal x15300=(gconst64*x15286);
IkReal x15301=(x15289+x15288);
evalcond[0]=((((-1.0)*r22*x15297))+((r21*x15300))+(((-1.0)*gconst65*r20*x15298)));
evalcond[1]=((((-1.0)*r12*x15297))+((r11*x15300))+(((-1.0)*gconst65*r10*x15298)));
evalcond[2]=((1.0)+((r01*x15300))+(((-1.0)*gconst65*r00*x15298))+(((-1.0)*r02*x15297)));
evalcond[3]=((((-1.0)*r00*x15295*x15297))+((r01*x15287*x15290))+((r01*x15293))+((r00*x15294))+((r02*x15299)));
evalcond[4]=((((-1.0)*r02*sj3*x15298))+(((-1.0)*r01*x15294*x15297))+((r01*x15295))+((r00*x15287*x15293))+((r00*x15290)));
evalcond[5]=((((-1.0)*r20*x15295*x15297))+((r20*x15294))+((r21*x15287*x15290))+((sj3*x15291))+x15301+((r22*x15299)));
evalcond[6]=(((r10*x15294))+(((-1.0)*r10*x15295*x15297))+(((-1.0)*x15292))+((r11*x15293))+x15296+((r11*x15287*x15290))+((r12*x15299)));
evalcond[7]=(((r10*x15290))+((r11*x15295))+x15301+(((-1.0)*r11*x15294*x15297))+((r10*x15287*x15293))+(((-1.0)*r12*sj3*x15298)));
evalcond[8]=(((r20*x15290))+(((-1.0)*x15296))+x15292+(((-1.0)*r22*sj3*x15298))+((r20*x15287*x15293))+(((-1.0)*r21*x15294*x15297))+((cj3*x15291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15302=((1.0)*gconst65);
CheckValue<IkReal> x15303=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15302))+(((-1.0)*gconst64*r20)))),-1);
if(!x15303.valid){
continue;
}
CheckValue<IkReal> x15304 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst64*r11))+(((-1.0)*r10*x15302)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15304.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15303.value)))+(x15304.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15305=IKsin(j4);
IkReal x15306=IKcos(j4);
IkReal x15307=(cj2*sj1);
IkReal x15308=(cj1*sj2);
IkReal x15309=(cj3*gconst64);
IkReal x15310=(gconst65*r21);
IkReal x15311=(sj1*sj2);
IkReal x15312=(gconst65*sj3);
IkReal x15313=(gconst64*sj3);
IkReal x15314=(cj3*gconst65);
IkReal x15315=(cj1*cj2);
IkReal x15316=((1.0)*x15306);
IkReal x15317=((1.0)*x15305);
IkReal x15318=(cj3*x15305);
IkReal x15319=(gconst64*x15305);
IkReal x15320=(x15308+x15307);
evalcond[0]=((((-1.0)*gconst65*r20*x15317))+((r21*x15319))+(((-1.0)*r22*x15316)));
evalcond[1]=(((r11*x15319))+(((-1.0)*gconst65*r10*x15317))+(((-1.0)*r12*x15316)));
evalcond[2]=((1.0)+((r01*x15319))+(((-1.0)*gconst65*r00*x15317))+(((-1.0)*r02*x15316)));
evalcond[3]=(((r01*x15312))+((r00*x15313))+(((-1.0)*r00*x15314*x15316))+((r02*x15318))+((r01*x15306*x15309)));
evalcond[4]=(((r01*x15314))+((r00*x15309))+((r00*x15306*x15312))+(((-1.0)*r01*x15313*x15316))+(((-1.0)*r02*sj3*x15317)));
evalcond[5]=(((sj3*x15310))+(((-1.0)*r20*x15314*x15316))+x15320+((r22*x15318))+((r21*x15306*x15309))+((r20*x15313)));
evalcond[6]=(((r11*x15312))+(((-1.0)*x15311))+((r12*x15318))+x15315+((r10*x15313))+((r11*x15306*x15309))+(((-1.0)*r10*x15314*x15316)));
evalcond[7]=((((-1.0)*r11*x15313*x15316))+((r11*x15314))+x15320+(((-1.0)*r12*sj3*x15317))+((r10*x15309))+((r10*x15306*x15312)));
evalcond[8]=((((-1.0)*x15315))+((r20*x15309))+(((-1.0)*r21*x15313*x15316))+x15311+((r20*x15306*x15312))+(((-1.0)*r22*sj3*x15317))+((cj3*x15310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15321=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15321);
rxp0_2=(py*r00);
rxp1_0=(r21*x15321);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15322=(r01*sj5);
IkReal x15323=((1.0)*cj5*r00);
j4eval[0]=(x15322+(((-1.0)*x15323)));
j4eval[1]=((((-1.0)*cj3*x15323))+((cj3*x15322)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15324=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15324);
rxp0_2=(py*r00);
rxp1_0=(r21*x15324);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15325=(cj5*r00);
IkReal x15326=(r01*sj5);
j4eval[0]=((((-1.0)*x15325))+x15326);
j4eval[1]=((((-1.0)*sj3*x15326))+((sj3*x15325)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15327=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15327);
rxp0_2=(py*r00);
rxp1_0=(r21*x15327);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15328=((1.0)*r00);
CheckValue<IkReal> x15329=IKPowWithIntegerCheck(cj3,-1);
if(!x15329.valid){
continue;
}
CheckValue<IkReal> x15330=IKPowWithIntegerCheck(r12,-1);
if(!x15330.valid){
continue;
}
CheckValue<IkReal> x15331=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x15328))),-1);
if(!x15331.valid){
continue;
}
if( IKabs(((x15329.value)*(x15330.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15331.value)*(((((-1.0)*sj3*sj5*x15328))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15329.value)*(x15330.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x15331.value)*(((((-1.0)*sj3*sj5*x15328))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15329.value)*(x15330.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x15331.value)*(((((-1.0)*sj3*sj5*x15328))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15332=IKsin(j4);
IkReal x15333=IKcos(j4);
IkReal x15334=(cj2*sj1);
IkReal x15335=(cj1*sj2);
IkReal x15336=(sj1*sj2);
IkReal x15337=(cj5*sj3);
IkReal x15338=(cj3*cj5);
IkReal x15339=(r21*sj5);
IkReal x15340=(cj1*cj2);
IkReal x15341=(r00*sj5);
IkReal x15342=(r01*sj5);
IkReal x15343=(r20*sj5);
IkReal x15344=((1.0)*x15332);
IkReal x15345=(r20*x15333);
IkReal x15346=(r00*x15333);
IkReal x15347=(cj3*x15333);
IkReal x15348=(x15335+x15334);
IkReal x15349=((1.0)*sj3*x15333);
evalcond[0]=((-1.0)*r12*x15333);
evalcond[1]=(((x15332*x15339))+(((-1.0)*cj5*r20*x15344)));
evalcond[2]=((((-1.0)*x15336))+x15340+((cj3*r12*x15332)));
evalcond[3]=((((-1.0)*r12*sj3*x15344))+x15348);
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15344))+((x15332*x15342)));
evalcond[5]=((((-1.0)*x15338*x15346))+((x15342*x15347))+((r01*x15337))+((sj3*x15341)));
evalcond[6]=(((r01*x15338))+((cj3*x15341))+(((-1.0)*x15342*x15349))+((x15337*x15346)));
evalcond[7]=((((-1.0)*x15338*x15345))+x15348+((r21*x15337))+((sj3*x15343))+((x15339*x15347)));
evalcond[8]=(((cj3*x15343))+x15336+(((-1.0)*x15339*x15349))+((r21*x15338))+((x15337*x15345))+(((-1.0)*x15340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15350=((1.0)*r01);
IkReal x15351=(cj5*r00);
CheckValue<IkReal> x15352=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*x15351))),-1);
if(!x15352.valid){
continue;
}
CheckValue<IkReal> x15353=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x15350))+((sj3*x15351))),-1);
if(!x15353.valid){
continue;
}
if( IKabs(((-1.0)*(x15352.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15353.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15350)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15352.value)))+IKsqr(((x15353.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15350))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15352.value)), ((x15353.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15350))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15354=IKsin(j4);
IkReal x15355=IKcos(j4);
IkReal x15356=(cj2*sj1);
IkReal x15357=(cj1*sj2);
IkReal x15358=(sj1*sj2);
IkReal x15359=(cj5*sj3);
IkReal x15360=(cj3*cj5);
IkReal x15361=(r21*sj5);
IkReal x15362=(cj1*cj2);
IkReal x15363=(r00*sj5);
IkReal x15364=(r01*sj5);
IkReal x15365=(r20*sj5);
IkReal x15366=((1.0)*x15354);
IkReal x15367=(r20*x15355);
IkReal x15368=(r00*x15355);
IkReal x15369=(cj3*x15355);
IkReal x15370=(x15357+x15356);
IkReal x15371=((1.0)*sj3*x15355);
evalcond[0]=((-1.0)*r12*x15355);
evalcond[1]=((((-1.0)*cj5*r20*x15366))+((x15354*x15361)));
evalcond[2]=(x15362+(((-1.0)*x15358))+((cj3*r12*x15354)));
evalcond[3]=((((-1.0)*r12*sj3*x15366))+x15370);
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15366))+((x15354*x15364)));
evalcond[5]=((((-1.0)*x15360*x15368))+((x15364*x15369))+((sj3*x15363))+((r01*x15359)));
evalcond[6]=(((cj3*x15363))+((x15359*x15368))+(((-1.0)*x15364*x15371))+((r01*x15360)));
evalcond[7]=((((-1.0)*x15360*x15367))+((x15361*x15369))+x15370+((sj3*x15365))+((r21*x15359)));
evalcond[8]=(((cj3*x15365))+x15358+((x15359*x15367))+(((-1.0)*x15362))+(((-1.0)*x15361*x15371))+((r21*x15360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15372=((1.0)*r00);
IkReal x15373=(r01*sj5);
CheckValue<IkReal> x15374=IKPowWithIntegerCheck((x15373+(((-1.0)*cj5*x15372))),-1);
if(!x15374.valid){
continue;
}
CheckValue<IkReal> x15375=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x15372))+((cj3*x15373))),-1);
if(!x15375.valid){
continue;
}
if( IKabs(((-1.0)*(x15374.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15375.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15372)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15374.value)))+IKsqr(((x15375.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15372))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15374.value)), ((x15375.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15372))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15376=IKsin(j4);
IkReal x15377=IKcos(j4);
IkReal x15378=(cj2*sj1);
IkReal x15379=(cj1*sj2);
IkReal x15380=(sj1*sj2);
IkReal x15381=(cj5*sj3);
IkReal x15382=(cj3*cj5);
IkReal x15383=(r21*sj5);
IkReal x15384=(cj1*cj2);
IkReal x15385=(r00*sj5);
IkReal x15386=(r01*sj5);
IkReal x15387=(r20*sj5);
IkReal x15388=((1.0)*x15376);
IkReal x15389=(r20*x15377);
IkReal x15390=(r00*x15377);
IkReal x15391=(cj3*x15377);
IkReal x15392=(x15379+x15378);
IkReal x15393=((1.0)*sj3*x15377);
evalcond[0]=((-1.0)*r12*x15377);
evalcond[1]=((((-1.0)*cj5*r20*x15388))+((x15376*x15383)));
evalcond[2]=(((cj3*r12*x15376))+x15384+(((-1.0)*x15380)));
evalcond[3]=((((-1.0)*r12*sj3*x15388))+x15392);
evalcond[4]=((1.0)+((x15376*x15386))+(((-1.0)*cj5*r00*x15388)));
evalcond[5]=(((r01*x15381))+((x15386*x15391))+(((-1.0)*x15382*x15390))+((sj3*x15385)));
evalcond[6]=(((r01*x15382))+(((-1.0)*x15386*x15393))+((x15381*x15390))+((cj3*x15385)));
evalcond[7]=(((r21*x15381))+((x15383*x15391))+(((-1.0)*x15382*x15389))+x15392+((sj3*x15387)));
evalcond[8]=(((r21*x15382))+(((-1.0)*x15383*x15393))+((cj3*x15387))+x15380+(((-1.0)*x15384))+((x15381*x15389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15394=cj5*cj5;
IkReal x15395=(cj3*r20);
IkReal x15396=(r21*sj3);
IkReal x15397=((1.0)*cj3);
IkReal x15398=(r01*r21);
IkReal x15399=(r01*sj3);
IkReal x15400=(r00*sj5);
IkReal x15401=(cj5*r01*sj5);
IkReal x15402=((1.0)*x15394);
CheckValue<IkReal> x15403=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x15395*x15402))+((cj3*x15394*x15398))+(((-1.0)*r02*r22*x15397))+((x15395*x15401))+((cj3*cj5*r21*x15400))+(((-1.0)*x15397*x15398)))),-1);
if(!x15403.valid){
continue;
}
CheckValue<IkReal> x15404 = IKatan2WithCheck(IkReal((((cj5*r22*x15399))+((r22*sj3*x15400)))),IkReal(((((-1.0)*r00*x15396*x15402))+(((-1.0)*r20*x15399*x15402))+(((-1.0)*cj5*r20*sj3*x15400))+((r00*x15396))+((x15396*x15401)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15404.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15403.value)))+(x15404.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15405=IKsin(j4);
IkReal x15406=IKcos(j4);
IkReal x15407=(cj2*sj1);
IkReal x15408=(cj1*sj2);
IkReal x15409=(r11*sj5);
IkReal x15410=(cj5*r10);
IkReal x15411=(sj1*sj2);
IkReal x15412=(cj5*r01);
IkReal x15413=(cj5*r00);
IkReal x15414=(cj3*sj5);
IkReal x15415=(r21*sj5);
IkReal x15416=(cj1*cj2);
IkReal x15417=(cj5*sj3);
IkReal x15418=(sj3*sj5);
IkReal x15419=(r01*sj5);
IkReal x15420=(cj3*cj5);
IkReal x15421=(cj5*r20);
IkReal x15422=((1.0)*x15406);
IkReal x15423=((1.0)*x15405);
IkReal x15424=(cj3*x15406);
IkReal x15425=(sj3*x15406);
IkReal x15426=(cj3*x15405);
IkReal x15427=(x15407+x15408);
evalcond[0]=((((-1.0)*x15421*x15423))+(((-1.0)*r22*x15422))+((x15405*x15415)));
evalcond[1]=((((-1.0)*r12*x15422))+(((-1.0)*x15410*x15423))+((x15405*x15409)));
evalcond[2]=((1.0)+(((-1.0)*x15413*x15423))+(((-1.0)*r02*x15422))+((x15405*x15419)));
evalcond[3]=((((-1.0)*cj3*x15413*x15422))+((r02*x15426))+((sj3*x15412))+((r00*x15418))+((r01*x15406*x15414)));
evalcond[4]=(((x15413*x15425))+((cj3*x15412))+(((-1.0)*r01*x15418*x15422))+((r00*x15414))+(((-1.0)*r02*sj3*x15423)));
evalcond[5]=(((r20*x15418))+((r22*x15426))+((r21*x15406*x15414))+x15427+(((-1.0)*r20*x15420*x15422))+((r21*x15417)));
evalcond[6]=(((x15409*x15424))+((r11*x15417))+(((-1.0)*x15411))+((r12*x15426))+(((-1.0)*cj3*x15410*x15422))+x15416+((r10*x15418)));
evalcond[7]=(((x15410*x15425))+(((-1.0)*r12*sj3*x15423))+((r11*x15420))+x15427+((r10*x15414))+(((-1.0)*sj3*x15409*x15422)));
evalcond[8]=((((-1.0)*x15416))+((r21*x15420))+(((-1.0)*r22*sj3*x15423))+((r20*x15414))+(((-1.0)*sj3*x15415*x15422))+((r20*x15406*x15417))+x15411);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15428=((1.0)*cj5);
CheckValue<IkReal> x15429 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15428)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15429.valid){
continue;
}
CheckValue<IkReal> x15430=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15428))+(((-1.0)*r20*sj5)))),-1);
if(!x15430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15429.value)+(((1.5707963267949)*(x15430.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15431=IKsin(j4);
IkReal x15432=IKcos(j4);
IkReal x15433=(cj2*sj1);
IkReal x15434=(cj1*sj2);
IkReal x15435=(r11*sj5);
IkReal x15436=(cj5*r10);
IkReal x15437=(sj1*sj2);
IkReal x15438=(cj5*r01);
IkReal x15439=(cj5*r00);
IkReal x15440=(cj3*sj5);
IkReal x15441=(r21*sj5);
IkReal x15442=(cj1*cj2);
IkReal x15443=(cj5*sj3);
IkReal x15444=(sj3*sj5);
IkReal x15445=(r01*sj5);
IkReal x15446=(cj3*cj5);
IkReal x15447=(cj5*r20);
IkReal x15448=((1.0)*x15432);
IkReal x15449=((1.0)*x15431);
IkReal x15450=(cj3*x15432);
IkReal x15451=(sj3*x15432);
IkReal x15452=(cj3*x15431);
IkReal x15453=(x15434+x15433);
evalcond[0]=(((x15431*x15441))+(((-1.0)*r22*x15448))+(((-1.0)*x15447*x15449)));
evalcond[1]=((((-1.0)*r12*x15448))+((x15431*x15435))+(((-1.0)*x15436*x15449)));
evalcond[2]=((1.0)+(((-1.0)*x15439*x15449))+((x15431*x15445))+(((-1.0)*r02*x15448)));
evalcond[3]=(((r00*x15444))+((sj3*x15438))+(((-1.0)*cj3*x15439*x15448))+((r02*x15452))+((r01*x15432*x15440)));
evalcond[4]=(((r00*x15440))+(((-1.0)*r02*sj3*x15449))+((x15439*x15451))+((cj3*x15438))+(((-1.0)*r01*x15444*x15448)));
evalcond[5]=(((r20*x15444))+((r21*x15432*x15440))+((r22*x15452))+x15453+(((-1.0)*r20*x15446*x15448))+((r21*x15443)));
evalcond[6]=(((r11*x15443))+(((-1.0)*cj3*x15436*x15448))+((r10*x15444))+((x15435*x15450))+((r12*x15452))+(((-1.0)*x15437))+x15442);
evalcond[7]=(((r11*x15446))+((x15436*x15451))+((r10*x15440))+(((-1.0)*sj3*x15435*x15448))+x15453+(((-1.0)*r12*sj3*x15449)));
evalcond[8]=(((r20*x15440))+(((-1.0)*r22*sj3*x15449))+x15437+(((-1.0)*sj3*x15441*x15448))+((r20*x15432*x15443))+(((-1.0)*x15442))+((r21*x15446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15454 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15454.valid){
continue;
}
CheckValue<IkReal> x15455=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15455.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15454.value)+(((1.5707963267949)*(x15455.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15456=IKsin(j4);
IkReal x15457=IKcos(j4);
IkReal x15458=(cj2*sj1);
IkReal x15459=(cj1*sj2);
IkReal x15460=(r11*sj5);
IkReal x15461=(cj5*r10);
IkReal x15462=(sj1*sj2);
IkReal x15463=(cj5*r01);
IkReal x15464=(cj5*r00);
IkReal x15465=(cj3*sj5);
IkReal x15466=(r21*sj5);
IkReal x15467=(cj1*cj2);
IkReal x15468=(cj5*sj3);
IkReal x15469=(sj3*sj5);
IkReal x15470=(r01*sj5);
IkReal x15471=(cj3*cj5);
IkReal x15472=(cj5*r20);
IkReal x15473=((1.0)*x15457);
IkReal x15474=((1.0)*x15456);
IkReal x15475=(cj3*x15457);
IkReal x15476=(sj3*x15457);
IkReal x15477=(cj3*x15456);
IkReal x15478=(x15458+x15459);
evalcond[0]=((((-1.0)*r22*x15473))+((x15456*x15466))+(((-1.0)*x15472*x15474)));
evalcond[1]=((((-1.0)*x15461*x15474))+((x15456*x15460))+(((-1.0)*r12*x15473)));
evalcond[2]=((1.0)+((x15456*x15470))+(((-1.0)*r02*x15473))+(((-1.0)*x15464*x15474)));
evalcond[3]=(((r02*x15477))+((r01*x15457*x15465))+(((-1.0)*cj3*x15464*x15473))+((r00*x15469))+((sj3*x15463)));
evalcond[4]=((((-1.0)*r01*x15469*x15473))+((r00*x15465))+((x15464*x15476))+((cj3*x15463))+(((-1.0)*r02*sj3*x15474)));
evalcond[5]=(((r22*x15477))+(((-1.0)*r20*x15471*x15473))+((r21*x15457*x15465))+((r21*x15468))+x15478+((r20*x15469)));
evalcond[6]=((((-1.0)*cj3*x15461*x15473))+(((-1.0)*x15462))+((x15460*x15475))+((r12*x15477))+x15467+((r11*x15468))+((r10*x15469)));
evalcond[7]=((((-1.0)*r12*sj3*x15474))+(((-1.0)*sj3*x15460*x15473))+((x15461*x15476))+x15478+((r10*x15465))+((r11*x15471)));
evalcond[8]=((((-1.0)*sj3*x15466*x15473))+(((-1.0)*x15467))+((r21*x15471))+x15462+((r20*x15457*x15468))+((r20*x15465))+(((-1.0)*r22*sj3*x15474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15479=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15479);
rxp1_1=(px*r21);
rxp1_2=(r11*x15479);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15480=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15480);
rxp1_1=(px*r21);
rxp1_2=(r11*x15480);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15481=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x15481)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15481)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15482=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15482);
rxp1_1=(px*r21);
rxp1_2=(r11*x15482);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15483=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15483);
rxp1_1=(px*r21);
rxp1_2=(r11*x15483);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15484=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15484);
rxp1_1=(px*r21);
rxp1_2=(r11*x15484);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15485=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15485);
rxp1_1=(px*r21);
rxp1_2=(r11*x15485);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15488=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x15488.valid){
continue;
}
IkReal x15486=x15488.value;
IkReal x15487=(sj0*x15486);
cj4array[0]=(((cj2*sj1*x15487))+((cj1*sj2*x15487)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15489=IKsin(j4);
IkReal x15490=IKcos(j4);
IkReal x15491=(cj5*r20);
IkReal x15492=(r21*sj5);
IkReal x15493=((1.0)*x15489);
IkReal x15494=((1.0)*x15490);
evalcond[0]=((-1.0)*r02*x15489);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15494)));
evalcond[2]=(((x15489*x15492))+(((-1.0)*x15491*x15493)));
evalcond[3]=(((r11*sj5*x15489))+(((-1.0)*cj5*r10*x15493)));
evalcond[4]=(((x15490*x15491))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15492*x15494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15496=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x15496.valid){
continue;
}
IkReal x15495=x15496.value;
cj4array[0]=(((cj1*cj2*x15495))+(((-1.0)*sj1*sj2*x15495)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15497=IKsin(j4);
IkReal x15498=IKcos(j4);
IkReal x15499=(r11*sj5);
IkReal x15500=((1.0)*sj0);
IkReal x15501=((1.0)*x15498);
IkReal x15502=((1.0)*cj5*x15497);
evalcond[0]=((-1.0)*r02*x15497);
evalcond[1]=((((-1.0)*x15500))+(((-1.0)*r02*x15501)));
evalcond[2]=(((r21*sj5*x15497))+(((-1.0)*r20*x15502)));
evalcond[3]=(((x15497*x15499))+(((-1.0)*r10*x15502)));
evalcond[4]=((((-1.0)*cj1*sj2*x15500))+(((-1.0)*cj2*sj1*x15500))+((cj5*r10*x15498))+(((-1.0)*x15499*x15501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15503=IKPowWithIntegerCheck(r02,-1);
if(!x15503.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15503.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15504=IKsin(j4);
IkReal x15505=IKcos(j4);
IkReal x15506=((1.0)*sj0);
IkReal x15507=(cj5*x15505);
IkReal x15508=(sj5*x15504);
IkReal x15509=((1.0)*sj5*x15505);
IkReal x15510=((1.0)*cj5*x15504);
evalcond[0]=((-1.0)*r02*x15504);
evalcond[1]=((((-1.0)*r20*x15510))+((r21*x15508)));
evalcond[2]=(((r11*x15508))+(((-1.0)*r10*x15510)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x15509))+((r20*x15507)));
evalcond[4]=(((r10*x15507))+(((-1.0)*cj1*sj2*x15506))+(((-1.0)*r11*x15509))+(((-1.0)*cj2*sj1*x15506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15511=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15511);
rxp1_1=(px*r21);
rxp1_2=(r11*x15511);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15512=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15512);
rxp1_1=(px*r21);
rxp1_2=(r11*x15512);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15513=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15513);
rxp1_1=(px*r21);
rxp1_2=(r11*x15513);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15516=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15516.valid){
continue;
}
IkReal x15514=x15516.value;
IkReal x15515=(sj0*x15514);
cj4array[0]=(((cj1*sj2*x15515))+((cj2*sj1*x15515)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15517=IKsin(j4);
IkReal x15518=IKcos(j4);
IkReal x15519=(r21*sj5);
IkReal x15520=((1.0)*cj5*r20);
evalcond[0]=(r02*x15517);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15518)));
evalcond[2]=(((x15517*x15519))+(((-1.0)*x15517*x15520)));
evalcond[3]=(((r11*sj5*x15517))+(((-1.0)*cj5*r10*x15517)));
evalcond[4]=(((x15518*x15519))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15518*x15520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15522=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x15522.valid){
continue;
}
IkReal x15521=x15522.value;
cj4array[0]=(((cj1*cj2*x15521))+(((-1.0)*sj1*sj2*x15521)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15523=IKsin(j4);
IkReal x15524=IKcos(j4);
IkReal x15525=((1.0)*sj0);
IkReal x15526=((1.0)*cj5);
IkReal x15527=(sj5*x15523);
evalcond[0]=(r02*x15523);
evalcond[1]=((((-1.0)*r02*x15524))+(((-1.0)*x15525)));
evalcond[2]=(((r21*x15527))+(((-1.0)*r20*x15523*x15526)));
evalcond[3]=((((-1.0)*r10*x15523*x15526))+((r11*x15527)));
evalcond[4]=((((-1.0)*cj2*sj1*x15525))+(((-1.0)*r10*x15524*x15526))+((r11*sj5*x15524))+(((-1.0)*cj1*sj2*x15525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15528=IKPowWithIntegerCheck(r02,-1);
if(!x15528.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15528.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15529=IKsin(j4);
IkReal x15530=IKcos(j4);
IkReal x15531=((1.0)*cj1);
IkReal x15532=(r21*sj5);
IkReal x15533=((1.0)*cj5);
IkReal x15534=(r11*sj5);
evalcond[0]=(r02*x15529);
evalcond[1]=((((-1.0)*r20*x15529*x15533))+((x15529*x15532)));
evalcond[2]=(((x15529*x15534))+(((-1.0)*r10*x15529*x15533)));
evalcond[3]=(((x15530*x15532))+((sj1*sj2))+(((-1.0)*cj2*x15531))+(((-1.0)*r20*x15530*x15533)));
evalcond[4]=(((x15530*x15534))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x15531))+(((-1.0)*r10*x15530*x15533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x15535 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15535.valid){
continue;
}
IkReal gconst66=((-1.0)*(x15535.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x15536 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15536.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15536.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15537=((-1.0)*r10);
CheckValue<IkReal> x15539 = IKatan2WithCheck(IkReal(x15537),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15539.valid){
continue;
}
IkReal x15538=((-1.0)*(x15539.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15537);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15538;
IkReal gconst66=x15538;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15540=((-1.0)*r10);
CheckValue<IkReal> x15542 = IKatan2WithCheck(IkReal(x15540),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15542.valid){
continue;
}
IkReal x15541=((-1.0)*(x15542.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15540);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15541;
IkReal gconst66=x15541;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15543=((-1.0)*r10);
CheckValue<IkReal> x15545 = IKatan2WithCheck(IkReal(x15543),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15545.valid){
continue;
}
IkReal x15544=((-1.0)*(x15545.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15543);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15544;
IkReal gconst66=x15544;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r21*sj3))+((r11*r20*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15546=((1.0)*gconst67);
IkReal x15547=(cj1*cj2);
IkReal x15548=((1.0)*sj1*sj2);
CheckValue<IkReal> x15549=IKPowWithIntegerCheck(cj3,-1);
if(!x15549.valid){
continue;
}
CheckValue<IkReal> x15550=IKPowWithIntegerCheck(r02,-1);
if(!x15550.valid){
continue;
}
CheckValue<IkReal> x15551=IKPowWithIntegerCheck((((gconst68*r20*sj3))+(((-1.0)*r21*sj3*x15546))),-1);
if(!x15551.valid){
continue;
}
if( IKabs(((x15549.value)*(x15550.value)*(((((-1.0)*cj0*x15548))+((cj0*x15547)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15551.value)*(((((-1.0)*x15548))+(((-1.0)*cj3*r20*x15546))+x15547+(((-1.0)*cj3*gconst68*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15549.value)*(x15550.value)*(((((-1.0)*cj0*x15548))+((cj0*x15547))))))+IKsqr(((x15551.value)*(((((-1.0)*x15548))+(((-1.0)*cj3*r20*x15546))+x15547+(((-1.0)*cj3*gconst68*r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15549.value)*(x15550.value)*(((((-1.0)*cj0*x15548))+((cj0*x15547))))), ((x15551.value)*(((((-1.0)*x15548))+(((-1.0)*cj3*r20*x15546))+x15547+(((-1.0)*cj3*gconst68*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15552=IKsin(j4);
IkReal x15553=IKcos(j4);
IkReal x15554=(sj1*sj2);
IkReal x15555=(gconst68*sj3);
IkReal x15556=(gconst67*r11);
IkReal x15557=(gconst67*sj3);
IkReal x15558=((1.0)*gconst68);
IkReal x15559=(cj2*sj1);
IkReal x15560=((1.0)*cj0);
IkReal x15561=((1.0)*sj0);
IkReal x15562=(cj3*gconst67);
IkReal x15563=(cj3*gconst68);
IkReal x15564=(cj1*sj2);
IkReal x15565=(gconst67*r21);
IkReal x15566=((1.0)*cj1*cj2);
IkReal x15567=(cj3*x15553);
IkReal x15568=((1.0)*x15553);
IkReal x15569=(r02*x15552);
evalcond[0]=((((-1.0)*r02*x15568))+(((-1.0)*x15561)));
evalcond[1]=(((x15552*x15565))+(((-1.0)*r20*x15552*x15558)));
evalcond[2]=(cj0+((x15552*x15556))+(((-1.0)*r10*x15552*x15558)));
evalcond[3]=((((-1.0)*cj1*cj2*x15560))+((cj0*x15554))+((cj3*x15569)));
evalcond[4]=((((-1.0)*x15559*x15560))+(((-1.0)*sj3*x15569))+(((-1.0)*x15560*x15564)));
evalcond[5]=(((r21*x15555))+((r21*x15553*x15562))+((r20*x15557))+x15564+x15559+(((-1.0)*r20*x15558*x15567)));
evalcond[6]=(((r20*x15553*x15555))+((r21*x15563))+((r20*x15562))+(((-1.0)*r21*x15557*x15568))+x15554+(((-1.0)*x15566)));
evalcond[7]=(((r11*x15555))+((sj0*x15554))+((x15556*x15567))+(((-1.0)*cj1*cj2*x15561))+((r10*x15557))+(((-1.0)*r10*x15558*x15567)));
evalcond[8]=((((-1.0)*sj3*x15556*x15568))+((r10*x15562))+((r10*x15553*x15555))+((r11*x15563))+(((-1.0)*x15559*x15561))+(((-1.0)*x15561*x15564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15572=IKPowWithIntegerCheck(r02,-1);
if(!x15572.valid){
continue;
}
IkReal x15570=x15572.value;
IkReal x15571=((1.0)*cj0);
CheckValue<IkReal> x15573=IKPowWithIntegerCheck(sj3,-1);
if(!x15573.valid){
continue;
}
if( IKabs((x15570*(x15573.value)*(((((-1.0)*cj1*sj2*x15571))+(((-1.0)*cj2*sj1*x15571)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15570)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15570*(x15573.value)*(((((-1.0)*cj1*sj2*x15571))+(((-1.0)*cj2*sj1*x15571))))))+IKsqr(((-1.0)*sj0*x15570))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15570*(x15573.value)*(((((-1.0)*cj1*sj2*x15571))+(((-1.0)*cj2*sj1*x15571))))), ((-1.0)*sj0*x15570));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15574=IKsin(j4);
IkReal x15575=IKcos(j4);
IkReal x15576=(sj1*sj2);
IkReal x15577=(gconst68*sj3);
IkReal x15578=(gconst67*r11);
IkReal x15579=(gconst67*sj3);
IkReal x15580=((1.0)*gconst68);
IkReal x15581=(cj2*sj1);
IkReal x15582=((1.0)*cj0);
IkReal x15583=((1.0)*sj0);
IkReal x15584=(cj3*gconst67);
IkReal x15585=(cj3*gconst68);
IkReal x15586=(cj1*sj2);
IkReal x15587=(gconst67*r21);
IkReal x15588=((1.0)*cj1*cj2);
IkReal x15589=(cj3*x15575);
IkReal x15590=((1.0)*x15575);
IkReal x15591=(r02*x15574);
evalcond[0]=((((-1.0)*x15583))+(((-1.0)*r02*x15590)));
evalcond[1]=(((x15574*x15587))+(((-1.0)*r20*x15574*x15580)));
evalcond[2]=(cj0+(((-1.0)*r10*x15574*x15580))+((x15574*x15578)));
evalcond[3]=(((cj0*x15576))+(((-1.0)*cj1*cj2*x15582))+((cj3*x15591)));
evalcond[4]=((((-1.0)*x15581*x15582))+(((-1.0)*x15582*x15586))+(((-1.0)*sj3*x15591)));
evalcond[5]=((((-1.0)*r20*x15580*x15589))+((r21*x15577))+((r21*x15575*x15584))+((r20*x15579))+x15581+x15586);
evalcond[6]=((((-1.0)*r21*x15579*x15590))+(((-1.0)*x15588))+((r20*x15575*x15577))+x15576+((r20*x15584))+((r21*x15585)));
evalcond[7]=(((sj0*x15576))+((r10*x15579))+(((-1.0)*cj1*cj2*x15583))+((x15578*x15589))+((r11*x15577))+(((-1.0)*r10*x15580*x15589)));
evalcond[8]=(((r11*x15585))+((r10*x15584))+((r10*x15575*x15577))+(((-1.0)*x15581*x15583))+(((-1.0)*sj3*x15578*x15590))+(((-1.0)*x15583*x15586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15593=IKPowWithIntegerCheck(r02,-1);
if(!x15593.valid){
continue;
}
IkReal x15592=x15593.value;
CheckValue<IkReal> x15594=IKPowWithIntegerCheck(cj3,-1);
if(!x15594.valid){
continue;
}
if( IKabs((x15592*(x15594.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15592)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15592*(x15594.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15592))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15592*(x15594.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15592));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15595=IKsin(j4);
IkReal x15596=IKcos(j4);
IkReal x15597=(sj1*sj2);
IkReal x15598=(gconst68*sj3);
IkReal x15599=(gconst67*r11);
IkReal x15600=(gconst67*sj3);
IkReal x15601=((1.0)*gconst68);
IkReal x15602=(cj2*sj1);
IkReal x15603=((1.0)*cj0);
IkReal x15604=((1.0)*sj0);
IkReal x15605=(cj3*gconst67);
IkReal x15606=(cj3*gconst68);
IkReal x15607=(cj1*sj2);
IkReal x15608=(gconst67*r21);
IkReal x15609=((1.0)*cj1*cj2);
IkReal x15610=(cj3*x15596);
IkReal x15611=((1.0)*x15596);
IkReal x15612=(r02*x15595);
evalcond[0]=((((-1.0)*x15604))+(((-1.0)*r02*x15611)));
evalcond[1]=((((-1.0)*r20*x15595*x15601))+((x15595*x15608)));
evalcond[2]=((((-1.0)*r10*x15595*x15601))+cj0+((x15595*x15599)));
evalcond[3]=(((cj0*x15597))+((cj3*x15612))+(((-1.0)*cj1*cj2*x15603)));
evalcond[4]=((((-1.0)*x15603*x15607))+(((-1.0)*x15602*x15603))+(((-1.0)*sj3*x15612)));
evalcond[5]=(((r21*x15598))+((r21*x15596*x15605))+(((-1.0)*r20*x15601*x15610))+x15602+x15607+((r20*x15600)));
evalcond[6]=((((-1.0)*x15609))+((r20*x15596*x15598))+((r20*x15605))+x15597+(((-1.0)*r21*x15600*x15611))+((r21*x15606)));
evalcond[7]=(((sj0*x15597))+(((-1.0)*r10*x15601*x15610))+((r11*x15598))+(((-1.0)*cj1*cj2*x15604))+((r10*x15600))+((x15599*x15610)));
evalcond[8]=((((-1.0)*sj3*x15599*x15611))+(((-1.0)*x15602*x15604))+((r10*x15596*x15598))+((r10*x15605))+(((-1.0)*x15604*x15607))+((r11*x15606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15613=((-1.0)*r10);
CheckValue<IkReal> x15614 = IKatan2WithCheck(IkReal(x15613),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15614.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x15614.value))));
IkReal gconst70=x15613;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x15615 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15615.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15615.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15616=((-1.0)*r10);
IkReal x15617=((-1.0)*r11);
CheckValue<IkReal> x15619 = IKatan2WithCheck(IkReal(x15616),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15619.valid){
continue;
}
IkReal x15618=((1.0)*(x15619.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15616);
rxp1_1=(px*r21);
rxp1_2=(px*x15617);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15618)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15618)));
IkReal gconst70=x15616;
IkReal gconst71=x15617;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15620=((-1.0)*r10);
IkReal x15621=((-1.0)*r11);
CheckValue<IkReal> x15623 = IKatan2WithCheck(IkReal(x15620),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15623.valid){
continue;
}
IkReal x15622=((1.0)*(x15623.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15620);
rxp1_1=(px*r21);
rxp1_2=(px*x15621);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15622)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15622)));
IkReal gconst70=x15620;
IkReal gconst71=x15621;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15624=((-1.0)*r10);
IkReal x15625=((-1.0)*r11);
CheckValue<IkReal> x15627 = IKatan2WithCheck(IkReal(x15624),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15627.valid){
continue;
}
IkReal x15626=((1.0)*(x15627.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15624);
rxp1_1=(px*r21);
rxp1_2=(px*x15625);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15626)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15626)));
IkReal gconst70=x15624;
IkReal gconst71=x15625;
IkReal x15628=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r11*r20*x15628))+((r10*r21*x15628)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15629=((1.0)*r21);
IkReal x15630=(cj1*cj2);
IkReal x15631=((1.0)*sj1*sj2);
CheckValue<IkReal> x15632=IKPowWithIntegerCheck(cj3,-1);
if(!x15632.valid){
continue;
}
CheckValue<IkReal> x15633=IKPowWithIntegerCheck(r02,-1);
if(!x15633.valid){
continue;
}
CheckValue<IkReal> x15634=IKPowWithIntegerCheck(((((-1.0)*gconst70*sj3*x15629))+((gconst71*r20*sj3))),-1);
if(!x15634.valid){
continue;
}
if( IKabs(((x15632.value)*(x15633.value)*((((cj0*x15630))+(((-1.0)*cj0*x15631)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15634.value)*(((((-1.0)*cj3*gconst71*x15629))+x15630+(((-1.0)*x15631))+(((-1.0)*cj3*gconst70*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15632.value)*(x15633.value)*((((cj0*x15630))+(((-1.0)*cj0*x15631))))))+IKsqr(((x15634.value)*(((((-1.0)*cj3*gconst71*x15629))+x15630+(((-1.0)*x15631))+(((-1.0)*cj3*gconst70*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15632.value)*(x15633.value)*((((cj0*x15630))+(((-1.0)*cj0*x15631))))), ((x15634.value)*(((((-1.0)*cj3*gconst71*x15629))+x15630+(((-1.0)*x15631))+(((-1.0)*cj3*gconst70*r20))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15635=IKsin(j4);
IkReal x15636=IKcos(j4);
IkReal x15637=(cj3*gconst70);
IkReal x15638=(sj1*sj2);
IkReal x15639=((1.0)*gconst71);
IkReal x15640=(gconst71*sj3);
IkReal x15641=(cj2*sj1);
IkReal x15642=((1.0)*sj0);
IkReal x15643=(gconst70*r11);
IkReal x15644=(gconst70*sj3);
IkReal x15645=((1.0)*cj0);
IkReal x15646=(cj3*gconst71);
IkReal x15647=(cj1*sj2);
IkReal x15648=((1.0)*cj1*cj2);
IkReal x15649=(r21*x15636);
IkReal x15650=(r10*x15636);
IkReal x15651=((1.0)*x15636);
IkReal x15652=(r02*x15635);
IkReal x15653=(r20*x15636);
evalcond[0]=((((-1.0)*x15642))+(((-1.0)*r02*x15651)));
evalcond[1]=((((-1.0)*r20*x15635*x15639))+((gconst70*r21*x15635)));
evalcond[2]=(cj0+(((-1.0)*r10*x15635*x15639))+((x15635*x15643)));
evalcond[3]=(((cj3*x15652))+((cj0*x15638))+(((-1.0)*cj1*cj2*x15645)));
evalcond[4]=((((-1.0)*x15641*x15645))+(((-1.0)*x15645*x15647))+(((-1.0)*sj3*x15652)));
evalcond[5]=((((-1.0)*cj3*x15639*x15653))+x15647+x15641+((r21*x15640))+((x15637*x15649))+((r20*x15644)));
evalcond[6]=(((r20*x15637))+((x15640*x15653))+(((-1.0)*x15644*x15649))+x15638+((r21*x15646))+(((-1.0)*x15648)));
evalcond[7]=((((-1.0)*cj3*x15639*x15650))+((r11*x15636*x15637))+((r11*x15640))+((sj0*x15638))+(((-1.0)*cj1*cj2*x15642))+((r10*x15644)));
evalcond[8]=((((-1.0)*x15641*x15642))+(((-1.0)*sj3*x15643*x15651))+((x15640*x15650))+((r11*x15646))+((r10*x15637))+(((-1.0)*x15642*x15647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15656=IKPowWithIntegerCheck(r02,-1);
if(!x15656.valid){
continue;
}
IkReal x15654=x15656.value;
IkReal x15655=((1.0)*cj0);
CheckValue<IkReal> x15657=IKPowWithIntegerCheck(sj3,-1);
if(!x15657.valid){
continue;
}
if( IKabs((x15654*(x15657.value)*(((((-1.0)*cj2*sj1*x15655))+(((-1.0)*cj1*sj2*x15655)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15654)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15654*(x15657.value)*(((((-1.0)*cj2*sj1*x15655))+(((-1.0)*cj1*sj2*x15655))))))+IKsqr(((-1.0)*sj0*x15654))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15654*(x15657.value)*(((((-1.0)*cj2*sj1*x15655))+(((-1.0)*cj1*sj2*x15655))))), ((-1.0)*sj0*x15654));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15658=IKsin(j4);
IkReal x15659=IKcos(j4);
IkReal x15660=(cj3*gconst70);
IkReal x15661=(sj1*sj2);
IkReal x15662=((1.0)*gconst71);
IkReal x15663=(gconst71*sj3);
IkReal x15664=(cj2*sj1);
IkReal x15665=((1.0)*sj0);
IkReal x15666=(gconst70*r11);
IkReal x15667=(gconst70*sj3);
IkReal x15668=((1.0)*cj0);
IkReal x15669=(cj3*gconst71);
IkReal x15670=(cj1*sj2);
IkReal x15671=((1.0)*cj1*cj2);
IkReal x15672=(r21*x15659);
IkReal x15673=(r10*x15659);
IkReal x15674=((1.0)*x15659);
IkReal x15675=(r02*x15658);
IkReal x15676=(r20*x15659);
evalcond[0]=((((-1.0)*x15665))+(((-1.0)*r02*x15674)));
evalcond[1]=(((gconst70*r21*x15658))+(((-1.0)*r20*x15658*x15662)));
evalcond[2]=(cj0+((x15658*x15666))+(((-1.0)*r10*x15658*x15662)));
evalcond[3]=(((cj3*x15675))+(((-1.0)*cj1*cj2*x15668))+((cj0*x15661)));
evalcond[4]=((((-1.0)*x15664*x15668))+(((-1.0)*sj3*x15675))+(((-1.0)*x15668*x15670)));
evalcond[5]=(((x15660*x15672))+((r20*x15667))+x15664+x15670+((r21*x15663))+(((-1.0)*cj3*x15662*x15676)));
evalcond[6]=((((-1.0)*x15667*x15672))+(((-1.0)*x15671))+((x15663*x15676))+((r20*x15660))+x15661+((r21*x15669)));
evalcond[7]=(((r11*x15659*x15660))+((r10*x15667))+((r11*x15663))+((sj0*x15661))+(((-1.0)*cj1*cj2*x15665))+(((-1.0)*cj3*x15662*x15673)));
evalcond[8]=((((-1.0)*sj3*x15666*x15674))+(((-1.0)*x15665*x15670))+((r10*x15660))+((x15663*x15673))+(((-1.0)*x15664*x15665))+((r11*x15669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15678=IKPowWithIntegerCheck(r02,-1);
if(!x15678.valid){
continue;
}
IkReal x15677=x15678.value;
CheckValue<IkReal> x15679=IKPowWithIntegerCheck(cj3,-1);
if(!x15679.valid){
continue;
}
if( IKabs((x15677*(x15679.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15677)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15677*(x15679.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15677))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15677*(x15679.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15677));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15680=IKsin(j4);
IkReal x15681=IKcos(j4);
IkReal x15682=(cj3*gconst70);
IkReal x15683=(sj1*sj2);
IkReal x15684=((1.0)*gconst71);
IkReal x15685=(gconst71*sj3);
IkReal x15686=(cj2*sj1);
IkReal x15687=((1.0)*sj0);
IkReal x15688=(gconst70*r11);
IkReal x15689=(gconst70*sj3);
IkReal x15690=((1.0)*cj0);
IkReal x15691=(cj3*gconst71);
IkReal x15692=(cj1*sj2);
IkReal x15693=((1.0)*cj1*cj2);
IkReal x15694=(r21*x15681);
IkReal x15695=(r10*x15681);
IkReal x15696=((1.0)*x15681);
IkReal x15697=(r02*x15680);
IkReal x15698=(r20*x15681);
evalcond[0]=((((-1.0)*r02*x15696))+(((-1.0)*x15687)));
evalcond[1]=(((gconst70*r21*x15680))+(((-1.0)*r20*x15680*x15684)));
evalcond[2]=(cj0+((x15680*x15688))+(((-1.0)*r10*x15680*x15684)));
evalcond[3]=(((cj3*x15697))+((cj0*x15683))+(((-1.0)*cj1*cj2*x15690)));
evalcond[4]=((((-1.0)*x15686*x15690))+(((-1.0)*x15690*x15692))+(((-1.0)*sj3*x15697)));
evalcond[5]=(((r20*x15689))+(((-1.0)*cj3*x15684*x15698))+((x15682*x15694))+x15686+x15692+((r21*x15685)));
evalcond[6]=(((r20*x15682))+(((-1.0)*x15693))+(((-1.0)*x15689*x15694))+((x15685*x15698))+((r21*x15691))+x15683);
evalcond[7]=(((r10*x15689))+(((-1.0)*cj3*x15684*x15695))+((r11*x15681*x15682))+((r11*x15685))+((sj0*x15683))+(((-1.0)*cj1*cj2*x15687)));
evalcond[8]=(((r10*x15682))+((r11*x15691))+((x15685*x15695))+(((-1.0)*x15687*x15692))+(((-1.0)*x15686*x15687))+(((-1.0)*sj3*x15688*x15696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15700=IKPowWithIntegerCheck(r02,-1);
if(!x15700.valid){
continue;
}
IkReal x15699=x15700.value;
CheckValue<IkReal> x15701=IKPowWithIntegerCheck(cj3,-1);
if(!x15701.valid){
continue;
}
if( IKabs((x15699*(x15701.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15699)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15699*(x15701.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15699))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15699*(x15701.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15699));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15702=IKsin(j4);
IkReal x15703=IKcos(j4);
IkReal x15704=(cj5*r10);
IkReal x15705=(sj1*sj2);
IkReal x15706=(cj5*sj3);
IkReal x15707=(r11*sj5);
IkReal x15708=(cj3*cj5);
IkReal x15709=(cj3*sj5);
IkReal x15710=(r21*sj5);
IkReal x15711=(cj2*sj1);
IkReal x15712=((1.0)*sj0);
IkReal x15713=((1.0)*cj0);
IkReal x15714=(sj3*sj5);
IkReal x15715=(cj1*sj2);
IkReal x15716=((1.0)*cj1*cj2);
IkReal x15717=((1.0)*x15702);
IkReal x15718=(r20*x15703);
IkReal x15719=(cj3*x15703);
IkReal x15720=(sj3*x15703);
evalcond[0]=((((-1.0)*x15712))+(((-1.0)*r02*x15703)));
evalcond[1]=(((x15702*x15710))+(((-1.0)*cj5*r20*x15717)));
evalcond[2]=(((x15702*x15707))+cj0+(((-1.0)*x15704*x15717)));
evalcond[3]=(((cj0*x15705))+(((-1.0)*cj1*cj2*x15713))+((cj3*r02*x15702)));
evalcond[4]=((((-1.0)*x15713*x15715))+(((-1.0)*r02*sj3*x15717))+(((-1.0)*x15711*x15713)));
evalcond[5]=(((r20*x15714))+x15715+x15711+(((-1.0)*x15708*x15718))+((r21*x15706))+((r21*x15703*x15709)));
evalcond[6]=((((-1.0)*x15716))+((r20*x15709))+(((-1.0)*x15710*x15720))+x15705+((r21*x15708))+((x15706*x15718)));
evalcond[7]=(((r11*x15706))+((sj0*x15705))+((x15707*x15719))+(((-1.0)*cj1*cj2*x15712))+((r10*x15714))+(((-1.0)*x15704*x15719)));
evalcond[8]=(((r11*x15708))+(((-1.0)*x15712*x15715))+((x15704*x15720))+((r10*x15709))+(((-1.0)*x15707*x15720))+(((-1.0)*x15711*x15712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15721=((1.0)*sj3);
IkReal x15722=((1.0)*cj5);
CheckValue<IkReal> x15723=IKPowWithIntegerCheck(((((-1.0)*r10*x15722))+((r11*sj5))),-1);
if(!x15723.valid){
continue;
}
CheckValue<IkReal> x15724=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15722))),-1);
if(!x15724.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15723.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15724.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x15721))+(((-1.0)*r20*sj5*x15721)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15723.value)))+IKsqr(((x15724.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x15721))+(((-1.0)*r20*sj5*x15721))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15723.value)), ((x15724.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x15721))+(((-1.0)*r20*sj5*x15721))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15725=IKsin(j4);
IkReal x15726=IKcos(j4);
IkReal x15727=(cj5*r10);
IkReal x15728=(sj1*sj2);
IkReal x15729=(cj5*sj3);
IkReal x15730=(r11*sj5);
IkReal x15731=(cj3*cj5);
IkReal x15732=(cj3*sj5);
IkReal x15733=(r21*sj5);
IkReal x15734=(cj2*sj1);
IkReal x15735=((1.0)*sj0);
IkReal x15736=((1.0)*cj0);
IkReal x15737=(sj3*sj5);
IkReal x15738=(cj1*sj2);
IkReal x15739=((1.0)*cj1*cj2);
IkReal x15740=((1.0)*x15725);
IkReal x15741=(r20*x15726);
IkReal x15742=(cj3*x15726);
IkReal x15743=(sj3*x15726);
evalcond[0]=((((-1.0)*r02*x15726))+(((-1.0)*x15735)));
evalcond[1]=(((x15725*x15733))+(((-1.0)*cj5*r20*x15740)));
evalcond[2]=((((-1.0)*x15727*x15740))+cj0+((x15725*x15730)));
evalcond[3]=(((cj3*r02*x15725))+((cj0*x15728))+(((-1.0)*cj1*cj2*x15736)));
evalcond[4]=((((-1.0)*r02*sj3*x15740))+(((-1.0)*x15736*x15738))+(((-1.0)*x15734*x15736)));
evalcond[5]=(((r20*x15737))+((r21*x15729))+x15734+x15738+(((-1.0)*x15731*x15741))+((r21*x15726*x15732)));
evalcond[6]=((((-1.0)*x15739))+((r20*x15732))+((r21*x15731))+x15728+((x15729*x15741))+(((-1.0)*x15733*x15743)));
evalcond[7]=(((r11*x15729))+(((-1.0)*cj1*cj2*x15735))+((sj0*x15728))+((x15730*x15742))+((r10*x15737))+(((-1.0)*x15727*x15742)));
evalcond[8]=(((r11*x15731))+((x15727*x15743))+(((-1.0)*x15735*x15738))+((r10*x15732))+(((-1.0)*x15730*x15743))+(((-1.0)*x15734*x15735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15744=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15744.valid){
continue;
}
CheckValue<IkReal> x15745=IKPowWithIntegerCheck(r02,-1);
if(!x15745.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15744.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x15745.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15744.value)))+IKsqr(((-1.0)*sj0*(x15745.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15744.value)), ((-1.0)*sj0*(x15745.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15746=IKsin(j4);
IkReal x15747=IKcos(j4);
IkReal x15748=(cj5*r10);
IkReal x15749=(sj1*sj2);
IkReal x15750=(cj5*sj3);
IkReal x15751=(r11*sj5);
IkReal x15752=(cj3*cj5);
IkReal x15753=(cj3*sj5);
IkReal x15754=(r21*sj5);
IkReal x15755=(cj2*sj1);
IkReal x15756=((1.0)*sj0);
IkReal x15757=((1.0)*cj0);
IkReal x15758=(sj3*sj5);
IkReal x15759=(cj1*sj2);
IkReal x15760=((1.0)*cj1*cj2);
IkReal x15761=((1.0)*x15746);
IkReal x15762=(r20*x15747);
IkReal x15763=(cj3*x15747);
IkReal x15764=(sj3*x15747);
evalcond[0]=((((-1.0)*r02*x15747))+(((-1.0)*x15756)));
evalcond[1]=(((x15746*x15754))+(((-1.0)*cj5*r20*x15761)));
evalcond[2]=(cj0+(((-1.0)*x15748*x15761))+((x15746*x15751)));
evalcond[3]=(((cj3*r02*x15746))+((cj0*x15749))+(((-1.0)*cj1*cj2*x15757)));
evalcond[4]=((((-1.0)*x15757*x15759))+(((-1.0)*r02*sj3*x15761))+(((-1.0)*x15755*x15757)));
evalcond[5]=(((r21*x15750))+((r20*x15758))+x15759+x15755+(((-1.0)*x15752*x15762))+((r21*x15747*x15753)));
evalcond[6]=(((r21*x15752))+(((-1.0)*x15760))+((r20*x15753))+x15749+(((-1.0)*x15754*x15764))+((x15750*x15762)));
evalcond[7]=(((x15751*x15763))+((r10*x15758))+((r11*x15750))+((sj0*x15749))+(((-1.0)*cj1*cj2*x15756))+(((-1.0)*x15748*x15763)));
evalcond[8]=((((-1.0)*x15756*x15759))+(((-1.0)*x15751*x15764))+((r10*x15753))+(((-1.0)*x15755*x15756))+((r11*x15752))+((x15748*x15764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15765=((1.0)*sj0);
IkReal x15766=((1.0)*cj0);
CheckValue<IkReal> x15767 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x15766))+(((-1.0)*r12*x15765)))),IkReal(((((-1.0)*r11*sj5*x15765))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x15766)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15767.valid){
continue;
}
CheckValue<IkReal> x15768=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x15768.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15767.value)+(((1.5707963267949)*(x15768.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15769=IKsin(j4);
IkReal x15770=IKcos(j4);
IkReal x15771=(r11*sj5);
IkReal x15772=(cj5*r10);
IkReal x15773=(sj1*sj2);
IkReal x15774=(cj5*sj3);
IkReal x15775=((1.0)*sj0);
IkReal x15776=(cj3*cj5);
IkReal x15777=(cj3*sj5);
IkReal x15778=(r21*sj5);
IkReal x15779=(cj2*sj1);
IkReal x15780=(sj3*sj5);
IkReal x15781=(r01*sj5);
IkReal x15782=((1.0)*cj0);
IkReal x15783=(cj1*sj2);
IkReal x15784=((1.0)*x15770);
IkReal x15785=((1.0)*x15769);
IkReal x15786=(cj3*x15770);
IkReal x15787=((1.0)*cj1*cj2);
IkReal x15788=(cj3*x15769);
evalcond[0]=((((-1.0)*r22*x15784))+(((-1.0)*cj5*r20*x15785))+((x15769*x15778)));
evalcond[1]=(cj0+(((-1.0)*x15772*x15785))+(((-1.0)*r12*x15784))+((x15769*x15771)));
evalcond[2]=(((x15769*x15781))+(((-1.0)*x15775))+(((-1.0)*r02*x15784))+(((-1.0)*cj5*r00*x15785)));
evalcond[3]=(((r21*x15774))+((r22*x15788))+x15783+x15779+(((-1.0)*r20*x15776*x15784))+((r21*x15770*x15777))+((r20*x15780)));
evalcond[4]=(((r21*x15776))+((r20*x15770*x15774))+((r20*x15777))+(((-1.0)*r22*sj3*x15785))+x15773+(((-1.0)*sj3*x15778*x15784))+(((-1.0)*x15787)));
evalcond[5]=((((-1.0)*r00*x15776*x15784))+(((-1.0)*cj1*cj2*x15782))+((r00*x15780))+((r01*x15774))+((r02*x15788))+((cj0*x15773))+((r01*x15770*x15777)));
evalcond[6]=(((x15771*x15786))+((r10*x15780))+(((-1.0)*cj3*x15772*x15784))+((sj0*x15773))+((r12*x15788))+(((-1.0)*cj1*cj2*x15775))+((r11*x15774)));
evalcond[7]=((((-1.0)*x15782*x15783))+((r00*x15777))+((r01*x15776))+(((-1.0)*x15779*x15782))+(((-1.0)*r01*x15780*x15784))+(((-1.0)*r02*sj3*x15785))+((r00*x15770*x15774)));
evalcond[8]=(((r10*x15777))+(((-1.0)*sj3*x15771*x15784))+(((-1.0)*x15775*x15783))+(((-1.0)*x15775*x15779))+((r11*x15776))+((sj3*x15770*x15772))+(((-1.0)*r12*sj3*x15785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15789=((1.0)*cj5);
CheckValue<IkReal> x15790=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15789)))),-1);
if(!x15790.valid){
continue;
}
CheckValue<IkReal> x15791 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x15789))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15791.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15790.value)))+(x15791.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15792=IKsin(j4);
IkReal x15793=IKcos(j4);
IkReal x15794=(r11*sj5);
IkReal x15795=(cj5*r10);
IkReal x15796=(sj1*sj2);
IkReal x15797=(cj5*sj3);
IkReal x15798=((1.0)*sj0);
IkReal x15799=(cj3*cj5);
IkReal x15800=(cj3*sj5);
IkReal x15801=(r21*sj5);
IkReal x15802=(cj2*sj1);
IkReal x15803=(sj3*sj5);
IkReal x15804=(r01*sj5);
IkReal x15805=((1.0)*cj0);
IkReal x15806=(cj1*sj2);
IkReal x15807=((1.0)*x15793);
IkReal x15808=((1.0)*x15792);
IkReal x15809=(cj3*x15793);
IkReal x15810=((1.0)*cj1*cj2);
IkReal x15811=(cj3*x15792);
evalcond[0]=((((-1.0)*cj5*r20*x15808))+((x15792*x15801))+(((-1.0)*r22*x15807)));
evalcond[1]=((((-1.0)*x15795*x15808))+(((-1.0)*r12*x15807))+cj0+((x15792*x15794)));
evalcond[2]=((((-1.0)*cj5*r00*x15808))+(((-1.0)*x15798))+(((-1.0)*r02*x15807))+((x15792*x15804)));
evalcond[3]=((((-1.0)*r20*x15799*x15807))+((r21*x15793*x15800))+((r22*x15811))+((r21*x15797))+x15806+x15802+((r20*x15803)));
evalcond[4]=((((-1.0)*x15810))+((r21*x15799))+((r20*x15793*x15797))+x15796+(((-1.0)*r22*sj3*x15808))+(((-1.0)*sj3*x15801*x15807))+((r20*x15800)));
evalcond[5]=(((r01*x15793*x15800))+((cj0*x15796))+((r02*x15811))+(((-1.0)*r00*x15799*x15807))+((r01*x15797))+((r00*x15803))+(((-1.0)*cj1*cj2*x15805)));
evalcond[6]=((((-1.0)*cj3*x15795*x15807))+((r10*x15803))+((r11*x15797))+((x15794*x15809))+((r12*x15811))+(((-1.0)*cj1*cj2*x15798))+((sj0*x15796)));
evalcond[7]=((((-1.0)*r01*x15803*x15807))+(((-1.0)*x15805*x15806))+(((-1.0)*r02*sj3*x15808))+((r01*x15799))+((r00*x15793*x15797))+(((-1.0)*x15802*x15805))+((r00*x15800)));
evalcond[8]=(((r10*x15800))+((r11*x15799))+(((-1.0)*x15798*x15802))+(((-1.0)*x15798*x15806))+(((-1.0)*sj3*x15794*x15807))+((sj3*x15793*x15795))+(((-1.0)*r12*sj3*x15808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15812=((1.0)*cj5);
CheckValue<IkReal> x15813 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x15812)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15813.valid){
continue;
}
CheckValue<IkReal> x15814=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x15812)))),-1);
if(!x15814.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15813.value)+(((1.5707963267949)*(x15814.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15815=IKsin(j4);
IkReal x15816=IKcos(j4);
IkReal x15817=(r11*sj5);
IkReal x15818=(cj5*r10);
IkReal x15819=(sj1*sj2);
IkReal x15820=(cj5*sj3);
IkReal x15821=((1.0)*sj0);
IkReal x15822=(cj3*cj5);
IkReal x15823=(cj3*sj5);
IkReal x15824=(r21*sj5);
IkReal x15825=(cj2*sj1);
IkReal x15826=(sj3*sj5);
IkReal x15827=(r01*sj5);
IkReal x15828=((1.0)*cj0);
IkReal x15829=(cj1*sj2);
IkReal x15830=((1.0)*x15816);
IkReal x15831=((1.0)*x15815);
IkReal x15832=(cj3*x15816);
IkReal x15833=((1.0)*cj1*cj2);
IkReal x15834=(cj3*x15815);
evalcond[0]=(((x15815*x15824))+(((-1.0)*r22*x15830))+(((-1.0)*cj5*r20*x15831)));
evalcond[1]=(cj0+(((-1.0)*x15818*x15831))+(((-1.0)*r12*x15830))+((x15815*x15817)));
evalcond[2]=(((x15815*x15827))+(((-1.0)*r02*x15830))+(((-1.0)*x15821))+(((-1.0)*cj5*r00*x15831)));
evalcond[3]=(((r20*x15826))+((r22*x15834))+((r21*x15816*x15823))+(((-1.0)*r20*x15822*x15830))+((r21*x15820))+x15825+x15829);
evalcond[4]=(((r20*x15823))+(((-1.0)*sj3*x15824*x15830))+(((-1.0)*r22*sj3*x15831))+((r21*x15822))+(((-1.0)*x15833))+((r20*x15816*x15820))+x15819);
evalcond[5]=(((r02*x15834))+(((-1.0)*r00*x15822*x15830))+((r01*x15820))+((r00*x15826))+((cj0*x15819))+(((-1.0)*cj1*cj2*x15828))+((r01*x15816*x15823)));
evalcond[6]=((((-1.0)*cj3*x15818*x15830))+((x15817*x15832))+((sj0*x15819))+((r12*x15834))+(((-1.0)*cj1*cj2*x15821))+((r10*x15826))+((r11*x15820)));
evalcond[7]=((((-1.0)*r02*sj3*x15831))+((r01*x15822))+((r00*x15816*x15820))+(((-1.0)*x15825*x15828))+((r00*x15823))+(((-1.0)*r01*x15826*x15830))+(((-1.0)*x15828*x15829)));
evalcond[8]=((((-1.0)*sj3*x15817*x15830))+(((-1.0)*x15821*x15825))+(((-1.0)*x15821*x15829))+((r10*x15823))+((sj3*x15816*x15818))+(((-1.0)*r12*sj3*x15831))+((r11*x15822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15835=cj5*cj5;
IkReal x15836=r21*r21;
IkReal x15837=r20*r20;
IkReal x15838=(r20*r21);
IkReal x15839=((1.0)*cj3);
IkReal x15840=((1.0)*cj5);
IkReal x15841=(cj1*sj2);
IkReal x15842=(cj5*sj5);
IkReal x15843=(sj3*sj5);
IkReal x15844=(cj2*sj1);
IkReal x15845=(r21*sj5);
CheckValue<IkReal> x15846 = IKatan2WithCheck(IkReal((((cj5*r21*r22*sj3))+((r22*x15844))+((r22*x15841))+((r20*r22*x15843)))),IkReal((((x15844*x15845))+(((-1.0)*r20*x15840*x15841))+(((-1.0)*r20*x15840*x15844))+((x15841*x15845))+((sj3*x15836*x15842))+(((-2.0)*sj3*x15835*x15838))+(((-1.0)*x15837*x15840*x15843))+((sj3*x15838)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15846.valid){
continue;
}
CheckValue<IkReal> x15847=IKPowWithIntegerCheck(IKsign((((cj3*x15835*x15836))+(((2.0)*cj3*x15838*x15842))+(((-1.0)*x15836*x15839))+(((-1.0)*x15839*(r22*r22)))+(((-1.0)*x15835*x15837*x15839)))),-1);
if(!x15847.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15846.value)+(((1.5707963267949)*(x15847.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15848=IKsin(j4);
IkReal x15849=IKcos(j4);
IkReal x15850=(cj3*r21);
IkReal x15851=(r21*sj5);
IkReal x15852=(r20*sj5);
IkReal x15853=(cj5*r20);
IkReal x15854=((1.0)*x15849);
IkReal x15855=((1.0)*x15848);
evalcond[0]=((((-1.0)*x15853*x15855))+(((-1.0)*r22*x15854))+((x15848*x15851)));
evalcond[1]=(((cj2*sj1))+((cj5*r21*sj3))+(((-1.0)*cj3*x15853*x15854))+((cj1*sj2))+((sj3*x15852))+((sj5*x15849*x15850))+((cj3*r22*x15848)));
evalcond[2]=(((cj3*x15852))+(((-1.0)*sj3*x15851*x15854))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((cj5*x15850))+(((-1.0)*r22*sj3*x15855))+((sj3*x15849*x15853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15856=(cj5*sj4);
IkReal x15857=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x15856))+((r01*x15857)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15856))+(((-1.0)*r11*x15857))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x15856))+((r01*x15857))))+IKsqr((((r10*x15856))+(((-1.0)*r11*x15857))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x15856))+((r01*x15857))), (((r10*x15856))+(((-1.0)*r11*x15857))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15858=IKcos(j0);
IkReal x15859=IKsin(j0);
IkReal x15860=(r02*sj4);
IkReal x15861=((0.1)*sj5);
IkReal x15862=(cj5*r11);
IkReal x15863=((1.0)*sj3);
IkReal x15864=(r12*sj4);
IkReal x15865=((1.0)*cj3);
IkReal x15866=(r11*sj5);
IkReal x15867=(cj3*cj4);
IkReal x15868=(cj5*r01);
IkReal x15869=(r01*sj5);
IkReal x15870=(r00*sj5);
IkReal x15871=((1.0)*cj2);
IkReal x15872=(r10*sj5);
IkReal x15873=(sj1*sj2);
IkReal x15874=((1.0)*cj4);
IkReal x15875=(cj4*cj5*r00);
IkReal x15876=((1.0)*cj1*sj2);
IkReal x15877=(cj4*cj5*r10);
IkReal x15878=(cj1*x15858);
IkReal x15879=(sj1*x15858);
IkReal x15880=((0.3922)*x15859);
IkReal x15881=((1.0)*cj5*sj4);
IkReal x15882=(cj1*x15859);
evalcond[0]=((((-1.0)*r12*x15874))+((sj4*x15866))+(((-1.0)*r10*x15881))+x15858);
evalcond[1]=(((sj4*x15869))+(((-1.0)*r00*x15881))+(((-1.0)*r02*x15874))+(((-1.0)*x15859)));
evalcond[2]=((((0.3922)*cj2*x15878))+(((-0.134)*x15859))+(((-1.0)*r00*x15861))+(((-1.0)*px))+(((0.425)*x15878))+(((-0.3922)*x15858*x15873))+(((-0.1)*x15868)));
evalcond[3]=(((cj1*cj2*x15880))+(((0.134)*x15858))+(((-1.0)*py))+(((-1.0)*r10*x15861))+(((0.425)*x15882))+(((-1.0)*x15873*x15880))+(((-0.1)*x15862)));
evalcond[4]=(((sj3*x15868))+(((-1.0)*x15871*x15878))+((x15858*x15873))+((cj3*x15860))+((sj3*x15870))+(((-1.0)*x15865*x15875))+((x15867*x15869)));
evalcond[5]=(((sj3*x15862))+((x15866*x15867))+((x15859*x15873))+(((-1.0)*x15871*x15882))+((cj3*x15864))+((sj3*x15872))+(((-1.0)*x15865*x15877)));
evalcond[6]=((((-1.0)*x15871*x15879))+((cj3*x15870))+(((-1.0)*cj4*x15863*x15869))+((cj3*x15868))+((sj3*x15875))+(((-1.0)*x15858*x15876))+(((-1.0)*x15860*x15863)));
evalcond[7]=((((-1.0)*x15863*x15864))+((cj3*x15872))+(((-1.0)*cj4*x15863*x15866))+(((-1.0)*x15859*x15876))+((cj3*x15862))+((sj3*x15877))+(((-1.0)*sj1*x15859*x15871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15883=cj5*cj5;
IkReal x15884=r21*r21;
IkReal x15885=r20*r20;
IkReal x15886=(r20*r21);
IkReal x15887=(sj1*sj2);
IkReal x15888=(r21*sj5);
IkReal x15889=(cj1*cj2);
IkReal x15890=(cj5*r20);
IkReal x15891=(cj5*sj5);
IkReal x15892=(cj3*r22);
IkReal x15893=(sj3*x15884);
CheckValue<IkReal> x15894=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-2.0)*sj3*x15886*x15891))+((sj3*x15883*x15885))+x15893+(((-1.0)*x15883*x15893)))),-1);
if(!x15894.valid){
continue;
}
CheckValue<IkReal> x15895 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x15889))+((r20*sj5*x15892))+((r22*x15887))+((cj5*r21*x15892)))),IkReal(((((-1.0)*x15887*x15890))+(((-1.0)*x15888*x15889))+((cj3*x15886))+((cj3*x15884*x15891))+(((-2.0)*cj3*x15883*x15886))+(((-1.0)*cj3*x15885*x15891))+((x15889*x15890))+((x15887*x15888)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15895.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15894.value)))+(x15895.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15896=IKsin(j4);
IkReal x15897=IKcos(j4);
IkReal x15898=(cj3*r21);
IkReal x15899=(r21*sj5);
IkReal x15900=(r20*sj5);
IkReal x15901=(cj5*r20);
IkReal x15902=((1.0)*x15897);
IkReal x15903=((1.0)*x15896);
evalcond[0]=((((-1.0)*x15901*x15903))+(((-1.0)*r22*x15902))+((x15896*x15899)));
evalcond[1]=(((cj3*r22*x15896))+((cj2*sj1))+((sj3*x15900))+((cj5*r21*sj3))+((cj1*sj2))+((sj5*x15897*x15898))+(((-1.0)*cj3*x15901*x15902)));
evalcond[2]=((((-1.0)*r22*sj3*x15903))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((sj3*x15897*x15901))+((cj3*x15900))+(((-1.0)*sj3*x15899*x15902))+((cj5*x15898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15904=(cj5*sj4);
IkReal x15905=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15905))+(((-1.0)*r00*x15904)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15904))+((cj4*r12))+(((-1.0)*r11*x15905)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15905))+(((-1.0)*r00*x15904))))+IKsqr((((r10*x15904))+((cj4*r12))+(((-1.0)*r11*x15905))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15905))+(((-1.0)*r00*x15904))), (((r10*x15904))+((cj4*r12))+(((-1.0)*r11*x15905))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15906=IKcos(j0);
IkReal x15907=IKsin(j0);
IkReal x15908=(r02*sj4);
IkReal x15909=((0.1)*sj5);
IkReal x15910=(cj5*r11);
IkReal x15911=((1.0)*sj3);
IkReal x15912=(r12*sj4);
IkReal x15913=((1.0)*cj3);
IkReal x15914=(r11*sj5);
IkReal x15915=(cj3*cj4);
IkReal x15916=(cj5*r01);
IkReal x15917=(r01*sj5);
IkReal x15918=(r00*sj5);
IkReal x15919=((1.0)*cj2);
IkReal x15920=(r10*sj5);
IkReal x15921=(sj1*sj2);
IkReal x15922=((1.0)*cj4);
IkReal x15923=(cj4*cj5*r00);
IkReal x15924=((1.0)*cj1*sj2);
IkReal x15925=(cj4*cj5*r10);
IkReal x15926=(cj1*x15906);
IkReal x15927=(sj1*x15906);
IkReal x15928=((0.3922)*x15907);
IkReal x15929=((1.0)*cj5*sj4);
IkReal x15930=(cj1*x15907);
evalcond[0]=((((-1.0)*r10*x15929))+(((-1.0)*r12*x15922))+((sj4*x15914))+x15906);
evalcond[1]=((((-1.0)*x15907))+((sj4*x15917))+(((-1.0)*r02*x15922))+(((-1.0)*r00*x15929)));
evalcond[2]=((((-1.0)*r00*x15909))+(((-0.134)*x15907))+(((-0.3922)*x15906*x15921))+(((-0.1)*x15916))+(((0.425)*x15926))+(((-1.0)*px))+(((0.3922)*cj2*x15926)));
evalcond[3]=((((-1.0)*x15921*x15928))+(((-0.1)*x15910))+(((-1.0)*r10*x15909))+((cj1*cj2*x15928))+(((-1.0)*py))+(((0.134)*x15906))+(((0.425)*x15930)));
evalcond[4]=(((sj3*x15916))+((sj3*x15918))+((x15915*x15917))+((x15906*x15921))+(((-1.0)*x15919*x15926))+((cj3*x15908))+(((-1.0)*x15913*x15923)));
evalcond[5]=(((sj3*x15910))+(((-1.0)*x15919*x15930))+((x15907*x15921))+((sj3*x15920))+((cj3*x15912))+((x15914*x15915))+(((-1.0)*x15913*x15925)));
evalcond[6]=((((-1.0)*cj4*x15911*x15917))+(((-1.0)*x15906*x15924))+((sj3*x15923))+(((-1.0)*x15908*x15911))+(((-1.0)*x15919*x15927))+((cj3*x15916))+((cj3*x15918)));
evalcond[7]=((((-1.0)*cj4*x15911*x15914))+(((-1.0)*x15907*x15924))+((sj3*x15925))+((cj3*x15920))+((cj3*x15910))+(((-1.0)*x15911*x15912))+(((-1.0)*sj1*x15907*x15919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "ca55465a206deb39476af66f4849280f"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
